; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\bsp.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\bsp.crf ..\..\User\bsp\bsp.c]
                          THUMB

                          AREA ||i.App_printf||, CODE, READONLY, ALIGN=1

                  App_printf PROC
;;;38     
;;;39     void  App_printf(char *format,...)
000000  4770              BX       lr
;;;40     {
;;;41     #if DEBUG_ENABLE
;;;42     
;;;43         char  buf_str[127 + 1];
;;;44         va_list   v_args;
;;;45     
;;;46     
;;;47         va_start(v_args, format);
;;;48         (void)vsnprintf((char       *)&buf_str[0],
;;;49                         (size_t      ) sizeof(buf_str),
;;;50                         (char const *) format,
;;;51                         v_args);
;;;52         va_end(v_args);
;;;53     
;;;54     
;;;55         xSemaphoreTake(xMutex, portMAX_DELAY);
;;;56         printf("%s", buf_str);
;;;57         xSemaphoreGive(xMutex);
;;;58     #endif
;;;59     }
;;;60     
                          ENDP


                          AREA ||i.Trans_printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  Trans_printf PROC
;;;60     
;;;61     void  Trans_printf(char *format,...)
000000  b40f              PUSH     {r0-r3}
;;;62     {
000002  b500              PUSH     {lr}
000004  b0a1              SUB      sp,sp,#0x84
;;;63     #if Trans_printf_ENABLE
;;;64     
;;;65         char  buf_str[127 + 1];
;;;66         va_list   v_args;
;;;67     
;;;68     
;;;69         va_start(v_args, format);
000006  a823              ADD      r0,sp,#0x8c
000008  9000              STR      r0,[sp,#0]
;;;70         (void)vsnprintf((char       *)&buf_str[0],
00000a  2180              MOVS     r1,#0x80
00000c  a801              ADD      r0,sp,#4
00000e  9b00              LDR      r3,[sp,#0]
000010  9a22              LDR      r2,[sp,#0x88]
000012  f7fffffe          BL       vsnprintf
;;;71                         (size_t      ) sizeof(buf_str),
;;;72                         (char const *) format,
;;;73                         v_args);
;;;74         va_end(v_args);
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
;;;75     
;;;76     
;;;77         xSemaphoreTake(xMutex, portMAX_DELAY);
00001a  2300              MOVS     r3,#0
00001c  1e42              SUBS     r2,r0,#1
00001e  4619              MOV      r1,r3
000020  4808              LDR      r0,|L2.68|
000022  6800              LDR      r0,[r0,#0]  ; xMutex
000024  f7fffffe          BL       xQueueGenericReceive
;;;78         printf("%s", buf_str);
000028  a901              ADD      r1,sp,#4
00002a  a007              ADR      r0,|L2.72|
00002c  f7fffffe          BL       __2printf
;;;79         xSemaphoreGive(xMutex);
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  4619              MOV      r1,r3
000036  4803              LDR      r0,|L2.68|
000038  6800              LDR      r0,[r0,#0]  ; xMutex
00003a  f7fffffe          BL       xQueueGenericSend
;;;80     #endif
;;;81     }
00003e  b021              ADD      sp,sp,#0x84
000040  f85dfb14          LDR      pc,[sp],#0x14
;;;82     
                          ENDP

                  |L2.68|
                          DCD      xMutex
                  |L2.72|
000048  257300            DCB      "%s",0
00004b  00                DCB      0

                          AREA ||i.bsp_Init||, CODE, READONLY, ALIGN=1

                  bsp_Init PROC
;;;27     */
;;;28     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;29     {
;;;30         /* 优先级分组设置为4，可配置0-15级抢占式优先级，0级子优先级，即不存在子优先级。*/
;;;31         NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;32     
;;;33         bsp_InitUart(); 		/* 初始化串口 */
00000a  f7fffffe          BL       bsp_InitUart
;;;34     
;;;35         Startup_GPIO_Init();	/* 旧机器开关机和输入检测 */
00000e  f7fffffe          BL       Startup_GPIO_Init
;;;36         LED_GPIO_Config();		/* 初始LED指示灯端口 */
000012  f7fffffe          BL       LED_GPIO_Config
;;;37     }
000016  bd10              POP      {r4,pc}
;;;38     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_bsp_c_bsp_Init____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REVSH|
#line 128
|__asm___5_bsp_c_bsp_Init____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
