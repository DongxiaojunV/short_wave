; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\bsp_emission.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\bsp_emission.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -ID:\Keil5\Keil_v5\ARM\RV31\INC -ID:\Keil5\Keil_v5\ARM\CMSIS\Include -ID:\Keil5\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=515 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\bsp_emission.crf ..\..\User\bsp\bsp_emission.c]
                          THUMB

                          AREA ||i.Advance_run_command||, CODE, READONLY, ALIGN=2

                  Advance_run_command PROC
;;;2320    */
;;;2321   int Advance_run_command(TickType_t xTicksToWait)
000000  b570              PUSH     {r4-r6,lr}
;;;2322   {
000002  4604              MOV      r4,r0
;;;2323       int ret=0;
000004  2500              MOVS     r5,#0
;;;2324       if(Sys_State.Cancel_Sweeping!=1)   //PC没有强制取消扫频
000006  4805              LDR      r0,|L1.28|
000008  7b00              LDRB     r0,[r0,#0xc]  ; Sys_State
00000a  2801              CMP      r0,#1
00000c  d003              BEQ      |L1.22|
;;;2325       {
;;;2326           ret=run_command(xTicksToWait);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       run_command
000014  4605              MOV      r5,r0
                  |L1.22|
;;;2327       }
;;;2328       return ret;
000016  4628              MOV      r0,r5
;;;2329   }
000018  bd70              POP      {r4-r6,pc}
;;;2330   /*返回1表示有历史报警消息*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      Sys_State

                          AREA ||i.Band_scan||, CODE, READONLY, ALIGN=2

                  Band_scan PROC
;;;1840    */
;;;1841   static int Band_scan(TickType_t xTicksToWait,int index)
000000  b503              PUSH     {r0,r1,lr}
;;;1842   {
000002  b093              SUB      sp,sp,#0x4c
;;;1843   //	//八段，17个点测试
;;;1844   //	float swr_compare[17]={3.2,3.6999,4.2,4.8499,5.5,6.3499,7.2,8.3499,9.5,10.9999,12.5,14.4999,16.5,\
;;;1845   //	19.1499,21.8,23.95,26.1};
;;;1846       //八段
;;;1847       //float swr_compare[8]={3.6999,4.8499,6.3499,8.3499,10.9999,14.4999,19.1499,23.95};
;;;1848   
;;;1849   #if defined(Eight_seg)
;;;1850       float swr_compare[8]= {3.6999,4.8499,6.3499,8.3499,10.9999,14.4999,19.1499,23.95};
;;;1851       int SIZE =8;
;;;1852   #else
;;;1853       int SIZE = ceil((end-begain))+1;
000004  48fe              LDR      r0,|L2.1024|
000006  6801              LDR      r1,[r0,#0]  ; begain
000008  48fe              LDR      r0,|L2.1028|
00000a  6800              LDR      r0,[r0,#0]  ; end
00000c  f7fffffe          BL       __aeabi_fsub
000010  9007              STR      r0,[sp,#0x1c]
000012  f7fffffe          BL       __aeabi_f2d
000016  e9cd0108          STRD     r0,r1,[sp,#0x20]
00001a  f7fffffe          BL       ceil
00001e  2200              MOVS     r2,#0
000020  4bf9              LDR      r3,|L2.1032|
000022  e9cd010a          STRD     r0,r1,[sp,#0x28]
000026  f7fffffe          BL       __aeabi_dadd
00002a  e9cd010c          STRD     r0,r1,[sp,#0x30]
00002e  f7fffffe          BL       __aeabi_d2iz
000032  9012              STR      r0,[sp,#0x48]
;;;1854       float temp_begain=begain;
000034  48f2              LDR      r0,|L2.1024|
000036  6800              LDR      r0,[r0,#0]  ; begain
000038  9011              STR      r0,[sp,#0x44]
;;;1855   #endif
;;;1856       float temp_Forward_power;
;;;1857       float temp_Reverse_power;
;;;1858       float temp_Standing_wave_ratio;
;;;1859   
;;;1860       Pre_EmissionSend(&EmissionCmd,CHANNEL,0);//调用扫频专用信道
00003a  2200              MOVS     r2,#0
00003c  2143              MOVS     r1,#0x43
00003e  48f3              LDR      r0,|L2.1036|
000040  f7fffffe          BL       Pre_EmissionSend
;;;1861       if(Advance_run_command(xTicksToWait)==1)
000044  9813              LDR      r0,[sp,#0x4c]
000046  f7fffffe          BL       Advance_run_command
00004a  2801              CMP      r0,#1
00004c  f04087a9          BNE.W    |L2.4002|
;;;1862       {
;;;1863           if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
000050  48ef              LDR      r0,|L2.1040|
000052  79c0              LDRB     r0,[r0,#7]  ; Respond_Cmd
000054  2803              CMP      r0,#3
000056  d00a              BEQ      |L2.110|
;;;1864           {
;;;1865               Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
000058  214d              MOVS     r1,#0x4d
00005a  48ec              LDR      r0,|L2.1036|
00005c  f7fffffe          BL       Pre_EmissionSend
;;;1866               if(Advance_run_command(xTicksToWait)!=1)   //失败，goto finish
000060  9813              LDR      r0,[sp,#0x4c]
000062  f7fffffe          BL       Advance_run_command
000066  2801              CMP      r0,#1
000068  d001              BEQ      |L2.110|
                  |L2.106|
;;;1867               {
;;;1868                   goto finish;
00006a  f000bf9b          B.W      |L2.4004|
                  |L2.110|
;;;1869               }
;;;1870           }
;;;1871           if(Respond_Cmd.power_level!=0x01)   //如果不是二分之一功率
00006e  48e8              LDR      r0,|L2.1040|
000070  7b00              LDRB     r0,[r0,#0xc]  ; Respond_Cmd
000072  2801              CMP      r0,#1
000074  d00a              BEQ      |L2.140|
;;;1872           {
;;;1873               /*先采取全部二分之一功率调整*/
;;;1874               Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为二分之一
000076  2202              MOVS     r2,#2
000078  2150              MOVS     r1,#0x50
00007a  48e4              LDR      r0,|L2.1036|
00007c  f7fffffe          BL       Pre_EmissionSend
;;;1875               if(Advance_run_command(xTicksToWait)!=1)   //失败，goto finish
000080  9813              LDR      r0,[sp,#0x4c]
000082  f7fffffe          BL       Advance_run_command
000086  2801              CMP      r0,#1
000088  d000              BEQ      |L2.140|
;;;1876               {
;;;1877                   goto finish;
00008a  e7ee              B        |L2.106|
                  |L2.140|
;;;1878               }
;;;1879           }
;;;1880   
;;;1881           for(int i=0; i<SIZE; i++)
00008c  2000              MOVS     r0,#0
00008e  900d              STR      r0,[sp,#0x34]
000090  f000bf82          B.W      |L2.3992|
                  |L2.148|
;;;1882           {
;;;1883               if(temp_begain<3.2)
000094  9811              LDR      r0,[sp,#0x44]
000096  f7fffffe          BL       __aeabi_f2d
00009a  4ade              LDR      r2,|L2.1044|
00009c  4bde              LDR      r3,|L2.1048|
00009e  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000a2  f7fffffe          BL       __aeabi_cdcmple
0000a6  d202              BCS      |L2.174|
;;;1884               {
;;;1885                   temp_begain=3.2;
0000a8  48dc              LDR      r0,|L2.1052|
0000aa  9011              STR      r0,[sp,#0x44]
0000ac  e00b              B        |L2.198|
                  |L2.174|
;;;1886               }
;;;1887               else if(temp_begain>26.1)
0000ae  9811              LDR      r0,[sp,#0x44]
0000b0  f7fffffe          BL       __aeabi_f2d
0000b4  4ad7              LDR      r2,|L2.1044|
0000b6  4bda              LDR      r3,|L2.1056|
0000b8  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000bc  f7fffffe          BL       __aeabi_cdrcmple
0000c0  d201              BCS      |L2.198|
;;;1888               {
;;;1889                   temp_begain=26.1;
0000c2  48d8              LDR      r0,|L2.1060|
0000c4  9011              STR      r0,[sp,#0x44]
                  |L2.198|
;;;1890               }
;;;1891   #if defined(Eight_seg)
;;;1892               Pre_EmissionSend(&EmissionCmd,FREQUENCY,swr_compare[i]);//选择第一频段的最低值
;;;1893   #else
;;;1894               Pre_EmissionSend(&EmissionCmd,FREQUENCY,temp_begain);//选择第一频段的最低值
0000c6  9811              LDR      r0,[sp,#0x44]
0000c8  f7fffffe          BL       __aeabi_f2d
0000cc  4602              MOV      r2,r0
0000ce  460b              MOV      r3,r1
0000d0  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000d4  2154              MOVS     r1,#0x54
0000d6  48cd              LDR      r0,|L2.1036|
0000d8  f7fffffe          BL       Pre_EmissionSend
;;;1895               temp_begain +=1;
0000dc  f04f517e          MOV      r1,#0x3f800000
0000e0  9811              LDR      r0,[sp,#0x44]
0000e2  f7fffffe          BL       __aeabi_fadd
0000e6  9011              STR      r0,[sp,#0x44]
;;;1896   #endif
;;;1897               if(Advance_run_command(xTicksToWait)==1)
0000e8  9813              LDR      r0,[sp,#0x4c]
0000ea  f7fffffe          BL       Advance_run_command
0000ee  2801              CMP      r0,#1
0000f0  d17d              BNE      |L2.494|
;;;1898               {
;;;1899                   Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
0000f2  2174              MOVS     r1,#0x74
0000f4  48c5              LDR      r0,|L2.1036|
0000f6  f7fffffe          BL       Pre_EmissionSend
;;;1900                   if(Advance_run_command(xTicksToWait*12)==1)   //最大给给6s
0000fa  9813              LDR      r0,[sp,#0x4c]
0000fc  eb000040          ADD      r0,r0,r0,LSL #1
000100  0080              LSLS     r0,r0,#2
000102  900c              STR      r0,[sp,#0x30]
000104  f7fffffe          BL       Advance_run_command
000108  2801              CMP      r0,#1
00010a  d171              BNE      |L2.496|
;;;1901                   {
;;;1902                       Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
00010c  210d              MOVS     r1,#0xd
00010e  48bf              LDR      r0,|L2.1036|
000110  f7fffffe          BL       Pre_EmissionSend
;;;1903                       if(Advance_run_command(xTicksToWait)!=1)
000114  9813              LDR      r0,[sp,#0x4c]
000116  f7fffffe          BL       Advance_run_command
00011a  2801              CMP      r0,#1
00011c  d000              BEQ      |L2.288|
;;;1904                       {
;;;1905                           goto finish;
00011e  e7a4              B        |L2.106|
                  |L2.288|
;;;1906                       }
;;;1907                       else     //ADC电压采集并判断驻波比
;;;1908                       {
;;;1909                           vTaskDelay(3000);//发射3s之后开始采集
000120  f64030b8          MOV      r0,#0xbb8
000124  f7fffffe          BL       vTaskDelay
;;;1910                           for(int i=0; i<100; i++)
000128  2000              MOVS     r0,#0
00012a  900c              STR      r0,[sp,#0x30]
00012c  e069              B        |L2.514|
                  |L2.302|
;;;1911                           {
;;;1912                               eADC0_buff[i] =(float) ADC_ConvertedValue[0]/4096*3.3*3;
00012e  48be              LDR      r0,|L2.1064|
000130  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000132  9003              STR      r0,[sp,#0xc]
000134  f7fffffe          BL       __aeabi_ui2f
000138  f04f418b          MOV      r1,#0x45800000
00013c  9004              STR      r0,[sp,#0x10]
00013e  f7fffffe          BL       __aeabi_fdiv
000142  9005              STR      r0,[sp,#0x14]
000144  f7fffffe          BL       __aeabi_f2d
000148  f04f3266          MOV      r2,#0x66666666
00014c  4bb7              LDR      r3,|L2.1068|
00014e  e9cd0106          STRD     r0,r1,[sp,#0x18]
000152  f7fffffe          BL       __aeabi_dmul
000156  2200              MOVS     r2,#0
000158  4bb5              LDR      r3,|L2.1072|
00015a  e9cd0108          STRD     r0,r1,[sp,#0x20]
00015e  f7fffffe          BL       __aeabi_dmul
000162  e9cd010a          STRD     r0,r1,[sp,#0x28]
000166  f7fffffe          BL       __aeabi_d2f
00016a  4ab2              LDR      r2,|L2.1076|
00016c  990c              LDR      r1,[sp,#0x30]
00016e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;1913                               eADC1_buff[i] =(float) ADC_ConvertedValue[1]/4096*3.3;
000172  48ad              LDR      r0,|L2.1064|
000174  8840              LDRH     r0,[r0,#2]  ; ADC_ConvertedValue
000176  9005              STR      r0,[sp,#0x14]
000178  f7fffffe          BL       __aeabi_ui2f
00017c  f04f418b          MOV      r1,#0x45800000
000180  9006              STR      r0,[sp,#0x18]
000182  f7fffffe          BL       __aeabi_fdiv
000186  9007              STR      r0,[sp,#0x1c]
000188  f7fffffe          BL       __aeabi_f2d
00018c  f04f3266          MOV      r2,#0x66666666
000190  4ba6              LDR      r3,|L2.1068|
000192  e9cd0108          STRD     r0,r1,[sp,#0x20]
000196  f7fffffe          BL       __aeabi_dmul
00019a  e9cd010a          STRD     r0,r1,[sp,#0x28]
00019e  f7fffffe          BL       __aeabi_d2f
0001a2  4aa5              LDR      r2,|L2.1080|
0001a4  990c              LDR      r1,[sp,#0x30]
0001a6  f8420021          STR      r0,[r2,r1,LSL #2]
;;;1914                               //	eADC2_buff[i] =(float) ADC_ConvertedValue[2]/4096*3.3*2;
;;;1915                               eADC3_buff[i] =(float) ADC_ConvertedValue[3]/4096*3.3*2;
0001aa  489f              LDR      r0,|L2.1064|
0001ac  88c0              LDRH     r0,[r0,#6]  ; ADC_ConvertedValue
0001ae  9003              STR      r0,[sp,#0xc]
0001b0  f7fffffe          BL       __aeabi_ui2f
0001b4  f04f418b          MOV      r1,#0x45800000
0001b8  9004              STR      r0,[sp,#0x10]
0001ba  f7fffffe          BL       __aeabi_fdiv
0001be  9005              STR      r0,[sp,#0x14]
0001c0  f7fffffe          BL       __aeabi_f2d
0001c4  f04f3266          MOV      r2,#0x66666666
0001c8  4b98              LDR      r3,|L2.1068|
0001ca  e9cd0106          STRD     r0,r1,[sp,#0x18]
0001ce  f7fffffe          BL       __aeabi_dmul
0001d2  2200              MOVS     r2,#0
0001d4  f04f4380          MOV      r3,#0x40000000
0001d8  e9cd0108          STRD     r0,r1,[sp,#0x20]
0001dc  f7fffffe          BL       __aeabi_dmul
0001e0  e9cd010a          STRD     r0,r1,[sp,#0x28]
0001e4  f7fffffe          BL       __aeabi_d2f
0001e8  4a94              LDR      r2,|L2.1084|
0001ea  990c              LDR      r1,[sp,#0x30]
0001ec  e001              B        |L2.498|
                  |L2.494|
0001ee  e3fc              B        |L2.2538|
                  |L2.496|
0001f0  e3fc              B        |L2.2540|
                  |L2.498|
0001f2  f8420021          STR      r0,[r2,r1,LSL #2]
;;;1916                               vTaskDelay(1);
0001f6  2001              MOVS     r0,#1
0001f8  f7fffffe          BL       vTaskDelay
0001fc  980c              LDR      r0,[sp,#0x30]         ;1910
0001fe  1c40              ADDS     r0,r0,#1              ;1910
000200  900c              STR      r0,[sp,#0x30]         ;1910
                  |L2.514|
000202  980c              LDR      r0,[sp,#0x30]         ;1910
000204  2864              CMP      r0,#0x64              ;1910
000206  db92              BLT      |L2.302|
;;;1917                           }
;;;1918                           for(int i=1; i<100; i++)   //100次数据求和
000208  2001              MOVS     r0,#1
00020a  900c              STR      r0,[sp,#0x30]
00020c  e029              B        |L2.610|
                  |L2.526|
;;;1919                           {
;;;1920                               eADC0_buff[0]+=eADC0_buff[i];
00020e  4989              LDR      r1,|L2.1076|
000210  980c              LDR      r0,[sp,#0x30]
000212  f8510020          LDR      r0,[r1,r0,LSL #2]
000216  900b              STR      r0,[sp,#0x2c]
000218  4608              MOV      r0,r1
00021a  6800              LDR      r0,[r0,#0]  ; eADC0_buff
00021c  900a              STR      r0,[sp,#0x28]
00021e  990b              LDR      r1,[sp,#0x2c]
000220  f7fffffe          BL       __aeabi_fadd
000224  4983              LDR      r1,|L2.1076|
000226  6008              STR      r0,[r1,#0]  ; eADC0_buff
;;;1921                               eADC1_buff[0]+=eADC1_buff[i];
000228  4983              LDR      r1,|L2.1080|
00022a  980c              LDR      r0,[sp,#0x30]
00022c  f8510020          LDR      r0,[r1,r0,LSL #2]
000230  900b              STR      r0,[sp,#0x2c]
000232  4608              MOV      r0,r1
000234  6800              LDR      r0,[r0,#0]  ; eADC1_buff
000236  900a              STR      r0,[sp,#0x28]
000238  990b              LDR      r1,[sp,#0x2c]
00023a  f7fffffe          BL       __aeabi_fadd
00023e  497e              LDR      r1,|L2.1080|
000240  6008              STR      r0,[r1,#0]  ; eADC1_buff
;;;1922                               //	eADC2_buff[0]+=eADC2_buff[i];
;;;1923                               eADC3_buff[0]+=eADC3_buff[i];
000242  497e              LDR      r1,|L2.1084|
000244  980c              LDR      r0,[sp,#0x30]
000246  f8510020          LDR      r0,[r1,r0,LSL #2]
00024a  900b              STR      r0,[sp,#0x2c]
00024c  4608              MOV      r0,r1
00024e  6800              LDR      r0,[r0,#0]  ; eADC3_buff
000250  900a              STR      r0,[sp,#0x28]
000252  990b              LDR      r1,[sp,#0x2c]
000254  f7fffffe          BL       __aeabi_fadd
000258  4978              LDR      r1,|L2.1084|
00025a  6008              STR      r0,[r1,#0]  ; eADC3_buff
00025c  980c              LDR      r0,[sp,#0x30]         ;1918
00025e  1c40              ADDS     r0,r0,#1              ;1918
000260  900c              STR      r0,[sp,#0x30]         ;1918
                  |L2.610|
000262  980c              LDR      r0,[sp,#0x30]         ;1918
000264  2864              CMP      r0,#0x64              ;1918
000266  dbd2              BLT      |L2.526|
;;;1924                           }
;;;1925                           //取100次平均值
;;;1926                           Show_Parameter.Forward_Power=eADC0_buff[0]/100;//正向功率
000268  4872              LDR      r0,|L2.1076|
00026a  6800              LDR      r0,[r0,#0]  ; eADC0_buff
00026c  4974              LDR      r1,|L2.1088|
00026e  900c              STR      r0,[sp,#0x30]
000270  f7fffffe          BL       __aeabi_fdiv
000274  4973              LDR      r1,|L2.1092|
000276  6008              STR      r0,[r1,#0]  ; Show_Parameter
;;;1927                           Show_Parameter.Reverse_Power=eADC1_buff[0]/100;//反向功率
000278  486f              LDR      r0,|L2.1080|
00027a  6800              LDR      r0,[r0,#0]  ; eADC1_buff
00027c  4970              LDR      r1,|L2.1088|
00027e  900c              STR      r0,[sp,#0x30]
000280  f7fffffe          BL       __aeabi_fdiv
000284  496f              LDR      r1,|L2.1092|
000286  6048              STR      r0,[r1,#4]  ; Show_Parameter
;;;1928                           //Show_Parameter.M_45V=eADC2_buff[0]/100;//电压
;;;1929                           Show_Parameter.M_45I=eADC3_buff[0]/100;//电流
000288  486c              LDR      r0,|L2.1084|
00028a  6800              LDR      r0,[r0,#0]  ; eADC3_buff
00028c  496c              LDR      r1,|L2.1088|
00028e  900c              STR      r0,[sp,#0x30]
000290  f7fffffe          BL       __aeabi_fdiv
000294  496b              LDR      r1,|L2.1092|
000296  60c8              STR      r0,[r1,#0xc]  ; Show_Parameter
;;;1930   
;;;1931                           /*觉得应该使用功率而不是使用电压的比值，因为正反向功率比值不是线性的，如下可见不同段位驻波比不同*/
;;;1932                           /*但是直接使用电压比值似乎更精确？*/
;;;1933                           if(Show_Parameter.Forward_Power>5)   //正向功率的电压大于5V时，400的步进
000298  4608              MOV      r0,r1
00029a  6800              LDR      r0,[r0,#0]  ; Show_Parameter
00029c  496a              LDR      r1,|L2.1096|
00029e  900c              STR      r0,[sp,#0x30]
0002a0  f7fffffe          BL       __aeabi_cfrcmple
0002a4  d22a              BCS      |L2.764|
;;;1934                           {
;;;1935                               Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power-5)*Forward_P+1000+20;
0002a6  4867              LDR      r0,|L2.1092|
0002a8  6800              LDR      r0,[r0,#0]  ; Show_Parameter
0002aa  4967              LDR      r1,|L2.1096|
0002ac  9009              STR      r0,[sp,#0x24]
0002ae  f7fffffe          BL       __aeabi_fsub
0002b2  4966              LDR      r1,|L2.1100|
0002b4  900a              STR      r0,[sp,#0x28]
0002b6  f7fffffe          BL       __aeabi_fmul
0002ba  4965              LDR      r1,|L2.1104|
0002bc  900b              STR      r0,[sp,#0x2c]
0002be  f7fffffe          BL       __aeabi_fadd
0002c2  4964              LDR      r1,|L2.1108|
0002c4  900c              STR      r0,[sp,#0x30]
0002c6  f7fffffe          BL       __aeabi_fadd
0002ca  4963              LDR      r1,|L2.1112|
0002cc  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;1936                               //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Forward_P;//反向功率倍数待现场考察
;;;1937                               Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
0002d0  4608              MOV      r0,r1
0002d2  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0002d6  900b              STR      r0,[sp,#0x2c]
0002d8  485a              LDR      r0,|L2.1092|
0002da  6840              LDR      r0,[r0,#4]  ; Show_Parameter
0002dc  900a              STR      r0,[sp,#0x28]
0002de  990b              LDR      r1,[sp,#0x2c]
0002e0  f7fffffe          BL       __aeabi_fmul
0002e4  900c              STR      r0,[sp,#0x30]
0002e6  4857              LDR      r0,|L2.1092|
0002e8  6800              LDR      r0,[r0,#0]  ; Show_Parameter
0002ea  4601              MOV      r1,r0
0002ec  900b              STR      r0,[sp,#0x2c]
0002ee  980c              LDR      r0,[sp,#0x30]
0002f0  f7fffffe          BL       __aeabi_fdiv
0002f4  4958              LDR      r1,|L2.1112|
0002f6  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
0002fa  e07d              B        |L2.1016|
                  |L2.764|
;;;1938                           }
;;;1939                           else if(Show_Parameter.Forward_Power<=5&&Show_Parameter.Forward_Power>3.2)     //小于5V时，200倍的步进
0002fc  4851              LDR      r0,|L2.1092|
0002fe  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000300  4951              LDR      r1,|L2.1096|
000302  900c              STR      r0,[sp,#0x30]
000304  f7fffffe          BL       __aeabi_cfcmple
000308  d845              BHI      |L2.918|
00030a  484e              LDR      r0,|L2.1092|
00030c  6800              LDR      r0,[r0,#0]  ; Show_Parameter
00030e  9009              STR      r0,[sp,#0x24]
000310  f7fffffe          BL       __aeabi_f2d
000314  4a3f              LDR      r2,|L2.1044|
000316  4b40              LDR      r3,|L2.1048|
000318  e9cd010a          STRD     r0,r1,[sp,#0x28]
00031c  f7fffffe          BL       __aeabi_cdrcmple
000320  d239              BCS      |L2.918|
;;;1940                           {
;;;1941                               Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power-3.2)*277.8+500+20;
000322  4848              LDR      r0,|L2.1092|
000324  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000326  9001              STR      r0,[sp,#4]
000328  f7fffffe          BL       __aeabi_f2d
00032c  4a39              LDR      r2,|L2.1044|
00032e  4b3a              LDR      r3,|L2.1048|
000330  e9cd0102          STRD     r0,r1,[sp,#8]
000334  f7fffffe          BL       __aeabi_dsub
000338  4a48              LDR      r2,|L2.1116|
00033a  4b49              LDR      r3,|L2.1120|
00033c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000340  f7fffffe          BL       __aeabi_dmul
000344  2200              MOVS     r2,#0
000346  4b47              LDR      r3,|L2.1124|
000348  e9cd0106          STRD     r0,r1,[sp,#0x18]
00034c  f7fffffe          BL       __aeabi_dadd
000350  2200              MOVS     r2,#0
000352  4b45              LDR      r3,|L2.1128|
000354  e9cd0108          STRD     r0,r1,[sp,#0x20]
000358  f7fffffe          BL       __aeabi_dadd
00035c  e9cd010a          STRD     r0,r1,[sp,#0x28]
000360  f7fffffe          BL       __aeabi_d2f
000364  493c              LDR      r1,|L2.1112|
000366  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;1942                               //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*277.8;//反向功率倍数待现场考察
;;;1943                               Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
00036a  4608              MOV      r0,r1
00036c  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000370  900b              STR      r0,[sp,#0x2c]
000372  4834              LDR      r0,|L2.1092|
000374  6840              LDR      r0,[r0,#4]  ; Show_Parameter
000376  900a              STR      r0,[sp,#0x28]
000378  990b              LDR      r1,[sp,#0x2c]
00037a  f7fffffe          BL       __aeabi_fmul
00037e  900c              STR      r0,[sp,#0x30]
000380  4830              LDR      r0,|L2.1092|
000382  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000384  4601              MOV      r1,r0
000386  900b              STR      r0,[sp,#0x2c]
000388  980c              LDR      r0,[sp,#0x30]
00038a  f7fffffe          BL       __aeabi_fdiv
00038e  4932              LDR      r1,|L2.1112|
000390  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
000394  e030              B        |L2.1016|
                  |L2.918|
;;;1944                           }
;;;1945                           else     //小于3.2v
;;;1946                           {
;;;1947                               Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power)*500/3.2+20;
000396  482b              LDR      r0,|L2.1092|
000398  6800              LDR      r0,[r0,#0]  ; Show_Parameter
00039a  4934              LDR      r1,|L2.1132|
00039c  9004              STR      r0,[sp,#0x10]
00039e  f7fffffe          BL       __aeabi_fmul
0003a2  9005              STR      r0,[sp,#0x14]
0003a4  f7fffffe          BL       __aeabi_f2d
0003a8  4a1a              LDR      r2,|L2.1044|
0003aa  4b1b              LDR      r3,|L2.1048|
0003ac  e9cd0106          STRD     r0,r1,[sp,#0x18]
0003b0  f7fffffe          BL       __aeabi_ddiv
0003b4  2200              MOVS     r2,#0
0003b6  4b2c              LDR      r3,|L2.1128|
0003b8  e9cd0108          STRD     r0,r1,[sp,#0x20]
0003bc  f7fffffe          BL       __aeabi_dadd
0003c0  e9cd010a          STRD     r0,r1,[sp,#0x28]
0003c4  f7fffffe          BL       __aeabi_d2f
0003c8  4923              LDR      r1,|L2.1112|
0003ca  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;1948                               //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*500/3.2;//反向功率倍数待现场考察
;;;1949                               Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
0003ce  4608              MOV      r0,r1
0003d0  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0003d4  900b              STR      r0,[sp,#0x2c]
0003d6  481b              LDR      r0,|L2.1092|
0003d8  6840              LDR      r0,[r0,#4]  ; Show_Parameter
0003da  900a              STR      r0,[sp,#0x28]
0003dc  990b              LDR      r1,[sp,#0x2c]
0003de  f7fffffe          BL       __aeabi_fmul
0003e2  900c              STR      r0,[sp,#0x30]
0003e4  4817              LDR      r0,|L2.1092|
0003e6  6800              LDR      r0,[r0,#0]  ; Show_Parameter
0003e8  4601              MOV      r1,r0
0003ea  900b              STR      r0,[sp,#0x2c]
0003ec  980c              LDR      r0,[sp,#0x30]
0003ee  f7fffffe          BL       __aeabi_fdiv
0003f2  4919              LDR      r1,|L2.1112|
0003f4  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
                  |L2.1016|
;;;1950                           }
;;;1951                           Show_Parameter.Standing_wave_ratio =get_Standing_wave_ratio(Work_paraBack.Forward_power[0],Work_paraBack.Reverse_power[0]);
0003f8  4817              LDR      r0,|L2.1112|
0003fa  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
0003fe  e037              B        |L2.1136|
                  |L2.1024|
                          DCD      begain
                  |L2.1028|
                          DCD      end
                  |L2.1032|
                          DCD      0x3ff00000
                  |L2.1036|
                          DCD      EmissionCmd
                  |L2.1040|
                          DCD      Respond_Cmd
                  |L2.1044|
                          DCD      0x9999999a
                  |L2.1048|
                          DCD      0x40099999
                  |L2.1052|
                          DCD      0x404ccccd
                  |L2.1056|
                          DCD      0x403a1999
                  |L2.1060|
                          DCD      0x41d0cccd
                  |L2.1064|
                          DCD      ADC_ConvertedValue
                  |L2.1068|
                          DCD      0x400a6666
                  |L2.1072|
                          DCD      0x40080000
                  |L2.1076|
                          DCD      eADC0_buff
                  |L2.1080|
                          DCD      eADC1_buff
                  |L2.1084|
                          DCD      eADC3_buff
                  |L2.1088|
                          DCD      0x42c80000
                  |L2.1092|
                          DCD      Show_Parameter
                  |L2.1096|
                          DCD      0x40a00000
                  |L2.1100|
                          DCD      0x43c80000
                  |L2.1104|
                          DCD      0x447a0000
                  |L2.1108|
                          DCD      0x41a00000
                  |L2.1112|
                          DCD      Work_paraBack
                  |L2.1116|
                          DCD      0xcccccccd
                  |L2.1120|
                          DCD      0x40715ccc
                  |L2.1124|
                          DCD      0x407f4000
                  |L2.1128|
                          DCD      0x40340000
                  |L2.1132|
                          DCD      0x43fa0000
                  |L2.1136|
000470  900c              STR      r0,[sp,#0x30]
000472  48f7              LDR      r0,|L2.2128|
000474  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000478  900b              STR      r0,[sp,#0x2c]
00047a  990c              LDR      r1,[sp,#0x30]
00047c  f7fffffe          BL       get_Standing_wave_ratio
000480  49f4              LDR      r1,|L2.2132|
000482  6108              STR      r0,[r1,#0x10]  ; Show_Parameter
;;;1952   
;;;1953                           if(GPIO_ReadInputDataBit(In_GPIO_PORT,In_GPIO_PIN)==1)   //PF0
000484  2110              MOVS     r1,#0x10
000486  48f4              LDR      r0,|L2.2136|
000488  f7fffffe          BL       GPIO_ReadInputDataBit
00048c  2801              CMP      r0,#1
00048e  d12f              BNE      |L2.1264|
;;;1954                           {
;;;1955                               App_printf("Sys_State.alarm\r\n");
000490  a0f2              ADR      r0,|L2.2140|
000492  f7fffffe          BL       App_printf
;;;1956                               Sys_State.alarm=1;
000496  2001              MOVS     r0,#1
000498  49f5              LDR      r1,|L2.2160|
00049a  73c8              STRB     r0,[r1,#0xf]
;;;1957                               App_printf("the first alarm,needing save RTC time!!!\r\n");
00049c  a0f5              ADR      r0,|L2.2164|
00049e  f7fffffe          BL       App_printf
;;;1958                               Time_Display( RTC_GetCounter(),&set_time);
0004a2  f7fffffe          BL       RTC_GetCounter
0004a6  49fe              LDR      r1,|L2.2208|
0004a8  900c              STR      r0,[sp,#0x30]
0004aa  f7fffffe          BL       Time_Display
;;;1959                               Alarm_historyBack.Exciter_alarm[0]=set_time.tm_year-2000;
0004ae  48fc              LDR      r0,|L2.2208|
0004b0  7d00              LDRB     r0,[r0,#0x14]  ; set_time
0004b2  f5a060fa          SUB      r0,r0,#0x7d0
0004b6  49fb              LDR      r1,|L2.2212|
0004b8  f8810037          STRB     r0,[r1,#0x37]
;;;1960                               Alarm_historyBack.Exciter_alarm[1]=set_time.tm_mon;
0004bc  48f8              LDR      r0,|L2.2208|
0004be  7c01              LDRB     r1,[r0,#0x10]  ; set_time
0004c0  48f8              LDR      r0,|L2.2212|
0004c2  f8801038          STRB     r1,[r0,#0x38]
;;;1961                               Alarm_historyBack.Exciter_alarm[2]=set_time.tm_mday;
0004c6  48f6              LDR      r0,|L2.2208|
0004c8  7b01              LDRB     r1,[r0,#0xc]  ; set_time
0004ca  48f6              LDR      r0,|L2.2212|
0004cc  f8801039          STRB     r1,[r0,#0x39]
;;;1962                               Alarm_historyBack.Exciter_alarm[3]=set_time.tm_hour;
0004d0  48f3              LDR      r0,|L2.2208|
0004d2  7a01              LDRB     r1,[r0,#8]  ; set_time
0004d4  48f3              LDR      r0,|L2.2212|
0004d6  f880103a          STRB     r1,[r0,#0x3a]
;;;1963                               Alarm_historyBack.Exciter_alarm[4]=set_time.tm_min;
0004da  48f1              LDR      r0,|L2.2208|
0004dc  7901              LDRB     r1,[r0,#4]  ; set_time
0004de  48f1              LDR      r0,|L2.2212|
0004e0  f880103b          STRB     r1,[r0,#0x3b]
;;;1964                               Alarm_historyBack.Exciter_alarm[5]=set_time.tm_sec;
0004e4  48ee              LDR      r0,|L2.2208|
0004e6  7801              LDRB     r1,[r0,#0]  ; set_time
0004e8  48ee              LDR      r0,|L2.2212|
0004ea  f880103c          STRB     r1,[r0,#0x3c]
                  |L2.1262|
0004ee  e3fd              B        |L2.3308|
                  |L2.1264|
;;;1965                           }
;;;1966                           else
;;;1967                           {
;;;1968                               if(Show_Parameter.Standing_wave_ratio>=2.0||Show_Parameter.Standing_wave_ratio<1)
0004f0  48d8              LDR      r0,|L2.2132|
0004f2  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
0004f4  9009              STR      r0,[sp,#0x24]
0004f6  f7fffffe          BL       __aeabi_f2d
0004fa  2200              MOVS     r2,#0
0004fc  f04f4380          MOV      r3,#0x40000000
000500  e9cd010a          STRD     r0,r1,[sp,#0x28]
000504  f7fffffe          BL       __aeabi_cdrcmple
000508  d9f1              BLS      |L2.1262|
00050a  48d2              LDR      r0,|L2.2132|
00050c  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
00050e  f04f517e          MOV      r1,#0x3f800000
000512  900c              STR      r0,[sp,#0x30]
000514  f7fffffe          BL       __aeabi_cfcmple
000518  d3e9              BCC      |L2.1262|
;;;1969                               {
;;;1970                                   //需要立即停止
;;;1971                                   //SWR_array[i]=Show_Parameter.Standing_wave_ratio;
;;;1972                               }
;;;1973                               else
;;;1974                               {
;;;1975                                   for(int count=0; count<7; count++)
00051a  2000              MOVS     r0,#0
00051c  900c              STR      r0,[sp,#0x30]
00051e  e238              B        |L2.2450|
                  |L2.1312|
;;;1976                                   {
;;;1977                                       //延时10s等待机器稳定再采集
;;;1978                                       vTaskDelay(900);//发射1s之后再次开始采集
000520  f44f7061          MOV      r0,#0x384
000524  f7fffffe          BL       vTaskDelay
;;;1979                                       for(int i=0; i<100; i++)
000528  2000              MOVS     r0,#0
00052a  900b              STR      r0,[sp,#0x2c]
00052c  e066              B        |L2.1532|
                  |L2.1326|
;;;1980                                       {
;;;1981                                           eADC0_buff[i] =(float) ADC_ConvertedValue[0]/4096*3.3*3;
00052e  48de              LDR      r0,|L2.2216|
000530  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000532  9001              STR      r0,[sp,#4]
000534  f7fffffe          BL       __aeabi_ui2f
000538  f04f418b          MOV      r1,#0x45800000
00053c  9002              STR      r0,[sp,#8]
00053e  f7fffffe          BL       __aeabi_fdiv
000542  9003              STR      r0,[sp,#0xc]
000544  f7fffffe          BL       __aeabi_f2d
000548  f04f3266          MOV      r2,#0x66666666
00054c  4bd7              LDR      r3,|L2.2220|
00054e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000552  f7fffffe          BL       __aeabi_dmul
000556  2200              MOVS     r2,#0
000558  4bd5              LDR      r3,|L2.2224|
00055a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00055e  f7fffffe          BL       __aeabi_dmul
000562  e9cd0108          STRD     r0,r1,[sp,#0x20]
000566  f7fffffe          BL       __aeabi_d2f
00056a  4ad2              LDR      r2,|L2.2228|
00056c  990b              LDR      r1,[sp,#0x2c]
00056e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;1982                                           eADC1_buff[i] =(float) ADC_ConvertedValue[1]/4096*3.3;
000572  48cd              LDR      r0,|L2.2216|
000574  8840              LDRH     r0,[r0,#2]  ; ADC_ConvertedValue
000576  9003              STR      r0,[sp,#0xc]
000578  f7fffffe          BL       __aeabi_ui2f
00057c  f04f418b          MOV      r1,#0x45800000
000580  9004              STR      r0,[sp,#0x10]
000582  f7fffffe          BL       __aeabi_fdiv
000586  9005              STR      r0,[sp,#0x14]
000588  f7fffffe          BL       __aeabi_f2d
00058c  f04f3266          MOV      r2,#0x66666666
000590  4bc6              LDR      r3,|L2.2220|
000592  e9cd0106          STRD     r0,r1,[sp,#0x18]
000596  f7fffffe          BL       __aeabi_dmul
00059a  e9cd0108          STRD     r0,r1,[sp,#0x20]
00059e  f7fffffe          BL       __aeabi_d2f
0005a2  4ac5              LDR      r2,|L2.2232|
0005a4  990b              LDR      r1,[sp,#0x2c]
0005a6  f8420021          STR      r0,[r2,r1,LSL #2]
;;;1983                                           //	eADC2_buff[i] =(float) ADC_ConvertedValue[2]/4096*3.3*2;
;;;1984                                           eADC3_buff[i] =(float) ADC_ConvertedValue[3]/4096*3.3*2;
0005aa  48bf              LDR      r0,|L2.2216|
0005ac  88c0              LDRH     r0,[r0,#6]  ; ADC_ConvertedValue
0005ae  9001              STR      r0,[sp,#4]
0005b0  f7fffffe          BL       __aeabi_ui2f
0005b4  f04f418b          MOV      r1,#0x45800000
0005b8  9002              STR      r0,[sp,#8]
0005ba  f7fffffe          BL       __aeabi_fdiv
0005be  9003              STR      r0,[sp,#0xc]
0005c0  f7fffffe          BL       __aeabi_f2d
0005c4  f04f3266          MOV      r2,#0x66666666
0005c8  4bb8              LDR      r3,|L2.2220|
0005ca  e9cd0104          STRD     r0,r1,[sp,#0x10]
0005ce  f7fffffe          BL       __aeabi_dmul
0005d2  2200              MOVS     r2,#0
0005d4  f04f4380          MOV      r3,#0x40000000
0005d8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0005dc  f7fffffe          BL       __aeabi_dmul
0005e0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0005e4  f7fffffe          BL       __aeabi_d2f
0005e8  4ab4              LDR      r2,|L2.2236|
0005ea  990b              LDR      r1,[sp,#0x2c]
0005ec  f8420021          STR      r0,[r2,r1,LSL #2]
;;;1985                                           vTaskDelay(1);
0005f0  2001              MOVS     r0,#1
0005f2  f7fffffe          BL       vTaskDelay
0005f6  980b              LDR      r0,[sp,#0x2c]         ;1979
0005f8  1c40              ADDS     r0,r0,#1              ;1979
0005fa  900b              STR      r0,[sp,#0x2c]         ;1979
                  |L2.1532|
0005fc  980b              LDR      r0,[sp,#0x2c]         ;1979
0005fe  2864              CMP      r0,#0x64              ;1979
000600  db95              BLT      |L2.1326|
;;;1986                                       }
;;;1987                                       for(int i=1; i<100; i++)   //100次数据求和
000602  2001              MOVS     r0,#1
000604  900b              STR      r0,[sp,#0x2c]
000606  e029              B        |L2.1628|
                  |L2.1544|
;;;1988                                       {
;;;1989                                           eADC0_buff[0]+=eADC0_buff[i];
000608  49aa              LDR      r1,|L2.2228|
00060a  980b              LDR      r0,[sp,#0x2c]
00060c  f8510020          LDR      r0,[r1,r0,LSL #2]
000610  900a              STR      r0,[sp,#0x28]
000612  4608              MOV      r0,r1
000614  6800              LDR      r0,[r0,#0]  ; eADC0_buff
000616  9009              STR      r0,[sp,#0x24]
000618  990a              LDR      r1,[sp,#0x28]
00061a  f7fffffe          BL       __aeabi_fadd
00061e  49a5              LDR      r1,|L2.2228|
000620  6008              STR      r0,[r1,#0]  ; eADC0_buff
;;;1990                                           eADC1_buff[0]+=eADC1_buff[i];
000622  49a5              LDR      r1,|L2.2232|
000624  980b              LDR      r0,[sp,#0x2c]
000626  f8510020          LDR      r0,[r1,r0,LSL #2]
00062a  900a              STR      r0,[sp,#0x28]
00062c  4608              MOV      r0,r1
00062e  6800              LDR      r0,[r0,#0]  ; eADC1_buff
000630  9009              STR      r0,[sp,#0x24]
000632  990a              LDR      r1,[sp,#0x28]
000634  f7fffffe          BL       __aeabi_fadd
000638  499f              LDR      r1,|L2.2232|
00063a  6008              STR      r0,[r1,#0]  ; eADC1_buff
;;;1991                                           //	eADC2_buff[0]+=eADC2_buff[i];
;;;1992                                           eADC3_buff[0]+=eADC3_buff[i];
00063c  499f              LDR      r1,|L2.2236|
00063e  980b              LDR      r0,[sp,#0x2c]
000640  f8510020          LDR      r0,[r1,r0,LSL #2]
000644  900a              STR      r0,[sp,#0x28]
000646  4608              MOV      r0,r1
000648  6800              LDR      r0,[r0,#0]  ; eADC3_buff
00064a  9009              STR      r0,[sp,#0x24]
00064c  990a              LDR      r1,[sp,#0x28]
00064e  f7fffffe          BL       __aeabi_fadd
000652  499a              LDR      r1,|L2.2236|
000654  6008              STR      r0,[r1,#0]  ; eADC3_buff
000656  980b              LDR      r0,[sp,#0x2c]         ;1987
000658  1c40              ADDS     r0,r0,#1              ;1987
00065a  900b              STR      r0,[sp,#0x2c]         ;1987
                  |L2.1628|
00065c  980b              LDR      r0,[sp,#0x2c]         ;1987
00065e  2864              CMP      r0,#0x64              ;1987
000660  dbd2              BLT      |L2.1544|
;;;1993                                       }
;;;1994                                       //取100次平均值
;;;1995                                       Show_Parameter.Forward_Power=eADC0_buff[0]/100;//正向功率
000662  4894              LDR      r0,|L2.2228|
000664  6800              LDR      r0,[r0,#0]  ; eADC0_buff
000666  4996              LDR      r1,|L2.2240|
000668  900b              STR      r0,[sp,#0x2c]
00066a  f7fffffe          BL       __aeabi_fdiv
00066e  4979              LDR      r1,|L2.2132|
000670  6008              STR      r0,[r1,#0]  ; Show_Parameter
;;;1996                                       Show_Parameter.Reverse_Power=eADC1_buff[0]/100;//反向功率
000672  4891              LDR      r0,|L2.2232|
000674  6800              LDR      r0,[r0,#0]  ; eADC1_buff
000676  4992              LDR      r1,|L2.2240|
000678  900b              STR      r0,[sp,#0x2c]
00067a  f7fffffe          BL       __aeabi_fdiv
00067e  4975              LDR      r1,|L2.2132|
000680  6048              STR      r0,[r1,#4]  ; Show_Parameter
;;;1997                                       //Show_Parameter.M_45V=eADC2_buff[0]/100;//电压
;;;1998                                       Show_Parameter.M_45I=eADC3_buff[0]/100;//电流
000682  488e              LDR      r0,|L2.2236|
000684  6800              LDR      r0,[r0,#0]  ; eADC3_buff
000686  498e              LDR      r1,|L2.2240|
000688  900b              STR      r0,[sp,#0x2c]
00068a  f7fffffe          BL       __aeabi_fdiv
00068e  4971              LDR      r1,|L2.2132|
000690  60c8              STR      r0,[r1,#0xc]  ; Show_Parameter
;;;1999   //							Show_Parameter.M_45V=(float) ADC_ConvertedValue[2]/4096*3.3;
;;;2000   //							Show_Parameter.M_45I =(float) ADC_ConvertedValue[3]/4096*3.3;
;;;2001                                       /*觉得应该使用功率而不是使用电压的比值，因为正反向功率比值不是线性的，如下可见不同段位驻波比不同*/
;;;2002                                       /*但是直接使用电压比值似乎更精确？*/
;;;2003                                       if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
000692  4608              MOV      r0,r1
000694  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000696  9009              STR      r0,[sp,#0x24]
000698  f7fffffe          BL       __aeabi_f2d
00069c  2200              MOVS     r2,#0
00069e  4b89              LDR      r3,|L2.2244|
0006a0  e9cd010a          STRD     r0,r1,[sp,#0x28]
0006a4  f7fffffe          BL       __aeabi_cdrcmple
0006a8  d21e              BCS      |L2.1768|
;;;2004                                       {
;;;2005                                           Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
0006aa  486a              LDR      r0,|L2.2132|
0006ac  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
0006ae  9003              STR      r0,[sp,#0xc]
0006b0  f7fffffe          BL       __aeabi_f2d
0006b4  2200              MOVS     r2,#0
0006b6  4b83              LDR      r3,|L2.2244|
0006b8  e9cd0104          STRD     r0,r1,[sp,#0x10]
0006bc  f7fffffe          BL       __aeabi_dsub
0006c0  2200              MOVS     r2,#0
0006c2  4b81              LDR      r3,|L2.2248|
0006c4  e9cd0106          STRD     r0,r1,[sp,#0x18]
0006c8  f7fffffe          BL       __aeabi_dmul
0006cc  2200              MOVS     r2,#0
0006ce  4b7f              LDR      r3,|L2.2252|
0006d0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0006d4  f7fffffe          BL       __aeabi_dadd
0006d8  e9cd010a          STRD     r0,r1,[sp,#0x28]
0006dc  f7fffffe          BL       __aeabi_d2f
0006e0  495b              LDR      r1,|L2.2128|
0006e2  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
0006e6  e008              B        |L2.1786|
                  |L2.1768|
;;;2006                                       }
;;;2007                                       else     //小于 1.5V电流系数为40
;;;2008                                       {
;;;2009                                           Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
0006e8  485a              LDR      r0,|L2.2132|
0006ea  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
0006ec  4978              LDR      r1,|L2.2256|
0006ee  900b              STR      r0,[sp,#0x2c]
0006f0  f7fffffe          BL       __aeabi_fmul
0006f4  4956              LDR      r1,|L2.2128|
0006f6  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L2.1786|
;;;2010                                       }
;;;2011                                       if(Show_Parameter.Forward_Power>5)   //正向功率的电压大于5V时，400的步进
0006fa  4856              LDR      r0,|L2.2132|
0006fc  6800              LDR      r0,[r0,#0]  ; Show_Parameter
0006fe  4975              LDR      r1,|L2.2260|
000700  900b              STR      r0,[sp,#0x2c]
000702  f7fffffe          BL       __aeabi_cfrcmple
000706  d22a              BCS      |L2.1886|
;;;2012                                       {
;;;2013                                           Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power-5)*Forward_P+1000+20;
000708  4852              LDR      r0,|L2.2132|
00070a  6800              LDR      r0,[r0,#0]  ; Show_Parameter
00070c  4971              LDR      r1,|L2.2260|
00070e  9008              STR      r0,[sp,#0x20]
000710  f7fffffe          BL       __aeabi_fsub
000714  4970              LDR      r1,|L2.2264|
000716  9009              STR      r0,[sp,#0x24]
000718  f7fffffe          BL       __aeabi_fmul
00071c  496f              LDR      r1,|L2.2268|
00071e  900a              STR      r0,[sp,#0x28]
000720  f7fffffe          BL       __aeabi_fadd
000724  496e              LDR      r1,|L2.2272|
000726  900b              STR      r0,[sp,#0x2c]
000728  f7fffffe          BL       __aeabi_fadd
00072c  4948              LDR      r1,|L2.2128|
00072e  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;2014                                           //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Forward_P;//反向功率倍数待现场考察
;;;2015                                           Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
000732  4608              MOV      r0,r1
000734  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000738  900a              STR      r0,[sp,#0x28]
00073a  4846              LDR      r0,|L2.2132|
00073c  6840              LDR      r0,[r0,#4]  ; Show_Parameter
00073e  9009              STR      r0,[sp,#0x24]
000740  990a              LDR      r1,[sp,#0x28]
000742  f7fffffe          BL       __aeabi_fmul
000746  900b              STR      r0,[sp,#0x2c]
000748  4842              LDR      r0,|L2.2132|
00074a  6800              LDR      r0,[r0,#0]  ; Show_Parameter
00074c  4601              MOV      r1,r0
00074e  900a              STR      r0,[sp,#0x28]
000750  980b              LDR      r0,[sp,#0x2c]
000752  f7fffffe          BL       __aeabi_fdiv
000756  493e              LDR      r1,|L2.2128|
000758  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
00075c  e0d6              B        |L2.2316|
                  |L2.1886|
;;;2016                                       }
;;;2017                                       else if(Show_Parameter.Forward_Power<=5&&Show_Parameter.Forward_Power>3.2)     //小于5V时，200倍的步进
00075e  483d              LDR      r0,|L2.2132|
000760  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000762  495c              LDR      r1,|L2.2260|
000764  900b              STR      r0,[sp,#0x2c]
000766  f7fffffe          BL       __aeabi_cfcmple
00076a  d845              BHI      |L2.2040|
00076c  4839              LDR      r0,|L2.2132|
00076e  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000770  9009              STR      r0,[sp,#0x24]
000772  f7fffffe          BL       __aeabi_f2d
000776  4a5b              LDR      r2,|L2.2276|
000778  4b5b              LDR      r3,|L2.2280|
00077a  e9cd010a          STRD     r0,r1,[sp,#0x28]
00077e  f7fffffe          BL       __aeabi_cdrcmple
000782  d239              BCS      |L2.2040|
;;;2018                                       {
;;;2019                                           Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power-3.2)*277.8+500+20;
000784  4833              LDR      r0,|L2.2132|
000786  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000788  9001              STR      r0,[sp,#4]
00078a  f7fffffe          BL       __aeabi_f2d
00078e  4a55              LDR      r2,|L2.2276|
000790  4b55              LDR      r3,|L2.2280|
000792  e9cd0102          STRD     r0,r1,[sp,#8]
000796  f7fffffe          BL       __aeabi_dsub
00079a  4a54              LDR      r2,|L2.2284|
00079c  4b54              LDR      r3,|L2.2288|
00079e  e9cd0104          STRD     r0,r1,[sp,#0x10]
0007a2  f7fffffe          BL       __aeabi_dmul
0007a6  2200              MOVS     r2,#0
0007a8  4b52              LDR      r3,|L2.2292|
0007aa  e9cd0106          STRD     r0,r1,[sp,#0x18]
0007ae  f7fffffe          BL       __aeabi_dadd
0007b2  2200              MOVS     r2,#0
0007b4  4b50              LDR      r3,|L2.2296|
0007b6  e9cd0108          STRD     r0,r1,[sp,#0x20]
0007ba  f7fffffe          BL       __aeabi_dadd
0007be  e9cd010a          STRD     r0,r1,[sp,#0x28]
0007c2  f7fffffe          BL       __aeabi_d2f
0007c6  4922              LDR      r1,|L2.2128|
0007c8  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;2020                                           //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*277.8;//反向功率倍数待现场考察
;;;2021                                           Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
0007cc  4608              MOV      r0,r1
0007ce  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0007d2  900a              STR      r0,[sp,#0x28]
0007d4  481f              LDR      r0,|L2.2132|
0007d6  6840              LDR      r0,[r0,#4]  ; Show_Parameter
0007d8  9009              STR      r0,[sp,#0x24]
0007da  990a              LDR      r1,[sp,#0x28]
0007dc  f7fffffe          BL       __aeabi_fmul
0007e0  900b              STR      r0,[sp,#0x2c]
0007e2  481c              LDR      r0,|L2.2132|
0007e4  6800              LDR      r0,[r0,#0]  ; Show_Parameter
0007e6  4601              MOV      r1,r0
0007e8  900a              STR      r0,[sp,#0x28]
0007ea  980b              LDR      r0,[sp,#0x2c]
0007ec  f7fffffe          BL       __aeabi_fdiv
0007f0  4917              LDR      r1,|L2.2128|
0007f2  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
0007f6  e089              B        |L2.2316|
                  |L2.2040|
;;;2022                                       }
;;;2023                                       else     //小于3.2v
;;;2024                                       {
;;;2025                                           Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power)*500/3.2+20;
0007f8  4816              LDR      r0,|L2.2132|
0007fa  6800              LDR      r0,[r0,#0]  ; Show_Parameter
0007fc  493f              LDR      r1,|L2.2300|
0007fe  9004              STR      r0,[sp,#0x10]
000800  f7fffffe          BL       __aeabi_fmul
000804  9005              STR      r0,[sp,#0x14]
000806  f7fffffe          BL       __aeabi_f2d
00080a  4a36              LDR      r2,|L2.2276|
00080c  4b36              LDR      r3,|L2.2280|
00080e  e9cd0106          STRD     r0,r1,[sp,#0x18]
000812  f7fffffe          BL       __aeabi_ddiv
000816  2200              MOVS     r2,#0
000818  4b37              LDR      r3,|L2.2296|
00081a  e9cd0108          STRD     r0,r1,[sp,#0x20]
00081e  f7fffffe          BL       __aeabi_dadd
000822  e9cd010a          STRD     r0,r1,[sp,#0x28]
000826  f7fffffe          BL       __aeabi_d2f
00082a  4909              LDR      r1,|L2.2128|
00082c  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;2026                                           //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*500/3.2;//反向功率倍数待现场考察
;;;2027                                           Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
000830  4608              MOV      r0,r1
000832  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000836  900a              STR      r0,[sp,#0x28]
000838  4806              LDR      r0,|L2.2132|
00083a  6840              LDR      r0,[r0,#4]  ; Show_Parameter
00083c  9009              STR      r0,[sp,#0x24]
00083e  990a              LDR      r1,[sp,#0x28]
000840  f7fffffe          BL       __aeabi_fmul
000844  900b              STR      r0,[sp,#0x2c]
000846  4803              LDR      r0,|L2.2132|
000848  6800              LDR      r0,[r0,#0]  ; Show_Parameter
00084a  4601              MOV      r1,r0
00084c  900a              STR      r0,[sp,#0x28]
00084e  e057              B        |L2.2304|
                  |L2.2128|
                          DCD      Work_paraBack
                  |L2.2132|
                          DCD      Show_Parameter
                  |L2.2136|
                          DCD      0x40010800
                  |L2.2140|
00085c  5379735f          DCB      "Sys_State.alarm\r\n",0
000860  53746174
000864  652e616c
000868  61726d0d
00086c  0a00    
00086e  00                DCB      0
00086f  00                DCB      0
                  |L2.2160|
                          DCD      Sys_State
                  |L2.2164|
000874  74686520          DCB      "the first alarm,needing save RTC time!!!\r\n",0
000878  66697273
00087c  7420616c
000880  61726d2c
000884  6e656564
000888  696e6720
00088c  73617665
000890  20525443
000894  2074696d
000898  65212121
00089c  0d0a00  
00089f  00                DCB      0
                  |L2.2208|
                          DCD      set_time
                  |L2.2212|
                          DCD      Alarm_historyBack
                  |L2.2216|
                          DCD      ADC_ConvertedValue
                  |L2.2220|
                          DCD      0x400a6666
                  |L2.2224|
                          DCD      0x40080000
                  |L2.2228|
                          DCD      eADC0_buff
                  |L2.2232|
                          DCD      eADC1_buff
                  |L2.2236|
                          DCD      eADC3_buff
                  |L2.2240|
                          DCD      0x42c80000
                  |L2.2244|
                          DCD      0x3ff80000
                  |L2.2248|
                          DCD      0x4042c000
                  |L2.2252|
                          DCD      0x404e0000
                  |L2.2256|
                          DCD      0x42200000
                  |L2.2260|
                          DCD      0x40a00000
                  |L2.2264|
                          DCD      0x43c80000
                  |L2.2268|
                          DCD      0x447a0000
                  |L2.2272|
                          DCD      0x41a00000
                  |L2.2276|
                          DCD      0x9999999a
                  |L2.2280|
                          DCD      0x40099999
                  |L2.2284|
                          DCD      0xcccccccd
                  |L2.2288|
                          DCD      0x40715ccc
                  |L2.2292|
                          DCD      0x407f4000
                  |L2.2296|
                          DCD      0x40340000
                  |L2.2300|
                          DCD      0x43fa0000
                  |L2.2304|
000900  980b              LDR      r0,[sp,#0x2c]
000902  f7fffffe          BL       __aeabi_fdiv
000906  49fe              LDR      r1,|L2.3328|
000908  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
                  |L2.2316|
;;;2028                                       }
;;;2029                                       Show_Parameter.Standing_wave_ratio =get_Standing_wave_ratio(Work_paraBack.Forward_power[0],Work_paraBack.Reverse_power[0]);
00090c  48fc              LDR      r0,|L2.3328|
00090e  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000912  900b              STR      r0,[sp,#0x2c]
000914  48fa              LDR      r0,|L2.3328|
000916  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
00091a  900a              STR      r0,[sp,#0x28]
00091c  990b              LDR      r1,[sp,#0x2c]
00091e  f7fffffe          BL       get_Standing_wave_ratio
000922  49f8              LDR      r1,|L2.3332|
000924  6108              STR      r0,[r1,#0x10]  ; Show_Parameter
;;;2030                                       if(Show_Parameter.Standing_wave_ratio>=1.8||Show_Parameter.Standing_wave_ratio<1 || Work_paraBack.Power_45_intensity[0]>=100)
000926  4608              MOV      r0,r1
000928  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
00092a  9009              STR      r0,[sp,#0x24]
00092c  f7fffffe          BL       __aeabi_f2d
000930  4af5              LDR      r2,|L2.3336|
000932  4bf6              LDR      r3,|L2.3340|
000934  e9cd010a          STRD     r0,r1,[sp,#0x28]
000938  f7fffffe          BL       __aeabi_cdrcmple
00093c  d90f              BLS      |L2.2398|
00093e  48f1              LDR      r0,|L2.3332|
000940  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
000942  f04f517e          MOV      r1,#0x3f800000
000946  900b              STR      r0,[sp,#0x2c]
000948  f7fffffe          BL       __aeabi_cfcmple
00094c  d307              BCC      |L2.2398|
00094e  48ec              LDR      r0,|L2.3328|
000950  f8d0001d          LDR      r0,[r0,#0x1d]  ; Work_paraBack
000954  49ee              LDR      r1,|L2.3344|
000956  900b              STR      r0,[sp,#0x2c]
000958  f7fffffe          BL       __aeabi_cfrcmple
00095c  d80b              BHI      |L2.2422|
                  |L2.2398|
;;;2031                                       {
;;;2032   //								z[i]=temp_Forward_power;
;;;2033   //								f[i]=temp_Reverse_power;
;;;2034                                           SWR_array[i*10+index]=Show_Parameter.Standing_wave_ratio;
00095e  48e9              LDR      r0,|L2.3332|
000960  6901              LDR      r1,[r0,#0x10]  ; Show_Parameter
000962  980d              LDR      r0,[sp,#0x34]
000964  eb000280          ADD      r2,r0,r0,LSL #2
000968  9814              LDR      r0,[sp,#0x50]
00096a  eb000042          ADD      r0,r0,r2,LSL #1
00096e  4ae9              LDR      r2,|L2.3348|
000970  f8421020          STR      r1,[r2,r0,LSL #2]
;;;2035                                           goto s_finish;
000974  e273              B        |L2.3678|
                  |L2.2422|
;;;2036                                       }
;;;2037                                       else
;;;2038                                       {
;;;2039   //							 	z[i]=temp_Forward_power;
;;;2040   //								f[i]=temp_Reverse_power;
;;;2041                                           SWR_array[i*10+index]=Show_Parameter.Standing_wave_ratio;
000976  48e3              LDR      r0,|L2.3332|
000978  6901              LDR      r1,[r0,#0x10]  ; Show_Parameter
00097a  980d              LDR      r0,[sp,#0x34]
00097c  eb000280          ADD      r2,r0,r0,LSL #2
000980  9814              LDR      r0,[sp,#0x50]
000982  eb000042          ADD      r0,r0,r2,LSL #1
000986  4ae3              LDR      r2,|L2.3348|
000988  f8421020          STR      r1,[r2,r0,LSL #2]
00098c  980c              LDR      r0,[sp,#0x30]         ;1975
00098e  1c40              ADDS     r0,r0,#1              ;1975
000990  900c              STR      r0,[sp,#0x30]         ;1975
                  |L2.2450|
000992  980c              LDR      r0,[sp,#0x30]         ;1975
000994  2807              CMP      r0,#7                 ;1975
000996  f6ffadc3          BLT      |L2.1312|
;;;2042                                       }
;;;2043                                   }
;;;2044                                   for(int count=0; count<30; count++)   //最多加30次
00099a  2000              MOVS     r0,#0
00099c  900c              STR      r0,[sp,#0x30]
00099e  e259              B        |L2.3668|
                  |L2.2464|
;;;2045                                   {
;;;2046                                       Pre_EmissionSend(&EmissionCmd,Gain_plus);//增益加指令
0009a0  212b              MOVS     r1,#0x2b
0009a2  48dd              LDR      r0,|L2.3352|
0009a4  f7fffffe          BL       Pre_EmissionSend
;;;2047                                       if(run_command(xTicksToWait*2)==1)   //如果加成功
0009a8  9813              LDR      r0,[sp,#0x4c]
0009aa  0040              LSLS     r0,r0,#1
0009ac  900b              STR      r0,[sp,#0x2c]
0009ae  f7fffffe          BL       run_command
0009b2  2801              CMP      r0,#1
0009b4  d177              BNE      |L2.2726|
;;;2048                                       {
;;;2049                                           //延时10s等待机器稳定再采集
;;;2050                                           vTaskDelay(300);//发射300ms之后再次开始采集
0009b6  f44f7096          MOV      r0,#0x12c
0009ba  f7fffffe          BL       vTaskDelay
;;;2051                                           for(int i=0; i<100; i++)
0009be  2000              MOVS     r0,#0
0009c0  900b              STR      r0,[sp,#0x2c]
0009c2  e06a              B        |L2.2714|
                  |L2.2500|
;;;2052                                           {
;;;2053                                               eADC0_buff[i] =(float) ADC_ConvertedValue[0]/4096*3.3*3;
0009c4  48d5              LDR      r0,|L2.3356|
0009c6  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
0009c8  9001              STR      r0,[sp,#4]
0009ca  f7fffffe          BL       __aeabi_ui2f
0009ce  f04f418b          MOV      r1,#0x45800000
0009d2  9002              STR      r0,[sp,#8]
0009d4  f7fffffe          BL       __aeabi_fdiv
0009d8  9003              STR      r0,[sp,#0xc]
0009da  f7fffffe          BL       __aeabi_f2d
0009de  f04f3266          MOV      r2,#0x66666666
0009e2  4bcf              LDR      r3,|L2.3360|
0009e4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0009e8  e001              B        |L2.2542|
                  |L2.2538|
0009ea  e2d1              B        |L2.3984|
                  |L2.2540|
0009ec  e2cf              B        |L2.3982|
                  |L2.2542|
0009ee  f7fffffe          BL       __aeabi_dmul
0009f2  2200              MOVS     r2,#0
0009f4  4bcb              LDR      r3,|L2.3364|
0009f6  e9cd0106          STRD     r0,r1,[sp,#0x18]
0009fa  f7fffffe          BL       __aeabi_dmul
0009fe  e9cd0108          STRD     r0,r1,[sp,#0x20]
000a02  f7fffffe          BL       __aeabi_d2f
000a06  4ac8              LDR      r2,|L2.3368|
000a08  990b              LDR      r1,[sp,#0x2c]
000a0a  f8420021          STR      r0,[r2,r1,LSL #2]
;;;2054                                               eADC1_buff[i] =(float) ADC_ConvertedValue[1]/4096*3.3;
000a0e  48c3              LDR      r0,|L2.3356|
000a10  8840              LDRH     r0,[r0,#2]  ; ADC_ConvertedValue
000a12  9003              STR      r0,[sp,#0xc]
000a14  f7fffffe          BL       __aeabi_ui2f
000a18  f04f418b          MOV      r1,#0x45800000
000a1c  9004              STR      r0,[sp,#0x10]
000a1e  f7fffffe          BL       __aeabi_fdiv
000a22  9005              STR      r0,[sp,#0x14]
000a24  f7fffffe          BL       __aeabi_f2d
000a28  f04f3266          MOV      r2,#0x66666666
000a2c  4bbc              LDR      r3,|L2.3360|
000a2e  e9cd0106          STRD     r0,r1,[sp,#0x18]
000a32  f7fffffe          BL       __aeabi_dmul
000a36  e9cd0108          STRD     r0,r1,[sp,#0x20]
000a3a  f7fffffe          BL       __aeabi_d2f
000a3e  4601              MOV      r1,r0
000a40  4aba              LDR      r2,|L2.3372|
000a42  980b              LDR      r0,[sp,#0x2c]
000a44  f8421020          STR      r1,[r2,r0,LSL #2]
;;;2055                                               //	eADC2_buff[i] =(float) ADC_ConvertedValue[2]/4096*3.3*2;
;;;2056                                               eADC3_buff[i] =(float) ADC_ConvertedValue[3]/4096*3.3*2;
000a48  48b4              LDR      r0,|L2.3356|
000a4a  88c0              LDRH     r0,[r0,#6]  ; ADC_ConvertedValue
000a4c  9001              STR      r0,[sp,#4]
000a4e  f7fffffe          BL       __aeabi_ui2f
000a52  f04f418b          MOV      r1,#0x45800000
000a56  9002              STR      r0,[sp,#8]
000a58  f7fffffe          BL       __aeabi_fdiv
000a5c  9003              STR      r0,[sp,#0xc]
000a5e  f7fffffe          BL       __aeabi_f2d
000a62  f04f3266          MOV      r2,#0x66666666
000a66  4bae              LDR      r3,|L2.3360|
000a68  e9cd0104          STRD     r0,r1,[sp,#0x10]
000a6c  f7fffffe          BL       __aeabi_dmul
000a70  2200              MOVS     r2,#0
000a72  f04f4380          MOV      r3,#0x40000000
000a76  e9cd0106          STRD     r0,r1,[sp,#0x18]
000a7a  f7fffffe          BL       __aeabi_dmul
000a7e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000a82  f7fffffe          BL       __aeabi_d2f
000a86  4aaa              LDR      r2,|L2.3376|
000a88  990b              LDR      r1,[sp,#0x2c]
000a8a  f8420021          STR      r0,[r2,r1,LSL #2]
;;;2057                                               vTaskDelay(1);
000a8e  2001              MOVS     r0,#1
000a90  f7fffffe          BL       vTaskDelay
000a94  980b              LDR      r0,[sp,#0x2c]         ;2051
000a96  1c40              ADDS     r0,r0,#1              ;2051
000a98  900b              STR      r0,[sp,#0x2c]         ;2051
                  |L2.2714|
000a9a  980b              LDR      r0,[sp,#0x2c]         ;2051
000a9c  2864              CMP      r0,#0x64              ;2051
000a9e  db91              BLT      |L2.2500|
;;;2058                                           }
;;;2059                                           for(int i=1; i<100; i++)   //100次数据求和
000aa0  2001              MOVS     r0,#1
000aa2  900b              STR      r0,[sp,#0x2c]
000aa4  e02a              B        |L2.2812|
                  |L2.2726|
000aa6  e1d2              B        |L2.3662|
                  |L2.2728|
;;;2060                                           {
;;;2061                                               eADC0_buff[0]+=eADC0_buff[i];
000aa8  499f              LDR      r1,|L2.3368|
000aaa  980b              LDR      r0,[sp,#0x2c]
000aac  f8510020          LDR      r0,[r1,r0,LSL #2]
000ab0  900a              STR      r0,[sp,#0x28]
000ab2  4608              MOV      r0,r1
000ab4  6800              LDR      r0,[r0,#0]  ; eADC0_buff
000ab6  9009              STR      r0,[sp,#0x24]
000ab8  990a              LDR      r1,[sp,#0x28]
000aba  f7fffffe          BL       __aeabi_fadd
000abe  499a              LDR      r1,|L2.3368|
000ac0  6008              STR      r0,[r1,#0]  ; eADC0_buff
;;;2062                                               eADC1_buff[0]+=eADC1_buff[i];
000ac2  499a              LDR      r1,|L2.3372|
000ac4  980b              LDR      r0,[sp,#0x2c]
000ac6  f8510020          LDR      r0,[r1,r0,LSL #2]
000aca  900a              STR      r0,[sp,#0x28]
000acc  4608              MOV      r0,r1
000ace  6800              LDR      r0,[r0,#0]  ; eADC1_buff
000ad0  9009              STR      r0,[sp,#0x24]
000ad2  990a              LDR      r1,[sp,#0x28]
000ad4  f7fffffe          BL       __aeabi_fadd
000ad8  4994              LDR      r1,|L2.3372|
000ada  6008              STR      r0,[r1,#0]  ; eADC1_buff
;;;2063                                               //	eADC2_buff[0]+=eADC2_buff[i];
;;;2064                                               eADC3_buff[0]+=eADC3_buff[i];
000adc  4994              LDR      r1,|L2.3376|
000ade  980b              LDR      r0,[sp,#0x2c]
000ae0  f8510020          LDR      r0,[r1,r0,LSL #2]
000ae4  900a              STR      r0,[sp,#0x28]
000ae6  4608              MOV      r0,r1
000ae8  6800              LDR      r0,[r0,#0]  ; eADC3_buff
000aea  9009              STR      r0,[sp,#0x24]
000aec  990a              LDR      r1,[sp,#0x28]
000aee  f7fffffe          BL       __aeabi_fadd
000af2  498f              LDR      r1,|L2.3376|
000af4  6008              STR      r0,[r1,#0]  ; eADC3_buff
000af6  980b              LDR      r0,[sp,#0x2c]         ;2059
000af8  1c40              ADDS     r0,r0,#1              ;2059
000afa  900b              STR      r0,[sp,#0x2c]         ;2059
                  |L2.2812|
000afc  980b              LDR      r0,[sp,#0x2c]         ;2059
000afe  2864              CMP      r0,#0x64              ;2059
000b00  dbd2              BLT      |L2.2728|
;;;2065                                           }
;;;2066                                           //取100次平均值
;;;2067                                           Show_Parameter.Forward_Power=eADC0_buff[0]/100;//正向功率
000b02  4889              LDR      r0,|L2.3368|
000b04  6800              LDR      r0,[r0,#0]  ; eADC0_buff
000b06  4982              LDR      r1,|L2.3344|
000b08  900b              STR      r0,[sp,#0x2c]
000b0a  f7fffffe          BL       __aeabi_fdiv
000b0e  497d              LDR      r1,|L2.3332|
000b10  6008              STR      r0,[r1,#0]  ; Show_Parameter
;;;2068                                           Show_Parameter.Reverse_Power=eADC1_buff[0]/100;//反向功率
000b12  4886              LDR      r0,|L2.3372|
000b14  6800              LDR      r0,[r0,#0]  ; eADC1_buff
000b16  497e              LDR      r1,|L2.3344|
000b18  900b              STR      r0,[sp,#0x2c]
000b1a  f7fffffe          BL       __aeabi_fdiv
000b1e  4979              LDR      r1,|L2.3332|
000b20  6048              STR      r0,[r1,#4]  ; Show_Parameter
;;;2069                                           //Show_Parameter.M_45V=eADC2_buff[0]/100;//电压
;;;2070                                           Show_Parameter.M_45I=eADC3_buff[0]/100;//电流
000b22  4883              LDR      r0,|L2.3376|
000b24  6800              LDR      r0,[r0,#0]  ; eADC3_buff
000b26  497a              LDR      r1,|L2.3344|
000b28  900b              STR      r0,[sp,#0x2c]
000b2a  f7fffffe          BL       __aeabi_fdiv
000b2e  4975              LDR      r1,|L2.3332|
000b30  60c8              STR      r0,[r1,#0xc]  ; Show_Parameter
;;;2071                                           //电流显示
;;;2072                                           if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
000b32  4608              MOV      r0,r1
000b34  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000b36  9009              STR      r0,[sp,#0x24]
000b38  f7fffffe          BL       __aeabi_f2d
000b3c  2200              MOVS     r2,#0
000b3e  4b7d              LDR      r3,|L2.3380|
000b40  e9cd010a          STRD     r0,r1,[sp,#0x28]
000b44  f7fffffe          BL       __aeabi_cdrcmple
000b48  d21e              BCS      |L2.2952|
;;;2073                                           {
;;;2074                                               Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
000b4a  486e              LDR      r0,|L2.3332|
000b4c  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000b4e  9003              STR      r0,[sp,#0xc]
000b50  f7fffffe          BL       __aeabi_f2d
000b54  2200              MOVS     r2,#0
000b56  4b77              LDR      r3,|L2.3380|
000b58  e9cd0104          STRD     r0,r1,[sp,#0x10]
000b5c  f7fffffe          BL       __aeabi_dsub
000b60  2200              MOVS     r2,#0
000b62  4b75              LDR      r3,|L2.3384|
000b64  e9cd0106          STRD     r0,r1,[sp,#0x18]
000b68  f7fffffe          BL       __aeabi_dmul
000b6c  2200              MOVS     r2,#0
000b6e  4b73              LDR      r3,|L2.3388|
000b70  e9cd0108          STRD     r0,r1,[sp,#0x20]
000b74  f7fffffe          BL       __aeabi_dadd
000b78  e9cd010a          STRD     r0,r1,[sp,#0x28]
000b7c  f7fffffe          BL       __aeabi_d2f
000b80  495f              LDR      r1,|L2.3328|
000b82  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
000b86  e008              B        |L2.2970|
                  |L2.2952|
;;;2075                                           }
;;;2076                                           else     //小于 1.5V电流系数为40
;;;2077                                           {
;;;2078                                               Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
000b88  485e              LDR      r0,|L2.3332|
000b8a  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000b8c  496c              LDR      r1,|L2.3392|
000b8e  900b              STR      r0,[sp,#0x2c]
000b90  f7fffffe          BL       __aeabi_fmul
000b94  495a              LDR      r1,|L2.3328|
000b96  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L2.2970|
;;;2079                                           }
;;;2080                                           if(Show_Parameter.Forward_Power>5)   //正向功率的电压大于5V时，400的步进
000b9a  485a              LDR      r0,|L2.3332|
000b9c  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000b9e  4969              LDR      r1,|L2.3396|
000ba0  900b              STR      r0,[sp,#0x2c]
000ba2  f7fffffe          BL       __aeabi_cfrcmple
000ba6  d232              BCS      |L2.3086|
;;;2081                                           {
;;;2082                                               temp_Forward_power=Work_paraBack.Forward_power[0];
000ba8  4855              LDR      r0,|L2.3328|
000baa  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000bae  9010              STR      r0,[sp,#0x40]
;;;2083                                               temp_Reverse_power=Work_paraBack.Reverse_power[0];
000bb0  4853              LDR      r0,|L2.3328|
000bb2  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000bb6  900f              STR      r0,[sp,#0x3c]
;;;2084                                               Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power-5)*Forward_P+1000+20;
000bb8  4852              LDR      r0,|L2.3332|
000bba  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000bbc  4961              LDR      r1,|L2.3396|
000bbe  9008              STR      r0,[sp,#0x20]
000bc0  f7fffffe          BL       __aeabi_fsub
000bc4  4960              LDR      r1,|L2.3400|
000bc6  9009              STR      r0,[sp,#0x24]
000bc8  f7fffffe          BL       __aeabi_fmul
000bcc  495f              LDR      r1,|L2.3404|
000bce  900a              STR      r0,[sp,#0x28]
000bd0  f7fffffe          BL       __aeabi_fadd
000bd4  495e              LDR      r1,|L2.3408|
000bd6  900b              STR      r0,[sp,#0x2c]
000bd8  f7fffffe          BL       __aeabi_fadd
000bdc  4948              LDR      r1,|L2.3328|
000bde  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;2085                                               //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Forward_P;//反向功率倍数待现场考察
;;;2086                                               Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
000be2  4608              MOV      r0,r1
000be4  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000be8  900a              STR      r0,[sp,#0x28]
000bea  4846              LDR      r0,|L2.3332|
000bec  6840              LDR      r0,[r0,#4]  ; Show_Parameter
000bee  9009              STR      r0,[sp,#0x24]
000bf0  990a              LDR      r1,[sp,#0x28]
000bf2  f7fffffe          BL       __aeabi_fmul
000bf6  900b              STR      r0,[sp,#0x2c]
000bf8  4842              LDR      r0,|L2.3332|
000bfa  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000bfc  4601              MOV      r1,r0
000bfe  900a              STR      r0,[sp,#0x28]
000c00  980b              LDR      r0,[sp,#0x2c]
000c02  f7fffffe          BL       __aeabi_fdiv
000c06  493e              LDR      r1,|L2.3328|
000c08  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
000c0c  e0c6              B        |L2.3484|
                  |L2.3086|
;;;2087                                           }
;;;2088                                           else if(Show_Parameter.Forward_Power<=5&&Show_Parameter.Forward_Power>3.2)     //小于5V时，200倍的步进
000c0e  483d              LDR      r0,|L2.3332|
000c10  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000c12  494c              LDR      r1,|L2.3396|
000c14  900b              STR      r0,[sp,#0x2c]
000c16  f7fffffe          BL       __aeabi_cfcmple
000c1a  d84d              BHI      |L2.3256|
000c1c  4839              LDR      r0,|L2.3332|
000c1e  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000c20  9009              STR      r0,[sp,#0x24]
000c22  f7fffffe          BL       __aeabi_f2d
000c26  4a4b              LDR      r2,|L2.3412|
000c28  4b4b              LDR      r3,|L2.3416|
000c2a  e9cd010a          STRD     r0,r1,[sp,#0x28]
000c2e  f7fffffe          BL       __aeabi_cdrcmple
000c32  d241              BCS      |L2.3256|
;;;2089                                           {
;;;2090                                               temp_Forward_power=Work_paraBack.Forward_power[0];
000c34  4832              LDR      r0,|L2.3328|
000c36  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000c3a  9010              STR      r0,[sp,#0x40]
;;;2091                                               temp_Reverse_power=Work_paraBack.Reverse_power[0];
000c3c  4830              LDR      r0,|L2.3328|
000c3e  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000c42  900f              STR      r0,[sp,#0x3c]
;;;2092                                               Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power-3.2)*277.8+500+20;
000c44  482f              LDR      r0,|L2.3332|
000c46  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000c48  9001              STR      r0,[sp,#4]
000c4a  f7fffffe          BL       __aeabi_f2d
000c4e  4a41              LDR      r2,|L2.3412|
000c50  4b41              LDR      r3,|L2.3416|
000c52  e9cd0102          STRD     r0,r1,[sp,#8]
000c56  f7fffffe          BL       __aeabi_dsub
000c5a  4a2b              LDR      r2,|L2.3336|
000c5c  4b3f              LDR      r3,|L2.3420|
000c5e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000c62  f7fffffe          BL       __aeabi_dmul
000c66  2200              MOVS     r2,#0
000c68  4b3d              LDR      r3,|L2.3424|
000c6a  e9cd0106          STRD     r0,r1,[sp,#0x18]
000c6e  f7fffffe          BL       __aeabi_dadd
000c72  2200              MOVS     r2,#0
000c74  4b3b              LDR      r3,|L2.3428|
000c76  e9cd0108          STRD     r0,r1,[sp,#0x20]
000c7a  f7fffffe          BL       __aeabi_dadd
000c7e  e9cd010a          STRD     r0,r1,[sp,#0x28]
000c82  f7fffffe          BL       __aeabi_d2f
000c86  491e              LDR      r1,|L2.3328|
000c88  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;2093                                               //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*277.8;//反向功率倍数待现场考察
;;;2094                                               Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
000c8c  4608              MOV      r0,r1
000c8e  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000c92  900a              STR      r0,[sp,#0x28]
000c94  481b              LDR      r0,|L2.3332|
000c96  6840              LDR      r0,[r0,#4]  ; Show_Parameter
000c98  9009              STR      r0,[sp,#0x24]
000c9a  990a              LDR      r1,[sp,#0x28]
000c9c  f7fffffe          BL       __aeabi_fmul
000ca0  900b              STR      r0,[sp,#0x2c]
000ca2  4818              LDR      r0,|L2.3332|
000ca4  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000ca6  4601              MOV      r1,r0
000ca8  900a              STR      r0,[sp,#0x28]
000caa  980b              LDR      r0,[sp,#0x2c]
000cac  f7fffffe          BL       __aeabi_fdiv
000cb0  4913              LDR      r1,|L2.3328|
000cb2  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
000cb6  e071              B        |L2.3484|
                  |L2.3256|
;;;2095                                           }
;;;2096                                           else     //小于3.2v
;;;2097                                           {
;;;2098                                               temp_Forward_power=Work_paraBack.Forward_power[0];
000cb8  4811              LDR      r0,|L2.3328|
000cba  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000cbe  9010              STR      r0,[sp,#0x40]
;;;2099                                               temp_Reverse_power=Work_paraBack.Reverse_power[0];
000cc0  480f              LDR      r0,|L2.3328|
000cc2  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000cc6  900f              STR      r0,[sp,#0x3c]
;;;2100                                               Work_paraBack.Forward_power[0]=(Show_Parameter.Forward_Power)*500/3.2+20;
000cc8  480e              LDR      r0,|L2.3332|
000cca  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000ccc  4926              LDR      r1,|L2.3432|
000cce  9004              STR      r0,[sp,#0x10]
000cd0  f7fffffe          BL       __aeabi_fmul
000cd4  9005              STR      r0,[sp,#0x14]
000cd6  f7fffffe          BL       __aeabi_f2d
000cda  4a1e              LDR      r2,|L2.3412|
000cdc  4b1e              LDR      r3,|L2.3416|
000cde  e9cd0106          STRD     r0,r1,[sp,#0x18]
000ce2  f7fffffe          BL       __aeabi_ddiv
000ce6  2200              MOVS     r2,#0
000ce8  4b1e              LDR      r3,|L2.3428|
000cea  e000              B        |L2.3310|
                  |L2.3308|
000cec  e0b6              B        |L2.3676|
                  |L2.3310|
000cee  e9cd0108          STRD     r0,r1,[sp,#0x20]
000cf2  f7fffffe          BL       __aeabi_dadd
000cf6  e9cd010a          STRD     r0,r1,[sp,#0x28]
000cfa  f7fffffe          BL       __aeabi_d2f
000cfe  e035              B        |L2.3436|
                  |L2.3328|
                          DCD      Work_paraBack
                  |L2.3332|
                          DCD      Show_Parameter
                  |L2.3336|
                          DCD      0xcccccccd
                  |L2.3340|
                          DCD      0x3ffccccc
                  |L2.3344|
                          DCD      0x42c80000
                  |L2.3348|
                          DCD      SWR_array
                  |L2.3352|
                          DCD      EmissionCmd
                  |L2.3356|
                          DCD      ADC_ConvertedValue
                  |L2.3360|
                          DCD      0x400a6666
                  |L2.3364|
                          DCD      0x40080000
                  |L2.3368|
                          DCD      eADC0_buff
                  |L2.3372|
                          DCD      eADC1_buff
                  |L2.3376|
                          DCD      eADC3_buff
                  |L2.3380|
                          DCD      0x3ff80000
                  |L2.3384|
                          DCD      0x4042c000
                  |L2.3388|
                          DCD      0x404e0000
                  |L2.3392|
                          DCD      0x42200000
                  |L2.3396|
                          DCD      0x40a00000
                  |L2.3400|
                          DCD      0x43c80000
                  |L2.3404|
                          DCD      0x447a0000
                  |L2.3408|
                          DCD      0x41a00000
                  |L2.3412|
                          DCD      0x9999999a
                  |L2.3416|
                          DCD      0x40099999
                  |L2.3420|
                          DCD      0x40715ccc
                  |L2.3424|
                          DCD      0x407f4000
                  |L2.3428|
                          DCD      0x40340000
                  |L2.3432|
                          DCD      0x43fa0000
                  |L2.3436|
000d6c  498f              LDR      r1,|L2.4012|
000d6e  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;2101                                               //Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*500/3.2;//反向功率倍数待现场考察
;;;2102                                               Work_paraBack.Reverse_power[0]=Show_Parameter.Reverse_Power*Work_paraBack.Forward_power[0]/Show_Parameter.Forward_Power;
000d72  4608              MOV      r0,r1
000d74  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000d78  900a              STR      r0,[sp,#0x28]
000d7a  488d              LDR      r0,|L2.4016|
000d7c  6840              LDR      r0,[r0,#4]  ; Show_Parameter
000d7e  9009              STR      r0,[sp,#0x24]
000d80  990a              LDR      r1,[sp,#0x28]
000d82  f7fffffe          BL       __aeabi_fmul
000d86  900b              STR      r0,[sp,#0x2c]
000d88  4889              LDR      r0,|L2.4016|
000d8a  6800              LDR      r0,[r0,#0]  ; Show_Parameter
000d8c  4601              MOV      r1,r0
000d8e  900a              STR      r0,[sp,#0x28]
000d90  980b              LDR      r0,[sp,#0x2c]
000d92  f7fffffe          BL       __aeabi_fdiv
000d96  4985              LDR      r1,|L2.4012|
000d98  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
                  |L2.3484|
;;;2103                                           }
;;;2104   //							temp_Standing_wave_ratio=Show_Parameter.Standing_wave_ratio ;
;;;2105                                           temp_Standing_wave_ratio =get_Standing_wave_ratio(Work_paraBack.Forward_power[0],Work_paraBack.Reverse_power[0]);
000d9c  4883              LDR      r0,|L2.4012|
000d9e  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000da2  900b              STR      r0,[sp,#0x2c]
000da4  4881              LDR      r0,|L2.4012|
000da6  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000daa  900a              STR      r0,[sp,#0x28]
000dac  990b              LDR      r1,[sp,#0x2c]
000dae  f7fffffe          BL       get_Standing_wave_ratio
000db2  900e              STR      r0,[sp,#0x38]
;;;2106   
;;;2107                                           //	if(Work_paraBack.Forward_power[0]>1500||(fabs(temp_Forward_power-Work_paraBack.Forward_power[0])<=5)\//
;;;2108                                           if(Work_paraBack.Forward_power[0]>1500 ||temp_Standing_wave_ratio>=1.8||temp_Standing_wave_ratio<1 || Work_paraBack.Power_45_intensity[0]>=100)
000db4  487d              LDR      r0,|L2.4012|
000db6  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000dba  497e              LDR      r1,|L2.4020|
000dbc  900b              STR      r0,[sp,#0x2c]
000dbe  f7fffffe          BL       __aeabi_cfrcmple
000dc2  d317              BCC      |L2.3572|
000dc4  980e              LDR      r0,[sp,#0x38]
000dc6  f7fffffe          BL       __aeabi_f2d
000dca  4a7b              LDR      r2,|L2.4024|
000dcc  4b7b              LDR      r3,|L2.4028|
000dce  e9cd010a          STRD     r0,r1,[sp,#0x28]
000dd2  f7fffffe          BL       __aeabi_cdrcmple
000dd6  d90d              BLS      |L2.3572|
000dd8  f04f517e          MOV      r1,#0x3f800000
000ddc  980e              LDR      r0,[sp,#0x38]
000dde  f7fffffe          BL       __aeabi_cfcmple
000de2  d307              BCC      |L2.3572|
000de4  4871              LDR      r0,|L2.4012|
000de6  f8d0001d          LDR      r0,[r0,#0x1d]  ; Work_paraBack
000dea  4975              LDR      r1,|L2.4032|
000dec  900b              STR      r0,[sp,#0x2c]
000dee  f7fffffe          BL       __aeabi_cfrcmple
000df2  d814              BHI      |L2.3614|
                  |L2.3572|
;;;2109                                           {
;;;2110                                               z[i*10+index]=temp_Forward_power;
000df4  990d              LDR      r1,[sp,#0x34]
000df6  eb010281          ADD      r2,r1,r1,LSL #2
000dfa  9914              LDR      r1,[sp,#0x50]
000dfc  eb010142          ADD      r1,r1,r2,LSL #1
000e00  4a70              LDR      r2,|L2.4036|
000e02  9810              LDR      r0,[sp,#0x40]
000e04  f8420021          STR      r0,[r2,r1,LSL #2]
;;;2111                                               f[i*10+index]=temp_Reverse_power;
000e08  990d              LDR      r1,[sp,#0x34]
000e0a  eb010281          ADD      r2,r1,r1,LSL #2
000e0e  9914              LDR      r1,[sp,#0x50]
000e10  eb010142          ADD      r1,r1,r2,LSL #1
000e14  4a6c              LDR      r2,|L2.4040|
000e16  980f              LDR      r0,[sp,#0x3c]
000e18  f8420021          STR      r0,[r2,r1,LSL #2]
;;;2112   //								SWR_array[i]=temp_Standing_wave_ratio;
;;;2113                                               goto s_finish;
000e1c  e01f              B        |L2.3678|
                  |L2.3614|
;;;2114                                           }
;;;2115                                           else
;;;2116                                           {
;;;2117                                               z[i*10+index]=Work_paraBack.Forward_power[0];
000e1e  4863              LDR      r0,|L2.4012|
000e20  f8d01015          LDR      r1,[r0,#0x15]  ; Work_paraBack
000e24  980d              LDR      r0,[sp,#0x34]
000e26  eb000280          ADD      r2,r0,r0,LSL #2
000e2a  9814              LDR      r0,[sp,#0x50]
000e2c  eb000042          ADD      r0,r0,r2,LSL #1
000e30  4a64              LDR      r2,|L2.4036|
000e32  f8421020          STR      r1,[r2,r0,LSL #2]
;;;2118                                               f[i*10+index]=Work_paraBack.Reverse_power[0];
000e36  485d              LDR      r0,|L2.4012|
000e38  f8d01019          LDR      r1,[r0,#0x19]  ; Work_paraBack
000e3c  980d              LDR      r0,[sp,#0x34]
000e3e  eb000280          ADD      r2,r0,r0,LSL #2
000e42  9814              LDR      r0,[sp,#0x50]
000e44  eb000042          ADD      r0,r0,r2,LSL #1
000e48  4a5f              LDR      r2,|L2.4040|
000e4a  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L2.3662|
000e4e  980c              LDR      r0,[sp,#0x30]         ;2044
000e50  1c40              ADDS     r0,r0,#1              ;2044
000e52  900c              STR      r0,[sp,#0x30]         ;2044
                  |L2.3668|
000e54  980c              LDR      r0,[sp,#0x30]         ;2044
000e56  281e              CMP      r0,#0x1e              ;2044
000e58  f6ffada2          BLT      |L2.2464|
                  |L2.3676|
;;;2119   //								SWR_array[i]=Show_Parameter.Standing_wave_ratio;
;;;2120                                           }
;;;2121                                       }
;;;2122                                   }
;;;2123                               }
;;;2124                           }
;;;2125   s_finish:
000e5c  bf00              NOP      
                  |L2.3678|
;;;2126                           z[i*10+index]=Work_paraBack.Forward_power[0];//212
000e5e  4853              LDR      r0,|L2.4012|
000e60  f8d01015          LDR      r1,[r0,#0x15]  ; Work_paraBack
000e64  980d              LDR      r0,[sp,#0x34]
000e66  eb000280          ADD      r2,r0,r0,LSL #2
000e6a  9814              LDR      r0,[sp,#0x50]
000e6c  eb000042          ADD      r0,r0,r2,LSL #1
000e70  4a54              LDR      r2,|L2.4036|
000e72  f8421020          STR      r1,[r2,r0,LSL #2]
;;;2127                           f[i*10+index]=Work_paraBack.Reverse_power[0];
000e76  484d              LDR      r0,|L2.4012|
000e78  f8d01019          LDR      r1,[r0,#0x19]  ; Work_paraBack
000e7c  980d              LDR      r0,[sp,#0x34]
000e7e  eb000280          ADD      r2,r0,r0,LSL #2
000e82  9814              LDR      r0,[sp,#0x50]
000e84  eb000042          ADD      r0,r0,r2,LSL #1
000e88  4a4f              LDR      r2,|L2.4040|
000e8a  f8421020          STR      r1,[r2,r0,LSL #2]
;;;2128                           SWR_array[i*10+index]=Show_Parameter.Standing_wave_ratio;
000e8e  4848              LDR      r0,|L2.4016|
000e90  6901              LDR      r1,[r0,#0x10]  ; Show_Parameter
000e92  980d              LDR      r0,[sp,#0x34]
000e94  eb000280          ADD      r2,r0,r0,LSL #2
000e98  9814              LDR      r0,[sp,#0x50]
000e9a  eb000042          ADD      r0,r0,r2,LSL #1
000e9e  4a4b              LDR      r2,|L2.4044|
000ea0  f8421020          STR      r1,[r2,r0,LSL #2]
;;;2129                           App_printf("Forward_power=%f \r\n",z[i*10+index]);
000ea4  980d              LDR      r0,[sp,#0x34]
000ea6  eb000180          ADD      r1,r0,r0,LSL #2
000eaa  9814              LDR      r0,[sp,#0x50]
000eac  eb000041          ADD      r0,r0,r1,LSL #1
000eb0  4944              LDR      r1,|L2.4036|
000eb2  f8510020          LDR      r0,[r1,r0,LSL #2]
000eb6  9009              STR      r0,[sp,#0x24]
000eb8  f7fffffe          BL       __aeabi_f2d
000ebc  4602              MOV      r2,r0
000ebe  460b              MOV      r3,r1
000ec0  e9cd010a          STRD     r0,r1,[sp,#0x28]
000ec4  a042              ADR      r0,|L2.4048|
000ec6  f7fffffe          BL       App_printf
;;;2130                           App_printf("Reverse_power=%f \r\n",f[i*10+index]);
000eca  980d              LDR      r0,[sp,#0x34]
000ecc  eb000180          ADD      r1,r0,r0,LSL #2
000ed0  9814              LDR      r0,[sp,#0x50]
000ed2  eb000041          ADD      r0,r0,r1,LSL #1
000ed6  493c              LDR      r1,|L2.4040|
000ed8  f8510020          LDR      r0,[r1,r0,LSL #2]
000edc  9009              STR      r0,[sp,#0x24]
000ede  f7fffffe          BL       __aeabi_f2d
000ee2  4602              MOV      r2,r0
000ee4  460b              MOV      r3,r1
000ee6  e9cd010a          STRD     r0,r1,[sp,#0x28]
000eea  a03e              ADR      r0,|L2.4068|
000eec  f7fffffe          BL       App_printf
;;;2131                           App_printf("Standing_wave_ratio=%f \r\n",SWR_array[i*10+index]);
000ef0  980d              LDR      r0,[sp,#0x34]
000ef2  eb000180          ADD      r1,r0,r0,LSL #2
000ef6  9814              LDR      r0,[sp,#0x50]
000ef8  eb000041          ADD      r0,r0,r1,LSL #1
000efc  4933              LDR      r1,|L2.4044|
000efe  f8510020          LDR      r0,[r1,r0,LSL #2]
000f02  9009              STR      r0,[sp,#0x24]
000f04  f7fffffe          BL       __aeabi_f2d
000f08  4602              MOV      r2,r0
000f0a  460b              MOV      r3,r1
000f0c  e9cd010a          STRD     r0,r1,[sp,#0x28]
000f10  a039              ADR      r0,|L2.4088|
000f12  f7fffffe          BL       App_printf
;;;2132                           Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
000f16  2118              MOVS     r1,#0x18
000f18  483e              LDR      r0,|L2.4116|
000f1a  f7fffffe          BL       Pre_EmissionSend
;;;2133                           if(Advance_run_command(xTicksToWait)!=1)
000f1e  9813              LDR      r0,[sp,#0x4c]
000f20  f7fffffe          BL       Advance_run_command
000f24  2801              CMP      r0,#1
000f26  d000              BEQ      |L2.3882|
;;;2134                           {
;;;2135                               goto finish;
000f28  e03c              B        |L2.4004|
                  |L2.3882|
;;;2136                           }
;;;2137                           else
;;;2138                           {
;;;2139                               if(i!=SIZE-1)
000f2a  9812              LDR      r0,[sp,#0x48]
000f2c  1e40              SUBS     r0,r0,#1
000f2e  990d              LDR      r1,[sp,#0x34]
000f30  4288              CMP      r0,r1
000f32  d003              BEQ      |L2.3900|
;;;2140                               {
;;;2141                                   vTaskDelay(10000);//延时10s之后开机
000f34  f2427010          MOV      r0,#0x2710
000f38  f7fffffe          BL       vTaskDelay
                  |L2.3900|
;;;2142                               }
;;;2143                               if(i<SIZE-1)
000f3c  9812              LDR      r0,[sp,#0x48]
000f3e  1e40              SUBS     r0,r0,#1
000f40  990d              LDR      r1,[sp,#0x34]
000f42  4288              CMP      r0,r1
000f44  dd03              BLE      |L2.3918|
;;;2144                               {
;;;2145                                   Sys_State.Sweeping=1;//正在扫频
000f46  2001              MOVS     r0,#1
000f48  4933              LDR      r1,|L2.4120|
000f4a  7288              STRB     r0,[r1,#0xa]
000f4c  e021              B        |L2.3986|
                  |L2.3918|
;;;2146                               }
;;;2147                               else if(i==SIZE-1)
000f4e  9812              LDR      r0,[sp,#0x48]
000f50  1e40              SUBS     r0,r0,#1
000f52  990d              LDR      r1,[sp,#0x34]
000f54  4288              CMP      r0,r1
000f56  d11c              BNE      |L2.3986|
;;;2148                               {
;;;2149                                   get_better_SWR(SWR_array,index);//获取更佳驻波比，置位不合理驻波比包的字段
000f58  481c              LDR      r0,|L2.4044|
000f5a  9914              LDR      r1,[sp,#0x50]
000f5c  f7fffffe          BL       get_better_SWR
;;;2150                                   if(index==9)   //2
000f60  9814              LDR      r0,[sp,#0x50]
000f62  2809              CMP      r0,#9
000f64  d115              BNE      |L2.3986|
;;;2151                                   {
;;;2152                                       //judge_fre_segment();//置位驻波比包的字段
;;;2153                                       if(InternalFlash_SaveData_2()==1)
000f66  f7fffffe          BL       InternalFlash_SaveData_2
000f6a  2801              CMP      r0,#1
000f6c  d108              BNE      |L2.3968|
;;;2154                                       {
;;;2155                                           Flash2_to_AcceptAPP();
000f6e  f7fffffe          BL       Flash2_to_AcceptAPP
;;;2156                                           App_printf("flash save successed!\r\n");
000f72  a02a              ADR      r0,|L2.4124|
000f74  f7fffffe          BL       App_printf
;;;2157                                           clean_sweeping=1;
000f78  2001              MOVS     r0,#1
000f7a  492e              LDR      r1,|L2.4148|
000f7c  7008              STRB     r0,[r1,#0]
000f7e  e008              B        |L2.3986|
                  |L2.3968|
;;;2158                                       }
;;;2159                                       else
;;;2160                                       {
;;;2161                                           App_printf("flash save error!\r\n");
000f80  a02d              ADR      r0,|L2.4152|
000f82  f7fffffe          BL       App_printf
;;;2162                                           clean_sweeping=1;
000f86  2001              MOVS     r0,#1
000f88  492a              LDR      r1,|L2.4148|
000f8a  7008              STRB     r0,[r1,#0]
000f8c  e001              B        |L2.3986|
                  |L2.3982|
;;;2163                                       }
;;;2164   //									Sys_State.Sweeping=0;
;;;2165   //									Sys_State.Already_Swept=1;//扫频结束
;;;2166                                   }
;;;2167                               }
;;;2168                           }
;;;2169                       }
;;;2170                   }
;;;2171                   else
;;;2172                   {
;;;2173                       goto finish;
000f8e  e009              B        |L2.4004|
                  |L2.3984|
;;;2174                   }
;;;2175               }
;;;2176               else
;;;2177               {
;;;2178                   goto finish;
000f90  e008              B        |L2.4004|
                  |L2.3986|
000f92  980d              LDR      r0,[sp,#0x34]         ;1881
000f94  1c40              ADDS     r0,r0,#1              ;1881
000f96  900d              STR      r0,[sp,#0x34]         ;1881
                  |L2.3992|
000f98  9912              LDR      r1,[sp,#0x48]         ;1881
000f9a  980d              LDR      r0,[sp,#0x34]         ;1881
000f9c  4288              CMP      r0,r1                 ;1881
000f9e  f6ffa879          BLT      |L2.148|
                  |L2.4002|
;;;2179               }
;;;2180           }
;;;2181       }
;;;2182   finish:
000fa2  bf00              NOP      
                  |L2.4004|
;;;2183   
;;;2184   
;;;2185       return 0;
000fa4  2000              MOVS     r0,#0
;;;2186   }
000fa6  b015              ADD      sp,sp,#0x54
000fa8  bd00              POP      {pc}
;;;2187   
                          ENDP

000faa  0000              DCW      0x0000
                  |L2.4012|
                          DCD      Work_paraBack
                  |L2.4016|
                          DCD      Show_Parameter
                  |L2.4020|
                          DCD      0x44bb8000
                  |L2.4024|
                          DCD      0xcccccccd
                  |L2.4028|
                          DCD      0x3ffccccc
                  |L2.4032|
                          DCD      0x42c80000
                  |L2.4036|
                          DCD      z
                  |L2.4040|
                          DCD      f
                  |L2.4044|
                          DCD      SWR_array
                  |L2.4048|
000fd0  466f7277          DCB      "Forward_power=%f \r\n",0
000fd4  6172645f
000fd8  706f7765
000fdc  723d2566
000fe0  200d0a00
                  |L2.4068|
000fe4  52657665          DCB      "Reverse_power=%f \r\n",0
000fe8  7273655f
000fec  706f7765
000ff0  723d2566
000ff4  200d0a00
                  |L2.4088|
000ff8  5374616e          DCB      "Standing_wave_ratio=%f \r\n",0
000ffc  64696e67
001000  5f776176
001004  655f7261
001008  74696f3d
00100c  2566200d
001010  0a00    
001012  00                DCB      0
001013  00                DCB      0
                  |L2.4116|
                          DCD      EmissionCmd
                  |L2.4120|
                          DCD      Sys_State
                  |L2.4124|
00101c  666c6173          DCB      "flash save successed!\r\n",0
001020  68207361
001024  76652073
001028  75636365
00102c  73736564
001030  210d0a00
                  |L2.4148|
                          DCD      clean_sweeping
                  |L2.4152|
001038  666c6173          DCB      "flash save error!\r\n",0
00103c  68207361
001040  76652065
001044  72726f72
001048  210d0a00

                          AREA ||i.Is_available_data||, CODE, READONLY, ALIGN=2

                  Is_available_data PROC
;;;1777    */
;;;1778   static int Is_available_data(const uint8_t * Msg)
000000  b538              PUSH     {r3-r5,lr}
;;;1779   {
000002  4604              MOV      r4,r0
;;;1780       volatile unsigned int j = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;1781       uint8_t check;
;;;1782       for( j=0; j<46; j++)   //j+1 所以j<31
000008  9000              STR      r0,[sp,#0]
00000a  e00c              B        |L3.38|
                  |L3.12|
;;;1783       {
;;;1784           if(Msg[j]==0x7F && Msg[j+1]==0xFE)
00000c  9800              LDR      r0,[sp,#0]
00000e  5c20              LDRB     r0,[r4,r0]
000010  287f              CMP      r0,#0x7f
000012  d105              BNE      |L3.32|
000014  9800              LDR      r0,[sp,#0]
000016  1c40              ADDS     r0,r0,#1
000018  5c20              LDRB     r0,[r4,r0]
00001a  28fe              CMP      r0,#0xfe
00001c  d100              BNE      |L3.32|
;;;1785           {
;;;1786               break;
00001e  e005              B        |L3.44|
                  |L3.32|
000020  9800              LDR      r0,[sp,#0]            ;1782
000022  1c40              ADDS     r0,r0,#1              ;1782
000024  9000              STR      r0,[sp,#0]            ;1782
                  |L3.38|
000026  9800              LDR      r0,[sp,#0]            ;1782
000028  282e              CMP      r0,#0x2e              ;1782
00002a  d3ef              BCC      |L3.12|
                  |L3.44|
00002c  bf00              NOP      
;;;1787           }
;;;1788       }
;;;1789       if(j>=30)   //19
00002e  9800              LDR      r0,[sp,#0]
000030  281e              CMP      r0,#0x1e
000032  d301              BCC      |L3.56|
;;;1790       {
;;;1791           //如果有7F FE，那么后面还将有13个字节，所以j不能大于等于19，这样的话后面的数据肯定是不全或者不对的
;;;1792           //所以直接返回0 代表失败
;;;1793           //正常情况是一来就有数据，为了防止有时电平或者其他不可控原因，前面出现的\0,这样也有冗余作用
;;;1794           //可以做到数据即使不是一开始就来真实的帧头，只要在缓存区长度内程序就可以正常运行
;;;1795           return 0;
000034  2000              MOVS     r0,#0
                  |L3.54|
;;;1796       }
;;;1797       /*运行到这里证明找到了帧头*/
;;;1798       /*此时 j下标= 0xFE*///错了，这里下标是0X7F
;;;1799       if(Msg[j+14]==0xFD)
;;;1800       {
;;;1801           /*运行到这里证明找到了帧尾*/
;;;1802   
;;;1803           //数据异或校验
;;;1804           check=Msg[j];
;;;1805           for(int i=j+1; i<j+13; i++)
;;;1806           {
;;;1807               check ^=Msg[i];
;;;1808           }
;;;1809           if(check==Msg[j+13])
;;;1810           {
;;;1811               /*运行到这里已经校验通过了*/
;;;1812               j=j+2;//移动给两个字节的帧头数据,此时是需要的数据位了
;;;1813               memcpy((char *)&Respond_Cmd+2,Msg+j,11);
;;;1814               memcpy((char *)&Respond_Cmd2,Msg+j+11+2,13);
;;;1815               memcpy((char *)&Respond_Cmd3,Msg+j+11+2+13+2,13);
;;;1816               return 1;
;;;1817           }
;;;1818       }
;;;1819       if(Msg[j+4]==0xFD)
;;;1820       {
;;;1821           if(Msg[j+3]==0x6F && Msg[j+2]==0xEE)
;;;1822           {
;;;1823               //设置出错
;;;1824               return -1;
;;;1825           }
;;;1826       }
;;;1827       if(Msg[j+5]==0xFD)
;;;1828       {
;;;1829           if(Msg[j+4]==0xEF && Msg[j+3]==0xEE && Msg[j+2]==0xEE)
;;;1830           {
;;;1831               //发射机报警，自动停止发射
;;;1832               return -2;
;;;1833           }
;;;1834       }
;;;1835       return 0;
;;;1836   }
000036  bd38              POP      {r3-r5,pc}
                  |L3.56|
000038  9800              LDR      r0,[sp,#0]            ;1799
00003a  300e              ADDS     r0,r0,#0xe            ;1799
00003c  5c20              LDRB     r0,[r4,r0]            ;1799
00003e  28fd              CMP      r0,#0xfd              ;1799
000040  d130              BNE      |L3.164|
000042  9800              LDR      r0,[sp,#0]            ;1804
000044  5c25              LDRB     r5,[r4,r0]            ;1804
000046  9900              LDR      r1,[sp,#0]            ;1805
000048  1c48              ADDS     r0,r1,#1              ;1805
00004a  e002              B        |L3.82|
                  |L3.76|
00004c  5c21              LDRB     r1,[r4,r0]            ;1807
00004e  404d              EORS     r5,r5,r1              ;1807
000050  1c40              ADDS     r0,r0,#1              ;1805
                  |L3.82|
000052  9900              LDR      r1,[sp,#0]            ;1805
000054  310d              ADDS     r1,r1,#0xd            ;1805
000056  4288              CMP      r0,r1                 ;1805
000058  d3f8              BCC      |L3.76|
00005a  9800              LDR      r0,[sp,#0]            ;1809
00005c  300d              ADDS     r0,r0,#0xd            ;1809
00005e  5c20              LDRB     r0,[r4,r0]            ;1809
000060  42a8              CMP      r0,r5                 ;1809
000062  d11f              BNE      |L3.164|
000064  9800              LDR      r0,[sp,#0]            ;1812
000066  1c80              ADDS     r0,r0,#2              ;1812
000068  9000              STR      r0,[sp,#0]            ;1812
00006a  9800              LDR      r0,[sp,#0]            ;1813
00006c  4420              ADD      r0,r0,r4              ;1813
00006e  4923              LDR      r1,|L3.252|
000070  6802              LDR      r2,[r0,#0]            ;1813
000072  600a              STR      r2,[r1,#0]            ;1813  ; Respond_Cmd
000074  6842              LDR      r2,[r0,#4]            ;1813
000076  604a              STR      r2,[r1,#4]            ;1813  ; Respond_Cmd
000078  8902              LDRH     r2,[r0,#8]            ;1813
00007a  810a              STRH     r2,[r1,#8]            ;1813
00007c  7a80              LDRB     r0,[r0,#0xa]          ;1813
00007e  7288              STRB     r0,[r1,#0xa]          ;1813
000080  9800              LDR      r0,[sp,#0]            ;1814
000082  4420              ADD      r0,r0,r4              ;1814
000084  f100010d          ADD      r1,r0,#0xd            ;1814
000088  220d              MOVS     r2,#0xd               ;1814
00008a  481d              LDR      r0,|L3.256|
00008c  f7fffffe          BL       __aeabi_memcpy
000090  9800              LDR      r0,[sp,#0]            ;1815
000092  4420              ADD      r0,r0,r4              ;1815
000094  f100011c          ADD      r1,r0,#0x1c           ;1815
000098  220d              MOVS     r2,#0xd               ;1815
00009a  481a              LDR      r0,|L3.260|
00009c  f7fffffe          BL       __aeabi_memcpy
0000a0  2001              MOVS     r0,#1                 ;1816
0000a2  e7c8              B        |L3.54|
                  |L3.164|
0000a4  9800              LDR      r0,[sp,#0]            ;1819
0000a6  1d00              ADDS     r0,r0,#4              ;1819
0000a8  5c20              LDRB     r0,[r4,r0]            ;1819
0000aa  28fd              CMP      r0,#0xfd              ;1819
0000ac  d10c              BNE      |L3.200|
0000ae  9800              LDR      r0,[sp,#0]            ;1821
0000b0  1cc0              ADDS     r0,r0,#3              ;1821
0000b2  5c20              LDRB     r0,[r4,r0]            ;1821
0000b4  286f              CMP      r0,#0x6f              ;1821
0000b6  d107              BNE      |L3.200|
0000b8  9800              LDR      r0,[sp,#0]            ;1821
0000ba  1c80              ADDS     r0,r0,#2              ;1821
0000bc  5c20              LDRB     r0,[r4,r0]            ;1821
0000be  28ee              CMP      r0,#0xee              ;1821
0000c0  d102              BNE      |L3.200|
0000c2  f04f30ff          MOV      r0,#0xffffffff        ;1824
0000c6  e7b6              B        |L3.54|
                  |L3.200|
0000c8  9800              LDR      r0,[sp,#0]            ;1827
0000ca  1d40              ADDS     r0,r0,#5              ;1827
0000cc  5c20              LDRB     r0,[r4,r0]            ;1827
0000ce  28fd              CMP      r0,#0xfd              ;1827
0000d0  d111              BNE      |L3.246|
0000d2  9800              LDR      r0,[sp,#0]            ;1829
0000d4  1d00              ADDS     r0,r0,#4              ;1829
0000d6  5c20              LDRB     r0,[r4,r0]            ;1829
0000d8  28ef              CMP      r0,#0xef              ;1829
0000da  d10c              BNE      |L3.246|
0000dc  9800              LDR      r0,[sp,#0]            ;1829
0000de  1cc0              ADDS     r0,r0,#3              ;1829
0000e0  5c20              LDRB     r0,[r4,r0]            ;1829
0000e2  28ee              CMP      r0,#0xee              ;1829
0000e4  d107              BNE      |L3.246|
0000e6  9800              LDR      r0,[sp,#0]            ;1829
0000e8  1c80              ADDS     r0,r0,#2              ;1829
0000ea  5c20              LDRB     r0,[r4,r0]            ;1829
0000ec  28ee              CMP      r0,#0xee              ;1829
0000ee  d102              BNE      |L3.246|
0000f0  f06f0001          MVN      r0,#1                 ;1832
0000f4  e79f              B        |L3.54|
                  |L3.246|
0000f6  2000              MOVS     r0,#0                 ;1835
0000f8  e79d              B        |L3.54|
;;;1837   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L3.252|
                          DCD      Respond_Cmd+0x2
                  |L3.256|
                          DCD      Respond_Cmd2
                  |L3.260|
                          DCD      Respond_Cmd3

                          AREA ||i.MT2000_Wait_Ack||, CODE, READONLY, ALIGN=2

                  MT2000_Wait_Ack PROC
;;;1743    */
;;;1744   int MT2000_Wait_Ack(void)
000000  b538              PUSH     {r3-r5,lr}
;;;1745   {
;;;1746       EventBits_t uxBits;
;;;1747   	const TickType_t delay_time = 500; /* 最大延迟500ms */
000002  f44f75fa          MOV      r5,#0x1f4
;;;1748   	
;;;1749       uxBits = xEventGroupWaitBits(
000006  4628              MOV      r0,r5
000008  2300              MOVS     r3,#0
00000a  2201              MOVS     r2,#1
00000c  2107              MOVS     r1,#7
00000e  9000              STR      r0,[sp,#0]
000010  480d              LDR      r0,|L4.72|
000012  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
000014  f7fffffe          BL       xEventGroupWaitBits
000018  4604              MOV      r4,r0
;;;1750                    xCreatedEventGroup,	/* 事件标志组句柄 */
;;;1751                    BIT_0|BIT_1|BIT_2,		/* 等待bit0或bit1或bit2被设置 */
;;;1752                    pdTRUE,				/* 退出前bit0和bit1被清除，这里是bit0和bit1都被设置才表示“退出”*/
;;;1753                    pdFALSE ,				/* 设置为pdFALSE 表示等待任一被设置都返回*/
;;;1754                    delay_time);			/* 等待延迟时间 */
;;;1755   
;;;1756       if((uxBits & BIT_0) == BIT_0)
00001a  f0040001          AND      r0,r4,#1
00001e  b108              CBZ      r0,|L4.36|
;;;1757       {
;;;1758           return 1;
000020  2001              MOVS     r0,#1
                  |L4.34|
;;;1759       }
;;;1760       else if((uxBits & BIT_1) == BIT_1)
;;;1761       {
;;;1762           return -1;
;;;1763       }
;;;1764       else if((uxBits & BIT_2) == BIT_2)
;;;1765       {
;;;1766           return -2;
;;;1767       }
;;;1768       else
;;;1769       {
;;;1770           App_printf("\r\n TIME OUT \r\n");
;;;1771           return 0;
;;;1772       }
;;;1773   }
000022  bd38              POP      {r3-r5,pc}
                  |L4.36|
000024  f0040002          AND      r0,r4,#2              ;1760
000028  2802              CMP      r0,#2                 ;1760
00002a  d101              BNE      |L4.48|
00002c  1ec0              SUBS     r0,r0,#3              ;1762
00002e  e7f8              B        |L4.34|
                  |L4.48|
000030  f0040004          AND      r0,r4,#4              ;1764
000034  2804              CMP      r0,#4                 ;1764
000036  d101              BNE      |L4.60|
000038  1f80              SUBS     r0,r0,#6              ;1766
00003a  e7f2              B        |L4.34|
                  |L4.60|
00003c  a003              ADR      r0,|L4.76|
00003e  f7fffffe          BL       App_printf
000042  2000              MOVS     r0,#0                 ;1771
000044  e7ed              B        |L4.34|
;;;1774   
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
                          DCD      xCreatedEventGroup
                  |L4.76|
00004c  0d0a2054          DCB      "\r\n TIME OUT \r\n",0
000050  494d4520
000054  4f555420
000058  0d0a00  
00005b  00                DCB      0

                          AREA ||i.MT2000_sendCommand||, CODE, READONLY, ALIGN=2

                  MT2000_sendCommand PROC
;;;1709    */
;;;1710   static int MT2000_sendCommand(const uint8_t *SendCommand,const int Len,TickType_t xTicksToWait)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1711   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;1712       EventBits_t uxBits;
;;;1713       memset(Emission_Rx,0,60);
000008  213c              MOVS     r1,#0x3c
00000a  4813              LDR      r0,|L5.88|
00000c  f7fffffe          BL       __aeabi_memclr4
;;;1714       comSendBuf(COM4,(uint8_t *)SendCommand,Len);
000010  b2b2              UXTH     r2,r6
000012  4629              MOV      r1,r5
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       comSendBuf
;;;1715       uxBits = xEventGroupWaitBits(
00001a  2300              MOVS     r3,#0
00001c  2201              MOVS     r2,#1
00001e  2107              MOVS     r1,#7
000020  480e              LDR      r0,|L5.92|
000022  9700              STR      r7,[sp,#0]
000024  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
000026  f7fffffe          BL       xEventGroupWaitBits
00002a  4604              MOV      r4,r0
;;;1716                    xCreatedEventGroup,   /* 事件标志组句柄 */
;;;1717                    BIT_0|BIT_1|BIT_2,   /* 等待bit0或bit1或bit2被设置 */
;;;1718                    pdTRUE,             /* 退出前bit0和bit1被清除，这里是bit0和bit1都被设置才表示“退出”*/
;;;1719                    pdFALSE ,          /* 设置为pdFALSE 表示等待任一被设置都返回*/
;;;1720                    xTicksToWait); 	 /* 等待延迟时间 */
;;;1721   
;;;1722       if((uxBits & BIT_0) == BIT_0)
00002c  f0040001          AND      r0,r4,#1
000030  b108              CBZ      r0,|L5.54|
;;;1723       {
;;;1724           return 1;
000032  2001              MOVS     r0,#1
                  |L5.52|
;;;1725       }
;;;1726       else if((uxBits & BIT_1) == BIT_1)
;;;1727       {
;;;1728           return -1;
;;;1729       }
;;;1730       else if((uxBits & BIT_2) == BIT_2)
;;;1731       {
;;;1732           return -2;
;;;1733       }
;;;1734       else
;;;1735       {
;;;1736           App_printf("\r\n TIME OUT \r\n");
;;;1737           return 0;
;;;1738       }
;;;1739   }
000034  bdf8              POP      {r3-r7,pc}
                  |L5.54|
000036  f0040002          AND      r0,r4,#2              ;1726
00003a  2802              CMP      r0,#2                 ;1726
00003c  d101              BNE      |L5.66|
00003e  1ec0              SUBS     r0,r0,#3              ;1728
000040  e7f8              B        |L5.52|
                  |L5.66|
000042  f0040004          AND      r0,r4,#4              ;1730
000046  2804              CMP      r0,#4                 ;1730
000048  d101              BNE      |L5.78|
00004a  1f80              SUBS     r0,r0,#6              ;1732
00004c  e7f2              B        |L5.52|
                  |L5.78|
00004e  a004              ADR      r0,|L5.96|
000050  f7fffffe          BL       App_printf
000054  2000              MOVS     r0,#0                 ;1737
000056  e7ed              B        |L5.52|
;;;1740   
                          ENDP

                  |L5.88|
                          DCD      Emission_Rx
                  |L5.92|
                          DCD      xCreatedEventGroup
                  |L5.96|
000060  0d0a2054          DCB      "\r\n TIME OUT \r\n",0
000064  494d4520
000068  4f555420
00006c  0d0a00  
00006f  00                DCB      0

                          AREA ||i.Pre_EmissionSend||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _scanf_int
                  Pre_EmissionSend PROC
;;;1488   */
;;;1489   void Pre_EmissionSend(EmissionCmd_t * item,uint8_t cmd,...)
000000  b40f              PUSH     {r0-r3}
;;;1490   {
000002  e92d41f0          PUSH     {r4-r8,lr}
000006  b088              SUB      sp,sp,#0x20
000008  4604              MOV      r4,r0
;;;1491       char p[10];
;;;1492       uint8_t Hex_buf[6];
;;;1493       uint8_t temp;
;;;1494       va_list arg_ptr;
;;;1495       va_start(arg_ptr,cmd);
00000a  a810              ADD      r0,sp,#0x40
00000c  9002              STR      r0,[sp,#8]
;;;1496       item->head=0x7F; //帧头
00000e  207f              MOVS     r0,#0x7f
000010  7020              STRB     r0,[r4,#0]
;;;1497   	
;;;1498   #if	NEW_PROTOCOL_EN
;;;1499   	MT2000_Tx.cmd = cmd;		//获取命令(为了兼容，唯一使用的地方就是run_command函数)
000012  f89d003c          LDRB     r0,[sp,#0x3c]
000016  49c0              LDR      r1,|L6.792|
000018  7008              STRB     r0,[r1,#0]
;;;1500   #endif	
;;;1501   	
;;;1502       switch(cmd)
00001a  f89d003c          LDRB     r0,[sp,#0x3c]
00001e  2844              CMP      r0,#0x44
000020  d07e              BEQ      |L6.288|
000022  dc0c              BGT      |L6.62|
000024  282b              CMP      r0,#0x2b
000026  d07c              BEQ      |L6.290|
000028  dc04              BGT      |L6.52|
00002a  280d              CMP      r0,#0xd
00002c  d07a              BEQ      |L6.292|
00002e  2818              CMP      r0,#0x18
                  |L6.48|
000030  d179              BNE      |L6.294|
000032  e105              B        |L6.576|
                  |L6.52|
000034  282d              CMP      r0,#0x2d
000036  d077              BEQ      |L6.296|
000038  2843              CMP      r0,#0x43
00003a  d1f9              BNE      |L6.48|
00003c  e0ca              B        |L6.468|
                  |L6.62|
00003e  2854              CMP      r0,#0x54
000040  d01e              BEQ      |L6.128|
000042  dc04              BGT      |L6.78|
000044  284d              CMP      r0,#0x4d
000046  d070              BEQ      |L6.298|
000048  2850              CMP      r0,#0x50
00004a  d1f1              BNE      |L6.48|
00004c  e0a4              B        |L6.408|
                  |L6.78|
00004e  2874              CMP      r0,#0x74
000050  d002              BEQ      |L6.88|
000052  28ce              CMP      r0,#0xce
000054  d1ec              BNE      |L6.48|
000056  e009              B        |L6.108|
                  |L6.88|
;;;1503       {
;;;1504   		case TUNING:
;;;1505   		{
;;;1506   			item->cmd.inquire=cmd;
000058  f89d003c          LDRB     r0,[sp,#0x3c]
00005c  7060              STRB     r0,[r4,#1]
;;;1507   			memset((void *)item->data,0,4);
00005e  2000              MOVS     r0,#0
000060  f8c40002          STR      r0,[r4,#2]
;;;1508   			App_printf("Emis//调谐\r\n");
000064  a0ad              ADR      r0,|L6.796|
000066  f7fffffe          BL       App_printf
;;;1509   			break;
00006a  e12b              B        |L6.708|
                  |L6.108|
;;;1510   		}
;;;1511   		case INQUIRE:
;;;1512   		{
;;;1513   			item->cmd.inquire=cmd;
00006c  f89d003c          LDRB     r0,[sp,#0x3c]
000070  7060              STRB     r0,[r4,#1]
;;;1514   			memset((void *)item->data,0,4);
000072  2000              MOVS     r0,#0
000074  f8c40002          STR      r0,[r4,#2]
;;;1515   			App_printf("Emis//查询\r\n");
000078  a0ac              ADR      r0,|L6.812|
00007a  f7fffffe          BL       App_printf
;;;1516   			break;
00007e  e121              B        |L6.708|
                  |L6.128|
;;;1517   		}
;;;1518   		case FREQUENCY:
;;;1519   		{
;;;1520   			item->cmd.frequency=cmd;
000080  f89d003c          LDRB     r0,[sp,#0x3c]
000084  7060              STRB     r0,[r4,#1]
;;;1521   			if(Sys_State.Sweeping==1)   //正在扫频
000086  48ad              LDR      r0,|L6.828|
000088  7a80              LDRB     r0,[r0,#0xa]  ; Sys_State
00008a  2801              CMP      r0,#1
00008c  d157              BNE      |L6.318|
;;;1522   			{
;;;1523   				double d_temp=va_arg(arg_ptr, double);
00008e  9802              LDR      r0,[sp,#8]
000090  1dc0              ADDS     r0,r0,#7
000092  f0200007          BIC      r0,r0,#7
000096  9002              STR      r0,[sp,#8]
000098  e9d07800          LDRD     r7,r8,[r0,#0]
00009c  9a02              LDR      r2,[sp,#8]
00009e  3208              ADDS     r2,r2,#8
0000a0  9202              STR      r2,[sp,#8]
;;;1524   
;;;1525   				sprintf(p,"%.6f",d_temp);//把小数转化成字符
0000a2  463a              MOV      r2,r7
0000a4  4643              MOV      r3,r8
0000a6  a1a6              ADR      r1,|L6.832|
0000a8  a805              ADD      r0,sp,#0x14
0000aa  f7fffffe          BL       __2sprintf
;;;1526   	//				for(int i=0;i<9;i++)
;;;1527   	//				{
;;;1528   	//					App_printf("%d ",p[i]);
;;;1529   	//				}
;;;1530   	//				App_printf("\r\n");
;;;1531   				uint8_t Integer;
;;;1532   				sscanf(p,"%02x",(unsigned int *)&Integer);//得到频率的整数部分
0000ae  aa01              ADD      r2,sp,#4
0000b0  a1a5              ADR      r1,|L6.840|
0000b2  a805              ADD      r0,sp,#0x14
0000b4  f7fffffe          BL       __0sscanf
;;;1533   				App_printf("%02x \r\n",Integer);
0000b8  f89d1004          LDRB     r1,[sp,#4]
0000bc  a0a4              ADR      r0,|L6.848|
0000be  f7fffffe          BL       App_printf
;;;1534   				if(Integer>=16)   //两位数
0000c2  f89d0004          LDRB     r0,[sp,#4]
0000c6  2810              CMP      r0,#0x10
0000c8  db12              BLT      |L6.240|
;;;1535   				{
;;;1536   					for(int i=0; i<2; i++)
0000ca  2600              MOVS     r6,#0
0000cc  e00d              B        |L6.234|
                  |L6.206|
;;;1537   					{
;;;1538   						sscanf(&p[3]+i*2,"%02x",(unsigned int *)(Hex_buf+i));
0000ce  a903              ADD      r1,sp,#0xc
0000d0  198a              ADDS     r2,r1,r6
0000d2  310b              ADDS     r1,r1,#0xb
0000d4  eb010046          ADD      r0,r1,r6,LSL #1
0000d8  a19b              ADR      r1,|L6.840|
0000da  f7fffffe          BL       __0sscanf
;;;1539   						App_printf("%02x ",Hex_buf[i]);//得到小数部分转化成HEX16进制，可以直接发送了
0000de  a803              ADD      r0,sp,#0xc
0000e0  5d81              LDRB     r1,[r0,r6]
0000e2  a09d              ADR      r0,|L6.856|
0000e4  f7fffffe          BL       App_printf
0000e8  1c76              ADDS     r6,r6,#1              ;1536
                  |L6.234|
0000ea  2e02              CMP      r6,#2                 ;1536
0000ec  dbef              BLT      |L6.206|
0000ee  e011              B        |L6.276|
                  |L6.240|
;;;1540   					}
;;;1541   				}
;;;1542   				else     //1位数
;;;1543   				{
;;;1544   					for(int i=0; i<2; i++)
0000f0  2600              MOVS     r6,#0
0000f2  e00d              B        |L6.272|
                  |L6.244|
;;;1545   					{
;;;1546   						sscanf(&p[2]+i*2,"%02x",(unsigned int *)(Hex_buf+i));
0000f4  a903              ADD      r1,sp,#0xc
0000f6  198a              ADDS     r2,r1,r6
0000f8  310a              ADDS     r1,r1,#0xa
0000fa  eb010046          ADD      r0,r1,r6,LSL #1
0000fe  a192              ADR      r1,|L6.840|
000100  f7fffffe          BL       __0sscanf
;;;1547   						App_printf("%02x ",Hex_buf[i]);//得到小数部分转化成HEX16进制，可以直接发送了
000104  a803              ADD      r0,sp,#0xc
000106  5d81              LDRB     r1,[r0,r6]
000108  a093              ADR      r0,|L6.856|
00010a  f7fffffe          BL       App_printf
00010e  1c76              ADDS     r6,r6,#1              ;1544
                  |L6.272|
000110  2e02              CMP      r6,#2                 ;1544
000112  dbef              BLT      |L6.244|
                  |L6.276|
;;;1548   					}
;;;1549   				}
;;;1550   				App_printf("\r\n");
000114  a092              ADR      r0,|L6.864|
000116  f7fffffe          BL       App_printf
;;;1551   				item->data[0]=Integer;//给出整数部分
00011a  f89d0004          LDRB     r0,[sp,#4]
00011e  e005              B        |L6.300|
                  |L6.288|
000120  e0a6              B        |L6.624|
                  |L6.290|
000122  e097              B        |L6.596|
                  |L6.292|
000124  e082              B        |L6.556|
                  |L6.294|
000126  e0c7              B        |L6.696|
                  |L6.296|
000128  e09b              B        |L6.610|
                  |L6.298|
00012a  e028              B        |L6.382|
                  |L6.300|
00012c  70a0              STRB     r0,[r4,#2]
;;;1552   				memcpy((void *)&item->data[1],Hex_buf,2);//小数部分赋值给激励器发送缓存区
00012e  1ca0              ADDS     r0,r4,#2
000130  f8bd100c          LDRH     r1,[sp,#0xc]
000134  f8a41003          STRH     r1,[r4,#3]
;;;1553   				item->data[3]=0;
000138  2100              MOVS     r1,#0
00013a  7161              STRB     r1,[r4,#5]
;;;1554   			}
00013c  e01b              B        |L6.374|
                  |L6.318|
;;;1555   			else
;;;1556   			{
;;;1557   				temp = va_arg(arg_ptr, int);
00013e  9802              LDR      r0,[sp,#8]
000140  f8101b04          LDRB     r1,[r0],#4
000144  b2cd              UXTB     r5,r1
000146  9002              STR      r0,[sp,#8]
;;;1558   				if(temp==1)   //固频
000148  2d01              CMP      r5,#1
00014a  d105              BNE      |L6.344|
;;;1559   				{
;;;1560   					memcpy((void *)item->data,Trans_open.Freq,4);
00014c  4885              LDR      r0,|L6.868|
00014e  f8d00005          LDR      r0,[r0,#5]  ; Trans_open
000152  f8c40002          STR      r0,[r4,#2]
000156  e00e              B        |L6.374|
                  |L6.344|
;;;1561   				}
;;;1562   				else if(temp==2)     //双频
000158  2d02              CMP      r5,#2
00015a  d105              BNE      |L6.360|
;;;1563   				{
;;;1564   					memcpy((void *)item->data,Trans_open.Freq+4,4);
00015c  4881              LDR      r0,|L6.868|
00015e  f8d00009          LDR      r0,[r0,#9]
000162  f8c40002          STR      r0,[r4,#2]
000166  e006              B        |L6.374|
                  |L6.360|
;;;1565   				}
;;;1566   				else if(temp==3)     //三频
000168  2d03              CMP      r5,#3
00016a  d104              BNE      |L6.374|
;;;1567   				{
;;;1568   					memcpy((void *)item->data,Trans_open.Freq+8,4);
00016c  487d              LDR      r0,|L6.868|
00016e  f8d0000d          LDR      r0,[r0,#0xd]
000172  f8c40002          STR      r0,[r4,#2]
                  |L6.374|
;;;1569   				}
;;;1570   			}
;;;1571   			App_printf("Emis//设置频率\r\n");
000176  a07c              ADR      r0,|L6.872|
000178  f7fffffe          BL       App_printf
;;;1572   			break;
00017c  e0a2              B        |L6.708|
                  |L6.382|
;;;1573   		}
;;;1574   		case SPECIES:
;;;1575   		{
;;;1576   			item->cmd.species=cmd;
00017e  f89d003c          LDRB     r0,[sp,#0x3c]
000182  7060              STRB     r0,[r4,#1]
;;;1577   			item->data[0]=0x03;//调频
000184  2003              MOVS     r0,#3
000186  70a0              STRB     r0,[r4,#2]
;;;1578   			memset((void *)&item->data[1],0,3);
000188  2100              MOVS     r1,#0
00018a  f8a41003          STRH     r1,[r4,#3]
00018e  7161              STRB     r1,[r4,#5]
;;;1579   			MT2000_Tx.method = 'F';		//FM
000190  2046              MOVS     r0,#0x46
000192  4961              LDR      r1,|L6.792|
000194  70c8              STRB     r0,[r1,#3]
;;;1580   			break;
000196  e095              B        |L6.708|
                  |L6.408|
;;;1581   		}
;;;1582   		case POWER_LEVEL:
;;;1583   		{
;;;1584   			item->cmd.power_level=cmd;
000198  f89d003c          LDRB     r0,[sp,#0x3c]
00019c  7060              STRB     r0,[r4,#1]
;;;1585   			temp = va_arg(arg_ptr, int);
00019e  9802              LDR      r0,[sp,#8]
0001a0  f8101b04          LDRB     r1,[r0],#4
0001a4  b2cd              UXTB     r5,r1
0001a6  9002              STR      r0,[sp,#8]
;;;1586   			if(temp==4)   //4分之1
0001a8  2d04              CMP      r5,#4
0001aa  d102              BNE      |L6.434|
;;;1587   			{
;;;1588   				item->data[0]=0x02;
0001ac  2002              MOVS     r0,#2
0001ae  70a0              STRB     r0,[r4,#2]
0001b0  e008              B        |L6.452|
                  |L6.434|
;;;1589   			}
;;;1590   			else if(temp==2)     //2分之1
0001b2  2d02              CMP      r5,#2
0001b4  d102              BNE      |L6.444|
;;;1591   			{
;;;1592   				item->data[0]=0x01;
0001b6  2001              MOVS     r0,#1
0001b8  70a0              STRB     r0,[r4,#2]
0001ba  e003              B        |L6.452|
                  |L6.444|
;;;1593   			}
;;;1594   			else if(temp==1)     //全功率
0001bc  2d01              CMP      r5,#1
0001be  d101              BNE      |L6.452|
;;;1595   			{
;;;1596   				item->data[0]=0x00;
0001c0  2000              MOVS     r0,#0
0001c2  70a0              STRB     r0,[r4,#2]
                  |L6.452|
;;;1597   			}
;;;1598   			memset((void *)&item->data[1],0,3);
0001c4  2100              MOVS     r1,#0
0001c6  f8a41003          STRH     r1,[r4,#3]
0001ca  7161              STRB     r1,[r4,#5]
;;;1599   			App_printf("Emis//设置功率为：\r\n");
0001cc  a06b              ADR      r0,|L6.892|
0001ce  f7fffffe          BL       App_printf
;;;1600   			break;
0001d2  e077              B        |L6.708|
                  |L6.468|
;;;1601   		}
;;;1602   		case CHANNEL:
;;;1603   		{
;;;1604   			item->cmd.channel=cmd;
0001d4  f89d003c          LDRB     r0,[sp,#0x3c]
0001d8  7060              STRB     r0,[r4,#1]
;;;1605   			temp = va_arg(arg_ptr, int);
0001da  9802              LDR      r0,[sp,#8]
0001dc  f8101b04          LDRB     r1,[r0],#4
0001e0  b2cd              UXTB     r5,r1
0001e2  9002              STR      r0,[sp,#8]
;;;1606   			//使用那个全局变量中的信道
;;;1607   			//	if(g_fuc_cod[0]==0x02&&g_fuc_cod[1]==0x01)//查询时的功能码
;;;1608   			//	{
;;;1609   			//		item->data[0]=Working_paramet.Channel[0];//查询时的信道
;;;1610   			//		}
;;;1611   			//		else if(g_fuc_cod[0]==0x03&&g_fuc_cod[1]==0x01)//发射时的功能码
;;;1612   			//		{
;;;1613   			if(temp==1)   //固频
0001e4  2d01              CMP      r5,#1
0001e6  d103              BNE      |L6.496|
;;;1614   			{
;;;1615   				item->data[0]=Trans_open.Channel[0];//查询时的信道
0001e8  485e              LDR      r0,|L6.868|
0001ea  7880              LDRB     r0,[r0,#2]  ; Trans_open
0001ec  70a0              STRB     r0,[r4,#2]
0001ee  e00d              B        |L6.524|
                  |L6.496|
;;;1616   			}
;;;1617   			else if(temp==2)     //双频
0001f0  2d02              CMP      r5,#2
0001f2  d103              BNE      |L6.508|
;;;1618   			{
;;;1619   				item->data[0]=Trans_open.Channel[1];//查询时的信道
0001f4  485b              LDR      r0,|L6.868|
0001f6  78c0              LDRB     r0,[r0,#3]
0001f8  70a0              STRB     r0,[r4,#2]
0001fa  e007              B        |L6.524|
                  |L6.508|
;;;1620   			}
;;;1621   			else if(temp==3)     //三频
0001fc  2d03              CMP      r5,#3
0001fe  d103              BNE      |L6.520|
;;;1622   			{
;;;1623   				item->data[0]=Trans_open.Channel[2];//查询时的信道
000200  4858              LDR      r0,|L6.868|
000202  7900              LDRB     r0,[r0,#4]
000204  70a0              STRB     r0,[r4,#2]
000206  e001              B        |L6.524|
                  |L6.520|
;;;1624   			}
;;;1625   			else     //扫频信道给1
;;;1626   			{
;;;1627   				item->data[0]=0x01;//扫频时的信道，默认1信道
000208  2001              MOVS     r0,#1
00020a  70a0              STRB     r0,[r4,#2]
                  |L6.524|
;;;1628   			}
;;;1629   			//	}
;;;1630   			memset((void *)&item->data[1],0,3);
00020c  2100              MOVS     r1,#0
00020e  f8a41003          STRH     r1,[r4,#3]
000212  7161              STRB     r1,[r4,#5]
;;;1631   			App_printf("Emis//信道调用\r\n");
000214  a05f              ADR      r0,|L6.916|
000216  f7fffffe          BL       App_printf
;;;1632   			
;;;1633   			MT2000_Tx.channel[0] = '0';	//信道01
00021a  2030              MOVS     r0,#0x30
00021c  493e              LDR      r1,|L6.792|
00021e  7148              STRB     r0,[r1,#5]
;;;1634   			MT2000_Tx.channel[1] = '1';
000220  2131              MOVS     r1,#0x31
000222  483d              LDR      r0,|L6.792|
000224  7181              STRB     r1,[r0,#6]
;;;1635   			MT2000_Tx.channel[2] = '\0';
000226  2100              MOVS     r1,#0
000228  71c1              STRB     r1,[r0,#7]
;;;1636   			break;
00022a  e04b              B        |L6.708|
                  |L6.556|
;;;1637   		}
;;;1638   		case EMISSION:
;;;1639   		{
;;;1640   			item->cmd.emission=cmd;
00022c  f89d003c          LDRB     r0,[sp,#0x3c]
000230  7060              STRB     r0,[r4,#1]
;;;1641   			memset((void *)item->data,0,4);
000232  2000              MOVS     r0,#0
000234  f8c40002          STR      r0,[r4,#2]
;;;1642   			App_printf("Emis//发射\r\n");
000238  a05b              ADR      r0,|L6.936|
00023a  f7fffffe          BL       App_printf
;;;1643   			break;
00023e  e041              B        |L6.708|
                  |L6.576|
;;;1644   		}
;;;1645   		case STOP:
;;;1646   		{
;;;1647   			item->cmd.stop=cmd;
000240  f89d003c          LDRB     r0,[sp,#0x3c]
000244  7060              STRB     r0,[r4,#1]
;;;1648   			memset((void *)item->data,0,4);
000246  2000              MOVS     r0,#0
000248  f8c40002          STR      r0,[r4,#2]
;;;1649   			App_printf("Emis//停止发射\r\n");
00024c  a05a              ADR      r0,|L6.952|
00024e  f7fffffe          BL       App_printf
;;;1650   			break;
000252  e037              B        |L6.708|
                  |L6.596|
;;;1651   		}
;;;1652   		case Gain_plus:
;;;1653   		{
;;;1654   			item->cmd.gain_plus=cmd;
000254  f89d003c          LDRB     r0,[sp,#0x3c]
000258  7060              STRB     r0,[r4,#1]
;;;1655   			memset((void *)item->data,0,4);
00025a  2000              MOVS     r0,#0
00025c  f8c40002          STR      r0,[r4,#2]
;;;1656   			break;
000260  e030              B        |L6.708|
                  |L6.610|
;;;1657   		}
;;;1658   		case Gain_reduction:
;;;1659   		{
;;;1660   			item->cmd.gain_reduction=cmd;
000262  f89d003c          LDRB     r0,[sp,#0x3c]
000266  7060              STRB     r0,[r4,#1]
;;;1661   			memset((void *)item->data,0,4);
000268  2000              MOVS     r0,#0
00026a  f8c40002          STR      r0,[r4,#2]
;;;1662   			break;
00026e  e029              B        |L6.708|
                  |L6.624|
;;;1663   		}
;;;1664   		case MODE:
;;;1665   		{
;;;1666   			item->cmd.mode=cmd;
000270  f89d003c          LDRB     r0,[sp,#0x3c]
000274  7060              STRB     r0,[r4,#1]
;;;1667   			temp = va_arg(arg_ptr, int);
000276  9802              LDR      r0,[sp,#8]
000278  f8101b04          LDRB     r1,[r0],#4
00027c  b2cd              UXTB     r5,r1
00027e  9002              STR      r0,[sp,#8]
;;;1668   			if(temp==1)
000280  2d01              CMP      r5,#1
000282  d105              BNE      |L6.656|
;;;1669   			{
;;;1670   				item->data[0]=0x01;
000284  2001              MOVS     r0,#1
000286  70a0              STRB     r0,[r4,#2]
;;;1671   				MT2000_Tx.mode = '1';
000288  2031              MOVS     r0,#0x31
00028a  4923              LDR      r1,|L6.792|
00028c  7088              STRB     r0,[r1,#2]
00028e  e00e              B        |L6.686|
                  |L6.656|
;;;1672   			}
;;;1673   			else if(temp==2)
000290  2d02              CMP      r5,#2
000292  d105              BNE      |L6.672|
;;;1674   			{
;;;1675   				item->data[0]=0x02;
000294  2002              MOVS     r0,#2
000296  70a0              STRB     r0,[r4,#2]
;;;1676   				MT2000_Tx.mode = '2';
000298  2032              MOVS     r0,#0x32
00029a  491f              LDR      r1,|L6.792|
00029c  7088              STRB     r0,[r1,#2]
00029e  e006              B        |L6.686|
                  |L6.672|
;;;1677   			}
;;;1678   			else if(temp==3)
0002a0  2d03              CMP      r5,#3
0002a2  d104              BNE      |L6.686|
;;;1679   			{
;;;1680   				item->data[0]=0x03;
0002a4  2003              MOVS     r0,#3
0002a6  70a0              STRB     r0,[r4,#2]
;;;1681   				MT2000_Tx.mode = '3';
0002a8  2033              MOVS     r0,#0x33
0002aa  491b              LDR      r1,|L6.792|
0002ac  7088              STRB     r0,[r1,#2]
                  |L6.686|
;;;1682   			}
;;;1683   			memset((void *)&item->data[1],0,3);
0002ae  2100              MOVS     r1,#0
0002b0  f8a41003          STRH     r1,[r4,#3]
0002b4  7161              STRB     r1,[r4,#5]
;;;1684   			break;
0002b6  e005              B        |L6.708|
                  |L6.696|
;;;1685   		}
;;;1686   		default :
;;;1687   		{
;;;1688   			item->cmd.inquire=0;//清零
0002b8  2000              MOVS     r0,#0
0002ba  7060              STRB     r0,[r4,#1]
;;;1689   			App_printf("参数错误!\r\n");
0002bc  a043              ADR      r0,|L6.972|
0002be  f7fffffe          BL       App_printf
;;;1690   			break;
0002c2  bf00              NOP      
                  |L6.708|
0002c4  bf00              NOP                            ;1509
;;;1691   		}
;;;1692       }
;;;1693       //帧尾  获取异或值
;;;1694       item->tail=item->head^item->cmd.inquire^item->data[0]^item->data[1]^item->data[2]^item->data[3];
0002c6  7820              LDRB     r0,[r4,#0]
0002c8  7861              LDRB     r1,[r4,#1]
0002ca  4048              EORS     r0,r0,r1
0002cc  78a1              LDRB     r1,[r4,#2]
0002ce  4048              EORS     r0,r0,r1
0002d0  78e1              LDRB     r1,[r4,#3]
0002d2  4048              EORS     r0,r0,r1
0002d4  7921              LDRB     r1,[r4,#4]
0002d6  4048              EORS     r0,r0,r1
0002d8  7961              LDRB     r1,[r4,#5]
0002da  4048              EORS     r0,r0,r1
0002dc  71a0              STRB     r0,[r4,#6]
;;;1695       memcpy(Emission_Tx,&EmissionCmd,sizeof(EmissionCmd));
0002de  483e              LDR      r0,|L6.984|
0002e0  493e              LDR      r1,|L6.988|
0002e2  680a              LDR      r2,[r1,#0]  ; EmissionCmd
0002e4  6002              STR      r2,[r0,#0]  ; Emission_Tx
0002e6  888a              LDRH     r2,[r1,#4]  ; EmissionCmd
0002e8  8082              STRH     r2,[r0,#4]
0002ea  7989              LDRB     r1,[r1,#6]  ; EmissionCmd
0002ec  7181              STRB     r1,[r0,#6]
;;;1696       for(int i=0; i<15; i++)   //调试信息
0002ee  2600              MOVS     r6,#0
0002f0  e005              B        |L6.766|
                  |L6.754|
;;;1697       {
;;;1698           App_printf("%02x ",Emission_Tx[i]);
0002f2  4839              LDR      r0,|L6.984|
0002f4  5d81              LDRB     r1,[r0,r6]
0002f6  a018              ADR      r0,|L6.856|
0002f8  f7fffffe          BL       App_printf
0002fc  1c76              ADDS     r6,r6,#1              ;1696
                  |L6.766|
0002fe  2e0f              CMP      r6,#0xf               ;1696
000300  dbf7              BLT      |L6.754|
;;;1699       }
;;;1700       App_printf("\r\n");
000302  a017              ADR      r0,|L6.864|
000304  f7fffffe          BL       App_printf
;;;1701       va_end(arg_ptr);
000308  2000              MOVS     r0,#0
00030a  9002              STR      r0,[sp,#8]
;;;1702   }
00030c  b008              ADD      sp,sp,#0x20
00030e  e8bd01f0          POP      {r4-r8}
000312  f85dfb14          LDR      pc,[sp],#0x14
;;;1703   
                          ENDP

000316  0000              DCW      0x0000
                  |L6.792|
                          DCD      MT2000_Tx
                  |L6.796|
00031c  456d6973          DCB      "Emis//",181,247,208,179,"\r\n",0
000320  2f2fb5f7
000324  d0b30d0a
000328  00      
000329  00                DCB      0
00032a  00                DCB      0
00032b  00                DCB      0
                  |L6.812|
00032c  456d6973          DCB      "Emis//",178,233,209,175,"\r\n",0
000330  2f2fb2e9
000334  d1af0d0a
000338  00      
000339  00                DCB      0
00033a  00                DCB      0
00033b  00                DCB      0
                  |L6.828|
                          DCD      Sys_State
                  |L6.832|
000340  252e3666          DCB      "%.6f",0
000344  00      
000345  00                DCB      0
000346  00                DCB      0
000347  00                DCB      0
                  |L6.840|
000348  25303278          DCB      "%02x",0
00034c  00      
00034d  00                DCB      0
00034e  00                DCB      0
00034f  00                DCB      0
                  |L6.848|
000350  25303278          DCB      "%02x \r\n",0
000354  200d0a00
                  |L6.856|
000358  25303278          DCB      "%02x ",0
00035c  2000    
00035e  00                DCB      0
00035f  00                DCB      0
                  |L6.864|
000360  0d0a00            DCB      "\r\n",0
000363  00                DCB      0
                  |L6.868|
                          DCD      Trans_open
                  |L6.872|
000368  456d6973          DCB      "Emis//",201,232,214,195,198,181,194,202,"\r\n",0
00036c  2f2fc9e8
000370  d6c3c6b5
000374  c2ca0d0a
000378  00      
000379  00                DCB      0
00037a  00                DCB      0
00037b  00                DCB      0
                  |L6.892|
00037c  456d6973          DCB      "Emis//",201,232,214,195,185,166,194,202,206,170,163,186
000380  2f2fc9e8
000384  d6c3b9a6
000388  c2caceaa
00038c  a3ba    
00038e  0d0a00            DCB      "\r\n",0
000391  00                DCB      0
000392  00                DCB      0
000393  00                DCB      0
                  |L6.916|
000394  456d6973          DCB      "Emis//",208,197,181,192,181,247,211,195,"\r\n",0
000398  2f2fd0c5
00039c  b5c0b5f7
0003a0  d3c30d0a
0003a4  00      
0003a5  00                DCB      0
0003a6  00                DCB      0
0003a7  00                DCB      0
                  |L6.936|
0003a8  456d6973          DCB      "Emis//",183,162,201,228,"\r\n",0
0003ac  2f2fb7a2
0003b0  c9e40d0a
0003b4  00      
0003b5  00                DCB      0
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L6.952|
0003b8  456d6973          DCB      "Emis//",205,163,214,185,183,162,201,228,"\r\n",0
0003bc  2f2fcda3
0003c0  d6b9b7a2
0003c4  c9e40d0a
0003c8  00      
0003c9  00                DCB      0
0003ca  00                DCB      0
0003cb  00                DCB      0
                  |L6.972|
0003cc  b2cecafd          DCB      178,206,202,253,180,237,206,243,"!\r\n",0
0003d0  b4edcef3
0003d4  210d0a00
                  |L6.984|
                          DCD      Emission_Tx
                  |L6.988|
                          DCD      EmissionCmd

                          AREA ||i.clean_alarm_bit_flags||, CODE, READONLY, ALIGN=2

                  clean_alarm_bit_flags PROC
;;;2396   
;;;2397   void clean_alarm_bit_flags(void)
000000  4827              LDR      r0,|L7.160|
;;;2398   {
;;;2399       Alarm_historyBack.alarm_history[0]=DisalarmBack.current_alarm_state[0];
000002  78c0              LDRB     r0,[r0,#3]  ; DisalarmBack
000004  4927              LDR      r1,|L7.164|
000006  7048              STRB     r0,[r1,#1]
;;;2400       Alarm_historyBack.alarm_history[1]=DisalarmBack.current_alarm_state[1];
000008  4825              LDR      r0,|L7.160|
00000a  7901              LDRB     r1,[r0,#4]
00000c  4825              LDR      r0,|L7.164|
00000e  7081              STRB     r1,[r0,#2]
;;;2401       if((Alarm_historyBack.alarm_history[0]&(1<<0))==0)
000010  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000012  f0000001          AND      r0,r0,#1
000016  b910              CBNZ     r0,|L7.30|
;;;2402       {
;;;2403           Sys_State.No_power_level=0;
000018  2000              MOVS     r0,#0
00001a  4923              LDR      r1,|L7.168|
00001c  7388              STRB     r0,[r1,#0xe]
                  |L7.30|
;;;2404       }
;;;2405       if((Alarm_historyBack.alarm_history[0]&(1<<1))==0)
00001e  4821              LDR      r0,|L7.164|
000020  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000022  f0000002          AND      r0,r0,#2
000026  b910              CBNZ     r0,|L7.46|
;;;2406       {
;;;2407           Sys_State.temperature_alarm=0;
000028  2000              MOVS     r0,#0
00002a  491f              LDR      r1,|L7.168|
00002c  7448              STRB     r0,[r1,#0x11]
                  |L7.46|
;;;2408       }
;;;2409       if((Alarm_historyBack.alarm_history[0]&(1<<2))==0)
00002e  481d              LDR      r0,|L7.164|
000030  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000032  f0000004          AND      r0,r0,#4
000036  b910              CBNZ     r0,|L7.62|
;;;2410       {
;;;2411           Sys_State.humidity_alarm=0;
000038  2000              MOVS     r0,#0
00003a  491b              LDR      r1,|L7.168|
00003c  7488              STRB     r0,[r1,#0x12]
                  |L7.62|
;;;2412       }
;;;2413       if((Alarm_historyBack.alarm_history[0]&(1<<3))==0)
00003e  4819              LDR      r0,|L7.164|
000040  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000042  f0000008          AND      r0,r0,#8
000046  b910              CBNZ     r0,|L7.78|
;;;2414       {
;;;2415           Sys_State.over_Electric=0;
000048  2000              MOVS     r0,#0
00004a  4917              LDR      r1,|L7.168|
00004c  74c8              STRB     r0,[r1,#0x13]
                  |L7.78|
;;;2416       }
;;;2417       if((Alarm_historyBack.alarm_history[0]&(1<<4))==0)
00004e  4815              LDR      r0,|L7.164|
000050  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000052  f0000010          AND      r0,r0,#0x10
000056  b910              CBNZ     r0,|L7.94|
;;;2418       {
;;;2419           Sys_State.over_Voltage=0;
000058  2000              MOVS     r0,#0
00005a  4913              LDR      r1,|L7.168|
00005c  7508              STRB     r0,[r1,#0x14]
                  |L7.94|
;;;2420       }
;;;2421       if((Alarm_historyBack.alarm_history[0]&(1<<5))==0)
00005e  4811              LDR      r0,|L7.164|
000060  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000062  f0000020          AND      r0,r0,#0x20
000066  b910              CBNZ     r0,|L7.110|
;;;2422       {
;;;2423           Sys_State.low_Voltage=0;
000068  2000              MOVS     r0,#0
00006a  490f              LDR      r1,|L7.168|
00006c  7548              STRB     r0,[r1,#0x15]
                  |L7.110|
;;;2424       }
;;;2425       if((Alarm_historyBack.alarm_history[0]&(1<<6))==0)
00006e  480d              LDR      r0,|L7.164|
000070  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000072  f0000040          AND      r0,r0,#0x40
000076  b910              CBNZ     r0,|L7.126|
;;;2426       {
;;;2427           Sys_State.SWR_alarm=0;
000078  2000              MOVS     r0,#0
00007a  490b              LDR      r1,|L7.168|
00007c  7348              STRB     r0,[r1,#0xd]
                  |L7.126|
;;;2428       }
;;;2429       if((Alarm_historyBack.alarm_history[0]&(1<<7))==0)
00007e  4809              LDR      r0,|L7.164|
000080  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
000082  f0000080          AND      r0,r0,#0x80
000086  b910              CBNZ     r0,|L7.142|
;;;2430       {
;;;2431           Sys_State.no_respond=0;
000088  2000              MOVS     r0,#0
00008a  4907              LDR      r1,|L7.168|
00008c  7408              STRB     r0,[r1,#0x10]
                  |L7.142|
;;;2432       }
;;;2433       if((Alarm_historyBack.alarm_history[1]&(1<<0))==0)
00008e  4805              LDR      r0,|L7.164|
000090  7880              LDRB     r0,[r0,#2]
000092  f0000001          AND      r0,r0,#1
000096  b910              CBNZ     r0,|L7.158|
;;;2434       {
;;;2435           Sys_State.alarm=0;
000098  2000              MOVS     r0,#0
00009a  4903              LDR      r1,|L7.168|
00009c  73c8              STRB     r0,[r1,#0xf]
                  |L7.158|
;;;2436       }
;;;2437   }
00009e  4770              BX       lr
;;;2438   /*获取驻波比函数，返回驻波比
                          ENDP

                  |L7.160|
                          DCD      DisalarmBack
                  |L7.164|
                          DCD      Alarm_historyBack
                  |L7.168|
                          DCD      Sys_State

                          AREA ||i.clean_all_flags||, CODE, READONLY, ALIGN=2

                  clean_all_flags PROC
;;;2367   
;;;2368   void clean_all_flags(void)
000000  b510              PUSH     {r4,lr}
;;;2369   {
;;;2370       Sys_State.History_alarm=0;//历史报警标志
000002  2000              MOVS     r0,#0
000004  4907              LDR      r1,|L8.36|
000006  7208              STRB     r0,[r1,#8]
;;;2371   
;;;2372       Sys_State.alarm=0;//发射机自身报警
000008  73c8              STRB     r0,[r1,#0xf]
;;;2373   
;;;2374       Sys_State.no_respond=0;//激励器无响应报警
00000a  7408              STRB     r0,[r1,#0x10]
;;;2375   
;;;2376       Sys_State.SWR_alarm=0;//驻波比报警
00000c  7348              STRB     r0,[r1,#0xd]
;;;2377   
;;;2378       Sys_State.low_Voltage=0;//欠压报警
00000e  7548              STRB     r0,[r1,#0x15]
;;;2379   
;;;2380       Sys_State.over_Voltage=0;//过压报警
000010  7508              STRB     r0,[r1,#0x14]
;;;2381   
;;;2382       Sys_State.over_Electric=0;//过流报警
000012  74c8              STRB     r0,[r1,#0x13]
;;;2383   
;;;2384       Sys_State.humidity_alarm=0;//湿度报警
000014  7488              STRB     r0,[r1,#0x12]
;;;2385   
;;;2386       Sys_State.temperature_alarm=0;//温度报警
000016  7448              STRB     r0,[r1,#0x11]
;;;2387   
;;;2388       Sys_State.No_power_level=0;//无功率输出报警
000018  7388              STRB     r0,[r1,#0xe]
;;;2389   
;;;2390   //	Alarm_historyBack.alarm_history[0]=0;//清零
;;;2391   //	Alarm_historyBack.alarm_history[1]=0;
;;;2392       //历史报警包全部数据清零
;;;2393       memset(&Alarm_historyBack,0,sizeof(Alarm_historyBack));
00001a  2147              MOVS     r1,#0x47
00001c  4802              LDR      r0,|L8.40|
00001e  f7fffffe          BL       __aeabi_memclr
;;;2394   
;;;2395   }
000022  bd10              POP      {r4,pc}
;;;2396   
                          ENDP

                  |L8.36|
                          DCD      Sys_State
                  |L8.40|
                          DCD      Alarm_historyBack

                          AREA ||i.find_hard_control||, CODE, READONLY, ALIGN=2

                  find_hard_control PROC
;;;2507    */
;;;2508   int find_hard_control(uint8_t Save_count)
000000  b570              PUSH     {r4-r6,lr}
;;;2509   {
000002  4605              MOV      r5,r0
;;;2510       //Hard_control.usage_diagram_count=0;//进入清零
;;;2511       for(int i=0; i<Save_count; i++)
000004  2400              MOVS     r4,#0
000006  f001be86          B.W      |L9.7446|
                  |L9.10|
;;;2512       {
;;;2513           //for(int j=0;j<10;j++)
;;;2514           //{
;;;2515           //第一个
;;;2516           if(State_monitor[i].start[0]!=1)
00000a  eb040084          ADD      r0,r4,r4,LSL #2
00000e  49fe              LDR      r1,|L9.1032|
000010  f8110020          LDRB     r0,[r1,r0,LSL #2]
000014  2801              CMP      r0,#1
                  |L9.22|
000016  d072              BEQ      |L9.254|
;;;2517           {
;;;2518               if(Run_Diagram_buff[i].Start_Time1[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time1[0]*60+Run_Diagram_buff[i].Start_Time1[1]))\
000018  eb0400c4          ADD      r0,r4,r4,LSL #3
00001c  eb001004          ADD      r0,r0,r4,LSL #4
000020  49fa              LDR      r1,|L9.1036|
000022  f8110020          LDRB     r0,[r1,r0,LSL #2]
000026  28ff              CMP      r0,#0xff
000028  d0f5              BEQ      |L9.22|
00002a  48f9              LDR      r0,|L9.1040|
00002c  6840              LDR      r0,[r0,#4]  ; set_time
00002e  49f8              LDR      r1,|L9.1040|
000030  6889              LDR      r1,[r1,#8]  ; set_time
000032  ebc11101          RSB      r1,r1,r1,LSL #4
000036  eb000181          ADD      r1,r0,r1,LSL #2
00003a  eb0400c4          ADD      r0,r4,r4,LSL #3
00003e  eb001004          ADD      r0,r0,r4,LSL #4
000042  4af2              LDR      r2,|L9.1036|
000044  eb020080          ADD      r0,r2,r0,LSL #2
000048  7840              LDRB     r0,[r0,#1]
00004a  eb0402c4          ADD      r2,r4,r4,LSL #3
00004e  eb021204          ADD      r2,r2,r4,LSL #4
000052  4bee              LDR      r3,|L9.1036|
000054  f8132022          LDRB     r2,[r3,r2,LSL #2]
000058  ebc21202          RSB      r2,r2,r2,LSL #4
00005c  eb000082          ADD      r0,r0,r2,LSL #2
000060  4281              CMP      r1,r0
000062  db4c              BLT      |L9.254|
;;;2519                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep1[0]*60+Run_Diagram_buff[i].End_Timep1[1])))
000064  48ea              LDR      r0,|L9.1040|
000066  6840              LDR      r0,[r0,#4]  ; set_time
000068  49e9              LDR      r1,|L9.1040|
00006a  6889              LDR      r1,[r1,#8]  ; set_time
00006c  ebc11101          RSB      r1,r1,r1,LSL #4
000070  eb000181          ADD      r1,r0,r1,LSL #2
000074  eb0400c4          ADD      r0,r4,r4,LSL #3
000078  eb001004          ADD      r0,r0,r4,LSL #4
00007c  461a              MOV      r2,r3
00007e  eb020080          ADD      r0,r2,r0,LSL #2
000082  78c0              LDRB     r0,[r0,#3]
000084  eb0402c4          ADD      r2,r4,r4,LSL #3
000088  eb021204          ADD      r2,r2,r4,LSL #4
00008c  eb030282          ADD      r2,r3,r2,LSL #2
000090  7892              LDRB     r2,[r2,#2]
000092  ebc21202          RSB      r2,r2,r2,LSL #4
000096  eb000082          ADD      r0,r0,r2,LSL #2
00009a  4281              CMP      r1,r0
00009c  da6d              BGE      |L9.378|
;;;2520               {
;;;2521                   //	if(set_time.tm_min== Run_Diagram_buff[i].Start_Time1[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;2522                   //										<(Run_Diagram_buff[i].End_Timep1[0]*60+Run_Diagram_buff[i].End_Timep1[1]))
;;;2523                   //	{
;;;2524                   App_printf("\r\nthe 1 start");
00009e  a0dd              ADR      r0,|L9.1044|
0000a0  f7fffffe          BL       App_printf
;;;2525                   State_monitor[i].start[0]=1;
0000a4  2001              MOVS     r0,#1
0000a6  eb040184          ADD      r1,r4,r4,LSL #2
0000aa  4ad7              LDR      r2,|L9.1032|
0000ac  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;2526                   State_monitor[i].end[0]=0;
0000b0  2000              MOVS     r0,#0
0000b2  eb040184          ADD      r1,r4,r4,LSL #2
0000b6  eb020181          ADD      r1,r2,r1,LSL #2
0000ba  7288              STRB     r0,[r1,#0xa]
;;;2527                   Hard_control.usage_diagram_count++;
0000bc  48d9              LDR      r0,|L9.1060|
0000be  7800              LDRB     r0,[r0,#0]  ; Hard_control
0000c0  1c40              ADDS     r0,r0,#1
0000c2  49d8              LDR      r1,|L9.1060|
0000c4  7008              STRB     r0,[r1,#0]
;;;2528                   if(Hard_control.usage_diagram_count==1)
0000c6  4608              MOV      r0,r1
0000c8  7800              LDRB     r0,[r0,#0]  ; Hard_control
0000ca  2801              CMP      r0,#1
0000cc  d118              BNE      |L9.256|
;;;2529                   {
;;;2530                       Trans_open_Copy.Type[0]=1;
0000ce  49d6              LDR      r1,|L9.1064|
0000d0  7008              STRB     r0,[r1,#0]
;;;2531                       Trans_open_Copy.Channel[0]=1;
0000d2  7048              STRB     r0,[r1,#1]
;;;2532                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power1[0];
0000d4  eb0400c4          ADD      r0,r4,r4,LSL #3
0000d8  eb001004          ADD      r0,r0,r4,LSL #4
0000dc  49cb              LDR      r1,|L9.1036|
0000de  eb010080          ADD      r0,r1,r0,LSL #2
0000e2  7900              LDRB     r0,[r0,#4]
0000e4  49d0              LDR      r1,|L9.1064|
0000e6  7408              STRB     r0,[r1,#0x10]
;;;2533                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq1,4);
0000e8  eb0400c4          ADD      r0,r4,r4,LSL #3
0000ec  eb001004          ADD      r0,r0,r4,LSL #4
0000f0  49c6              LDR      r1,|L9.1036|
0000f2  eb010180          ADD      r1,r1,r0,LSL #2
0000f6  48cc              LDR      r0,|L9.1064|
0000f8  f8d11005          LDR      r1,[r1,#5]
0000fc  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.254|
0000fe  e03c              B        |L9.378|
                  |L9.256|
;;;2534                   }
;;;2535                   else if(Hard_control.usage_diagram_count==2)
000100  48c8              LDR      r0,|L9.1060|
000102  7800              LDRB     r0,[r0,#0]  ; Hard_control
000104  2802              CMP      r0,#2
000106  d11a              BNE      |L9.318|
;;;2536                   {
;;;2537                       Trans_open_Copy.Type[0]=2;
000108  49c7              LDR      r1,|L9.1064|
00010a  7008              STRB     r0,[r1,#0]
;;;2538                       Trans_open_Copy.Channel[1]=2;
00010c  2102              MOVS     r1,#2
00010e  48c6              LDR      r0,|L9.1064|
000110  7081              STRB     r1,[r0,#2]
;;;2539                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power1[0];
000112  eb0400c4          ADD      r0,r4,r4,LSL #3
000116  eb001004          ADD      r0,r0,r4,LSL #4
00011a  49bc              LDR      r1,|L9.1036|
00011c  eb010080          ADD      r0,r1,r0,LSL #2
000120  7901              LDRB     r1,[r0,#4]
000122  48c1              LDR      r0,|L9.1064|
000124  7441              STRB     r1,[r0,#0x11]
;;;2540                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq1,4);
000126  eb0400c4          ADD      r0,r4,r4,LSL #3
00012a  eb001004          ADD      r0,r0,r4,LSL #4
00012e  49b7              LDR      r1,|L9.1036|
000130  eb010180          ADD      r1,r1,r0,LSL #2
000134  48bc              LDR      r0,|L9.1064|
000136  f8d11005          LDR      r1,[r1,#5]
00013a  6081              STR      r1,[r0,#8]
00013c  e01d              B        |L9.378|
                  |L9.318|
;;;2541                   }
;;;2542                   else if(Hard_control.usage_diagram_count==3)
00013e  48b9              LDR      r0,|L9.1060|
000140  7800              LDRB     r0,[r0,#0]  ; Hard_control
000142  2803              CMP      r0,#3
000144  d119              BNE      |L9.378|
;;;2543                   {
;;;2544                       Trans_open_Copy.Type[0]=3;
000146  49b8              LDR      r1,|L9.1064|
000148  7008              STRB     r0,[r1,#0]
;;;2545                       Trans_open_Copy.Channel[2]=3;
00014a  2103              MOVS     r1,#3
00014c  48b6              LDR      r0,|L9.1064|
00014e  70c1              STRB     r1,[r0,#3]
;;;2546                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power1[0];
000150  eb0400c4          ADD      r0,r4,r4,LSL #3
000154  eb001004          ADD      r0,r0,r4,LSL #4
000158  49ac              LDR      r1,|L9.1036|
00015a  eb010080          ADD      r0,r1,r0,LSL #2
00015e  7901              LDRB     r1,[r0,#4]
000160  48b1              LDR      r0,|L9.1064|
000162  7481              STRB     r1,[r0,#0x12]
;;;2547                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq1,4);
000164  eb0400c4          ADD      r0,r4,r4,LSL #3
000168  eb001004          ADD      r0,r0,r4,LSL #4
00016c  49a7              LDR      r1,|L9.1036|
00016e  eb010180          ADD      r1,r1,r0,LSL #2
000172  48ad              LDR      r0,|L9.1064|
000174  f8d11005          LDR      r1,[r1,#5]
000178  60c1              STR      r1,[r0,#0xc]
                  |L9.378|
;;;2548                   }
;;;2549                   //}
;;;2550               }
;;;2551   
;;;2552           }
;;;2553   
;;;2554           if(State_monitor[i].end[0]!=1)   //结束
00017a  eb040084          ADD      r0,r4,r4,LSL #2
00017e  49a2              LDR      r1,|L9.1032|
000180  eb010080          ADD      r0,r1,r0,LSL #2
000184  7a80              LDRB     r0,[r0,#0xa]
000186  2801              CMP      r0,#1
000188  d078              BEQ      |L9.636|
;;;2555           {
;;;2556               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep1[0])
00018a  48a1              LDR      r0,|L9.1040|
00018c  6880              LDR      r0,[r0,#8]  ; set_time
00018e  eb0401c4          ADD      r1,r4,r4,LSL #3
000192  eb011104          ADD      r1,r1,r4,LSL #4
000196  4a9d              LDR      r2,|L9.1036|
000198  eb020181          ADD      r1,r2,r1,LSL #2
00019c  7889              LDRB     r1,[r1,#2]
00019e  4288              CMP      r0,r1
0001a0  d16c              BNE      |L9.636|
;;;2557               {
;;;2558                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep1[1])
0001a2  489b              LDR      r0,|L9.1040|
0001a4  6841              LDR      r1,[r0,#4]  ; set_time
0001a6  eb0400c4          ADD      r0,r4,r4,LSL #3
0001aa  eb001004          ADD      r0,r0,r4,LSL #4
0001ae  eb020080          ADD      r0,r2,r0,LSL #2
0001b2  78c0              LDRB     r0,[r0,#3]
0001b4  4281              CMP      r1,r0
0001b6  d177              BNE      |L9.680|
;;;2559                   {
;;;2560                       App_printf("\r\nthe 1  end");
0001b8  a09c              ADR      r0,|L9.1068|
0001ba  f7fffffe          BL       App_printf
;;;2561                       Hard_control.usage_diagram_count--;
0001be  4899              LDR      r0,|L9.1060|
0001c0  7800              LDRB     r0,[r0,#0]  ; Hard_control
0001c2  1e40              SUBS     r0,r0,#1
0001c4  4997              LDR      r1,|L9.1060|
0001c6  7008              STRB     r0,[r1,#0]
;;;2562                       State_monitor[i].end[0]=1;
0001c8  2001              MOVS     r0,#1
0001ca  eb040184          ADD      r1,r4,r4,LSL #2
0001ce  4a8e              LDR      r2,|L9.1032|
0001d0  eb020181          ADD      r1,r2,r1,LSL #2
0001d4  7288              STRB     r0,[r1,#0xa]
;;;2563                       State_monitor[i].start[0]=0;//清除标志
0001d6  2000              MOVS     r0,#0
0001d8  eb040184          ADD      r1,r4,r4,LSL #2
0001dc  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;2564                       if(Trans_open_Copy.Type[0]==1)
0001e0  4891              LDR      r0,|L9.1064|
0001e2  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0001e4  2801              CMP      r0,#1
0001e6  d107              BNE      |L9.504|
;;;2565                       {
;;;2566                           Trans_open_Copy.Type[0]=0;
0001e8  2000              MOVS     r0,#0
0001ea  498f              LDR      r1,|L9.1064|
0001ec  7008              STRB     r0,[r1,#0]
;;;2567                           //固频时，时间到，停止即可
;;;2568                           memset(Trans_open_Copy.Freq,0,12);//清零
0001ee  4608              MOV      r0,r1
0001f0  2100              MOVS     r1,#0
0001f2  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
0001f4  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
0001f6  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.504|
;;;2569                       }
;;;2570                       if(Trans_open_Copy.Type[0]==2)
0001f8  488b              LDR      r0,|L9.1064|
0001fa  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0001fc  2802              CMP      r0,#2
0001fe  d119              BNE      |L9.564|
;;;2571                       {
;;;2572                           Trans_open_Copy.Type[0]=1;
000200  2001              MOVS     r0,#1
000202  4989              LDR      r1,|L9.1064|
000204  7008              STRB     r0,[r1,#0]
;;;2573                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq1,4)==0)   //踢出第一个
000206  eb0400c4          ADD      r0,r4,r4,LSL #3
00020a  eb001004          ADD      r0,r0,r4,LSL #4
00020e  4a7f              LDR      r2,|L9.1036|
000210  eb020080          ADD      r0,r2,r0,LSL #2
000214  1d41              ADDS     r1,r0,#5
000216  2204              MOVS     r2,#4
000218  4883              LDR      r0,|L9.1064|
00021a  1d00              ADDS     r0,r0,#4
00021c  f7fffffe          BL       memcmp
000220  b940              CBNZ     r0,|L9.564|
;;;2574                           {
;;;2575                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000222  4881              LDR      r0,|L9.1064|
000224  7a00              LDRB     r0,[r0,#8]
000226  4980              LDR      r1,|L9.1064|
000228  7108              STRB     r0,[r1,#4]
;;;2576                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
00022a  4608              MOV      r0,r1
00022c  7a41              LDRB     r1,[r0,#9]
00022e  7141              STRB     r1,[r0,#5]
;;;2577                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
000230  7a81              LDRB     r1,[r0,#0xa]
000232  7181              STRB     r1,[r0,#6]
                  |L9.564|
;;;2578                               //最后1byte都为0，所以不处理
;;;2579                           }
;;;2580                           //如果是踢出第二个，不需要做处理了
;;;2581                       }
;;;2582                       if(Trans_open_Copy.Type[0]==3)
000234  487c              LDR      r0,|L9.1064|
000236  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000238  2803              CMP      r0,#3
00023a  d135              BNE      |L9.680|
;;;2583                       {
;;;2584                           Trans_open_Copy.Type[0]=2;
00023c  2002              MOVS     r0,#2
00023e  497a              LDR      r1,|L9.1064|
000240  7008              STRB     r0,[r1,#0]
;;;2585                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq1,4)==0)   //踢出第一个
000242  eb0400c4          ADD      r0,r4,r4,LSL #3
000246  eb001004          ADD      r0,r0,r4,LSL #4
00024a  4a70              LDR      r2,|L9.1036|
00024c  eb020080          ADD      r0,r2,r0,LSL #2
000250  1d41              ADDS     r1,r0,#5
000252  2204              MOVS     r2,#4
000254  4874              LDR      r0,|L9.1064|
000256  1d00              ADDS     r0,r0,#4
000258  f7fffffe          BL       memcmp
00025c  b978              CBNZ     r0,|L9.638|
;;;2586                           {
;;;2587                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
00025e  4872              LDR      r0,|L9.1064|
000260  7a00              LDRB     r0,[r0,#8]
000262  4971              LDR      r1,|L9.1064|
000264  7108              STRB     r0,[r1,#4]
;;;2588                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000266  4608              MOV      r0,r1
000268  7a41              LDRB     r1,[r0,#9]
00026a  7141              STRB     r1,[r0,#5]
;;;2589                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
00026c  7a81              LDRB     r1,[r0,#0xa]
00026e  7181              STRB     r1,[r0,#6]
;;;2590                               //最后1byte都为0，所以不处理
;;;2591                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000270  7b01              LDRB     r1,[r0,#0xc]
000272  7201              STRB     r1,[r0,#8]
;;;2592                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000274  7b41              LDRB     r1,[r0,#0xd]
000276  7241              STRB     r1,[r0,#9]
;;;2593                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000278  7b81              LDRB     r1,[r0,#0xe]
00027a  7281              STRB     r1,[r0,#0xa]
                  |L9.636|
00027c  e014              B        |L9.680|
                  |L9.638|
;;;2594                           }
;;;2595                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq1,4)==0)     //踢出第二个
00027e  eb0400c4          ADD      r0,r4,r4,LSL #3
000282  eb001004          ADD      r0,r0,r4,LSL #4
000286  4a61              LDR      r2,|L9.1036|
000288  eb020080          ADD      r0,r2,r0,LSL #2
00028c  1d41              ADDS     r1,r0,#5
00028e  2204              MOVS     r2,#4
000290  4865              LDR      r0,|L9.1064|
000292  3008              ADDS     r0,r0,#8
000294  f7fffffe          BL       memcmp
000298  b930              CBNZ     r0,|L9.680|
;;;2596                           {
;;;2597                               //最后1byte都为0，所以不处理
;;;2598                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
00029a  4863              LDR      r0,|L9.1064|
00029c  7b01              LDRB     r1,[r0,#0xc]
00029e  7201              STRB     r1,[r0,#8]
;;;2599                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
0002a0  7b41              LDRB     r1,[r0,#0xd]
0002a2  7241              STRB     r1,[r0,#9]
;;;2600                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
0002a4  7b81              LDRB     r1,[r0,#0xe]
0002a6  7281              STRB     r1,[r0,#0xa]
                  |L9.680|
;;;2601                           }
;;;2602                           //如果是踢出第三个，不需要做处理了
;;;2603                       }
;;;2604                   }
;;;2605               }
;;;2606           }
;;;2607           //第二个
;;;2608           if(State_monitor[i].start[1]!=1)
0002a8  eb040084          ADD      r0,r4,r4,LSL #2
0002ac  4956              LDR      r1,|L9.1032|
0002ae  eb010080          ADD      r0,r1,r0,LSL #2
0002b2  7840              LDRB     r0,[r0,#1]
0002b4  2801              CMP      r0,#1
                  |L9.694|
0002b6  d075              BEQ      |L9.932|
;;;2609           {
;;;2610               if(Run_Diagram_buff[i].Start_Time2[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time2[0]*60+Run_Diagram_buff[i].Start_Time2[1]))\
0002b8  eb0400c4          ADD      r0,r4,r4,LSL #3
0002bc  eb001004          ADD      r0,r0,r4,LSL #4
0002c0  4952              LDR      r1,|L9.1036|
0002c2  eb010080          ADD      r0,r1,r0,LSL #2
0002c6  7a80              LDRB     r0,[r0,#0xa]
0002c8  28ff              CMP      r0,#0xff
0002ca  d0f4              BEQ      |L9.694|
0002cc  4850              LDR      r0,|L9.1040|
0002ce  6840              LDR      r0,[r0,#4]  ; set_time
0002d0  494f              LDR      r1,|L9.1040|
0002d2  6889              LDR      r1,[r1,#8]  ; set_time
0002d4  ebc11101          RSB      r1,r1,r1,LSL #4
0002d8  eb000181          ADD      r1,r0,r1,LSL #2
0002dc  eb0400c4          ADD      r0,r4,r4,LSL #3
0002e0  eb001004          ADD      r0,r0,r4,LSL #4
0002e4  4a49              LDR      r2,|L9.1036|
0002e6  eb020080          ADD      r0,r2,r0,LSL #2
0002ea  7ac0              LDRB     r0,[r0,#0xb]
0002ec  eb0402c4          ADD      r2,r4,r4,LSL #3
0002f0  eb021204          ADD      r2,r2,r4,LSL #4
0002f4  4b45              LDR      r3,|L9.1036|
0002f6  eb030282          ADD      r2,r3,r2,LSL #2
0002fa  7a92              LDRB     r2,[r2,#0xa]
0002fc  ebc21202          RSB      r2,r2,r2,LSL #4
000300  eb000082          ADD      r0,r0,r2,LSL #2
000304  4281              CMP      r1,r0
000306  db4d              BLT      |L9.932|
;;;2611                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep2[0]*60+Run_Diagram_buff[i].End_Timep2[1])))
000308  4841              LDR      r0,|L9.1040|
00030a  6840              LDR      r0,[r0,#4]  ; set_time
00030c  4940              LDR      r1,|L9.1040|
00030e  6889              LDR      r1,[r1,#8]  ; set_time
000310  ebc11101          RSB      r1,r1,r1,LSL #4
000314  eb000181          ADD      r1,r0,r1,LSL #2
000318  eb0400c4          ADD      r0,r4,r4,LSL #3
00031c  eb001004          ADD      r0,r0,r4,LSL #4
000320  461a              MOV      r2,r3
000322  eb020080          ADD      r0,r2,r0,LSL #2
000326  7b40              LDRB     r0,[r0,#0xd]
000328  eb0402c4          ADD      r2,r4,r4,LSL #3
00032c  eb021204          ADD      r2,r2,r4,LSL #4
000330  eb030282          ADD      r2,r3,r2,LSL #2
000334  7b12              LDRB     r2,[r2,#0xc]
000336  ebc21202          RSB      r2,r2,r2,LSL #4
00033a  eb000082          ADD      r0,r0,r2,LSL #2
00033e  4281              CMP      r1,r0
000340  da30              BGE      |L9.932|
;;;2612               {
;;;2613   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time2[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;2614   //														<(Run_Diagram_buff[i].End_Timep2[0]*60+Run_Diagram_buff[i].End_Timep2[1]))
;;;2615   //					{
;;;2616                   App_printf("\r\nthe 2 start");
000342  a03e              ADR      r0,|L9.1084|
000344  f7fffffe          BL       App_printf
;;;2617                   State_monitor[i].start[1]=1;
000348  2001              MOVS     r0,#1
00034a  eb040184          ADD      r1,r4,r4,LSL #2
00034e  4a2e              LDR      r2,|L9.1032|
000350  eb020181          ADD      r1,r2,r1,LSL #2
000354  7048              STRB     r0,[r1,#1]
;;;2618                   State_monitor[i].end[1]=0;
000356  2100              MOVS     r1,#0
000358  eb040084          ADD      r0,r4,r4,LSL #2
00035c  eb020080          ADD      r0,r2,r0,LSL #2
000360  72c1              STRB     r1,[r0,#0xb]
;;;2619                   Hard_control.usage_diagram_count++;
000362  4830              LDR      r0,|L9.1060|
000364  7800              LDRB     r0,[r0,#0]  ; Hard_control
000366  1c40              ADDS     r0,r0,#1
000368  492e              LDR      r1,|L9.1060|
00036a  7008              STRB     r0,[r1,#0]
;;;2620                   if(Hard_control.usage_diagram_count==1)
00036c  4608              MOV      r0,r1
00036e  7800              LDRB     r0,[r0,#0]  ; Hard_control
000370  2801              CMP      r0,#1
000372  d118              BNE      |L9.934|
;;;2621                   {
;;;2622                       Trans_open_Copy.Type[0]=1;
000374  492c              LDR      r1,|L9.1064|
000376  7008              STRB     r0,[r1,#0]
;;;2623                       Trans_open_Copy.Channel[0]=1;
000378  7048              STRB     r0,[r1,#1]
;;;2624                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power2[0];
00037a  eb0400c4          ADD      r0,r4,r4,LSL #3
00037e  eb001004          ADD      r0,r0,r4,LSL #4
000382  4922              LDR      r1,|L9.1036|
000384  eb010080          ADD      r0,r1,r0,LSL #2
000388  7b80              LDRB     r0,[r0,#0xe]
00038a  4927              LDR      r1,|L9.1064|
00038c  7408              STRB     r0,[r1,#0x10]
;;;2625                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq2,4);
00038e  eb0400c4          ADD      r0,r4,r4,LSL #3
000392  eb001004          ADD      r0,r0,r4,LSL #4
000396  491d              LDR      r1,|L9.1036|
000398  eb010180          ADD      r1,r1,r0,LSL #2
00039c  4822              LDR      r0,|L9.1064|
00039e  f8d1100f          LDR      r1,[r1,#0xf]
0003a2  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.932|
0003a4  e05f              B        |L9.1126|
                  |L9.934|
;;;2626                   }
;;;2627                   else if(Hard_control.usage_diagram_count==2)
0003a6  481f              LDR      r0,|L9.1060|
0003a8  7800              LDRB     r0,[r0,#0]  ; Hard_control
0003aa  2802              CMP      r0,#2
0003ac  d11a              BNE      |L9.996|
;;;2628                   {
;;;2629                       Trans_open_Copy.Type[0]=2;
0003ae  491e              LDR      r1,|L9.1064|
0003b0  7008              STRB     r0,[r1,#0]
;;;2630                       Trans_open_Copy.Channel[1]=2;
0003b2  2102              MOVS     r1,#2
0003b4  481c              LDR      r0,|L9.1064|
0003b6  7081              STRB     r1,[r0,#2]
;;;2631                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power2[0];
0003b8  eb0400c4          ADD      r0,r4,r4,LSL #3
0003bc  eb001004          ADD      r0,r0,r4,LSL #4
0003c0  4912              LDR      r1,|L9.1036|
0003c2  eb010080          ADD      r0,r1,r0,LSL #2
0003c6  7b81              LDRB     r1,[r0,#0xe]
0003c8  4817              LDR      r0,|L9.1064|
0003ca  7441              STRB     r1,[r0,#0x11]
;;;2632                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq2,4);
0003cc  eb0400c4          ADD      r0,r4,r4,LSL #3
0003d0  eb001004          ADD      r0,r0,r4,LSL #4
0003d4  490d              LDR      r1,|L9.1036|
0003d6  eb010180          ADD      r1,r1,r0,LSL #2
0003da  4813              LDR      r0,|L9.1064|
0003dc  f8d1100f          LDR      r1,[r1,#0xf]
0003e0  6081              STR      r1,[r0,#8]
0003e2  e040              B        |L9.1126|
                  |L9.996|
;;;2633                   }
;;;2634                   else if(Hard_control.usage_diagram_count==3)
0003e4  480f              LDR      r0,|L9.1060|
0003e6  7800              LDRB     r0,[r0,#0]  ; Hard_control
0003e8  2803              CMP      r0,#3
0003ea  d13c              BNE      |L9.1126|
;;;2635                   {
;;;2636                       Trans_open_Copy.Type[0]=3;
0003ec  490e              LDR      r1,|L9.1064|
0003ee  7008              STRB     r0,[r1,#0]
;;;2637                       Trans_open_Copy.Channel[2]=3;
0003f0  2103              MOVS     r1,#3
0003f2  480d              LDR      r0,|L9.1064|
0003f4  70c1              STRB     r1,[r0,#3]
;;;2638                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power2[0];
0003f6  eb0400c4          ADD      r0,r4,r4,LSL #3
0003fa  eb001004          ADD      r0,r0,r4,LSL #4
0003fe  4903              LDR      r1,|L9.1036|
000400  eb010080          ADD      r0,r1,r0,LSL #2
000404  7b81              LDRB     r1,[r0,#0xe]
000406  e021              B        |L9.1100|
                  |L9.1032|
                          DCD      State_monitor
                  |L9.1036|
                          DCD      Run_Diagram_buff
                  |L9.1040|
                          DCD      set_time
                  |L9.1044|
000414  0d0a7468          DCB      "\r\nthe 1 start",0
000418  65203120
00041c  73746172
000420  7400    
000422  00                DCB      0
000423  00                DCB      0
                  |L9.1060|
                          DCD      Hard_control
                  |L9.1064|
                          DCD      Trans_open_Copy
                  |L9.1068|
00042c  0d0a7468          DCB      "\r\nthe 1  end",0
000430  65203120
000434  20656e64
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L9.1084|
00043c  0d0a7468          DCB      "\r\nthe 2 start",0
000440  65203220
000444  73746172
000448  7400    
00044a  00                DCB      0
00044b  00                DCB      0
                  |L9.1100|
00044c  48fe              LDR      r0,|L9.2120|
00044e  7481              STRB     r1,[r0,#0x12]
;;;2639                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq2,4);
000450  eb0400c4          ADD      r0,r4,r4,LSL #3
000454  eb001004          ADD      r0,r0,r4,LSL #4
000458  49fc              LDR      r1,|L9.2124|
00045a  eb010180          ADD      r1,r1,r0,LSL #2
00045e  48fa              LDR      r0,|L9.2120|
000460  f8d1100f          LDR      r1,[r1,#0xf]
000464  60c1              STR      r1,[r0,#0xc]
                  |L9.1126|
;;;2640                   }
;;;2641                   //	}
;;;2642               }
;;;2643   
;;;2644           }
;;;2645   
;;;2646           if(State_monitor[i].end[1]!=1)   //结束
000466  eb040084          ADD      r0,r4,r4,LSL #2
00046a  49f9              LDR      r1,|L9.2128|
00046c  eb010080          ADD      r0,r1,r0,LSL #2
000470  7ac0              LDRB     r0,[r0,#0xb]
000472  2801              CMP      r0,#1
000474  d07b              BEQ      |L9.1390|
;;;2647           {
;;;2648               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep2[0])
000476  48f7              LDR      r0,|L9.2132|
000478  6880              LDR      r0,[r0,#8]  ; set_time
00047a  eb0401c4          ADD      r1,r4,r4,LSL #3
00047e  eb011104          ADD      r1,r1,r4,LSL #4
000482  4af2              LDR      r2,|L9.2124|
000484  eb020181          ADD      r1,r2,r1,LSL #2
000488  7b09              LDRB     r1,[r1,#0xc]
00048a  4288              CMP      r0,r1
00048c  d16f              BNE      |L9.1390|
;;;2649               {
;;;2650                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep2[1])
00048e  48f1              LDR      r0,|L9.2132|
000490  6841              LDR      r1,[r0,#4]  ; set_time
000492  eb0400c4          ADD      r0,r4,r4,LSL #3
000496  eb001004          ADD      r0,r0,r4,LSL #4
00049a  eb020080          ADD      r0,r2,r0,LSL #2
00049e  7b40              LDRB     r0,[r0,#0xd]
0004a0  4281              CMP      r1,r0
0004a2  d17b              BNE      |L9.1436|
;;;2651                   {
;;;2652                       App_printf("\r\nthe 2 end");
0004a4  a0ec              ADR      r0,|L9.2136|
0004a6  f7fffffe          BL       App_printf
;;;2653                       Hard_control.usage_diagram_count--;
0004aa  48ee              LDR      r0,|L9.2148|
0004ac  7800              LDRB     r0,[r0,#0]  ; Hard_control
0004ae  1e40              SUBS     r0,r0,#1
0004b0  49ec              LDR      r1,|L9.2148|
0004b2  7008              STRB     r0,[r1,#0]
;;;2654                       State_monitor[i].end[1]=1;
0004b4  2101              MOVS     r1,#1
0004b6  eb040084          ADD      r0,r4,r4,LSL #2
0004ba  4ae5              LDR      r2,|L9.2128|
0004bc  eb020080          ADD      r0,r2,r0,LSL #2
0004c0  72c1              STRB     r1,[r0,#0xb]
;;;2655                       State_monitor[i].start[1]=0;
0004c2  2000              MOVS     r0,#0
0004c4  eb040184          ADD      r1,r4,r4,LSL #2
0004c8  eb020181          ADD      r1,r2,r1,LSL #2
0004cc  7048              STRB     r0,[r1,#1]
;;;2656                       if(Trans_open_Copy.Type[0]==1)
0004ce  48de              LDR      r0,|L9.2120|
0004d0  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0004d2  2801              CMP      r0,#1
0004d4  d107              BNE      |L9.1254|
;;;2657                       {
;;;2658                           Trans_open_Copy.Type[0]=0;
0004d6  2000              MOVS     r0,#0
0004d8  49db              LDR      r1,|L9.2120|
0004da  7008              STRB     r0,[r1,#0]
;;;2659                           //固频时，时间到，停止即可
;;;2660                           memset(Trans_open_Copy.Freq,0,12);//清零
0004dc  4608              MOV      r0,r1
0004de  2100              MOVS     r1,#0
0004e0  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
0004e2  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
0004e4  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.1254|
;;;2661                       }
;;;2662                       if(Trans_open_Copy.Type[0]==2)
0004e6  48d8              LDR      r0,|L9.2120|
0004e8  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0004ea  2802              CMP      r0,#2
0004ec  d11a              BNE      |L9.1316|
;;;2663                       {
;;;2664                           Trans_open_Copy.Type[0]=1;
0004ee  2001              MOVS     r0,#1
0004f0  49d5              LDR      r1,|L9.2120|
0004f2  7008              STRB     r0,[r1,#0]
;;;2665                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq2,4)==0)   //踢出第一个
0004f4  eb0400c4          ADD      r0,r4,r4,LSL #3
0004f8  eb001004          ADD      r0,r0,r4,LSL #4
0004fc  4ad3              LDR      r2,|L9.2124|
0004fe  eb020080          ADD      r0,r2,r0,LSL #2
000502  f100010f          ADD      r1,r0,#0xf
000506  2204              MOVS     r2,#4
000508  48cf              LDR      r0,|L9.2120|
00050a  1d00              ADDS     r0,r0,#4
00050c  f7fffffe          BL       memcmp
000510  b940              CBNZ     r0,|L9.1316|
;;;2666                           {
;;;2667                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000512  48cd              LDR      r0,|L9.2120|
000514  7a00              LDRB     r0,[r0,#8]
000516  49cc              LDR      r1,|L9.2120|
000518  7108              STRB     r0,[r1,#4]
;;;2668                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
00051a  4608              MOV      r0,r1
00051c  7a41              LDRB     r1,[r0,#9]
00051e  7141              STRB     r1,[r0,#5]
;;;2669                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
000520  7a81              LDRB     r1,[r0,#0xa]
000522  7181              STRB     r1,[r0,#6]
                  |L9.1316|
;;;2670                               //最后1byte都为0，所以不处理
;;;2671                           }
;;;2672                           //如果是踢出第二个，不需要做处理了
;;;2673                       }
;;;2674                       if(Trans_open_Copy.Type[0]==3)
000524  48c8              LDR      r0,|L9.2120|
000526  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000528  2803              CMP      r0,#3
00052a  d137              BNE      |L9.1436|
;;;2675                       {
;;;2676                           Trans_open_Copy.Type[0]=2;
00052c  2002              MOVS     r0,#2
00052e  49c6              LDR      r1,|L9.2120|
000530  7008              STRB     r0,[r1,#0]
;;;2677                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq2,4)==0)   //踢出第一个
000532  eb0400c4          ADD      r0,r4,r4,LSL #3
000536  eb001004          ADD      r0,r0,r4,LSL #4
00053a  4ac4              LDR      r2,|L9.2124|
00053c  eb020080          ADD      r0,r2,r0,LSL #2
000540  f100010f          ADD      r1,r0,#0xf
000544  2204              MOVS     r2,#4
000546  48c0              LDR      r0,|L9.2120|
000548  1d00              ADDS     r0,r0,#4
00054a  f7fffffe          BL       memcmp
00054e  b978              CBNZ     r0,|L9.1392|
;;;2678                           {
;;;2679                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000550  48bd              LDR      r0,|L9.2120|
000552  7a00              LDRB     r0,[r0,#8]
000554  49bc              LDR      r1,|L9.2120|
000556  7108              STRB     r0,[r1,#4]
;;;2680                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000558  4608              MOV      r0,r1
00055a  7a41              LDRB     r1,[r0,#9]
00055c  7141              STRB     r1,[r0,#5]
;;;2681                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
00055e  7a81              LDRB     r1,[r0,#0xa]
000560  7181              STRB     r1,[r0,#6]
;;;2682                               //最后1byte都为0，所以不处理
;;;2683                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000562  7b01              LDRB     r1,[r0,#0xc]
000564  7201              STRB     r1,[r0,#8]
;;;2684                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000566  7b41              LDRB     r1,[r0,#0xd]
000568  7241              STRB     r1,[r0,#9]
;;;2685                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
00056a  7b81              LDRB     r1,[r0,#0xe]
00056c  7281              STRB     r1,[r0,#0xa]
                  |L9.1390|
00056e  e015              B        |L9.1436|
                  |L9.1392|
;;;2686                           }
;;;2687                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq2,4)==0)     //踢出第二个
000570  eb0400c4          ADD      r0,r4,r4,LSL #3
000574  eb001004          ADD      r0,r0,r4,LSL #4
000578  4ab4              LDR      r2,|L9.2124|
00057a  eb020080          ADD      r0,r2,r0,LSL #2
00057e  f100010f          ADD      r1,r0,#0xf
000582  2204              MOVS     r2,#4
000584  48b0              LDR      r0,|L9.2120|
000586  3008              ADDS     r0,r0,#8
000588  f7fffffe          BL       memcmp
00058c  b930              CBNZ     r0,|L9.1436|
;;;2688                           {
;;;2689                               //最后1byte都为0，所以不处理
;;;2690                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
00058e  48ae              LDR      r0,|L9.2120|
000590  7b01              LDRB     r1,[r0,#0xc]
000592  7201              STRB     r1,[r0,#8]
;;;2691                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000594  7b41              LDRB     r1,[r0,#0xd]
000596  7241              STRB     r1,[r0,#9]
;;;2692                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000598  7b81              LDRB     r1,[r0,#0xe]
00059a  7281              STRB     r1,[r0,#0xa]
                  |L9.1436|
;;;2693                           }
;;;2694                           //如果是踢出第三个，不需要做处理了
;;;2695                       }
;;;2696                   }
;;;2697               }
;;;2698           }
;;;2699           //第三个
;;;2700           if(State_monitor[i].start[2]!=1)
00059c  eb040084          ADD      r0,r4,r4,LSL #2
0005a0  49ab              LDR      r1,|L9.2128|
0005a2  eb010080          ADD      r0,r1,r0,LSL #2
0005a6  7880              LDRB     r0,[r0,#2]
0005a8  2801              CMP      r0,#1
0005aa  d075              BEQ      |L9.1688|
;;;2701           {
;;;2702               if(Run_Diagram_buff[i].Start_Time3[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time3[0]*60+Run_Diagram_buff[i].Start_Time3[1]))\
0005ac  eb0400c4          ADD      r0,r4,r4,LSL #3
0005b0  eb001004          ADD      r0,r0,r4,LSL #4
0005b4  49a5              LDR      r1,|L9.2124|
0005b6  eb010080          ADD      r0,r1,r0,LSL #2
0005ba  7d00              LDRB     r0,[r0,#0x14]
0005bc  28ff              CMP      r0,#0xff
0005be  d06b              BEQ      |L9.1688|
0005c0  48a4              LDR      r0,|L9.2132|
0005c2  6840              LDR      r0,[r0,#4]  ; set_time
0005c4  49a3              LDR      r1,|L9.2132|
0005c6  6889              LDR      r1,[r1,#8]  ; set_time
0005c8  ebc11101          RSB      r1,r1,r1,LSL #4
0005cc  eb000181          ADD      r1,r0,r1,LSL #2
0005d0  eb0400c4          ADD      r0,r4,r4,LSL #3
0005d4  eb001004          ADD      r0,r0,r4,LSL #4
0005d8  4a9c              LDR      r2,|L9.2124|
0005da  eb020080          ADD      r0,r2,r0,LSL #2
0005de  7d40              LDRB     r0,[r0,#0x15]
0005e0  eb0402c4          ADD      r2,r4,r4,LSL #3
0005e4  eb021204          ADD      r2,r2,r4,LSL #4
0005e8  4b98              LDR      r3,|L9.2124|
0005ea  eb030282          ADD      r2,r3,r2,LSL #2
0005ee  7d12              LDRB     r2,[r2,#0x14]
0005f0  ebc21202          RSB      r2,r2,r2,LSL #4
0005f4  eb000082          ADD      r0,r0,r2,LSL #2
0005f8  4281              CMP      r1,r0
0005fa  db4d              BLT      |L9.1688|
;;;2703                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep3[0]*60+Run_Diagram_buff[i].End_Timep3[1])))
0005fc  4895              LDR      r0,|L9.2132|
0005fe  6840              LDR      r0,[r0,#4]  ; set_time
000600  4994              LDR      r1,|L9.2132|
000602  6889              LDR      r1,[r1,#8]  ; set_time
000604  ebc11101          RSB      r1,r1,r1,LSL #4
000608  eb000181          ADD      r1,r0,r1,LSL #2
00060c  eb0400c4          ADD      r0,r4,r4,LSL #3
000610  eb001004          ADD      r0,r0,r4,LSL #4
000614  461a              MOV      r2,r3
000616  eb020080          ADD      r0,r2,r0,LSL #2
00061a  7dc0              LDRB     r0,[r0,#0x17]
00061c  eb0402c4          ADD      r2,r4,r4,LSL #3
000620  eb021204          ADD      r2,r2,r4,LSL #4
000624  eb030282          ADD      r2,r3,r2,LSL #2
000628  7d92              LDRB     r2,[r2,#0x16]
00062a  ebc21202          RSB      r2,r2,r2,LSL #4
00062e  eb000082          ADD      r0,r0,r2,LSL #2
000632  4281              CMP      r1,r0
000634  da6e              BGE      |L9.1812|
;;;2704               {
;;;2705   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time3[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;2706   //														<(Run_Diagram_buff[i].End_Timep3[0]*60+Run_Diagram_buff[i].End_Timep3[1]))
;;;2707   //					{
;;;2708                   App_printf("\r\nthe 3");
000636  a08c              ADR      r0,|L9.2152|
000638  f7fffffe          BL       App_printf
;;;2709                   State_monitor[i].start[2]=1;
00063c  2001              MOVS     r0,#1
00063e  eb040184          ADD      r1,r4,r4,LSL #2
000642  4a83              LDR      r2,|L9.2128|
000644  eb020181          ADD      r1,r2,r1,LSL #2
000648  7088              STRB     r0,[r1,#2]
;;;2710                   State_monitor[i].end[2]=0;
00064a  2100              MOVS     r1,#0
00064c  eb040084          ADD      r0,r4,r4,LSL #2
000650  eb020080          ADD      r0,r2,r0,LSL #2
000654  7301              STRB     r1,[r0,#0xc]
;;;2711                   Hard_control.usage_diagram_count++;
000656  4883              LDR      r0,|L9.2148|
000658  7800              LDRB     r0,[r0,#0]  ; Hard_control
00065a  1c40              ADDS     r0,r0,#1
00065c  4981              LDR      r1,|L9.2148|
00065e  7008              STRB     r0,[r1,#0]
;;;2712                   if(Hard_control.usage_diagram_count==1)
000660  4608              MOV      r0,r1
000662  7800              LDRB     r0,[r0,#0]  ; Hard_control
000664  2801              CMP      r0,#1
000666  d118              BNE      |L9.1690|
;;;2713                   {
;;;2714                       Trans_open_Copy.Type[0]=1;
000668  4977              LDR      r1,|L9.2120|
00066a  7008              STRB     r0,[r1,#0]
;;;2715                       Trans_open_Copy.Channel[0]=1;
00066c  7048              STRB     r0,[r1,#1]
;;;2716                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power3[0];
00066e  eb0400c4          ADD      r0,r4,r4,LSL #3
000672  eb001004          ADD      r0,r0,r4,LSL #4
000676  4975              LDR      r1,|L9.2124|
000678  eb010080          ADD      r0,r1,r0,LSL #2
00067c  7e00              LDRB     r0,[r0,#0x18]
00067e  4972              LDR      r1,|L9.2120|
000680  7408              STRB     r0,[r1,#0x10]
;;;2717                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq3,4);
000682  eb0400c4          ADD      r0,r4,r4,LSL #3
000686  eb001004          ADD      r0,r0,r4,LSL #4
00068a  4970              LDR      r1,|L9.2124|
00068c  eb010180          ADD      r1,r1,r0,LSL #2
000690  486d              LDR      r0,|L9.2120|
000692  f8d11019          LDR      r1,[r1,#0x19]
000696  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.1688|
000698  e03c              B        |L9.1812|
                  |L9.1690|
;;;2718                   }
;;;2719                   else if(Hard_control.usage_diagram_count==2)
00069a  4872              LDR      r0,|L9.2148|
00069c  7800              LDRB     r0,[r0,#0]  ; Hard_control
00069e  2802              CMP      r0,#2
0006a0  d11a              BNE      |L9.1752|
;;;2720                   {
;;;2721                       Trans_open_Copy.Type[0]=2;
0006a2  4969              LDR      r1,|L9.2120|
0006a4  7008              STRB     r0,[r1,#0]
;;;2722                       Trans_open_Copy.Channel[1]=2;
0006a6  2102              MOVS     r1,#2
0006a8  4867              LDR      r0,|L9.2120|
0006aa  7081              STRB     r1,[r0,#2]
;;;2723                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power3[0];
0006ac  eb0400c4          ADD      r0,r4,r4,LSL #3
0006b0  eb001004          ADD      r0,r0,r4,LSL #4
0006b4  4965              LDR      r1,|L9.2124|
0006b6  eb010080          ADD      r0,r1,r0,LSL #2
0006ba  7e01              LDRB     r1,[r0,#0x18]
0006bc  4862              LDR      r0,|L9.2120|
0006be  7441              STRB     r1,[r0,#0x11]
;;;2724                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq3,4);
0006c0  eb0400c4          ADD      r0,r4,r4,LSL #3
0006c4  eb001004          ADD      r0,r0,r4,LSL #4
0006c8  4960              LDR      r1,|L9.2124|
0006ca  eb010180          ADD      r1,r1,r0,LSL #2
0006ce  485e              LDR      r0,|L9.2120|
0006d0  f8d11019          LDR      r1,[r1,#0x19]
0006d4  6081              STR      r1,[r0,#8]
0006d6  e01d              B        |L9.1812|
                  |L9.1752|
;;;2725                   }
;;;2726                   else if(Hard_control.usage_diagram_count==3)
0006d8  4862              LDR      r0,|L9.2148|
0006da  7800              LDRB     r0,[r0,#0]  ; Hard_control
0006dc  2803              CMP      r0,#3
0006de  d119              BNE      |L9.1812|
;;;2727                   {
;;;2728                       Trans_open_Copy.Type[0]=3;
0006e0  4959              LDR      r1,|L9.2120|
0006e2  7008              STRB     r0,[r1,#0]
;;;2729                       Trans_open_Copy.Channel[2]=3;
0006e4  2103              MOVS     r1,#3
0006e6  4858              LDR      r0,|L9.2120|
0006e8  70c1              STRB     r1,[r0,#3]
;;;2730                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power3[0];
0006ea  eb0400c4          ADD      r0,r4,r4,LSL #3
0006ee  eb001004          ADD      r0,r0,r4,LSL #4
0006f2  4956              LDR      r1,|L9.2124|
0006f4  eb010080          ADD      r0,r1,r0,LSL #2
0006f8  7e01              LDRB     r1,[r0,#0x18]
0006fa  4853              LDR      r0,|L9.2120|
0006fc  7481              STRB     r1,[r0,#0x12]
;;;2731                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq3,4);
0006fe  eb0400c4          ADD      r0,r4,r4,LSL #3
000702  eb001004          ADD      r0,r0,r4,LSL #4
000706  4951              LDR      r1,|L9.2124|
000708  eb010180          ADD      r1,r1,r0,LSL #2
00070c  484e              LDR      r0,|L9.2120|
00070e  f8d11019          LDR      r1,[r1,#0x19]
000712  60c1              STR      r1,[r0,#0xc]
                  |L9.1812|
;;;2732                   }
;;;2733                   //	}
;;;2734               }
;;;2735   
;;;2736           }
;;;2737           if(State_monitor[i].end[2]!=1)   //结束
000714  eb040084          ADD      r0,r4,r4,LSL #2
000718  494d              LDR      r1,|L9.2128|
00071a  eb010080          ADD      r0,r1,r0,LSL #2
00071e  7b00              LDRB     r0,[r0,#0xc]
000720  2801              CMP      r0,#1
000722  d07b              BEQ      |L9.2076|
;;;2738           {
;;;2739               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep3[0])
000724  484b              LDR      r0,|L9.2132|
000726  6880              LDR      r0,[r0,#8]  ; set_time
000728  eb0401c4          ADD      r1,r4,r4,LSL #3
00072c  eb011104          ADD      r1,r1,r4,LSL #4
000730  4a46              LDR      r2,|L9.2124|
000732  eb020181          ADD      r1,r2,r1,LSL #2
000736  7d89              LDRB     r1,[r1,#0x16]
000738  4288              CMP      r0,r1
00073a  d16f              BNE      |L9.2076|
;;;2740               {
;;;2741                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep3[1])
00073c  4845              LDR      r0,|L9.2132|
00073e  6841              LDR      r1,[r0,#4]  ; set_time
000740  eb0400c4          ADD      r0,r4,r4,LSL #3
000744  eb001004          ADD      r0,r0,r4,LSL #4
000748  eb020080          ADD      r0,r2,r0,LSL #2
00074c  7dc0              LDRB     r0,[r0,#0x17]
00074e  4281              CMP      r1,r0
000750  d164              BNE      |L9.2076|
;;;2742                   {
;;;2743                       App_printf("\r\nthe 3 end\r\n");
000752  a047              ADR      r0,|L9.2160|
000754  f7fffffe          BL       App_printf
;;;2744                       Hard_control.usage_diagram_count--;
000758  4842              LDR      r0,|L9.2148|
00075a  7800              LDRB     r0,[r0,#0]  ; Hard_control
00075c  1e40              SUBS     r0,r0,#1
00075e  4941              LDR      r1,|L9.2148|
000760  7008              STRB     r0,[r1,#0]
;;;2745                       State_monitor[i].end[2]=1;
000762  2101              MOVS     r1,#1
000764  eb040084          ADD      r0,r4,r4,LSL #2
000768  4a39              LDR      r2,|L9.2128|
00076a  eb020080          ADD      r0,r2,r0,LSL #2
00076e  7301              STRB     r1,[r0,#0xc]
;;;2746                       State_monitor[i].start[2]=0;
000770  2000              MOVS     r0,#0
000772  eb040184          ADD      r1,r4,r4,LSL #2
000776  eb020181          ADD      r1,r2,r1,LSL #2
00077a  7088              STRB     r0,[r1,#2]
;;;2747                       if(Trans_open_Copy.Type[0]==1)
00077c  4832              LDR      r0,|L9.2120|
00077e  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000780  2801              CMP      r0,#1
000782  d107              BNE      |L9.1940|
;;;2748                       {
;;;2749                           Trans_open_Copy.Type[0]=0;
000784  2000              MOVS     r0,#0
000786  4930              LDR      r1,|L9.2120|
000788  7008              STRB     r0,[r1,#0]
;;;2750                           //固频时，时间到，停止即可
;;;2751                           memset(Trans_open_Copy.Freq,0,12);//清零
00078a  4608              MOV      r0,r1
00078c  2100              MOVS     r1,#0
00078e  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
000790  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
000792  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.1940|
;;;2752                       }
;;;2753                       if(Trans_open_Copy.Type[0]==2)
000794  482c              LDR      r0,|L9.2120|
000796  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000798  2802              CMP      r0,#2
00079a  d11a              BNE      |L9.2002|
;;;2754                       {
;;;2755                           Trans_open_Copy.Type[0]=1;
00079c  2001              MOVS     r0,#1
00079e  492a              LDR      r1,|L9.2120|
0007a0  7008              STRB     r0,[r1,#0]
;;;2756                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq3,4)==0)   //踢出第一个
0007a2  eb0400c4          ADD      r0,r4,r4,LSL #3
0007a6  eb001004          ADD      r0,r0,r4,LSL #4
0007aa  4a28              LDR      r2,|L9.2124|
0007ac  eb020080          ADD      r0,r2,r0,LSL #2
0007b0  f1000119          ADD      r1,r0,#0x19
0007b4  2204              MOVS     r2,#4
0007b6  4824              LDR      r0,|L9.2120|
0007b8  1d00              ADDS     r0,r0,#4
0007ba  f7fffffe          BL       memcmp
0007be  b940              CBNZ     r0,|L9.2002|
;;;2757                           {
;;;2758                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
0007c0  4821              LDR      r0,|L9.2120|
0007c2  7a00              LDRB     r0,[r0,#8]
0007c4  4920              LDR      r1,|L9.2120|
0007c6  7108              STRB     r0,[r1,#4]
;;;2759                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
0007c8  4608              MOV      r0,r1
0007ca  7a41              LDRB     r1,[r0,#9]
0007cc  7141              STRB     r1,[r0,#5]
;;;2760                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
0007ce  7a81              LDRB     r1,[r0,#0xa]
0007d0  7181              STRB     r1,[r0,#6]
                  |L9.2002|
;;;2761                               //最后1byte都为0，所以不处理
;;;2762                           }
;;;2763                           //如果是踢出第二个，不需要做处理了
;;;2764                       }
;;;2765                       if(Trans_open_Copy.Type[0]==3)
0007d2  481d              LDR      r0,|L9.2120|
0007d4  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0007d6  2803              CMP      r0,#3
0007d8  d154              BNE      |L9.2180|
;;;2766                       {
;;;2767                           Trans_open_Copy.Type[0]=2;
0007da  2002              MOVS     r0,#2
0007dc  491a              LDR      r1,|L9.2120|
0007de  7008              STRB     r0,[r1,#0]
;;;2768                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq3,4)==0)   //踢出第一个
0007e0  eb0400c4          ADD      r0,r4,r4,LSL #3
0007e4  eb001004          ADD      r0,r0,r4,LSL #4
0007e8  4a18              LDR      r2,|L9.2124|
0007ea  eb020080          ADD      r0,r2,r0,LSL #2
0007ee  f1000119          ADD      r1,r0,#0x19
0007f2  2204              MOVS     r2,#4
0007f4  4814              LDR      r0,|L9.2120|
0007f6  1d00              ADDS     r0,r0,#4
0007f8  f7fffffe          BL       memcmp
0007fc  b978              CBNZ     r0,|L9.2078|
;;;2769                           {
;;;2770                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
0007fe  4812              LDR      r0,|L9.2120|
000800  7a00              LDRB     r0,[r0,#8]
000802  4911              LDR      r1,|L9.2120|
000804  7108              STRB     r0,[r1,#4]
;;;2771                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000806  4608              MOV      r0,r1
000808  7a41              LDRB     r1,[r0,#9]
00080a  7141              STRB     r1,[r0,#5]
;;;2772                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
00080c  7a81              LDRB     r1,[r0,#0xa]
00080e  7181              STRB     r1,[r0,#6]
;;;2773                               //最后1byte都为0，所以不处理
;;;2774                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000810  7b01              LDRB     r1,[r0,#0xc]
000812  7201              STRB     r1,[r0,#8]
;;;2775                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000814  7b41              LDRB     r1,[r0,#0xd]
000816  7241              STRB     r1,[r0,#9]
;;;2776                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000818  7b81              LDRB     r1,[r0,#0xe]
00081a  7281              STRB     r1,[r0,#0xa]
                  |L9.2076|
00081c  e032              B        |L9.2180|
                  |L9.2078|
;;;2777                           }
;;;2778                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq3,4)==0)     //踢出第二个
00081e  eb0400c4          ADD      r0,r4,r4,LSL #3
000822  eb001004          ADD      r0,r0,r4,LSL #4
000826  4a09              LDR      r2,|L9.2124|
000828  eb020080          ADD      r0,r2,r0,LSL #2
00082c  f1000119          ADD      r1,r0,#0x19
000830  2204              MOVS     r2,#4
000832  4805              LDR      r0,|L9.2120|
000834  3008              ADDS     r0,r0,#8
000836  f7fffffe          BL       memcmp
00083a  bb18              CBNZ     r0,|L9.2180|
;;;2779                           {
;;;2780                               //最后1byte都为0，所以不处理
;;;2781                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
00083c  4802              LDR      r0,|L9.2120|
00083e  7b01              LDRB     r1,[r0,#0xc]
000840  7201              STRB     r1,[r0,#8]
;;;2782                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000842  7b41              LDRB     r1,[r0,#0xd]
000844  7241              STRB     r1,[r0,#9]
;;;2783                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000846  e01b              B        |L9.2176|
                  |L9.2120|
                          DCD      Trans_open_Copy
                  |L9.2124|
                          DCD      Run_Diagram_buff
                  |L9.2128|
                          DCD      State_monitor
                  |L9.2132|
                          DCD      set_time
                  |L9.2136|
000858  0d0a7468          DCB      "\r\nthe 2 end",0
00085c  65203220
000860  656e6400
                  |L9.2148|
                          DCD      Hard_control
                  |L9.2152|
000868  0d0a7468          DCB      "\r\nthe 3",0
00086c  65203300
                  |L9.2160|
000870  0d0a7468          DCB      "\r\nthe 3 end\r\n",0
000874  65203320
000878  656e640d
00087c  0a00    
00087e  00                DCB      0
00087f  00                DCB      0
                  |L9.2176|
000880  7b81              LDRB     r1,[r0,#0xe]
000882  7281              STRB     r1,[r0,#0xa]
                  |L9.2180|
;;;2784                           }
;;;2785                           //如果是踢出第三个，不需要做处理了
;;;2786                       }
;;;2787                   }
;;;2788               }
;;;2789   
;;;2790   
;;;2791           }
;;;2792           //第四个
;;;2793           if(State_monitor[i].start[3]!=1)
000884  eb040084          ADD      r0,r4,r4,LSL #2
000888  49fe              LDR      r1,|L9.3204|
00088a  eb010080          ADD      r0,r1,r0,LSL #2
00088e  78c0              LDRB     r0,[r0,#3]
000890  2801              CMP      r0,#1
000892  d078              BEQ      |L9.2438|
;;;2794           {
;;;2795               if(Run_Diagram_buff[i].Start_Time4[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time4[0]*60+Run_Diagram_buff[i].Start_Time4[1]))\
000894  eb0400c4          ADD      r0,r4,r4,LSL #3
000898  eb001004          ADD      r0,r0,r4,LSL #4
00089c  49fa              LDR      r1,|L9.3208|
00089e  eb010080          ADD      r0,r1,r0,LSL #2
0008a2  7f80              LDRB     r0,[r0,#0x1e]
0008a4  28ff              CMP      r0,#0xff
0008a6  d06e              BEQ      |L9.2438|
0008a8  48f8              LDR      r0,|L9.3212|
0008aa  6840              LDR      r0,[r0,#4]  ; set_time
0008ac  49f7              LDR      r1,|L9.3212|
0008ae  6889              LDR      r1,[r1,#8]  ; set_time
0008b0  ebc11101          RSB      r1,r1,r1,LSL #4
0008b4  eb000181          ADD      r1,r0,r1,LSL #2
0008b8  eb0400c4          ADD      r0,r4,r4,LSL #3
0008bc  eb001004          ADD      r0,r0,r4,LSL #4
0008c0  4af1              LDR      r2,|L9.3208|
0008c2  eb020080          ADD      r0,r2,r0,LSL #2
0008c6  7fc0              LDRB     r0,[r0,#0x1f]
0008c8  eb0402c4          ADD      r2,r4,r4,LSL #3
0008cc  eb021204          ADD      r2,r2,r4,LSL #4
0008d0  4bed              LDR      r3,|L9.3208|
0008d2  eb030282          ADD      r2,r3,r2,LSL #2
0008d6  7f92              LDRB     r2,[r2,#0x1e]
0008d8  ebc21202          RSB      r2,r2,r2,LSL #4
0008dc  eb000082          ADD      r0,r0,r2,LSL #2
0008e0  4281              CMP      r1,r0
0008e2  db50              BLT      |L9.2438|
;;;2796                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep4[0]*60+Run_Diagram_buff[i].End_Timep4[1])))
0008e4  48e9              LDR      r0,|L9.3212|
0008e6  6840              LDR      r0,[r0,#4]  ; set_time
0008e8  49e8              LDR      r1,|L9.3212|
0008ea  6889              LDR      r1,[r1,#8]  ; set_time
0008ec  ebc11101          RSB      r1,r1,r1,LSL #4
0008f0  eb000181          ADD      r1,r0,r1,LSL #2
0008f4  eb0400c4          ADD      r0,r4,r4,LSL #3
0008f8  eb001004          ADD      r0,r0,r4,LSL #4
0008fc  461a              MOV      r2,r3
0008fe  eb020080          ADD      r0,r2,r0,LSL #2
000902  f8900021          LDRB     r0,[r0,#0x21]
000906  eb0402c4          ADD      r2,r4,r4,LSL #3
00090a  eb021204          ADD      r2,r2,r4,LSL #4
00090e  eb030282          ADD      r2,r3,r2,LSL #2
000912  f8922020          LDRB     r2,[r2,#0x20]
000916  ebc21202          RSB      r2,r2,r2,LSL #4
00091a  eb000082          ADD      r0,r0,r2,LSL #2
00091e  4281              CMP      r1,r0
000920  da71              BGE      |L9.2566|
;;;2797               {
;;;2798   //				if(set_time.tm_min== Run_Diagram_buff[i].Start_Time4[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;2799   //														<(Run_Diagram_buff[i].End_Timep4[0]*60+Run_Diagram_buff[i].End_Timep4[1]))
;;;2800   //				{
;;;2801                   App_printf("\r\nthe 4");
000922  a0db              ADR      r0,|L9.3216|
000924  f7fffffe          BL       App_printf
;;;2802                   State_monitor[i].start[3]=1;
000928  2001              MOVS     r0,#1
00092a  eb040184          ADD      r1,r4,r4,LSL #2
00092e  4ad5              LDR      r2,|L9.3204|
000930  eb020181          ADD      r1,r2,r1,LSL #2
000934  70c8              STRB     r0,[r1,#3]
;;;2803                   State_monitor[i].end[3]=0;
000936  2100              MOVS     r1,#0
000938  eb040084          ADD      r0,r4,r4,LSL #2
00093c  eb020080          ADD      r0,r2,r0,LSL #2
000940  7341              STRB     r1,[r0,#0xd]
;;;2804                   Hard_control.usage_diagram_count++;
000942  48d5              LDR      r0,|L9.3224|
000944  7800              LDRB     r0,[r0,#0]  ; Hard_control
000946  1c40              ADDS     r0,r0,#1
000948  49d3              LDR      r1,|L9.3224|
00094a  7008              STRB     r0,[r1,#0]
;;;2805                   if(Hard_control.usage_diagram_count==1)
00094c  4608              MOV      r0,r1
00094e  7800              LDRB     r0,[r0,#0]  ; Hard_control
000950  2801              CMP      r0,#1
000952  d119              BNE      |L9.2440|
;;;2806                   {
;;;2807                       Trans_open_Copy.Type[0]=1;
000954  49d1              LDR      r1,|L9.3228|
000956  7008              STRB     r0,[r1,#0]
;;;2808                       Trans_open_Copy.Channel[0]=1;
000958  7048              STRB     r0,[r1,#1]
;;;2809                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power4[0];
00095a  eb0400c4          ADD      r0,r4,r4,LSL #3
00095e  eb001004          ADD      r0,r0,r4,LSL #4
000962  49c9              LDR      r1,|L9.3208|
000964  eb010080          ADD      r0,r1,r0,LSL #2
000968  f8900022          LDRB     r0,[r0,#0x22]
00096c  49cb              LDR      r1,|L9.3228|
00096e  7408              STRB     r0,[r1,#0x10]
;;;2810                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq4,4);
000970  eb0400c4          ADD      r0,r4,r4,LSL #3
000974  eb001004          ADD      r0,r0,r4,LSL #4
000978  49c3              LDR      r1,|L9.3208|
00097a  eb010180          ADD      r1,r1,r0,LSL #2
00097e  48c7              LDR      r0,|L9.3228|
000980  f8d11023          LDR      r1,[r1,#0x23]
000984  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.2438|
000986  e03e              B        |L9.2566|
                  |L9.2440|
;;;2811                   }
;;;2812                   else if(Hard_control.usage_diagram_count==2)
000988  48c3              LDR      r0,|L9.3224|
00098a  7800              LDRB     r0,[r0,#0]  ; Hard_control
00098c  2802              CMP      r0,#2
00098e  d11b              BNE      |L9.2504|
;;;2813                   {
;;;2814                       Trans_open_Copy.Type[0]=2;
000990  49c2              LDR      r1,|L9.3228|
000992  7008              STRB     r0,[r1,#0]
;;;2815                       Trans_open_Copy.Channel[1]=2;
000994  2102              MOVS     r1,#2
000996  48c1              LDR      r0,|L9.3228|
000998  7081              STRB     r1,[r0,#2]
;;;2816                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power4[0];
00099a  eb0400c4          ADD      r0,r4,r4,LSL #3
00099e  eb001004          ADD      r0,r0,r4,LSL #4
0009a2  49b9              LDR      r1,|L9.3208|
0009a4  eb010080          ADD      r0,r1,r0,LSL #2
0009a8  f8901022          LDRB     r1,[r0,#0x22]
0009ac  48bb              LDR      r0,|L9.3228|
0009ae  7441              STRB     r1,[r0,#0x11]
;;;2817                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq4,4);
0009b0  eb0400c4          ADD      r0,r4,r4,LSL #3
0009b4  eb001004          ADD      r0,r0,r4,LSL #4
0009b8  49b3              LDR      r1,|L9.3208|
0009ba  eb010180          ADD      r1,r1,r0,LSL #2
0009be  48b7              LDR      r0,|L9.3228|
0009c0  f8d11023          LDR      r1,[r1,#0x23]
0009c4  6081              STR      r1,[r0,#8]
0009c6  e01e              B        |L9.2566|
                  |L9.2504|
;;;2818                   }
;;;2819                   else if(Hard_control.usage_diagram_count==3)
0009c8  48b3              LDR      r0,|L9.3224|
0009ca  7800              LDRB     r0,[r0,#0]  ; Hard_control
0009cc  2803              CMP      r0,#3
0009ce  d11a              BNE      |L9.2566|
;;;2820                   {
;;;2821                       Trans_open_Copy.Type[0]=3;
0009d0  49b2              LDR      r1,|L9.3228|
0009d2  7008              STRB     r0,[r1,#0]
;;;2822                       Trans_open_Copy.Channel[2]=3;
0009d4  2103              MOVS     r1,#3
0009d6  48b1              LDR      r0,|L9.3228|
0009d8  70c1              STRB     r1,[r0,#3]
;;;2823                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power4[0];
0009da  eb0400c4          ADD      r0,r4,r4,LSL #3
0009de  eb001004          ADD      r0,r0,r4,LSL #4
0009e2  49a9              LDR      r1,|L9.3208|
0009e4  eb010080          ADD      r0,r1,r0,LSL #2
0009e8  f8901022          LDRB     r1,[r0,#0x22]
0009ec  48ab              LDR      r0,|L9.3228|
0009ee  7481              STRB     r1,[r0,#0x12]
;;;2824                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq4,4);
0009f0  eb0400c4          ADD      r0,r4,r4,LSL #3
0009f4  eb001004          ADD      r0,r0,r4,LSL #4
0009f8  49a3              LDR      r1,|L9.3208|
0009fa  eb010180          ADD      r1,r1,r0,LSL #2
0009fe  48a7              LDR      r0,|L9.3228|
000a00  f8d11023          LDR      r1,[r1,#0x23]
000a04  60c1              STR      r1,[r0,#0xc]
                  |L9.2566|
;;;2825                   }
;;;2826                   //}
;;;2827               }
;;;2828           }
;;;2829           if(State_monitor[i].end[3]!=1)   //结束
000a06  eb040084          ADD      r0,r4,r4,LSL #2
000a0a  499e              LDR      r1,|L9.3204|
000a0c  eb010080          ADD      r0,r1,r0,LSL #2
000a10  7b40              LDRB     r0,[r0,#0xd]
000a12  2801              CMP      r0,#1
000a14  d07d              BEQ      |L9.2834|
;;;2830           {
;;;2831               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep4[0])
000a16  489d              LDR      r0,|L9.3212|
000a18  6880              LDR      r0,[r0,#8]  ; set_time
000a1a  eb0401c4          ADD      r1,r4,r4,LSL #3
000a1e  eb011104          ADD      r1,r1,r4,LSL #4
000a22  4a99              LDR      r2,|L9.3208|
000a24  eb020181          ADD      r1,r2,r1,LSL #2
000a28  f8911020          LDRB     r1,[r1,#0x20]
000a2c  4288              CMP      r0,r1
000a2e  d170              BNE      |L9.2834|
;;;2832               {
;;;2833                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep4[1])
000a30  4896              LDR      r0,|L9.3212|
000a32  6841              LDR      r1,[r0,#4]  ; set_time
000a34  eb0400c4          ADD      r0,r4,r4,LSL #3
000a38  eb001004          ADD      r0,r0,r4,LSL #4
000a3c  eb020080          ADD      r0,r2,r0,LSL #2
000a40  f8900021          LDRB     r0,[r0,#0x21]
000a44  4281              CMP      r1,r0
000a46  d17b              BNE      |L9.2880|
;;;2834                   {
;;;2835                       App_printf("\r\nthe 4 end");
000a48  a095              ADR      r0,|L9.3232|
000a4a  f7fffffe          BL       App_printf
;;;2836                       Hard_control.usage_diagram_count--;
000a4e  4892              LDR      r0,|L9.3224|
000a50  7800              LDRB     r0,[r0,#0]  ; Hard_control
000a52  1e40              SUBS     r0,r0,#1
000a54  4990              LDR      r1,|L9.3224|
000a56  7008              STRB     r0,[r1,#0]
;;;2837                       State_monitor[i].end[3]=1;
000a58  2101              MOVS     r1,#1
000a5a  eb040084          ADD      r0,r4,r4,LSL #2
000a5e  4a89              LDR      r2,|L9.3204|
000a60  eb020080          ADD      r0,r2,r0,LSL #2
000a64  7341              STRB     r1,[r0,#0xd]
;;;2838                       State_monitor[i].start[3]=0;
000a66  2000              MOVS     r0,#0
000a68  eb040184          ADD      r1,r4,r4,LSL #2
000a6c  eb020181          ADD      r1,r2,r1,LSL #2
000a70  70c8              STRB     r0,[r1,#3]
;;;2839                       if(Trans_open_Copy.Type[0]==1)
000a72  488a              LDR      r0,|L9.3228|
000a74  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000a76  2801              CMP      r0,#1
000a78  d107              BNE      |L9.2698|
;;;2840                       {
;;;2841                           Trans_open_Copy.Type[0]=0;
000a7a  2000              MOVS     r0,#0
000a7c  4987              LDR      r1,|L9.3228|
000a7e  7008              STRB     r0,[r1,#0]
;;;2842                           //固频时，时间到，停止即可
;;;2843                           memset(Trans_open_Copy.Freq,0,12);//清零
000a80  4608              MOV      r0,r1
000a82  2100              MOVS     r1,#0
000a84  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
000a86  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
000a88  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.2698|
;;;2844                       }
;;;2845                       if(Trans_open_Copy.Type[0]==2)
000a8a  4884              LDR      r0,|L9.3228|
000a8c  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000a8e  2802              CMP      r0,#2
000a90  d11a              BNE      |L9.2760|
;;;2846                       {
;;;2847                           Trans_open_Copy.Type[0]=1;
000a92  2001              MOVS     r0,#1
000a94  4981              LDR      r1,|L9.3228|
000a96  7008              STRB     r0,[r1,#0]
;;;2848                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq4,4)==0)   //踢出第一个
000a98  eb0400c4          ADD      r0,r4,r4,LSL #3
000a9c  eb001004          ADD      r0,r0,r4,LSL #4
000aa0  4a79              LDR      r2,|L9.3208|
000aa2  eb020080          ADD      r0,r2,r0,LSL #2
000aa6  f1000123          ADD      r1,r0,#0x23
000aaa  2204              MOVS     r2,#4
000aac  487b              LDR      r0,|L9.3228|
000aae  1d00              ADDS     r0,r0,#4
000ab0  f7fffffe          BL       memcmp
000ab4  b940              CBNZ     r0,|L9.2760|
;;;2849                           {
;;;2850                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000ab6  4879              LDR      r0,|L9.3228|
000ab8  7a00              LDRB     r0,[r0,#8]
000aba  4978              LDR      r1,|L9.3228|
000abc  7108              STRB     r0,[r1,#4]
;;;2851                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000abe  4608              MOV      r0,r1
000ac0  7a41              LDRB     r1,[r0,#9]
000ac2  7141              STRB     r1,[r0,#5]
;;;2852                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
000ac4  7a81              LDRB     r1,[r0,#0xa]
000ac6  7181              STRB     r1,[r0,#6]
                  |L9.2760|
;;;2853                               //最后1byte都为0，所以不处理
;;;2854                           }
;;;2855                           //如果是踢出第二个，不需要做处理了
;;;2856                       }
;;;2857                       if(Trans_open_Copy.Type[0]==3)
000ac8  4874              LDR      r0,|L9.3228|
000aca  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000acc  2803              CMP      r0,#3
000ace  d137              BNE      |L9.2880|
;;;2858                       {
;;;2859                           Trans_open_Copy.Type[0]=2;
000ad0  2002              MOVS     r0,#2
000ad2  4972              LDR      r1,|L9.3228|
000ad4  7008              STRB     r0,[r1,#0]
;;;2860                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq4,4)==0)   //踢出第一个
000ad6  eb0400c4          ADD      r0,r4,r4,LSL #3
000ada  eb001004          ADD      r0,r0,r4,LSL #4
000ade  4a6a              LDR      r2,|L9.3208|
000ae0  eb020080          ADD      r0,r2,r0,LSL #2
000ae4  f1000123          ADD      r1,r0,#0x23
000ae8  2204              MOVS     r2,#4
000aea  486c              LDR      r0,|L9.3228|
000aec  1d00              ADDS     r0,r0,#4
000aee  f7fffffe          BL       memcmp
000af2  b978              CBNZ     r0,|L9.2836|
;;;2861                           {
;;;2862                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000af4  4869              LDR      r0,|L9.3228|
000af6  7a00              LDRB     r0,[r0,#8]
000af8  4968              LDR      r1,|L9.3228|
000afa  7108              STRB     r0,[r1,#4]
;;;2863                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000afc  4608              MOV      r0,r1
000afe  7a41              LDRB     r1,[r0,#9]
000b00  7141              STRB     r1,[r0,#5]
;;;2864                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
000b02  7a81              LDRB     r1,[r0,#0xa]
000b04  7181              STRB     r1,[r0,#6]
;;;2865                               //最后1byte都为0，所以不处理
;;;2866                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000b06  7b01              LDRB     r1,[r0,#0xc]
000b08  7201              STRB     r1,[r0,#8]
;;;2867                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000b0a  7b41              LDRB     r1,[r0,#0xd]
000b0c  7241              STRB     r1,[r0,#9]
;;;2868                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000b0e  7b81              LDRB     r1,[r0,#0xe]
000b10  7281              STRB     r1,[r0,#0xa]
                  |L9.2834|
000b12  e015              B        |L9.2880|
                  |L9.2836|
;;;2869                           }
;;;2870                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq4,4)==0)     //踢出第二个
000b14  eb0400c4          ADD      r0,r4,r4,LSL #3
000b18  eb001004          ADD      r0,r0,r4,LSL #4
000b1c  4a5a              LDR      r2,|L9.3208|
000b1e  eb020080          ADD      r0,r2,r0,LSL #2
000b22  f1000123          ADD      r1,r0,#0x23
000b26  2204              MOVS     r2,#4
000b28  485c              LDR      r0,|L9.3228|
000b2a  3008              ADDS     r0,r0,#8
000b2c  f7fffffe          BL       memcmp
000b30  b930              CBNZ     r0,|L9.2880|
;;;2871                           {
;;;2872                               //最后1byte都为0，所以不处理
;;;2873                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000b32  485a              LDR      r0,|L9.3228|
000b34  7b01              LDRB     r1,[r0,#0xc]
000b36  7201              STRB     r1,[r0,#8]
;;;2874                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000b38  7b41              LDRB     r1,[r0,#0xd]
000b3a  7241              STRB     r1,[r0,#9]
;;;2875                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000b3c  7b81              LDRB     r1,[r0,#0xe]
000b3e  7281              STRB     r1,[r0,#0xa]
                  |L9.2880|
;;;2876                           }
;;;2877                           //如果是踢出第三个，不需要做处理了
;;;2878                       }
;;;2879                   }
;;;2880               }
;;;2881           }
;;;2882           //第五个
;;;2883           if(State_monitor[i].start[4]!=1)
000b40  eb040084          ADD      r0,r4,r4,LSL #2
000b44  494f              LDR      r1,|L9.3204|
000b46  eb010080          ADD      r0,r1,r0,LSL #2
000b4a  7900              LDRB     r0,[r0,#4]
000b4c  2801              CMP      r0,#1
000b4e  d07b              BEQ      |L9.3144|
;;;2884           {
;;;2885               if(Run_Diagram_buff[i].Start_Time5[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time5[0]*60+Run_Diagram_buff[i].Start_Time5[1]))\
000b50  eb0400c4          ADD      r0,r4,r4,LSL #3
000b54  eb001004          ADD      r0,r0,r4,LSL #4
000b58  494b              LDR      r1,|L9.3208|
000b5a  eb010080          ADD      r0,r1,r0,LSL #2
000b5e  f8900028          LDRB     r0,[r0,#0x28]
000b62  28ff              CMP      r0,#0xff
000b64  d070              BEQ      |L9.3144|
000b66  4849              LDR      r0,|L9.3212|
000b68  6840              LDR      r0,[r0,#4]  ; set_time
000b6a  4948              LDR      r1,|L9.3212|
000b6c  6889              LDR      r1,[r1,#8]  ; set_time
000b6e  ebc11101          RSB      r1,r1,r1,LSL #4
000b72  eb000181          ADD      r1,r0,r1,LSL #2
000b76  eb0400c4          ADD      r0,r4,r4,LSL #3
000b7a  eb001004          ADD      r0,r0,r4,LSL #4
000b7e  4a42              LDR      r2,|L9.3208|
000b80  eb020080          ADD      r0,r2,r0,LSL #2
000b84  f8900029          LDRB     r0,[r0,#0x29]
000b88  eb0402c4          ADD      r2,r4,r4,LSL #3
000b8c  eb021204          ADD      r2,r2,r4,LSL #4
000b90  4b3d              LDR      r3,|L9.3208|
000b92  eb030282          ADD      r2,r3,r2,LSL #2
000b96  f8922028          LDRB     r2,[r2,#0x28]
000b9a  ebc21202          RSB      r2,r2,r2,LSL #4
000b9e  eb000082          ADD      r0,r0,r2,LSL #2
000ba2  4281              CMP      r1,r0
000ba4  db50              BLT      |L9.3144|
;;;2886                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep5[0]*60+Run_Diagram_buff[i].End_Timep5[1])))
000ba6  4839              LDR      r0,|L9.3212|
000ba8  6840              LDR      r0,[r0,#4]  ; set_time
000baa  4938              LDR      r1,|L9.3212|
000bac  6889              LDR      r1,[r1,#8]  ; set_time
000bae  ebc11101          RSB      r1,r1,r1,LSL #4
000bb2  eb000181          ADD      r1,r0,r1,LSL #2
000bb6  eb0400c4          ADD      r0,r4,r4,LSL #3
000bba  eb001004          ADD      r0,r0,r4,LSL #4
000bbe  461a              MOV      r2,r3
000bc0  eb020080          ADD      r0,r2,r0,LSL #2
000bc4  f890002b          LDRB     r0,[r0,#0x2b]
000bc8  eb0402c4          ADD      r2,r4,r4,LSL #3
000bcc  eb021204          ADD      r2,r2,r4,LSL #4
000bd0  eb030282          ADD      r2,r3,r2,LSL #2
000bd4  f892202a          LDRB     r2,[r2,#0x2a]
000bd8  ebc21202          RSB      r2,r2,r2,LSL #4
000bdc  eb000082          ADD      r0,r0,r2,LSL #2
000be0  4281              CMP      r1,r0
000be2  da31              BGE      |L9.3144|
;;;2887               {
;;;2888   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time5[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;2889   //														<(Run_Diagram_buff[i].End_Timep5[0]*60+Run_Diagram_buff[i].End_Timep5[1]))
;;;2890   //					{
;;;2891                   App_printf("\r\nthe 5");
000be4  a031              ADR      r0,|L9.3244|
000be6  f7fffffe          BL       App_printf
;;;2892                   State_monitor[i].start[4]=1;
000bea  2001              MOVS     r0,#1
000bec  eb040184          ADD      r1,r4,r4,LSL #2
000bf0  4a24              LDR      r2,|L9.3204|
000bf2  eb020181          ADD      r1,r2,r1,LSL #2
000bf6  7108              STRB     r0,[r1,#4]
;;;2893                   State_monitor[i].end[4]=0;
000bf8  2100              MOVS     r1,#0
000bfa  eb040084          ADD      r0,r4,r4,LSL #2
000bfe  eb020080          ADD      r0,r2,r0,LSL #2
000c02  7381              STRB     r1,[r0,#0xe]
;;;2894                   Hard_control.usage_diagram_count++;
000c04  4824              LDR      r0,|L9.3224|
000c06  7800              LDRB     r0,[r0,#0]  ; Hard_control
000c08  1c40              ADDS     r0,r0,#1
000c0a  4923              LDR      r1,|L9.3224|
000c0c  7008              STRB     r0,[r1,#0]
;;;2895                   if(Hard_control.usage_diagram_count==1)
000c0e  4608              MOV      r0,r1
000c10  7800              LDRB     r0,[r0,#0]  ; Hard_control
000c12  2801              CMP      r0,#1
000c14  d119              BNE      |L9.3146|
;;;2896                   {
;;;2897                       Trans_open_Copy.Type[0]=1;
000c16  4921              LDR      r1,|L9.3228|
000c18  7008              STRB     r0,[r1,#0]
;;;2898                       Trans_open_Copy.Channel[0]=1;
000c1a  7048              STRB     r0,[r1,#1]
;;;2899                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power5[0];
000c1c  eb0400c4          ADD      r0,r4,r4,LSL #3
000c20  eb001004          ADD      r0,r0,r4,LSL #4
000c24  4918              LDR      r1,|L9.3208|
000c26  eb010080          ADD      r0,r1,r0,LSL #2
000c2a  f890002c          LDRB     r0,[r0,#0x2c]
000c2e  491b              LDR      r1,|L9.3228|
000c30  7408              STRB     r0,[r1,#0x10]
;;;2900                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq5,4);
000c32  eb0400c4          ADD      r0,r4,r4,LSL #3
000c36  eb001004          ADD      r0,r0,r4,LSL #4
000c3a  4913              LDR      r1,|L9.3208|
000c3c  eb010180          ADD      r1,r1,r0,LSL #2
000c40  4816              LDR      r0,|L9.3228|
000c42  f8d1102d          LDR      r1,[r1,#0x2d]
000c46  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.3144|
000c48  e057              B        |L9.3322|
                  |L9.3146|
;;;2901                   }
;;;2902                   else if(Hard_control.usage_diagram_count==2)
000c4a  4813              LDR      r0,|L9.3224|
000c4c  7800              LDRB     r0,[r0,#0]  ; Hard_control
000c4e  2802              CMP      r0,#2
000c50  d134              BNE      |L9.3260|
;;;2903                   {
;;;2904                       Trans_open_Copy.Type[0]=2;
000c52  4912              LDR      r1,|L9.3228|
000c54  7008              STRB     r0,[r1,#0]
;;;2905                       Trans_open_Copy.Channel[1]=2;
000c56  2102              MOVS     r1,#2
000c58  4810              LDR      r0,|L9.3228|
000c5a  7081              STRB     r1,[r0,#2]
;;;2906                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power5[0];
000c5c  eb0400c4          ADD      r0,r4,r4,LSL #3
000c60  eb001004          ADD      r0,r0,r4,LSL #4
000c64  4908              LDR      r1,|L9.3208|
000c66  eb010080          ADD      r0,r1,r0,LSL #2
000c6a  f890102c          LDRB     r1,[r0,#0x2c]
000c6e  480b              LDR      r0,|L9.3228|
000c70  7441              STRB     r1,[r0,#0x11]
;;;2907                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq5,4);
000c72  eb0400c4          ADD      r0,r4,r4,LSL #3
000c76  eb001004          ADD      r0,r0,r4,LSL #4
000c7a  4903              LDR      r1,|L9.3208|
000c7c  eb010180          ADD      r1,r1,r0,LSL #2
000c80  4806              LDR      r0,|L9.3228|
000c82  e017              B        |L9.3252|
                  |L9.3204|
                          DCD      State_monitor
                  |L9.3208|
                          DCD      Run_Diagram_buff
                  |L9.3212|
                          DCD      set_time
                  |L9.3216|
000c90  0d0a7468          DCB      "\r\nthe 4",0
000c94  65203400
                  |L9.3224|
                          DCD      Hard_control
                  |L9.3228|
                          DCD      Trans_open_Copy
                  |L9.3232|
000ca0  0d0a7468          DCB      "\r\nthe 4 end",0
000ca4  65203420
000ca8  656e6400
                  |L9.3244|
000cac  0d0a7468          DCB      "\r\nthe 5",0
000cb0  65203500
                  |L9.3252|
000cb4  f8d1102d          LDR      r1,[r1,#0x2d]
000cb8  6081              STR      r1,[r0,#8]
000cba  e01e              B        |L9.3322|
                  |L9.3260|
;;;2908                   }
;;;2909                   else if(Hard_control.usage_diagram_count==3)
000cbc  48fe              LDR      r0,|L9.4280|
000cbe  7800              LDRB     r0,[r0,#0]  ; Hard_control
000cc0  2803              CMP      r0,#3
000cc2  d11a              BNE      |L9.3322|
;;;2910                   {
;;;2911                       Trans_open_Copy.Type[0]=3;
000cc4  49fd              LDR      r1,|L9.4284|
000cc6  7008              STRB     r0,[r1,#0]
;;;2912                       Trans_open_Copy.Channel[2]=3;
000cc8  2103              MOVS     r1,#3
000cca  48fc              LDR      r0,|L9.4284|
000ccc  70c1              STRB     r1,[r0,#3]
;;;2913                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power5[0];
000cce  eb0400c4          ADD      r0,r4,r4,LSL #3
000cd2  eb001004          ADD      r0,r0,r4,LSL #4
000cd6  49fa              LDR      r1,|L9.4288|
000cd8  eb010080          ADD      r0,r1,r0,LSL #2
000cdc  f890102c          LDRB     r1,[r0,#0x2c]
000ce0  48f6              LDR      r0,|L9.4284|
000ce2  7481              STRB     r1,[r0,#0x12]
;;;2914                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq5,4);
000ce4  eb0400c4          ADD      r0,r4,r4,LSL #3
000ce8  eb001004          ADD      r0,r0,r4,LSL #4
000cec  49f4              LDR      r1,|L9.4288|
000cee  eb010180          ADD      r1,r1,r0,LSL #2
000cf2  48f2              LDR      r0,|L9.4284|
000cf4  f8d1102d          LDR      r1,[r1,#0x2d]
000cf8  60c1              STR      r1,[r0,#0xc]
                  |L9.3322|
;;;2915                   }
;;;2916                   //	}
;;;2917               }
;;;2918           }
;;;2919           if(State_monitor[i].end[4]!=1)   //结束
000cfa  eb040084          ADD      r0,r4,r4,LSL #2
000cfe  49f1              LDR      r1,|L9.4292|
000d00  eb010080          ADD      r0,r1,r0,LSL #2
000d04  7b80              LDRB     r0,[r0,#0xe]
000d06  2801              CMP      r0,#1
000d08  d07d              BEQ      |L9.3590|
;;;2920           {
;;;2921               if(set_time.tm_hour== Run_Diagram_buff[i].Start_Time5[0])
000d0a  48ef              LDR      r0,|L9.4296|
000d0c  6880              LDR      r0,[r0,#8]  ; set_time
000d0e  eb0401c4          ADD      r1,r4,r4,LSL #3
000d12  eb011104          ADD      r1,r1,r4,LSL #4
000d16  4aea              LDR      r2,|L9.4288|
000d18  eb020181          ADD      r1,r2,r1,LSL #2
000d1c  f8911028          LDRB     r1,[r1,#0x28]
000d20  4288              CMP      r0,r1
000d22  d170              BNE      |L9.3590|
;;;2922               {
;;;2923                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep5[1])
000d24  48e8              LDR      r0,|L9.4296|
000d26  6841              LDR      r1,[r0,#4]  ; set_time
000d28  eb0400c4          ADD      r0,r4,r4,LSL #3
000d2c  eb001004          ADD      r0,r0,r4,LSL #4
000d30  eb020080          ADD      r0,r2,r0,LSL #2
000d34  f890002b          LDRB     r0,[r0,#0x2b]
000d38  4281              CMP      r1,r0
000d3a  d17b              BNE      |L9.3636|
;;;2924                   {
;;;2925                       App_printf("\r\nthe 5 end");
000d3c  a0e3              ADR      r0,|L9.4300|
000d3e  f7fffffe          BL       App_printf
;;;2926                       Hard_control.usage_diagram_count--;
000d42  48dd              LDR      r0,|L9.4280|
000d44  7800              LDRB     r0,[r0,#0]  ; Hard_control
000d46  1e40              SUBS     r0,r0,#1
000d48  49db              LDR      r1,|L9.4280|
000d4a  7008              STRB     r0,[r1,#0]
;;;2927                       State_monitor[i].end[4]=1;
000d4c  2101              MOVS     r1,#1
000d4e  eb040084          ADD      r0,r4,r4,LSL #2
000d52  4adc              LDR      r2,|L9.4292|
000d54  eb020080          ADD      r0,r2,r0,LSL #2
000d58  7381              STRB     r1,[r0,#0xe]
;;;2928                       State_monitor[i].start[4]=0;
000d5a  2000              MOVS     r0,#0
000d5c  eb040184          ADD      r1,r4,r4,LSL #2
000d60  eb020181          ADD      r1,r2,r1,LSL #2
000d64  7108              STRB     r0,[r1,#4]
;;;2929                       if(Trans_open_Copy.Type[0]==1)
000d66  48d5              LDR      r0,|L9.4284|
000d68  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000d6a  2801              CMP      r0,#1
000d6c  d107              BNE      |L9.3454|
;;;2930                       {
;;;2931                           Trans_open_Copy.Type[0]=0;
000d6e  2000              MOVS     r0,#0
000d70  49d2              LDR      r1,|L9.4284|
000d72  7008              STRB     r0,[r1,#0]
;;;2932                           //固频时，时间到，停止即可
;;;2933                           memset(Trans_open_Copy.Freq,0,12);//清零
000d74  4608              MOV      r0,r1
000d76  2100              MOVS     r1,#0
000d78  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
000d7a  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
000d7c  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.3454|
;;;2934                       }
;;;2935                       if(Trans_open_Copy.Type[0]==2)
000d7e  48cf              LDR      r0,|L9.4284|
000d80  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000d82  2802              CMP      r0,#2
000d84  d11a              BNE      |L9.3516|
;;;2936                       {
;;;2937                           Trans_open_Copy.Type[0]=1;
000d86  2001              MOVS     r0,#1
000d88  49cc              LDR      r1,|L9.4284|
000d8a  7008              STRB     r0,[r1,#0]
;;;2938                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq5,4)==0)   //踢出第一个
000d8c  eb0400c4          ADD      r0,r4,r4,LSL #3
000d90  eb001004          ADD      r0,r0,r4,LSL #4
000d94  4aca              LDR      r2,|L9.4288|
000d96  eb020080          ADD      r0,r2,r0,LSL #2
000d9a  f100012d          ADD      r1,r0,#0x2d
000d9e  2204              MOVS     r2,#4
000da0  48c6              LDR      r0,|L9.4284|
000da2  1d00              ADDS     r0,r0,#4
000da4  f7fffffe          BL       memcmp
000da8  b940              CBNZ     r0,|L9.3516|
;;;2939                           {
;;;2940                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000daa  48c4              LDR      r0,|L9.4284|
000dac  7a00              LDRB     r0,[r0,#8]
000dae  49c3              LDR      r1,|L9.4284|
000db0  7108              STRB     r0,[r1,#4]
;;;2941                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000db2  4608              MOV      r0,r1
000db4  7a41              LDRB     r1,[r0,#9]
000db6  7141              STRB     r1,[r0,#5]
;;;2942                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
000db8  7a81              LDRB     r1,[r0,#0xa]
000dba  7181              STRB     r1,[r0,#6]
                  |L9.3516|
;;;2943                               //最后1byte都为0，所以不处理
;;;2944                           }
;;;2945                           //如果是踢出第二个，不需要做处理了
;;;2946                       }
;;;2947                       if(Trans_open_Copy.Type[0]==3)
000dbc  48bf              LDR      r0,|L9.4284|
000dbe  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000dc0  2803              CMP      r0,#3
000dc2  d137              BNE      |L9.3636|
;;;2948                       {
;;;2949                           Trans_open_Copy.Type[0]=2;
000dc4  2002              MOVS     r0,#2
000dc6  49bd              LDR      r1,|L9.4284|
000dc8  7008              STRB     r0,[r1,#0]
;;;2950                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq5,4)==0)   //踢出第一个
000dca  eb0400c4          ADD      r0,r4,r4,LSL #3
000dce  eb001004          ADD      r0,r0,r4,LSL #4
000dd2  4abb              LDR      r2,|L9.4288|
000dd4  eb020080          ADD      r0,r2,r0,LSL #2
000dd8  f100012d          ADD      r1,r0,#0x2d
000ddc  2204              MOVS     r2,#4
000dde  48b7              LDR      r0,|L9.4284|
000de0  1d00              ADDS     r0,r0,#4
000de2  f7fffffe          BL       memcmp
000de6  b978              CBNZ     r0,|L9.3592|
;;;2951                           {
;;;2952                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
000de8  48b4              LDR      r0,|L9.4284|
000dea  7a00              LDRB     r0,[r0,#8]
000dec  49b3              LDR      r1,|L9.4284|
000dee  7108              STRB     r0,[r1,#4]
;;;2953                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
000df0  4608              MOV      r0,r1
000df2  7a41              LDRB     r1,[r0,#9]
000df4  7141              STRB     r1,[r0,#5]
;;;2954                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
000df6  7a81              LDRB     r1,[r0,#0xa]
000df8  7181              STRB     r1,[r0,#6]
;;;2955                               //最后1byte都为0，所以不处理
;;;2956                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000dfa  7b01              LDRB     r1,[r0,#0xc]
000dfc  7201              STRB     r1,[r0,#8]
;;;2957                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000dfe  7b41              LDRB     r1,[r0,#0xd]
000e00  7241              STRB     r1,[r0,#9]
;;;2958                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000e02  7b81              LDRB     r1,[r0,#0xe]
000e04  7281              STRB     r1,[r0,#0xa]
                  |L9.3590|
000e06  e015              B        |L9.3636|
                  |L9.3592|
;;;2959                           }
;;;2960                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq5,4)==0)     //踢出第二个
000e08  eb0400c4          ADD      r0,r4,r4,LSL #3
000e0c  eb001004          ADD      r0,r0,r4,LSL #4
000e10  4aab              LDR      r2,|L9.4288|
000e12  eb020080          ADD      r0,r2,r0,LSL #2
000e16  f100012d          ADD      r1,r0,#0x2d
000e1a  2204              MOVS     r2,#4
000e1c  48a7              LDR      r0,|L9.4284|
000e1e  3008              ADDS     r0,r0,#8
000e20  f7fffffe          BL       memcmp
000e24  b930              CBNZ     r0,|L9.3636|
;;;2961                           {
;;;2962                               //最后1byte都为0，所以不处理
;;;2963                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
000e26  48a5              LDR      r0,|L9.4284|
000e28  7b01              LDRB     r1,[r0,#0xc]
000e2a  7201              STRB     r1,[r0,#8]
;;;2964                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
000e2c  7b41              LDRB     r1,[r0,#0xd]
000e2e  7241              STRB     r1,[r0,#9]
;;;2965                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
000e30  7b81              LDRB     r1,[r0,#0xe]
000e32  7281              STRB     r1,[r0,#0xa]
                  |L9.3636|
;;;2966                           }
;;;2967                           //如果是踢出第三个，不需要做处理了
;;;2968                       }
;;;2969                   }
;;;2970               }
;;;2971           }
;;;2972   
;;;2973           //第六个
;;;2974           if(State_monitor[i].start[5]!=1)
000e34  eb040084          ADD      r0,r4,r4,LSL #2
000e38  49a2              LDR      r1,|L9.4292|
000e3a  eb010080          ADD      r0,r1,r0,LSL #2
000e3e  7940              LDRB     r0,[r0,#5]
000e40  2801              CMP      r0,#1
000e42  d07b              BEQ      |L9.3900|
;;;2975           {
;;;2976               if(Run_Diagram_buff[i].Start_Time6[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time6[0]*60+Run_Diagram_buff[i].Start_Time6[1]))\
000e44  eb0400c4          ADD      r0,r4,r4,LSL #3
000e48  eb001004          ADD      r0,r0,r4,LSL #4
000e4c  499c              LDR      r1,|L9.4288|
000e4e  eb010080          ADD      r0,r1,r0,LSL #2
000e52  f8900032          LDRB     r0,[r0,#0x32]
000e56  28ff              CMP      r0,#0xff
000e58  d070              BEQ      |L9.3900|
000e5a  489b              LDR      r0,|L9.4296|
000e5c  6840              LDR      r0,[r0,#4]  ; set_time
000e5e  499a              LDR      r1,|L9.4296|
000e60  6889              LDR      r1,[r1,#8]  ; set_time
000e62  ebc11101          RSB      r1,r1,r1,LSL #4
000e66  eb000181          ADD      r1,r0,r1,LSL #2
000e6a  eb0400c4          ADD      r0,r4,r4,LSL #3
000e6e  eb001004          ADD      r0,r0,r4,LSL #4
000e72  4a93              LDR      r2,|L9.4288|
000e74  eb020080          ADD      r0,r2,r0,LSL #2
000e78  f8900033          LDRB     r0,[r0,#0x33]
000e7c  eb0402c4          ADD      r2,r4,r4,LSL #3
000e80  eb021204          ADD      r2,r2,r4,LSL #4
000e84  4b8e              LDR      r3,|L9.4288|
000e86  eb030282          ADD      r2,r3,r2,LSL #2
000e8a  f8922032          LDRB     r2,[r2,#0x32]
000e8e  ebc21202          RSB      r2,r2,r2,LSL #4
000e92  eb000082          ADD      r0,r0,r2,LSL #2
000e96  4281              CMP      r1,r0
000e98  db50              BLT      |L9.3900|
;;;2977                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep6[0]*60+Run_Diagram_buff[i].End_Timep6[1])))
000e9a  488b              LDR      r0,|L9.4296|
000e9c  6840              LDR      r0,[r0,#4]  ; set_time
000e9e  498a              LDR      r1,|L9.4296|
000ea0  6889              LDR      r1,[r1,#8]  ; set_time
000ea2  ebc11101          RSB      r1,r1,r1,LSL #4
000ea6  eb000181          ADD      r1,r0,r1,LSL #2
000eaa  eb0400c4          ADD      r0,r4,r4,LSL #3
000eae  eb001004          ADD      r0,r0,r4,LSL #4
000eb2  461a              MOV      r2,r3
000eb4  eb020080          ADD      r0,r2,r0,LSL #2
000eb8  f8900035          LDRB     r0,[r0,#0x35]
000ebc  eb0402c4          ADD      r2,r4,r4,LSL #3
000ec0  eb021204          ADD      r2,r2,r4,LSL #4
000ec4  eb030282          ADD      r2,r3,r2,LSL #2
000ec8  f8922034          LDRB     r2,[r2,#0x34]
000ecc  ebc21202          RSB      r2,r2,r2,LSL #4
000ed0  eb000082          ADD      r0,r0,r2,LSL #2
000ed4  4281              CMP      r1,r0
000ed6  da71              BGE      |L9.4028|
;;;2978               {
;;;2979   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time6[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;2980   //														<(Run_Diagram_buff[i].End_Timep6[0]*60+Run_Diagram_buff[i].End_Timep6[1]))
;;;2981   //					{
;;;2982                   App_printf("\r\nthe 6");
000ed8  a07f              ADR      r0,|L9.4312|
000eda  f7fffffe          BL       App_printf
;;;2983                   State_monitor[i].start[5]=1;
000ede  2001              MOVS     r0,#1
000ee0  eb040184          ADD      r1,r4,r4,LSL #2
000ee4  4a77              LDR      r2,|L9.4292|
000ee6  eb020181          ADD      r1,r2,r1,LSL #2
000eea  7148              STRB     r0,[r1,#5]
;;;2984                   State_monitor[i].end[5]=0;
000eec  2100              MOVS     r1,#0
000eee  eb040084          ADD      r0,r4,r4,LSL #2
000ef2  eb020080          ADD      r0,r2,r0,LSL #2
000ef6  73c1              STRB     r1,[r0,#0xf]
;;;2985                   Hard_control.usage_diagram_count++;
000ef8  486f              LDR      r0,|L9.4280|
000efa  7800              LDRB     r0,[r0,#0]  ; Hard_control
000efc  1c40              ADDS     r0,r0,#1
000efe  496e              LDR      r1,|L9.4280|
000f00  7008              STRB     r0,[r1,#0]
;;;2986                   if(Hard_control.usage_diagram_count==1)
000f02  4608              MOV      r0,r1
000f04  7800              LDRB     r0,[r0,#0]  ; Hard_control
000f06  2801              CMP      r0,#1
000f08  d119              BNE      |L9.3902|
;;;2987                   {
;;;2988                       Trans_open_Copy.Type[0]=1;
000f0a  496c              LDR      r1,|L9.4284|
000f0c  7008              STRB     r0,[r1,#0]
;;;2989                       Trans_open_Copy.Channel[0]=1;
000f0e  7048              STRB     r0,[r1,#1]
;;;2990                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power6[0];
000f10  eb0400c4          ADD      r0,r4,r4,LSL #3
000f14  eb001004          ADD      r0,r0,r4,LSL #4
000f18  4969              LDR      r1,|L9.4288|
000f1a  eb010080          ADD      r0,r1,r0,LSL #2
000f1e  f8900036          LDRB     r0,[r0,#0x36]
000f22  4966              LDR      r1,|L9.4284|
000f24  7408              STRB     r0,[r1,#0x10]
;;;2991                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq6,4);
000f26  eb0400c4          ADD      r0,r4,r4,LSL #3
000f2a  eb001004          ADD      r0,r0,r4,LSL #4
000f2e  4964              LDR      r1,|L9.4288|
000f30  eb010180          ADD      r1,r1,r0,LSL #2
000f34  4861              LDR      r0,|L9.4284|
000f36  f8d11037          LDR      r1,[r1,#0x37]
000f3a  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.3900|
000f3c  e03e              B        |L9.4028|
                  |L9.3902|
;;;2992                   }
;;;2993                   else if(Hard_control.usage_diagram_count==2)
000f3e  485e              LDR      r0,|L9.4280|
000f40  7800              LDRB     r0,[r0,#0]  ; Hard_control
000f42  2802              CMP      r0,#2
000f44  d11b              BNE      |L9.3966|
;;;2994                   {
;;;2995                       Trans_open_Copy.Type[0]=2;
000f46  495d              LDR      r1,|L9.4284|
000f48  7008              STRB     r0,[r1,#0]
;;;2996                       Trans_open_Copy.Channel[1]=2;
000f4a  2102              MOVS     r1,#2
000f4c  485b              LDR      r0,|L9.4284|
000f4e  7081              STRB     r1,[r0,#2]
;;;2997                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power6[0];
000f50  eb0400c4          ADD      r0,r4,r4,LSL #3
000f54  eb001004          ADD      r0,r0,r4,LSL #4
000f58  4959              LDR      r1,|L9.4288|
000f5a  eb010080          ADD      r0,r1,r0,LSL #2
000f5e  f8901036          LDRB     r1,[r0,#0x36]
000f62  4856              LDR      r0,|L9.4284|
000f64  7441              STRB     r1,[r0,#0x11]
;;;2998                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq6,4);
000f66  eb0400c4          ADD      r0,r4,r4,LSL #3
000f6a  eb001004          ADD      r0,r0,r4,LSL #4
000f6e  4954              LDR      r1,|L9.4288|
000f70  eb010180          ADD      r1,r1,r0,LSL #2
000f74  4851              LDR      r0,|L9.4284|
000f76  f8d11037          LDR      r1,[r1,#0x37]
000f7a  6081              STR      r1,[r0,#8]
000f7c  e01e              B        |L9.4028|
                  |L9.3966|
;;;2999                   }
;;;3000                   else if(Hard_control.usage_diagram_count==3)
000f7e  484e              LDR      r0,|L9.4280|
000f80  7800              LDRB     r0,[r0,#0]  ; Hard_control
000f82  2803              CMP      r0,#3
000f84  d11a              BNE      |L9.4028|
;;;3001                   {
;;;3002                       Trans_open_Copy.Type[0]=3;
000f86  494d              LDR      r1,|L9.4284|
000f88  7008              STRB     r0,[r1,#0]
;;;3003                       Trans_open_Copy.Channel[2]=3;
000f8a  2103              MOVS     r1,#3
000f8c  484b              LDR      r0,|L9.4284|
000f8e  70c1              STRB     r1,[r0,#3]
;;;3004                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power6[0];
000f90  eb0400c4          ADD      r0,r4,r4,LSL #3
000f94  eb001004          ADD      r0,r0,r4,LSL #4
000f98  4949              LDR      r1,|L9.4288|
000f9a  eb010080          ADD      r0,r1,r0,LSL #2
000f9e  f8901036          LDRB     r1,[r0,#0x36]
000fa2  4846              LDR      r0,|L9.4284|
000fa4  7481              STRB     r1,[r0,#0x12]
;;;3005                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq6,4);
000fa6  eb0400c4          ADD      r0,r4,r4,LSL #3
000faa  eb001004          ADD      r0,r0,r4,LSL #4
000fae  4944              LDR      r1,|L9.4288|
000fb0  eb010180          ADD      r1,r1,r0,LSL #2
000fb4  4841              LDR      r0,|L9.4284|
000fb6  f8d11037          LDR      r1,[r1,#0x37]
000fba  60c1              STR      r1,[r0,#0xc]
                  |L9.4028|
;;;3006                   }
;;;3007                   //}
;;;3008               }
;;;3009           }
;;;3010           if(State_monitor[i].end[5]!=1)   //结束
000fbc  eb040084          ADD      r0,r4,r4,LSL #2
000fc0  4940              LDR      r1,|L9.4292|
000fc2  eb010080          ADD      r0,r1,r0,LSL #2
000fc6  7bc0              LDRB     r0,[r0,#0xf]
000fc8  2801              CMP      r0,#1
000fca  d073              BEQ      |L9.4276|
;;;3011           {
;;;3012               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep6[0])
000fcc  483e              LDR      r0,|L9.4296|
000fce  6880              LDR      r0,[r0,#8]  ; set_time
000fd0  eb0401c4          ADD      r1,r4,r4,LSL #3
000fd4  eb011104          ADD      r1,r1,r4,LSL #4
000fd8  4a39              LDR      r2,|L9.4288|
000fda  eb020181          ADD      r1,r2,r1,LSL #2
000fde  f8911034          LDRB     r1,[r1,#0x34]
000fe2  4288              CMP      r0,r1
000fe4  d166              BNE      |L9.4276|
;;;3013               {
;;;3014                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep6[1])
000fe6  4838              LDR      r0,|L9.4296|
000fe8  6841              LDR      r1,[r0,#4]  ; set_time
000fea  eb0400c4          ADD      r0,r4,r4,LSL #3
000fee  eb001004          ADD      r0,r0,r4,LSL #4
000ff2  eb020080          ADD      r0,r2,r0,LSL #2
000ff6  f8900035          LDRB     r0,[r0,#0x35]
000ffa  4281              CMP      r1,r0
000ffc  d15a              BNE      |L9.4276|
;;;3015                   {
;;;3016                       App_printf("\r\nthe 6 end");
000ffe  a038              ADR      r0,|L9.4320|
001000  f7fffffe          BL       App_printf
;;;3017                       Hard_control.usage_diagram_count--;
001004  482c              LDR      r0,|L9.4280|
001006  7800              LDRB     r0,[r0,#0]  ; Hard_control
001008  1e40              SUBS     r0,r0,#1
00100a  492b              LDR      r1,|L9.4280|
00100c  7008              STRB     r0,[r1,#0]
;;;3018                       State_monitor[i].end[5]=1;
00100e  2101              MOVS     r1,#1
001010  eb040084          ADD      r0,r4,r4,LSL #2
001014  4a2b              LDR      r2,|L9.4292|
001016  eb020080          ADD      r0,r2,r0,LSL #2
00101a  73c1              STRB     r1,[r0,#0xf]
;;;3019                       State_monitor[i].start[5]=0;
00101c  2000              MOVS     r0,#0
00101e  eb040184          ADD      r1,r4,r4,LSL #2
001022  eb020181          ADD      r1,r2,r1,LSL #2
001026  7148              STRB     r0,[r1,#5]
;;;3020                       if(Trans_open_Copy.Type[0]==1)
001028  4824              LDR      r0,|L9.4284|
00102a  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
00102c  2801              CMP      r0,#1
00102e  d107              BNE      |L9.4160|
;;;3021                       {
;;;3022                           Trans_open_Copy.Type[0]=0;
001030  2000              MOVS     r0,#0
001032  4922              LDR      r1,|L9.4284|
001034  7008              STRB     r0,[r1,#0]
;;;3023                           //固频时，时间到，停止即可
;;;3024                           memset(Trans_open_Copy.Freq,0,12);//清零
001036  4608              MOV      r0,r1
001038  2100              MOVS     r1,#0
00103a  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
00103c  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
00103e  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.4160|
;;;3025                       }
;;;3026                       if(Trans_open_Copy.Type[0]==2)
001040  481e              LDR      r0,|L9.4284|
001042  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001044  2802              CMP      r0,#2
001046  d11a              BNE      |L9.4222|
;;;3027                       {
;;;3028                           Trans_open_Copy.Type[0]=1;
001048  2001              MOVS     r0,#1
00104a  491c              LDR      r1,|L9.4284|
00104c  7008              STRB     r0,[r1,#0]
;;;3029                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq6,4)==0)   //踢出第一个
00104e  eb0400c4          ADD      r0,r4,r4,LSL #3
001052  eb001004          ADD      r0,r0,r4,LSL #4
001056  4a1a              LDR      r2,|L9.4288|
001058  eb020080          ADD      r0,r2,r0,LSL #2
00105c  f1000137          ADD      r1,r0,#0x37
001060  2204              MOVS     r2,#4
001062  4816              LDR      r0,|L9.4284|
001064  1d00              ADDS     r0,r0,#4
001066  f7fffffe          BL       memcmp
00106a  b940              CBNZ     r0,|L9.4222|
;;;3030                           {
;;;3031                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
00106c  4813              LDR      r0,|L9.4284|
00106e  7a00              LDRB     r0,[r0,#8]
001070  4912              LDR      r1,|L9.4284|
001072  7108              STRB     r0,[r1,#4]
;;;3032                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
001074  4608              MOV      r0,r1
001076  7a41              LDRB     r1,[r0,#9]
001078  7141              STRB     r1,[r0,#5]
;;;3033                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
00107a  7a81              LDRB     r1,[r0,#0xa]
00107c  7181              STRB     r1,[r0,#6]
                  |L9.4222|
;;;3034                               //最后1byte都为0，所以不处理
;;;3035                           }
;;;3036                           //如果是踢出第二个，不需要做处理了
;;;3037                       }
;;;3038                       if(Trans_open_Copy.Type[0]==3)
00107e  480f              LDR      r0,|L9.4284|
001080  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001082  2803              CMP      r0,#3
001084  d154              BNE      |L9.4400|
;;;3039                       {
;;;3040                           Trans_open_Copy.Type[0]=2;
001086  2002              MOVS     r0,#2
001088  490c              LDR      r1,|L9.4284|
00108a  7008              STRB     r0,[r1,#0]
;;;3041                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq6,4)==0)   //踢出第一个
00108c  eb0400c4          ADD      r0,r4,r4,LSL #3
001090  eb001004          ADD      r0,r0,r4,LSL #4
001094  4a0a              LDR      r2,|L9.4288|
001096  eb020080          ADD      r0,r2,r0,LSL #2
00109a  f1000137          ADD      r1,r0,#0x37
00109e  2204              MOVS     r2,#4
0010a0  4806              LDR      r0,|L9.4284|
0010a2  1d00              ADDS     r0,r0,#4
0010a4  f7fffffe          BL       memcmp
0010a8  b928              CBNZ     r0,|L9.4278|
;;;3042                           {
;;;3043                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
0010aa  4804              LDR      r0,|L9.4284|
0010ac  7a00              LDRB     r0,[r0,#8]
0010ae  4903              LDR      r1,|L9.4284|
0010b0  7108              STRB     r0,[r1,#4]
;;;3044                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
0010b2  e01b              B        |L9.4332|
                  |L9.4276|
0010b4  e03c              B        |L9.4400|
                  |L9.4278|
0010b6  e025              B        |L9.4356|
                  |L9.4280|
                          DCD      Hard_control
                  |L9.4284|
                          DCD      Trans_open_Copy
                  |L9.4288|
                          DCD      Run_Diagram_buff
                  |L9.4292|
                          DCD      State_monitor
                  |L9.4296|
                          DCD      set_time
                  |L9.4300|
0010cc  0d0a7468          DCB      "\r\nthe 5 end",0
0010d0  65203520
0010d4  656e6400
                  |L9.4312|
0010d8  0d0a7468          DCB      "\r\nthe 6",0
0010dc  65203600
                  |L9.4320|
0010e0  0d0a7468          DCB      "\r\nthe 6 end",0
0010e4  65203620
0010e8  656e6400
                  |L9.4332|
0010ec  4608              MOV      r0,r1
0010ee  7a41              LDRB     r1,[r0,#9]
0010f0  7141              STRB     r1,[r0,#5]
;;;3045                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
0010f2  7a81              LDRB     r1,[r0,#0xa]
0010f4  7181              STRB     r1,[r0,#6]
;;;3046                               //最后1byte都为0，所以不处理
;;;3047                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
0010f6  7b01              LDRB     r1,[r0,#0xc]
0010f8  7201              STRB     r1,[r0,#8]
;;;3048                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
0010fa  7b41              LDRB     r1,[r0,#0xd]
0010fc  7241              STRB     r1,[r0,#9]
;;;3049                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
0010fe  7b81              LDRB     r1,[r0,#0xe]
001100  7281              STRB     r1,[r0,#0xa]
001102  e015              B        |L9.4400|
                  |L9.4356|
;;;3050                           }
;;;3051                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq6,4)==0)     //踢出第二个
001104  eb0400c4          ADD      r0,r4,r4,LSL #3
001108  eb001004          ADD      r0,r0,r4,LSL #4
00110c  4afd              LDR      r2,|L9.5380|
00110e  eb020080          ADD      r0,r2,r0,LSL #2
001112  f1000137          ADD      r1,r0,#0x37
001116  2204              MOVS     r2,#4
001118  48fb              LDR      r0,|L9.5384|
00111a  f7fffffe          BL       memcmp
00111e  b938              CBNZ     r0,|L9.4400|
;;;3052                           {
;;;3053                               //最后1byte都为0，所以不处理
;;;3054                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
001120  48f9              LDR      r0,|L9.5384|
001122  3808              SUBS     r0,r0,#8
001124  7b01              LDRB     r1,[r0,#0xc]
001126  7201              STRB     r1,[r0,#8]
;;;3055                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
001128  7b41              LDRB     r1,[r0,#0xd]
00112a  7241              STRB     r1,[r0,#9]
;;;3056                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
00112c  7b81              LDRB     r1,[r0,#0xe]
00112e  7281              STRB     r1,[r0,#0xa]
                  |L9.4400|
;;;3057                           }
;;;3058                           //如果是踢出第三个，不需要做处理了
;;;3059                       }
;;;3060                   }
;;;3061               }
;;;3062           }
;;;3063   
;;;3064           //第七个
;;;3065           if(State_monitor[i].start[6]!=1)
001130  eb040084          ADD      r0,r4,r4,LSL #2
001134  49f5              LDR      r1,|L9.5388|
001136  eb010080          ADD      r0,r1,r0,LSL #2
00113a  7980              LDRB     r0,[r0,#6]
00113c  2801              CMP      r0,#1
00113e  d07c              BEQ      |L9.4666|
;;;3066           {
;;;3067               if(Run_Diagram_buff[i].Start_Time7[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time7[0]*60+Run_Diagram_buff[i].Start_Time7[1]))\
001140  eb0400c4          ADD      r0,r4,r4,LSL #3
001144  eb001004          ADD      r0,r0,r4,LSL #4
001148  49ee              LDR      r1,|L9.5380|
00114a  eb010080          ADD      r0,r1,r0,LSL #2
00114e  f890003c          LDRB     r0,[r0,#0x3c]
001152  28ff              CMP      r0,#0xff
001154  d071              BEQ      |L9.4666|
001156  48ee              LDR      r0,|L9.5392|
001158  6840              LDR      r0,[r0,#4]  ; set_time
00115a  49ed              LDR      r1,|L9.5392|
00115c  6889              LDR      r1,[r1,#8]  ; set_time
00115e  ebc11101          RSB      r1,r1,r1,LSL #4
001162  eb000181          ADD      r1,r0,r1,LSL #2
001166  eb0400c4          ADD      r0,r4,r4,LSL #3
00116a  eb001004          ADD      r0,r0,r4,LSL #4
00116e  4ae5              LDR      r2,|L9.5380|
001170  eb020080          ADD      r0,r2,r0,LSL #2
001174  f890003d          LDRB     r0,[r0,#0x3d]
001178  eb0402c4          ADD      r2,r4,r4,LSL #3
00117c  eb021204          ADD      r2,r2,r4,LSL #4
001180  4be0              LDR      r3,|L9.5380|
001182  eb030282          ADD      r2,r3,r2,LSL #2
001186  f892203c          LDRB     r2,[r2,#0x3c]
00118a  ebc21202          RSB      r2,r2,r2,LSL #4
00118e  eb000082          ADD      r0,r0,r2,LSL #2
001192  4281              CMP      r1,r0
001194  db51              BLT      |L9.4666|
;;;3068                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep7[0]*60+Run_Diagram_buff[i].End_Timep7[1])))
001196  48de              LDR      r0,|L9.5392|
001198  6840              LDR      r0,[r0,#4]  ; set_time
00119a  49dd              LDR      r1,|L9.5392|
00119c  6889              LDR      r1,[r1,#8]  ; set_time
00119e  ebc11101          RSB      r1,r1,r1,LSL #4
0011a2  eb000181          ADD      r1,r0,r1,LSL #2
0011a6  eb0400c4          ADD      r0,r4,r4,LSL #3
0011aa  eb001004          ADD      r0,r0,r4,LSL #4
0011ae  461a              MOV      r2,r3
0011b0  eb020080          ADD      r0,r2,r0,LSL #2
0011b4  f890003f          LDRB     r0,[r0,#0x3f]
0011b8  eb0402c4          ADD      r2,r4,r4,LSL #3
0011bc  eb021204          ADD      r2,r2,r4,LSL #4
0011c0  eb030282          ADD      r2,r3,r2,LSL #2
0011c4  f892203e          LDRB     r2,[r2,#0x3e]
0011c8  ebc21202          RSB      r2,r2,r2,LSL #4
0011cc  eb000082          ADD      r0,r0,r2,LSL #2
0011d0  4281              CMP      r1,r0
0011d2  da7e              BGE      |L9.4818|
;;;3069               {
;;;3070   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time7[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;3071   //														<(Run_Diagram_buff[i].End_Timep7[0]*60+Run_Diagram_buff[i].End_Timep7[1]))
;;;3072   //					{
;;;3073                   App_printf("\r\nthe 7");
0011d4  a0cf              ADR      r0,|L9.5396|
0011d6  f7fffffe          BL       App_printf
;;;3074                   State_monitor[i].start[6]=1;
0011da  2001              MOVS     r0,#1
0011dc  eb040184          ADD      r1,r4,r4,LSL #2
0011e0  4aca              LDR      r2,|L9.5388|
0011e2  eb020181          ADD      r1,r2,r1,LSL #2
0011e6  7188              STRB     r0,[r1,#6]
;;;3075                   State_monitor[i].end[6]=0;
0011e8  2100              MOVS     r1,#0
0011ea  eb040084          ADD      r0,r4,r4,LSL #2
0011ee  eb020080          ADD      r0,r2,r0,LSL #2
0011f2  7401              STRB     r1,[r0,#0x10]
;;;3076                   Hard_control.usage_diagram_count++;
0011f4  48c9              LDR      r0,|L9.5404|
0011f6  7800              LDRB     r0,[r0,#0]  ; Hard_control
0011f8  1c40              ADDS     r0,r0,#1
0011fa  49c8              LDR      r1,|L9.5404|
0011fc  7008              STRB     r0,[r1,#0]
;;;3077                   if(Hard_control.usage_diagram_count==1)
0011fe  4608              MOV      r0,r1
001200  7800              LDRB     r0,[r0,#0]  ; Hard_control
001202  2801              CMP      r0,#1
001204  d11e              BNE      |L9.4676|
;;;3078                   {
;;;3079                       Trans_open_Copy.Type[0]=1;
001206  49c0              LDR      r1,|L9.5384|
001208  3908              SUBS     r1,r1,#8
00120a  7008              STRB     r0,[r1,#0]
;;;3080                       Trans_open_Copy.Channel[0]=1;
00120c  7048              STRB     r0,[r1,#1]
;;;3081                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power7[0];
00120e  eb0400c4          ADD      r0,r4,r4,LSL #3
001212  eb001004          ADD      r0,r0,r4,LSL #4
001216  49bb              LDR      r1,|L9.5380|
001218  eb010080          ADD      r0,r1,r0,LSL #2
00121c  f8900040          LDRB     r0,[r0,#0x40]
001220  49b9              LDR      r1,|L9.5384|
001222  3908              SUBS     r1,r1,#8
001224  7408              STRB     r0,[r1,#0x10]
;;;3082                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq7,4);
001226  eb0400c4          ADD      r0,r4,r4,LSL #3
00122a  eb001004          ADD      r0,r0,r4,LSL #4
00122e  49b5              LDR      r1,|L9.5380|
001230  eb010180          ADD      r1,r1,r0,LSL #2
001234  48b4              LDR      r0,|L9.5384|
001236  3808              SUBS     r0,r0,#8
001238  e000              B        |L9.4668|
                  |L9.4666|
00123a  e04a              B        |L9.4818|
                  |L9.4668|
00123c  f8d11041          LDR      r1,[r1,#0x41]
001240  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001242  e046              B        |L9.4818|
                  |L9.4676|
;;;3083                   }
;;;3084                   else if(Hard_control.usage_diagram_count==2)
001244  48b5              LDR      r0,|L9.5404|
001246  7800              LDRB     r0,[r0,#0]  ; Hard_control
001248  2802              CMP      r0,#2
00124a  d11f              BNE      |L9.4748|
;;;3085                   {
;;;3086                       Trans_open_Copy.Type[0]=2;
00124c  49ae              LDR      r1,|L9.5384|
00124e  3908              SUBS     r1,r1,#8
001250  7008              STRB     r0,[r1,#0]
;;;3087                       Trans_open_Copy.Channel[1]=2;
001252  2102              MOVS     r1,#2
001254  48ac              LDR      r0,|L9.5384|
001256  3808              SUBS     r0,r0,#8
001258  7081              STRB     r1,[r0,#2]
;;;3088                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power7[0];
00125a  eb0400c4          ADD      r0,r4,r4,LSL #3
00125e  eb001004          ADD      r0,r0,r4,LSL #4
001262  49a8              LDR      r1,|L9.5380|
001264  eb010080          ADD      r0,r1,r0,LSL #2
001268  f8901040          LDRB     r1,[r0,#0x40]
00126c  48a6              LDR      r0,|L9.5384|
00126e  3808              SUBS     r0,r0,#8
001270  7441              STRB     r1,[r0,#0x11]
;;;3089                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq7,4);
001272  eb0400c4          ADD      r0,r4,r4,LSL #3
001276  eb001004          ADD      r0,r0,r4,LSL #4
00127a  49a2              LDR      r1,|L9.5380|
00127c  eb010180          ADD      r1,r1,r0,LSL #2
001280  48a1              LDR      r0,|L9.5384|
001282  3808              SUBS     r0,r0,#8
001284  f8d11041          LDR      r1,[r1,#0x41]
001288  6081              STR      r1,[r0,#8]
00128a  e022              B        |L9.4818|
                  |L9.4748|
;;;3090                   }
;;;3091                   else if(Hard_control.usage_diagram_count==3)
00128c  48a3              LDR      r0,|L9.5404|
00128e  7800              LDRB     r0,[r0,#0]  ; Hard_control
001290  2803              CMP      r0,#3
001292  d11e              BNE      |L9.4818|
;;;3092                   {
;;;3093                       Trans_open_Copy.Type[0]=3;
001294  499c              LDR      r1,|L9.5384|
001296  3908              SUBS     r1,r1,#8
001298  7008              STRB     r0,[r1,#0]
;;;3094                       Trans_open_Copy.Channel[2]=3;
00129a  2103              MOVS     r1,#3
00129c  489a              LDR      r0,|L9.5384|
00129e  3808              SUBS     r0,r0,#8
0012a0  70c1              STRB     r1,[r0,#3]
;;;3095                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power7[0];
0012a2  eb0400c4          ADD      r0,r4,r4,LSL #3
0012a6  eb001004          ADD      r0,r0,r4,LSL #4
0012aa  4996              LDR      r1,|L9.5380|
0012ac  eb010080          ADD      r0,r1,r0,LSL #2
0012b0  f8901040          LDRB     r1,[r0,#0x40]
0012b4  4894              LDR      r0,|L9.5384|
0012b6  3808              SUBS     r0,r0,#8
0012b8  7481              STRB     r1,[r0,#0x12]
;;;3096                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq7,4);
0012ba  eb0400c4          ADD      r0,r4,r4,LSL #3
0012be  eb001004          ADD      r0,r0,r4,LSL #4
0012c2  4990              LDR      r1,|L9.5380|
0012c4  eb010180          ADD      r1,r1,r0,LSL #2
0012c8  488f              LDR      r0,|L9.5384|
0012ca  3808              SUBS     r0,r0,#8
0012cc  f8d11041          LDR      r1,[r1,#0x41]
0012d0  60c1              STR      r1,[r0,#0xc]
                  |L9.4818|
;;;3097                   }
;;;3098                   //}
;;;3099               }
;;;3100           }
;;;3101           if(State_monitor[i].end[6]!=1)   //结束
0012d2  eb040084          ADD      r0,r4,r4,LSL #2
0012d6  498d              LDR      r1,|L9.5388|
0012d8  eb010080          ADD      r0,r1,r0,LSL #2
0012dc  7c00              LDRB     r0,[r0,#0x10]
0012de  2801              CMP      r0,#1
0012e0  d07e              BEQ      |L9.5088|
;;;3102           {
;;;3103               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep7[0])
0012e2  488b              LDR      r0,|L9.5392|
0012e4  6880              LDR      r0,[r0,#8]  ; set_time
0012e6  eb0401c4          ADD      r1,r4,r4,LSL #3
0012ea  eb011104          ADD      r1,r1,r4,LSL #4
0012ee  4a85              LDR      r2,|L9.5380|
0012f0  eb020181          ADD      r1,r2,r1,LSL #2
0012f4  f891103e          LDRB     r1,[r1,#0x3e]
0012f8  4288              CMP      r0,r1
0012fa  d171              BNE      |L9.5088|
;;;3104               {
;;;3105                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep7[1])
0012fc  4884              LDR      r0,|L9.5392|
0012fe  6841              LDR      r1,[r0,#4]  ; set_time
001300  eb0400c4          ADD      r0,r4,r4,LSL #3
001304  eb001004          ADD      r0,r0,r4,LSL #4
001308  eb020080          ADD      r0,r2,r0,LSL #2
00130c  f890003f          LDRB     r0,[r0,#0x3f]
001310  4281              CMP      r1,r0
001312  d165              BNE      |L9.5088|
;;;3106                   {
;;;3107                       App_printf("\r\nthe 7 end");
001314  a082              ADR      r0,|L9.5408|
001316  f7fffffe          BL       App_printf
;;;3108                       Hard_control.usage_diagram_count--;
00131a  4880              LDR      r0,|L9.5404|
00131c  7800              LDRB     r0,[r0,#0]  ; Hard_control
00131e  1e40              SUBS     r0,r0,#1
001320  497e              LDR      r1,|L9.5404|
001322  7008              STRB     r0,[r1,#0]
;;;3109                       State_monitor[i].end[6]=1;
001324  2101              MOVS     r1,#1
001326  eb040084          ADD      r0,r4,r4,LSL #2
00132a  4a78              LDR      r2,|L9.5388|
00132c  eb020080          ADD      r0,r2,r0,LSL #2
001330  7401              STRB     r1,[r0,#0x10]
;;;3110                       State_monitor[i].start[6]=0;
001332  2000              MOVS     r0,#0
001334  eb040184          ADD      r1,r4,r4,LSL #2
001338  eb020181          ADD      r1,r2,r1,LSL #2
00133c  7188              STRB     r0,[r1,#6]
;;;3111                       if(Trans_open_Copy.Type[0]==1)
00133e  4872              LDR      r0,|L9.5384|
001340  3808              SUBS     r0,r0,#8
001342  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001344  2801              CMP      r0,#1
001346  d108              BNE      |L9.4954|
;;;3112                       {
;;;3113                           Trans_open_Copy.Type[0]=0;
001348  2000              MOVS     r0,#0
00134a  496f              LDR      r1,|L9.5384|
00134c  3908              SUBS     r1,r1,#8
00134e  7008              STRB     r0,[r1,#0]
;;;3114                           //固频时，时间到，停止即可
;;;3115                           memset(Trans_open_Copy.Freq,0,12);//清零
001350  4608              MOV      r0,r1
001352  2100              MOVS     r1,#0
001354  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001356  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
001358  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.4954|
;;;3116                       }
;;;3117                       if(Trans_open_Copy.Type[0]==2)
00135a  486b              LDR      r0,|L9.5384|
00135c  3808              SUBS     r0,r0,#8
00135e  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001360  2802              CMP      r0,#2
001362  d11d              BNE      |L9.5024|
;;;3118                       {
;;;3119                           Trans_open_Copy.Type[0]=1;
001364  2001              MOVS     r0,#1
001366  4968              LDR      r1,|L9.5384|
001368  3908              SUBS     r1,r1,#8
00136a  7008              STRB     r0,[r1,#0]
;;;3120                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq7,4)==0)   //踢出第一个
00136c  eb0400c4          ADD      r0,r4,r4,LSL #3
001370  eb001004          ADD      r0,r0,r4,LSL #4
001374  4a63              LDR      r2,|L9.5380|
001376  eb020080          ADD      r0,r2,r0,LSL #2
00137a  f1000141          ADD      r1,r0,#0x41
00137e  2204              MOVS     r2,#4
001380  4861              LDR      r0,|L9.5384|
001382  1f00              SUBS     r0,r0,#4
001384  f7fffffe          BL       memcmp
001388  b950              CBNZ     r0,|L9.5024|
;;;3121                           {
;;;3122                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
00138a  485f              LDR      r0,|L9.5384|
00138c  3808              SUBS     r0,r0,#8
00138e  7a00              LDRB     r0,[r0,#8]
001390  495d              LDR      r1,|L9.5384|
001392  3908              SUBS     r1,r1,#8
001394  7108              STRB     r0,[r1,#4]
;;;3123                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
001396  4608              MOV      r0,r1
001398  7a41              LDRB     r1,[r0,#9]
00139a  7141              STRB     r1,[r0,#5]
;;;3124                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
00139c  7a81              LDRB     r1,[r0,#0xa]
00139e  7181              STRB     r1,[r0,#6]
                  |L9.5024|
;;;3125                               //最后1byte都为0，所以不处理
;;;3126                           }
;;;3127                           //如果是踢出第二个，不需要做处理了
;;;3128                       }
;;;3129                       if(Trans_open_Copy.Type[0]==3)
0013a0  4859              LDR      r0,|L9.5384|
0013a2  3808              SUBS     r0,r0,#8
0013a4  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0013a6  2803              CMP      r0,#3
0013a8  d13c              BNE      |L9.5156|
;;;3130                       {
;;;3131                           Trans_open_Copy.Type[0]=2;
0013aa  2002              MOVS     r0,#2
0013ac  4956              LDR      r1,|L9.5384|
0013ae  3908              SUBS     r1,r1,#8
0013b0  7008              STRB     r0,[r1,#0]
;;;3132                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq7,4)==0)   //踢出第一个
0013b2  eb0400c4          ADD      r0,r4,r4,LSL #3
0013b6  eb001004          ADD      r0,r0,r4,LSL #4
0013ba  4a52              LDR      r2,|L9.5380|
0013bc  eb020080          ADD      r0,r2,r0,LSL #2
0013c0  f1000141          ADD      r1,r0,#0x41
0013c4  2204              MOVS     r2,#4
0013c6  4850              LDR      r0,|L9.5384|
0013c8  1f00              SUBS     r0,r0,#4
0013ca  f7fffffe          BL       memcmp
0013ce  b998              CBNZ     r0,|L9.5112|
;;;3133                           {
;;;3134                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
0013d0  484d              LDR      r0,|L9.5384|
0013d2  3808              SUBS     r0,r0,#8
0013d4  7a00              LDRB     r0,[r0,#8]
0013d6  494c              LDR      r1,|L9.5384|
0013d8  3908              SUBS     r1,r1,#8
0013da  7108              STRB     r0,[r1,#4]
;;;3135                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
0013dc  4608              MOV      r0,r1
0013de  e000              B        |L9.5090|
                  |L9.5088|
0013e0  e020              B        |L9.5156|
                  |L9.5090|
0013e2  7a41              LDRB     r1,[r0,#9]
0013e4  7141              STRB     r1,[r0,#5]
;;;3136                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
0013e6  7a81              LDRB     r1,[r0,#0xa]
0013e8  7181              STRB     r1,[r0,#6]
;;;3137                               //最后1byte都为0，所以不处理
;;;3138                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
0013ea  7b01              LDRB     r1,[r0,#0xc]
0013ec  7201              STRB     r1,[r0,#8]
;;;3139                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
0013ee  7b41              LDRB     r1,[r0,#0xd]
0013f0  7241              STRB     r1,[r0,#9]
;;;3140                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
0013f2  7b81              LDRB     r1,[r0,#0xe]
0013f4  7281              STRB     r1,[r0,#0xa]
0013f6  e015              B        |L9.5156|
                  |L9.5112|
;;;3141                           }
;;;3142                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq7,4)==0)     //踢出第二个
0013f8  eb0400c4          ADD      r0,r4,r4,LSL #3
0013fc  eb001004          ADD      r0,r0,r4,LSL #4
001400  4a40              LDR      r2,|L9.5380|
001402  eb020080          ADD      r0,r2,r0,LSL #2
001406  f1000141          ADD      r1,r0,#0x41
00140a  2204              MOVS     r2,#4
00140c  483e              LDR      r0,|L9.5384|
00140e  f7fffffe          BL       memcmp
001412  b938              CBNZ     r0,|L9.5156|
;;;3143                           {
;;;3144                               //最后1byte都为0，所以不处理
;;;3145                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
001414  483c              LDR      r0,|L9.5384|
001416  3808              SUBS     r0,r0,#8
001418  7b01              LDRB     r1,[r0,#0xc]
00141a  7201              STRB     r1,[r0,#8]
;;;3146                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
00141c  7b41              LDRB     r1,[r0,#0xd]
00141e  7241              STRB     r1,[r0,#9]
;;;3147                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
001420  7b81              LDRB     r1,[r0,#0xe]
001422  7281              STRB     r1,[r0,#0xa]
                  |L9.5156|
;;;3148                           }
;;;3149                           //如果是踢出第三个，不需要做处理了
;;;3150                       }
;;;3151                   }
;;;3152               }
;;;3153           }
;;;3154           //第八个
;;;3155           if(State_monitor[i].start[7]!=1)
001424  eb040084          ADD      r0,r4,r4,LSL #2
001428  4938              LDR      r1,|L9.5388|
00142a  eb010080          ADD      r0,r1,r0,LSL #2
00142e  79c0              LDRB     r0,[r0,#7]
001430  2801              CMP      r0,#1
001432  d07f              BEQ      |L9.5428|
;;;3156           {
;;;3157               if(Run_Diagram_buff[i].Start_Time8[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time8[0]*60+Run_Diagram_buff[i].Start_Time8[1]))\
001434  eb0400c4          ADD      r0,r4,r4,LSL #3
001438  eb001004          ADD      r0,r0,r4,LSL #4
00143c  4931              LDR      r1,|L9.5380|
00143e  eb010080          ADD      r0,r1,r0,LSL #2
001442  f8900046          LDRB     r0,[r0,#0x46]
001446  28ff              CMP      r0,#0xff
001448  d074              BEQ      |L9.5428|
00144a  4831              LDR      r0,|L9.5392|
00144c  6840              LDR      r0,[r0,#4]  ; set_time
00144e  4930              LDR      r1,|L9.5392|
001450  6889              LDR      r1,[r1,#8]  ; set_time
001452  ebc11101          RSB      r1,r1,r1,LSL #4
001456  eb000181          ADD      r1,r0,r1,LSL #2
00145a  eb0400c4          ADD      r0,r4,r4,LSL #3
00145e  eb001004          ADD      r0,r0,r4,LSL #4
001462  4a28              LDR      r2,|L9.5380|
001464  eb020080          ADD      r0,r2,r0,LSL #2
001468  f8900047          LDRB     r0,[r0,#0x47]
00146c  eb0402c4          ADD      r2,r4,r4,LSL #3
001470  eb021204          ADD      r2,r2,r4,LSL #4
001474  4b23              LDR      r3,|L9.5380|
001476  eb030282          ADD      r2,r3,r2,LSL #2
00147a  f8922046          LDRB     r2,[r2,#0x46]
00147e  ebc21202          RSB      r2,r2,r2,LSL #4
001482  eb000082          ADD      r0,r0,r2,LSL #2
001486  4281              CMP      r1,r0
001488  db54              BLT      |L9.5428|
;;;3158                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep8[0]*60+Run_Diagram_buff[i].End_Timep8[1])))
00148a  4821              LDR      r0,|L9.5392|
00148c  6840              LDR      r0,[r0,#4]  ; set_time
00148e  4920              LDR      r1,|L9.5392|
001490  6889              LDR      r1,[r1,#8]  ; set_time
001492  ebc11101          RSB      r1,r1,r1,LSL #4
001496  eb000181          ADD      r1,r0,r1,LSL #2
00149a  eb0400c4          ADD      r0,r4,r4,LSL #3
00149e  eb001004          ADD      r0,r0,r4,LSL #4
0014a2  461a              MOV      r2,r3
0014a4  eb020080          ADD      r0,r2,r0,LSL #2
0014a8  f8900049          LDRB     r0,[r0,#0x49]
0014ac  eb0402c4          ADD      r2,r4,r4,LSL #3
0014b0  eb021204          ADD      r2,r2,r4,LSL #4
0014b4  eb030282          ADD      r2,r3,r2,LSL #2
0014b8  f8922048          LDRB     r2,[r2,#0x48]
0014bc  ebc21202          RSB      r2,r2,r2,LSL #4
0014c0  eb000082          ADD      r0,r0,r2,LSL #2
0014c4  4281              CMP      r1,r0
0014c6  da35              BGE      |L9.5428|
;;;3159               {
;;;3160   //						if(set_time.tm_min== Run_Diagram_buff[i].Start_Time8[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;3161   //														<(Run_Diagram_buff[i].End_Timep8[0]*60+Run_Diagram_buff[i].End_Timep8[1]))
;;;3162   //						{
;;;3163                   App_printf("\r\nthe 8");
0014c8  a018              ADR      r0,|L9.5420|
0014ca  f7fffffe          BL       App_printf
;;;3164                   State_monitor[i].start[7]=1;
0014ce  2001              MOVS     r0,#1
0014d0  eb040184          ADD      r1,r4,r4,LSL #2
0014d4  4a0d              LDR      r2,|L9.5388|
0014d6  eb020181          ADD      r1,r2,r1,LSL #2
0014da  71c8              STRB     r0,[r1,#7]
;;;3165                   State_monitor[i].end[7]=0;
0014dc  2100              MOVS     r1,#0
0014de  eb040084          ADD      r0,r4,r4,LSL #2
0014e2  eb020080          ADD      r0,r2,r0,LSL #2
0014e6  7441              STRB     r1,[r0,#0x11]
;;;3166                   Hard_control.usage_diagram_count++;
0014e8  480c              LDR      r0,|L9.5404|
0014ea  7800              LDRB     r0,[r0,#0]  ; Hard_control
0014ec  1c40              ADDS     r0,r0,#1
0014ee  490b              LDR      r1,|L9.5404|
0014f0  7008              STRB     r0,[r1,#0]
;;;3167                   if(Hard_control.usage_diagram_count==1)
0014f2  4608              MOV      r0,r1
0014f4  7800              LDRB     r0,[r0,#0]  ; Hard_control
0014f6  2801              CMP      r0,#1
0014f8  d134              BNE      |L9.5476|
;;;3168                   {
;;;3169                       Trans_open_Copy.Type[0]=1;
0014fa  4903              LDR      r1,|L9.5384|
0014fc  3908              SUBS     r1,r1,#8
0014fe  7008              STRB     r0,[r1,#0]
;;;3170                       Trans_open_Copy.Channel[0]=1;
001500  7048              STRB     r0,[r1,#1]
;;;3171                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power8[0];
001502  e018              B        |L9.5430|
                  |L9.5380|
                          DCD      Run_Diagram_buff
                  |L9.5384|
                          DCD      Trans_open_Copy+0x8
                  |L9.5388|
                          DCD      State_monitor
                  |L9.5392|
                          DCD      set_time
                  |L9.5396|
001514  0d0a7468          DCB      "\r\nthe 7",0
001518  65203700
                  |L9.5404|
                          DCD      Hard_control
                  |L9.5408|
001520  0d0a7468          DCB      "\r\nthe 7 end",0
001524  65203720
001528  656e6400
                  |L9.5420|
00152c  0d0a7468          DCB      "\r\nthe 8",0
001530  65203800
                  |L9.5428|
001534  e055              B        |L9.5602|
                  |L9.5430|
001536  eb0400c4          ADD      r0,r4,r4,LSL #3
00153a  eb001004          ADD      r0,r0,r4,LSL #4
00153e  49fe              LDR      r1,|L9.6456|
001540  eb010080          ADD      r0,r1,r0,LSL #2
001544  f890004a          LDRB     r0,[r0,#0x4a]
001548  49fc              LDR      r1,|L9.6460|
00154a  7408              STRB     r0,[r1,#0x10]
;;;3172                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq8,4);
00154c  eb0400c4          ADD      r0,r4,r4,LSL #3
001550  eb001004          ADD      r0,r0,r4,LSL #4
001554  49f8              LDR      r1,|L9.6456|
001556  eb010180          ADD      r1,r1,r0,LSL #2
00155a  48f8              LDR      r0,|L9.6460|
00155c  f8d1104b          LDR      r1,[r1,#0x4b]
001560  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001562  e03e              B        |L9.5602|
                  |L9.5476|
;;;3173                   }
;;;3174                   else if(Hard_control.usage_diagram_count==2)
001564  48f6              LDR      r0,|L9.6464|
001566  7800              LDRB     r0,[r0,#0]  ; Hard_control
001568  2802              CMP      r0,#2
00156a  d11b              BNE      |L9.5540|
;;;3175                   {
;;;3176                       Trans_open_Copy.Type[0]=2;
00156c  49f3              LDR      r1,|L9.6460|
00156e  7008              STRB     r0,[r1,#0]
;;;3177                       Trans_open_Copy.Channel[1]=2;
001570  2102              MOVS     r1,#2
001572  48f2              LDR      r0,|L9.6460|
001574  7081              STRB     r1,[r0,#2]
;;;3178                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power8[0];
001576  eb0400c4          ADD      r0,r4,r4,LSL #3
00157a  eb001004          ADD      r0,r0,r4,LSL #4
00157e  49ee              LDR      r1,|L9.6456|
001580  eb010080          ADD      r0,r1,r0,LSL #2
001584  f890104a          LDRB     r1,[r0,#0x4a]
001588  48ec              LDR      r0,|L9.6460|
00158a  7441              STRB     r1,[r0,#0x11]
;;;3179                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq8,4);
00158c  eb0400c4          ADD      r0,r4,r4,LSL #3
001590  eb001004          ADD      r0,r0,r4,LSL #4
001594  49e8              LDR      r1,|L9.6456|
001596  eb010180          ADD      r1,r1,r0,LSL #2
00159a  48e8              LDR      r0,|L9.6460|
00159c  f8d1104b          LDR      r1,[r1,#0x4b]
0015a0  6081              STR      r1,[r0,#8]
0015a2  e01e              B        |L9.5602|
                  |L9.5540|
;;;3180                   }
;;;3181                   else if(Hard_control.usage_diagram_count==3)
0015a4  48e6              LDR      r0,|L9.6464|
0015a6  7800              LDRB     r0,[r0,#0]  ; Hard_control
0015a8  2803              CMP      r0,#3
0015aa  d11a              BNE      |L9.5602|
;;;3182                   {
;;;3183                       Trans_open_Copy.Type[0]=3;
0015ac  49e3              LDR      r1,|L9.6460|
0015ae  7008              STRB     r0,[r1,#0]
;;;3184                       Trans_open_Copy.Channel[2]=3;
0015b0  2103              MOVS     r1,#3
0015b2  48e2              LDR      r0,|L9.6460|
0015b4  70c1              STRB     r1,[r0,#3]
;;;3185                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power8[0];
0015b6  eb0400c4          ADD      r0,r4,r4,LSL #3
0015ba  eb001004          ADD      r0,r0,r4,LSL #4
0015be  49de              LDR      r1,|L9.6456|
0015c0  eb010080          ADD      r0,r1,r0,LSL #2
0015c4  f890104a          LDRB     r1,[r0,#0x4a]
0015c8  48dc              LDR      r0,|L9.6460|
0015ca  7481              STRB     r1,[r0,#0x12]
;;;3186                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq8,4);
0015cc  eb0400c4          ADD      r0,r4,r4,LSL #3
0015d0  eb001004          ADD      r0,r0,r4,LSL #4
0015d4  49d8              LDR      r1,|L9.6456|
0015d6  eb010180          ADD      r1,r1,r0,LSL #2
0015da  48d8              LDR      r0,|L9.6460|
0015dc  f8d1104b          LDR      r1,[r1,#0x4b]
0015e0  60c1              STR      r1,[r0,#0xc]
                  |L9.5602|
;;;3187                   }
;;;3188                   //}
;;;3189               }
;;;3190           }
;;;3191           if(State_monitor[i].end[7]!=1)   //结束
0015e2  eb040084          ADD      r0,r4,r4,LSL #2
0015e6  49d7              LDR      r1,|L9.6468|
0015e8  eb010080          ADD      r0,r1,r0,LSL #2
0015ec  7c40              LDRB     r0,[r0,#0x11]
0015ee  2801              CMP      r0,#1
0015f0  d07d              BEQ      |L9.5870|
;;;3192           {
;;;3193               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep8[0])
0015f2  48d5              LDR      r0,|L9.6472|
0015f4  6880              LDR      r0,[r0,#8]  ; set_time
0015f6  eb0401c4          ADD      r1,r4,r4,LSL #3
0015fa  eb011104          ADD      r1,r1,r4,LSL #4
0015fe  4ace              LDR      r2,|L9.6456|
001600  eb020181          ADD      r1,r2,r1,LSL #2
001604  f8911048          LDRB     r1,[r1,#0x48]
001608  4288              CMP      r0,r1
00160a  d170              BNE      |L9.5870|
;;;3194               {
;;;3195                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep8[1])
00160c  48ce              LDR      r0,|L9.6472|
00160e  6841              LDR      r1,[r0,#4]  ; set_time
001610  eb0400c4          ADD      r0,r4,r4,LSL #3
001614  eb001004          ADD      r0,r0,r4,LSL #4
001618  eb020080          ADD      r0,r2,r0,LSL #2
00161c  f8900049          LDRB     r0,[r0,#0x49]
001620  4281              CMP      r1,r0
001622  d17b              BNE      |L9.5916|
;;;3196                   {
;;;3197                       App_printf("\r\nthe 8 end");
001624  a0c9              ADR      r0,|L9.6476|
001626  f7fffffe          BL       App_printf
;;;3198                       Hard_control.usage_diagram_count--;
00162a  48c5              LDR      r0,|L9.6464|
00162c  7800              LDRB     r0,[r0,#0]  ; Hard_control
00162e  1e40              SUBS     r0,r0,#1
001630  49c3              LDR      r1,|L9.6464|
001632  7008              STRB     r0,[r1,#0]
;;;3199                       State_monitor[i].end[7]=1;
001634  2101              MOVS     r1,#1
001636  eb040084          ADD      r0,r4,r4,LSL #2
00163a  4ac2              LDR      r2,|L9.6468|
00163c  eb020080          ADD      r0,r2,r0,LSL #2
001640  7441              STRB     r1,[r0,#0x11]
;;;3200                       State_monitor[i].start[7]=0;
001642  2000              MOVS     r0,#0
001644  eb040184          ADD      r1,r4,r4,LSL #2
001648  eb020181          ADD      r1,r2,r1,LSL #2
00164c  71c8              STRB     r0,[r1,#7]
;;;3201                       if(Trans_open_Copy.Type[0]==1)
00164e  48bb              LDR      r0,|L9.6460|
001650  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001652  2801              CMP      r0,#1
001654  d107              BNE      |L9.5734|
;;;3202                       {
;;;3203                           Trans_open_Copy.Type[0]=0;
001656  2000              MOVS     r0,#0
001658  49b8              LDR      r1,|L9.6460|
00165a  7008              STRB     r0,[r1,#0]
;;;3204                           //固频时，时间到，停止即可
;;;3205                           memset(Trans_open_Copy.Freq,0,12);//清零
00165c  4608              MOV      r0,r1
00165e  2100              MOVS     r1,#0
001660  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001662  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
001664  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.5734|
;;;3206                       }
;;;3207                       if(Trans_open_Copy.Type[0]==2)
001666  48b5              LDR      r0,|L9.6460|
001668  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
00166a  2802              CMP      r0,#2
00166c  d11a              BNE      |L9.5796|
;;;3208                       {
;;;3209                           Trans_open_Copy.Type[0]=1;
00166e  2001              MOVS     r0,#1
001670  49b2              LDR      r1,|L9.6460|
001672  7008              STRB     r0,[r1,#0]
;;;3210                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq8,4)==0)   //踢出第一个
001674  eb0400c4          ADD      r0,r4,r4,LSL #3
001678  eb001004          ADD      r0,r0,r4,LSL #4
00167c  4aae              LDR      r2,|L9.6456|
00167e  eb020080          ADD      r0,r2,r0,LSL #2
001682  f100014b          ADD      r1,r0,#0x4b
001686  2204              MOVS     r2,#4
001688  48ac              LDR      r0,|L9.6460|
00168a  1d00              ADDS     r0,r0,#4
00168c  f7fffffe          BL       memcmp
001690  b940              CBNZ     r0,|L9.5796|
;;;3211                           {
;;;3212                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
001692  48aa              LDR      r0,|L9.6460|
001694  7a00              LDRB     r0,[r0,#8]
001696  49a9              LDR      r1,|L9.6460|
001698  7108              STRB     r0,[r1,#4]
;;;3213                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
00169a  4608              MOV      r0,r1
00169c  7a41              LDRB     r1,[r0,#9]
00169e  7141              STRB     r1,[r0,#5]
;;;3214                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
0016a0  7a81              LDRB     r1,[r0,#0xa]
0016a2  7181              STRB     r1,[r0,#6]
                  |L9.5796|
;;;3215                               //最后1byte都为0，所以不处理
;;;3216                           }
;;;3217                           //如果是踢出第二个，不需要做处理了
;;;3218                       }
;;;3219                       if(Trans_open_Copy.Type[0]==3)
0016a4  48a5              LDR      r0,|L9.6460|
0016a6  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0016a8  2803              CMP      r0,#3
0016aa  d137              BNE      |L9.5916|
;;;3220                       {
;;;3221                           Trans_open_Copy.Type[0]=2;
0016ac  2002              MOVS     r0,#2
0016ae  49a3              LDR      r1,|L9.6460|
0016b0  7008              STRB     r0,[r1,#0]
;;;3222                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq8,4)==0)   //踢出第一个
0016b2  eb0400c4          ADD      r0,r4,r4,LSL #3
0016b6  eb001004          ADD      r0,r0,r4,LSL #4
0016ba  4a9f              LDR      r2,|L9.6456|
0016bc  eb020080          ADD      r0,r2,r0,LSL #2
0016c0  f100014b          ADD      r1,r0,#0x4b
0016c4  2204              MOVS     r2,#4
0016c6  489d              LDR      r0,|L9.6460|
0016c8  1d00              ADDS     r0,r0,#4
0016ca  f7fffffe          BL       memcmp
0016ce  b978              CBNZ     r0,|L9.5872|
;;;3223                           {
;;;3224                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
0016d0  489a              LDR      r0,|L9.6460|
0016d2  7a00              LDRB     r0,[r0,#8]
0016d4  4999              LDR      r1,|L9.6460|
0016d6  7108              STRB     r0,[r1,#4]
;;;3225                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
0016d8  4608              MOV      r0,r1
0016da  7a41              LDRB     r1,[r0,#9]
0016dc  7141              STRB     r1,[r0,#5]
;;;3226                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
0016de  7a81              LDRB     r1,[r0,#0xa]
0016e0  7181              STRB     r1,[r0,#6]
;;;3227                               //最后1byte都为0，所以不处理
;;;3228                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
0016e2  7b01              LDRB     r1,[r0,#0xc]
0016e4  7201              STRB     r1,[r0,#8]
;;;3229                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
0016e6  7b41              LDRB     r1,[r0,#0xd]
0016e8  7241              STRB     r1,[r0,#9]
;;;3230                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
0016ea  7b81              LDRB     r1,[r0,#0xe]
0016ec  7281              STRB     r1,[r0,#0xa]
                  |L9.5870|
0016ee  e015              B        |L9.5916|
                  |L9.5872|
;;;3231                           }
;;;3232                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq8,4)==0)     //踢出第二个
0016f0  eb0400c4          ADD      r0,r4,r4,LSL #3
0016f4  eb001004          ADD      r0,r0,r4,LSL #4
0016f8  4a8f              LDR      r2,|L9.6456|
0016fa  eb020080          ADD      r0,r2,r0,LSL #2
0016fe  f100014b          ADD      r1,r0,#0x4b
001702  2204              MOVS     r2,#4
001704  488d              LDR      r0,|L9.6460|
001706  3008              ADDS     r0,r0,#8
001708  f7fffffe          BL       memcmp
00170c  b930              CBNZ     r0,|L9.5916|
;;;3233                           {
;;;3234                               //最后1byte都为0，所以不处理
;;;3235                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
00170e  488b              LDR      r0,|L9.6460|
001710  7b01              LDRB     r1,[r0,#0xc]
001712  7201              STRB     r1,[r0,#8]
;;;3236                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
001714  7b41              LDRB     r1,[r0,#0xd]
001716  7241              STRB     r1,[r0,#9]
;;;3237                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
001718  7b81              LDRB     r1,[r0,#0xe]
00171a  7281              STRB     r1,[r0,#0xa]
                  |L9.5916|
;;;3238                           }
;;;3239                           //如果是踢出第三个，不需要做处理了
;;;3240                       }
;;;3241                   }
;;;3242               }
;;;3243           }
;;;3244   
;;;3245           //第九个
;;;3246           if(State_monitor[i].start[8]!=1)
00171c  eb040084          ADD      r0,r4,r4,LSL #2
001720  4988              LDR      r1,|L9.6468|
001722  eb010080          ADD      r0,r1,r0,LSL #2
001726  7a00              LDRB     r0,[r0,#8]
001728  2801              CMP      r0,#1
00172a  d07b              BEQ      |L9.6180|
;;;3247           {
;;;3248               if(Run_Diagram_buff[i].Start_Time9[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time9[0]*60+Run_Diagram_buff[i].Start_Time9[1]))\
00172c  eb0400c4          ADD      r0,r4,r4,LSL #3
001730  eb001004          ADD      r0,r0,r4,LSL #4
001734  4980              LDR      r1,|L9.6456|
001736  eb010080          ADD      r0,r1,r0,LSL #2
00173a  f8900050          LDRB     r0,[r0,#0x50]
00173e  28ff              CMP      r0,#0xff
001740  d070              BEQ      |L9.6180|
001742  4881              LDR      r0,|L9.6472|
001744  6840              LDR      r0,[r0,#4]  ; set_time
001746  4980              LDR      r1,|L9.6472|
001748  6889              LDR      r1,[r1,#8]  ; set_time
00174a  ebc11101          RSB      r1,r1,r1,LSL #4
00174e  eb000181          ADD      r1,r0,r1,LSL #2
001752  eb0400c4          ADD      r0,r4,r4,LSL #3
001756  eb001004          ADD      r0,r0,r4,LSL #4
00175a  4a77              LDR      r2,|L9.6456|
00175c  eb020080          ADD      r0,r2,r0,LSL #2
001760  f8900051          LDRB     r0,[r0,#0x51]
001764  eb0402c4          ADD      r2,r4,r4,LSL #3
001768  eb021204          ADD      r2,r2,r4,LSL #4
00176c  4b72              LDR      r3,|L9.6456|
00176e  eb030282          ADD      r2,r3,r2,LSL #2
001772  f8922050          LDRB     r2,[r2,#0x50]
001776  ebc21202          RSB      r2,r2,r2,LSL #4
00177a  eb000082          ADD      r0,r0,r2,LSL #2
00177e  4281              CMP      r1,r0
001780  db50              BLT      |L9.6180|
;;;3249                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep9[0]*60+Run_Diagram_buff[i].End_Timep9[1])))
001782  4871              LDR      r0,|L9.6472|
001784  6840              LDR      r0,[r0,#4]  ; set_time
001786  4970              LDR      r1,|L9.6472|
001788  6889              LDR      r1,[r1,#8]  ; set_time
00178a  ebc11101          RSB      r1,r1,r1,LSL #4
00178e  eb000181          ADD      r1,r0,r1,LSL #2
001792  eb0400c4          ADD      r0,r4,r4,LSL #3
001796  eb001004          ADD      r0,r0,r4,LSL #4
00179a  461a              MOV      r2,r3
00179c  eb020080          ADD      r0,r2,r0,LSL #2
0017a0  f8900053          LDRB     r0,[r0,#0x53]
0017a4  eb0402c4          ADD      r2,r4,r4,LSL #3
0017a8  eb021204          ADD      r2,r2,r4,LSL #4
0017ac  eb030282          ADD      r2,r3,r2,LSL #2
0017b0  f8922052          LDRB     r2,[r2,#0x52]
0017b4  ebc21202          RSB      r2,r2,r2,LSL #4
0017b8  eb000082          ADD      r0,r0,r2,LSL #2
0017bc  4281              CMP      r1,r0
0017be  da71              BGE      |L9.6308|
;;;3250               {
;;;3251   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time9[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;3252   //														<(Run_Diagram_buff[i].End_Timep9[0]*60+Run_Diagram_buff[i].End_Timep9[1]))
;;;3253   //					{
;;;3254                   App_printf("\r\nthe 9");
0017c0  a065              ADR      r0,|L9.6488|
0017c2  f7fffffe          BL       App_printf
;;;3255                   State_monitor[i].start[8]=1;
0017c6  2001              MOVS     r0,#1
0017c8  eb040184          ADD      r1,r4,r4,LSL #2
0017cc  4a5d              LDR      r2,|L9.6468|
0017ce  eb020181          ADD      r1,r2,r1,LSL #2
0017d2  7208              STRB     r0,[r1,#8]
;;;3256                   State_monitor[i].end[8]=0;
0017d4  2100              MOVS     r1,#0
0017d6  eb040084          ADD      r0,r4,r4,LSL #2
0017da  eb020080          ADD      r0,r2,r0,LSL #2
0017de  7481              STRB     r1,[r0,#0x12]
;;;3257                   Hard_control.usage_diagram_count++;
0017e0  4857              LDR      r0,|L9.6464|
0017e2  7800              LDRB     r0,[r0,#0]  ; Hard_control
0017e4  1c40              ADDS     r0,r0,#1
0017e6  4956              LDR      r1,|L9.6464|
0017e8  7008              STRB     r0,[r1,#0]
;;;3258                   if(Hard_control.usage_diagram_count==1)
0017ea  4608              MOV      r0,r1
0017ec  7800              LDRB     r0,[r0,#0]  ; Hard_control
0017ee  2801              CMP      r0,#1
0017f0  d119              BNE      |L9.6182|
;;;3259                   {
;;;3260                       Trans_open_Copy.Type[0]=1;
0017f2  4952              LDR      r1,|L9.6460|
0017f4  7008              STRB     r0,[r1,#0]
;;;3261                       Trans_open_Copy.Channel[0]=1;
0017f6  7048              STRB     r0,[r1,#1]
;;;3262                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power9[0];
0017f8  eb0400c4          ADD      r0,r4,r4,LSL #3
0017fc  eb001004          ADD      r0,r0,r4,LSL #4
001800  494d              LDR      r1,|L9.6456|
001802  eb010080          ADD      r0,r1,r0,LSL #2
001806  f8900054          LDRB     r0,[r0,#0x54]
00180a  494c              LDR      r1,|L9.6460|
00180c  7408              STRB     r0,[r1,#0x10]
;;;3263                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq9,4);
00180e  eb0400c4          ADD      r0,r4,r4,LSL #3
001812  eb001004          ADD      r0,r0,r4,LSL #4
001816  4948              LDR      r1,|L9.6456|
001818  eb010180          ADD      r1,r1,r0,LSL #2
00181c  4847              LDR      r0,|L9.6460|
00181e  f8d11055          LDR      r1,[r1,#0x55]
001822  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
                  |L9.6180|
001824  e03e              B        |L9.6308|
                  |L9.6182|
;;;3264                   }
;;;3265                   else if(Hard_control.usage_diagram_count==2)
001826  4846              LDR      r0,|L9.6464|
001828  7800              LDRB     r0,[r0,#0]  ; Hard_control
00182a  2802              CMP      r0,#2
00182c  d11b              BNE      |L9.6246|
;;;3266                   {
;;;3267                       Trans_open_Copy.Type[0]=2;
00182e  4943              LDR      r1,|L9.6460|
001830  7008              STRB     r0,[r1,#0]
;;;3268                       Trans_open_Copy.Channel[1]=2;
001832  2102              MOVS     r1,#2
001834  4841              LDR      r0,|L9.6460|
001836  7081              STRB     r1,[r0,#2]
;;;3269                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power9[0];
001838  eb0400c4          ADD      r0,r4,r4,LSL #3
00183c  eb001004          ADD      r0,r0,r4,LSL #4
001840  493d              LDR      r1,|L9.6456|
001842  eb010080          ADD      r0,r1,r0,LSL #2
001846  f8901054          LDRB     r1,[r0,#0x54]
00184a  483c              LDR      r0,|L9.6460|
00184c  7441              STRB     r1,[r0,#0x11]
;;;3270                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq9,4);
00184e  eb0400c4          ADD      r0,r4,r4,LSL #3
001852  eb001004          ADD      r0,r0,r4,LSL #4
001856  4938              LDR      r1,|L9.6456|
001858  eb010180          ADD      r1,r1,r0,LSL #2
00185c  4837              LDR      r0,|L9.6460|
00185e  f8d11055          LDR      r1,[r1,#0x55]
001862  6081              STR      r1,[r0,#8]
001864  e01e              B        |L9.6308|
                  |L9.6246|
;;;3271                   }
;;;3272                   else if(Hard_control.usage_diagram_count==3)
001866  4836              LDR      r0,|L9.6464|
001868  7800              LDRB     r0,[r0,#0]  ; Hard_control
00186a  2803              CMP      r0,#3
00186c  d11a              BNE      |L9.6308|
;;;3273                   {
;;;3274                       Trans_open_Copy.Type[0]=3;
00186e  4933              LDR      r1,|L9.6460|
001870  7008              STRB     r0,[r1,#0]
;;;3275                       Trans_open_Copy.Channel[2]=3;
001872  2103              MOVS     r1,#3
001874  4831              LDR      r0,|L9.6460|
001876  70c1              STRB     r1,[r0,#3]
;;;3276                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power9[0];
001878  eb0400c4          ADD      r0,r4,r4,LSL #3
00187c  eb001004          ADD      r0,r0,r4,LSL #4
001880  492d              LDR      r1,|L9.6456|
001882  eb010080          ADD      r0,r1,r0,LSL #2
001886  f8901054          LDRB     r1,[r0,#0x54]
00188a  482c              LDR      r0,|L9.6460|
00188c  7481              STRB     r1,[r0,#0x12]
;;;3277                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq9,4);
00188e  eb0400c4          ADD      r0,r4,r4,LSL #3
001892  eb001004          ADD      r0,r0,r4,LSL #4
001896  4928              LDR      r1,|L9.6456|
001898  eb010180          ADD      r1,r1,r0,LSL #2
00189c  4827              LDR      r0,|L9.6460|
00189e  f8d11055          LDR      r1,[r1,#0x55]
0018a2  60c1              STR      r1,[r0,#0xc]
                  |L9.6308|
;;;3278                   }
;;;3279                   //	}
;;;3280               }
;;;3281           }
;;;3282   
;;;3283           if(State_monitor[i].end[8]!=1)   //结束
0018a4  eb040084          ADD      r0,r4,r4,LSL #2
0018a8  4926              LDR      r1,|L9.6468|
0018aa  eb010080          ADD      r0,r1,r0,LSL #2
0018ae  7c80              LDRB     r0,[r0,#0x12]
0018b0  2801              CMP      r0,#1
0018b2  d07d              BEQ      |L9.6576|
;;;3284           {
;;;3285               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep9[0])
0018b4  4824              LDR      r0,|L9.6472|
0018b6  6880              LDR      r0,[r0,#8]  ; set_time
0018b8  eb0401c4          ADD      r1,r4,r4,LSL #3
0018bc  eb011104          ADD      r1,r1,r4,LSL #4
0018c0  4a1d              LDR      r2,|L9.6456|
0018c2  eb020181          ADD      r1,r2,r1,LSL #2
0018c6  f8911052          LDRB     r1,[r1,#0x52]
0018ca  4288              CMP      r0,r1
0018cc  d170              BNE      |L9.6576|
;;;3286               {
;;;3287                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep9[1])
0018ce  481e              LDR      r0,|L9.6472|
0018d0  6841              LDR      r1,[r0,#4]  ; set_time
0018d2  eb0400c4          ADD      r0,r4,r4,LSL #3
0018d6  eb001004          ADD      r0,r0,r4,LSL #4
0018da  eb020080          ADD      r0,r2,r0,LSL #2
0018de  f8900053          LDRB     r0,[r0,#0x53]
0018e2  4281              CMP      r1,r0
0018e4  d164              BNE      |L9.6576|
;;;3288                   {
;;;3289                       App_printf("\r\nthe 9 end");
0018e6  a01e              ADR      r0,|L9.6496|
0018e8  f7fffffe          BL       App_printf
;;;3290                       Hard_control.usage_diagram_count--;
0018ec  4814              LDR      r0,|L9.6464|
0018ee  7800              LDRB     r0,[r0,#0]  ; Hard_control
0018f0  1e40              SUBS     r0,r0,#1
0018f2  4913              LDR      r1,|L9.6464|
0018f4  7008              STRB     r0,[r1,#0]
;;;3291                       State_monitor[i].end[8]=1;
0018f6  2101              MOVS     r1,#1
0018f8  eb040084          ADD      r0,r4,r4,LSL #2
0018fc  4a11              LDR      r2,|L9.6468|
0018fe  eb020080          ADD      r0,r2,r0,LSL #2
001902  7481              STRB     r1,[r0,#0x12]
;;;3292                       State_monitor[i].start[8]=0;
001904  2000              MOVS     r0,#0
001906  eb040184          ADD      r1,r4,r4,LSL #2
00190a  eb020181          ADD      r1,r2,r1,LSL #2
00190e  7208              STRB     r0,[r1,#8]
;;;3293                       if(Trans_open_Copy.Type[0]==1)
001910  480a              LDR      r0,|L9.6460|
001912  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001914  2801              CMP      r0,#1
001916  d107              BNE      |L9.6440|
;;;3294                       {
;;;3295                           Trans_open_Copy.Type[0]=0;
001918  2000              MOVS     r0,#0
00191a  4908              LDR      r1,|L9.6460|
00191c  7008              STRB     r0,[r1,#0]
;;;3296                           //固频时，时间到，停止即可
;;;3297                           memset(Trans_open_Copy.Freq,0,12);//清零
00191e  4608              MOV      r0,r1
001920  2100              MOVS     r1,#0
001922  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001924  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
001926  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.6440|
;;;3298                       }
;;;3299                       if(Trans_open_Copy.Type[0]==2)
001928  4804              LDR      r0,|L9.6460|
00192a  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
00192c  2802              CMP      r0,#2
00192e  d136              BNE      |L9.6558|
;;;3300                       {
;;;3301                           Trans_open_Copy.Type[0]=1;
001930  2001              MOVS     r0,#1
001932  4902              LDR      r1,|L9.6460|
001934  7008              STRB     r0,[r1,#0]
;;;3302                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq9,4)==0)   //踢出第一个
001936  e019              B        |L9.6508|
                  |L9.6456|
                          DCD      Run_Diagram_buff
                  |L9.6460|
                          DCD      Trans_open_Copy
                  |L9.6464|
                          DCD      Hard_control
                  |L9.6468|
                          DCD      State_monitor
                  |L9.6472|
                          DCD      set_time
                  |L9.6476|
00194c  0d0a7468          DCB      "\r\nthe 8 end",0
001950  65203820
001954  656e6400
                  |L9.6488|
001958  0d0a7468          DCB      "\r\nthe 9",0
00195c  65203900
                  |L9.6496|
001960  0d0a7468          DCB      "\r\nthe 9 end",0
001964  65203920
001968  656e6400
                  |L9.6508|
00196c  eb0400c4          ADD      r0,r4,r4,LSL #3
001970  eb001004          ADD      r0,r0,r4,LSL #4
001974  4aea              LDR      r2,|L9.7456|
001976  eb020080          ADD      r0,r2,r0,LSL #2
00197a  f1000155          ADD      r1,r0,#0x55
00197e  2204              MOVS     r2,#4
001980  48e8              LDR      r0,|L9.7460|
001982  f7fffffe          BL       memcmp
001986  b950              CBNZ     r0,|L9.6558|
;;;3303                           {
;;;3304                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
001988  48e6              LDR      r0,|L9.7460|
00198a  1f00              SUBS     r0,r0,#4
00198c  7a00              LDRB     r0,[r0,#8]
00198e  49e5              LDR      r1,|L9.7460|
001990  1f09              SUBS     r1,r1,#4
001992  7108              STRB     r0,[r1,#4]
;;;3305                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
001994  4608              MOV      r0,r1
001996  7a41              LDRB     r1,[r0,#9]
001998  7141              STRB     r1,[r0,#5]
;;;3306                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
00199a  7a81              LDRB     r1,[r0,#0xa]
00199c  7181              STRB     r1,[r0,#6]
                  |L9.6558|
;;;3307                               //最后1byte都为0，所以不处理
;;;3308                           }
;;;3309                           //如果是踢出第二个，不需要做处理了
;;;3310                       }
;;;3311                       if(Trans_open_Copy.Type[0]==3)
00199e  48e1              LDR      r0,|L9.7460|
0019a0  1f00              SUBS     r0,r0,#4
0019a2  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0019a4  2803              CMP      r0,#3
0019a6  d13c              BNE      |L9.6690|
;;;3312                       {
;;;3313                           Trans_open_Copy.Type[0]=2;
0019a8  2002              MOVS     r0,#2
0019aa  49de              LDR      r1,|L9.7460|
0019ac  1f09              SUBS     r1,r1,#4
0019ae  e000              B        |L9.6578|
                  |L9.6576|
0019b0  e037              B        |L9.6690|
                  |L9.6578|
0019b2  7008              STRB     r0,[r1,#0]
;;;3314                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq9,4)==0)   //踢出第一个
0019b4  eb0400c4          ADD      r0,r4,r4,LSL #3
0019b8  eb001004          ADD      r0,r0,r4,LSL #4
0019bc  4ad8              LDR      r2,|L9.7456|
0019be  eb020080          ADD      r0,r2,r0,LSL #2
0019c2  f1000155          ADD      r1,r0,#0x55
0019c6  2204              MOVS     r2,#4
0019c8  48d6              LDR      r0,|L9.7460|
0019ca  f7fffffe          BL       memcmp
0019ce  b988              CBNZ     r0,|L9.6644|
;;;3315                           {
;;;3316                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
0019d0  48d4              LDR      r0,|L9.7460|
0019d2  1f00              SUBS     r0,r0,#4
0019d4  7a00              LDRB     r0,[r0,#8]
0019d6  49d3              LDR      r1,|L9.7460|
0019d8  1f09              SUBS     r1,r1,#4
0019da  7108              STRB     r0,[r1,#4]
;;;3317                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
0019dc  4608              MOV      r0,r1
0019de  7a41              LDRB     r1,[r0,#9]
0019e0  7141              STRB     r1,[r0,#5]
;;;3318                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
0019e2  7a81              LDRB     r1,[r0,#0xa]
0019e4  7181              STRB     r1,[r0,#6]
;;;3319                               //最后1byte都为0，所以不处理
;;;3320                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
0019e6  7b01              LDRB     r1,[r0,#0xc]
0019e8  7201              STRB     r1,[r0,#8]
;;;3321                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
0019ea  7b41              LDRB     r1,[r0,#0xd]
0019ec  7241              STRB     r1,[r0,#9]
;;;3322                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
0019ee  7b81              LDRB     r1,[r0,#0xe]
0019f0  7281              STRB     r1,[r0,#0xa]
0019f2  e016              B        |L9.6690|
                  |L9.6644|
;;;3323                           }
;;;3324                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq9,4)==0)     //踢出第二个
0019f4  eb0400c4          ADD      r0,r4,r4,LSL #3
0019f8  eb001004          ADD      r0,r0,r4,LSL #4
0019fc  4ac8              LDR      r2,|L9.7456|
0019fe  eb020080          ADD      r0,r2,r0,LSL #2
001a02  f1000155          ADD      r1,r0,#0x55
001a06  2204              MOVS     r2,#4
001a08  48c6              LDR      r0,|L9.7460|
001a0a  1d00              ADDS     r0,r0,#4
001a0c  f7fffffe          BL       memcmp
001a10  b938              CBNZ     r0,|L9.6690|
;;;3325                           {
;;;3326                               //最后1byte都为0，所以不处理
;;;3327                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
001a12  48c4              LDR      r0,|L9.7460|
001a14  1f00              SUBS     r0,r0,#4
001a16  7b01              LDRB     r1,[r0,#0xc]
001a18  7201              STRB     r1,[r0,#8]
;;;3328                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
001a1a  7b41              LDRB     r1,[r0,#0xd]
001a1c  7241              STRB     r1,[r0,#9]
;;;3329                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
001a1e  7b81              LDRB     r1,[r0,#0xe]
001a20  7281              STRB     r1,[r0,#0xa]
                  |L9.6690|
;;;3330                           }
;;;3331                           //如果是踢出第三个，不需要做处理了
;;;3332                       }
;;;3333                   }
;;;3334               }
;;;3335           }
;;;3336   
;;;3337           //第十个
;;;3338           if(State_monitor[i].start[9]!=1)
001a22  eb040084          ADD      r0,r4,r4,LSL #2
001a26  49c0              LDR      r1,|L9.7464|
001a28  eb010080          ADD      r0,r1,r0,LSL #2
001a2c  7a40              LDRB     r0,[r0,#9]
001a2e  2801              CMP      r0,#1
001a30  d07e              BEQ      |L9.6960|
;;;3339           {
;;;3340               if(Run_Diagram_buff[i].Start_Time10[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buff[i].Start_Time10[0]*60+Run_Diagram_buff[i].Start_Time10[1]))\
001a32  eb0400c4          ADD      r0,r4,r4,LSL #3
001a36  eb001004          ADD      r0,r0,r4,LSL #4
001a3a  49b9              LDR      r1,|L9.7456|
001a3c  eb010080          ADD      r0,r1,r0,LSL #2
001a40  f890005a          LDRB     r0,[r0,#0x5a]
001a44  28ff              CMP      r0,#0xff
001a46  d073              BEQ      |L9.6960|
001a48  48b8              LDR      r0,|L9.7468|
001a4a  6840              LDR      r0,[r0,#4]  ; set_time
001a4c  49b7              LDR      r1,|L9.7468|
001a4e  6889              LDR      r1,[r1,#8]  ; set_time
001a50  ebc11101          RSB      r1,r1,r1,LSL #4
001a54  eb000181          ADD      r1,r0,r1,LSL #2
001a58  eb0400c4          ADD      r0,r4,r4,LSL #3
001a5c  eb001004          ADD      r0,r0,r4,LSL #4
001a60  4aaf              LDR      r2,|L9.7456|
001a62  eb020080          ADD      r0,r2,r0,LSL #2
001a66  f890005b          LDRB     r0,[r0,#0x5b]
001a6a  eb0402c4          ADD      r2,r4,r4,LSL #3
001a6e  eb021204          ADD      r2,r2,r4,LSL #4
001a72  4bab              LDR      r3,|L9.7456|
001a74  eb030282          ADD      r2,r3,r2,LSL #2
001a78  f892205a          LDRB     r2,[r2,#0x5a]
001a7c  ebc21202          RSB      r2,r2,r2,LSL #4
001a80  eb000082          ADD      r0,r0,r2,LSL #2
001a84  4281              CMP      r1,r0
001a86  db53              BLT      |L9.6960|
;;;3341                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buff[i].End_Timep10[0]*60+Run_Diagram_buff[i].End_Timep10[1])))
001a88  48a8              LDR      r0,|L9.7468|
001a8a  6840              LDR      r0,[r0,#4]  ; set_time
001a8c  49a7              LDR      r1,|L9.7468|
001a8e  6889              LDR      r1,[r1,#8]  ; set_time
001a90  ebc11101          RSB      r1,r1,r1,LSL #4
001a94  eb000181          ADD      r1,r0,r1,LSL #2
001a98  eb0400c4          ADD      r0,r4,r4,LSL #3
001a9c  eb001004          ADD      r0,r0,r4,LSL #4
001aa0  461a              MOV      r2,r3
001aa2  eb020080          ADD      r0,r2,r0,LSL #2
001aa6  f890005d          LDRB     r0,[r0,#0x5d]
001aaa  eb0402c4          ADD      r2,r4,r4,LSL #3
001aae  eb021204          ADD      r2,r2,r4,LSL #4
001ab2  eb030282          ADD      r2,r3,r2,LSL #2
001ab6  f892205c          LDRB     r2,[r2,#0x5c]
001aba  ebc21202          RSB      r2,r2,r2,LSL #4
001abe  eb000082          ADD      r0,r0,r2,LSL #2
001ac2  4281              CMP      r1,r0
001ac4  da7e              BGE      |L9.7108|
;;;3342               {
;;;3343   //					if(set_time.tm_min== Run_Diagram_buff[i].Start_Time10[1]||(set_time.tm_hour*60+set_time.tm_min)\
;;;3344   //														<(Run_Diagram_buff[i].End_Timep10[0]*60+Run_Diagram_buff[i].End_Timep10[1]))
;;;3345   //					{
;;;3346                   App_printf("\r\nthe 10 ");
001ac6  a09a              ADR      r0,|L9.7472|
001ac8  f7fffffe          BL       App_printf
;;;3347                   State_monitor[i].start[9]=1;
001acc  2001              MOVS     r0,#1
001ace  eb040184          ADD      r1,r4,r4,LSL #2
001ad2  4a95              LDR      r2,|L9.7464|
001ad4  eb020181          ADD      r1,r2,r1,LSL #2
001ad8  7248              STRB     r0,[r1,#9]
;;;3348                   State_monitor[i].end[9]=0;
001ada  2100              MOVS     r1,#0
001adc  eb040084          ADD      r0,r4,r4,LSL #2
001ae0  eb020080          ADD      r0,r2,r0,LSL #2
001ae4  74c1              STRB     r1,[r0,#0x13]
;;;3349                   Hard_control.usage_diagram_count++;
001ae6  4895              LDR      r0,|L9.7484|
001ae8  7800              LDRB     r0,[r0,#0]  ; Hard_control
001aea  1c40              ADDS     r0,r0,#1
001aec  4993              LDR      r1,|L9.7484|
001aee  7008              STRB     r0,[r1,#0]
;;;3350                   if(Hard_control.usage_diagram_count==1)
001af0  4608              MOV      r0,r1
001af2  7800              LDRB     r0,[r0,#0]  ; Hard_control
001af4  2801              CMP      r0,#1
001af6  d11e              BNE      |L9.6966|
;;;3351                   {
;;;3352                       Trans_open_Copy.Type[0]=1;
001af8  498a              LDR      r1,|L9.7460|
001afa  1f09              SUBS     r1,r1,#4
001afc  7008              STRB     r0,[r1,#0]
;;;3353                       Trans_open_Copy.Channel[0]=1;
001afe  7048              STRB     r0,[r1,#1]
;;;3354                       Trans_open_Copy.Power_grade[0]=Run_Diagram_buff[i].Power10[0];
001b00  eb0400c4          ADD      r0,r4,r4,LSL #3
001b04  eb001004          ADD      r0,r0,r4,LSL #4
001b08  4985              LDR      r1,|L9.7456|
001b0a  eb010080          ADD      r0,r1,r0,LSL #2
001b0e  f890005e          LDRB     r0,[r0,#0x5e]
001b12  4984              LDR      r1,|L9.7460|
001b14  1f09              SUBS     r1,r1,#4
001b16  7408              STRB     r0,[r1,#0x10]
;;;3355                       memcpy(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq10,4);
001b18  eb0400c4          ADD      r0,r4,r4,LSL #3
001b1c  eb001004          ADD      r0,r0,r4,LSL #4
001b20  497f              LDR      r1,|L9.7456|
001b22  eb010180          ADD      r1,r1,r0,LSL #2
001b26  487f              LDR      r0,|L9.7460|
001b28  1f00              SUBS     r0,r0,#4
001b2a  f8d1105f          LDR      r1,[r1,#0x5f]
001b2e  e000              B        |L9.6962|
                  |L9.6960|
001b30  e048              B        |L9.7108|
                  |L9.6962|
001b32  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001b34  e046              B        |L9.7108|
                  |L9.6966|
;;;3356                   }
;;;3357                   else if(Hard_control.usage_diagram_count==2)
001b36  4881              LDR      r0,|L9.7484|
001b38  7800              LDRB     r0,[r0,#0]  ; Hard_control
001b3a  2802              CMP      r0,#2
001b3c  d11f              BNE      |L9.7038|
;;;3358                   {
;;;3359                       Trans_open_Copy.Type[0]=2;
001b3e  4979              LDR      r1,|L9.7460|
001b40  1f09              SUBS     r1,r1,#4
001b42  7008              STRB     r0,[r1,#0]
;;;3360                       Trans_open_Copy.Channel[1]=2;
001b44  2102              MOVS     r1,#2
001b46  4877              LDR      r0,|L9.7460|
001b48  1f00              SUBS     r0,r0,#4
001b4a  7081              STRB     r1,[r0,#2]
;;;3361                       Trans_open_Copy.Power_grade[1]=Run_Diagram_buff[i].Power10[0];
001b4c  eb0400c4          ADD      r0,r4,r4,LSL #3
001b50  eb001004          ADD      r0,r0,r4,LSL #4
001b54  4972              LDR      r1,|L9.7456|
001b56  eb010080          ADD      r0,r1,r0,LSL #2
001b5a  f890105e          LDRB     r1,[r0,#0x5e]
001b5e  4871              LDR      r0,|L9.7460|
001b60  1f00              SUBS     r0,r0,#4
001b62  7441              STRB     r1,[r0,#0x11]
;;;3362                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq10,4);
001b64  eb0400c4          ADD      r0,r4,r4,LSL #3
001b68  eb001004          ADD      r0,r0,r4,LSL #4
001b6c  496c              LDR      r1,|L9.7456|
001b6e  eb010180          ADD      r1,r1,r0,LSL #2
001b72  486c              LDR      r0,|L9.7460|
001b74  1f00              SUBS     r0,r0,#4
001b76  f8d1105f          LDR      r1,[r1,#0x5f]
001b7a  6081              STR      r1,[r0,#8]
001b7c  e022              B        |L9.7108|
                  |L9.7038|
;;;3363                   }
;;;3364                   else if(Hard_control.usage_diagram_count==3)
001b7e  486f              LDR      r0,|L9.7484|
001b80  7800              LDRB     r0,[r0,#0]  ; Hard_control
001b82  2803              CMP      r0,#3
001b84  d11e              BNE      |L9.7108|
;;;3365                   {
;;;3366                       Trans_open_Copy.Type[0]=3;
001b86  4967              LDR      r1,|L9.7460|
001b88  1f09              SUBS     r1,r1,#4
001b8a  7008              STRB     r0,[r1,#0]
;;;3367                       Trans_open_Copy.Channel[2]=3;
001b8c  2103              MOVS     r1,#3
001b8e  4865              LDR      r0,|L9.7460|
001b90  1f00              SUBS     r0,r0,#4
001b92  70c1              STRB     r1,[r0,#3]
;;;3368                       Trans_open_Copy.Power_grade[2]=Run_Diagram_buff[i].Power10[0];
001b94  eb0400c4          ADD      r0,r4,r4,LSL #3
001b98  eb001004          ADD      r0,r0,r4,LSL #4
001b9c  4960              LDR      r1,|L9.7456|
001b9e  eb010080          ADD      r0,r1,r0,LSL #2
001ba2  f890105e          LDRB     r1,[r0,#0x5e]
001ba6  485f              LDR      r0,|L9.7460|
001ba8  1f00              SUBS     r0,r0,#4
001baa  7481              STRB     r1,[r0,#0x12]
;;;3369                       memcpy((uint8_t *)(Trans_open_Copy.Freq)+8,Run_Diagram_buff[i].Frq10,4);
001bac  eb0400c4          ADD      r0,r4,r4,LSL #3
001bb0  eb001004          ADD      r0,r0,r4,LSL #4
001bb4  495a              LDR      r1,|L9.7456|
001bb6  eb010180          ADD      r1,r1,r0,LSL #2
001bba  485a              LDR      r0,|L9.7460|
001bbc  1f00              SUBS     r0,r0,#4
001bbe  f8d1105f          LDR      r1,[r1,#0x5f]
001bc2  60c1              STR      r1,[r0,#0xc]
                  |L9.7108|
;;;3370                   }
;;;3371                   //	}
;;;3372               }
;;;3373           }
;;;3374           if(State_monitor[i].end[9]!=1)   //结束
001bc4  eb040084          ADD      r0,r4,r4,LSL #2
001bc8  4957              LDR      r1,|L9.7464|
001bca  eb010080          ADD      r0,r1,r0,LSL #2
001bce  7cc0              LDRB     r0,[r0,#0x13]
001bd0  2801              CMP      r0,#1
001bd2  d07d              BEQ      |L9.7376|
;;;3375           {
;;;3376               if(set_time.tm_hour== Run_Diagram_buff[i].End_Timep10[0])
001bd4  4855              LDR      r0,|L9.7468|
001bd6  6880              LDR      r0,[r0,#8]  ; set_time
001bd8  eb0401c4          ADD      r1,r4,r4,LSL #3
001bdc  eb011104          ADD      r1,r1,r4,LSL #4
001be0  4a4f              LDR      r2,|L9.7456|
001be2  eb020181          ADD      r1,r2,r1,LSL #2
001be6  f891105c          LDRB     r1,[r1,#0x5c]
001bea  4288              CMP      r0,r1
001bec  d170              BNE      |L9.7376|
;;;3377               {
;;;3378                   if(set_time.tm_min== Run_Diagram_buff[i].End_Timep10[1])
001bee  484f              LDR      r0,|L9.7468|
001bf0  6841              LDR      r1,[r0,#4]  ; set_time
001bf2  eb0400c4          ADD      r0,r4,r4,LSL #3
001bf6  eb001004          ADD      r0,r0,r4,LSL #4
001bfa  eb020080          ADD      r0,r2,r0,LSL #2
001bfe  f890005d          LDRB     r0,[r0,#0x5d]
001c02  4281              CMP      r1,r0
001c04  d164              BNE      |L9.7376|
;;;3379                   {
;;;3380                       App_printf("\r\nthe 10 end");
001c06  a04e              ADR      r0,|L9.7488|
001c08  f7fffffe          BL       App_printf
;;;3381                       Hard_control.usage_diagram_count--;
001c0c  484b              LDR      r0,|L9.7484|
001c0e  7800              LDRB     r0,[r0,#0]  ; Hard_control
001c10  1e40              SUBS     r0,r0,#1
001c12  494a              LDR      r1,|L9.7484|
001c14  7008              STRB     r0,[r1,#0]
;;;3382                       State_monitor[i].end[9]=1;
001c16  2101              MOVS     r1,#1
001c18  eb040084          ADD      r0,r4,r4,LSL #2
001c1c  4a42              LDR      r2,|L9.7464|
001c1e  eb020080          ADD      r0,r2,r0,LSL #2
001c22  74c1              STRB     r1,[r0,#0x13]
;;;3383                       State_monitor[i].start[9]=0;
001c24  2000              MOVS     r0,#0
001c26  eb040184          ADD      r1,r4,r4,LSL #2
001c2a  eb020181          ADD      r1,r2,r1,LSL #2
001c2e  7248              STRB     r0,[r1,#9]
;;;3384                       if(Trans_open_Copy.Type[0]==1)
001c30  483c              LDR      r0,|L9.7460|
001c32  1f00              SUBS     r0,r0,#4
001c34  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001c36  2801              CMP      r0,#1
001c38  d108              BNE      |L9.7244|
;;;3385                       {
;;;3386                           Trans_open_Copy.Type[0]=0;
001c3a  2000              MOVS     r0,#0
001c3c  4939              LDR      r1,|L9.7460|
001c3e  1f09              SUBS     r1,r1,#4
001c40  7008              STRB     r0,[r1,#0]
;;;3387                           //固频时，时间到，停止即可
;;;3388                           memset(Trans_open_Copy.Freq,0,12);//清零
001c42  4608              MOV      r0,r1
001c44  2100              MOVS     r1,#0
001c46  6041              STR      r1,[r0,#4]  ; Trans_open_Copy
001c48  6081              STR      r1,[r0,#8]  ; Trans_open_Copy
001c4a  60c1              STR      r1,[r0,#0xc]  ; Trans_open_Copy
                  |L9.7244|
;;;3389                       }
;;;3390                       if(Trans_open_Copy.Type[0]==2)
001c4c  4835              LDR      r0,|L9.7460|
001c4e  1f00              SUBS     r0,r0,#4
001c50  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001c52  2802              CMP      r0,#2
001c54  d11c              BNE      |L9.7312|
;;;3391                       {
;;;3392                           Trans_open_Copy.Type[0]=1;
001c56  2001              MOVS     r0,#1
001c58  4932              LDR      r1,|L9.7460|
001c5a  1f09              SUBS     r1,r1,#4
001c5c  7008              STRB     r0,[r1,#0]
;;;3393                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq10,4)==0)   //踢出第一个
001c5e  eb0400c4          ADD      r0,r4,r4,LSL #3
001c62  eb001004          ADD      r0,r0,r4,LSL #4
001c66  4a2e              LDR      r2,|L9.7456|
001c68  eb020080          ADD      r0,r2,r0,LSL #2
001c6c  f100015f          ADD      r1,r0,#0x5f
001c70  2204              MOVS     r2,#4
001c72  482c              LDR      r0,|L9.7460|
001c74  f7fffffe          BL       memcmp
001c78  b950              CBNZ     r0,|L9.7312|
;;;3394                           {
;;;3395                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
001c7a  482a              LDR      r0,|L9.7460|
001c7c  1f00              SUBS     r0,r0,#4
001c7e  7a00              LDRB     r0,[r0,#8]
001c80  4928              LDR      r1,|L9.7460|
001c82  1f09              SUBS     r1,r1,#4
001c84  7108              STRB     r0,[r1,#4]
;;;3396                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
001c86  4608              MOV      r0,r1
001c88  7a41              LDRB     r1,[r0,#9]
001c8a  7141              STRB     r1,[r0,#5]
;;;3397                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
001c8c  7a81              LDRB     r1,[r0,#0xa]
001c8e  7181              STRB     r1,[r0,#6]
                  |L9.7312|
;;;3398                               //最后1byte都为0，所以不处理
;;;3399                           }
;;;3400                           //如果是踢出第二个，不需要做处理了
;;;3401                       }
;;;3402                       if(Trans_open_Copy.Type[0]==3)
001c90  4824              LDR      r0,|L9.7460|
001c92  1f00              SUBS     r0,r0,#4
001c94  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
001c96  2803              CMP      r0,#3
001c98  d13c              BNE      |L9.7444|
;;;3403                       {
;;;3404                           Trans_open_Copy.Type[0]=2;
001c9a  2002              MOVS     r0,#2
001c9c  4921              LDR      r1,|L9.7460|
001c9e  1f09              SUBS     r1,r1,#4
001ca0  7008              STRB     r0,[r1,#0]
;;;3405                           if(memcmp(Trans_open_Copy.Freq,Run_Diagram_buff[i].Frq10,4)==0)   //踢出第一个
001ca2  eb0400c4          ADD      r0,r4,r4,LSL #3
001ca6  eb001004          ADD      r0,r0,r4,LSL #4
001caa  4a1d              LDR      r2,|L9.7456|
001cac  eb020080          ADD      r0,r2,r0,LSL #2
001cb0  f100015f          ADD      r1,r0,#0x5f
001cb4  2204              MOVS     r2,#4
001cb6  481b              LDR      r0,|L9.7460|
001cb8  f7fffffe          BL       memcmp
001cbc  b998              CBNZ     r0,|L9.7398|
;;;3406                           {
;;;3407                               Trans_open_Copy.Freq[0]=Trans_open_Copy.Freq[4];
001cbe  4819              LDR      r0,|L9.7460|
001cc0  1f00              SUBS     r0,r0,#4
001cc2  7a00              LDRB     r0,[r0,#8]
001cc4  4917              LDR      r1,|L9.7460|
001cc6  1f09              SUBS     r1,r1,#4
001cc8  7108              STRB     r0,[r1,#4]
;;;3408                               Trans_open_Copy.Freq[1]=Trans_open_Copy.Freq[5];
001cca  4608              MOV      r0,r1
001ccc  7a41              LDRB     r1,[r0,#9]
001cce  e000              B        |L9.7378|
                  |L9.7376|
001cd0  e020              B        |L9.7444|
                  |L9.7378|
001cd2  7141              STRB     r1,[r0,#5]
;;;3409                               Trans_open_Copy.Freq[2]=Trans_open_Copy.Freq[6];
001cd4  7a81              LDRB     r1,[r0,#0xa]
001cd6  7181              STRB     r1,[r0,#6]
;;;3410                               //最后1byte都为0，所以不处理
;;;3411                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
001cd8  7b01              LDRB     r1,[r0,#0xc]
001cda  7201              STRB     r1,[r0,#8]
;;;3412                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
001cdc  7b41              LDRB     r1,[r0,#0xd]
001cde  7241              STRB     r1,[r0,#9]
;;;3413                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
001ce0  7b81              LDRB     r1,[r0,#0xe]
001ce2  7281              STRB     r1,[r0,#0xa]
001ce4  e016              B        |L9.7444|
                  |L9.7398|
;;;3414                           }
;;;3415                           else if(memcmp((uint8_t *)(Trans_open_Copy.Freq)+4,Run_Diagram_buff[i].Frq10,4)==0)     //踢出第二个
001ce6  eb0400c4          ADD      r0,r4,r4,LSL #3
001cea  eb001004          ADD      r0,r0,r4,LSL #4
001cee  4a0c              LDR      r2,|L9.7456|
001cf0  eb020080          ADD      r0,r2,r0,LSL #2
001cf4  f100015f          ADD      r1,r0,#0x5f
001cf8  2204              MOVS     r2,#4
001cfa  480a              LDR      r0,|L9.7460|
001cfc  1d00              ADDS     r0,r0,#4
001cfe  f7fffffe          BL       memcmp
001d02  b938              CBNZ     r0,|L9.7444|
;;;3416                           {
;;;3417                               //最后1byte都为0，所以不处理
;;;3418                               Trans_open_Copy.Freq[4]=Trans_open_Copy.Freq[8];
001d04  4807              LDR      r0,|L9.7460|
001d06  1f00              SUBS     r0,r0,#4
001d08  7b01              LDRB     r1,[r0,#0xc]
001d0a  7201              STRB     r1,[r0,#8]
;;;3419                               Trans_open_Copy.Freq[5]=Trans_open_Copy.Freq[9];
001d0c  7b41              LDRB     r1,[r0,#0xd]
001d0e  7241              STRB     r1,[r0,#9]
;;;3420                               Trans_open_Copy.Freq[6]=Trans_open_Copy.Freq[10];
001d10  7b81              LDRB     r1,[r0,#0xe]
001d12  7281              STRB     r1,[r0,#0xa]
                  |L9.7444|
001d14  1c64              ADDS     r4,r4,#1              ;2511
                  |L9.7446|
001d16  42ac              CMP      r4,r5                 ;2511
001d18  f6fea977          BLT      |L9.10|
;;;3421                           }
;;;3422                           //如果是踢出第三个，不需要做处理了
;;;3423                       }
;;;3424                   }
;;;3425               }
;;;3426           }
;;;3427           //}
;;;3428   
;;;3429       }
;;;3430       return 0;
001d1c  2000              MOVS     r0,#0
;;;3431   }
001d1e  bd70              POP      {r4-r6,pc}
;;;3432   
                          ENDP

                  |L9.7456|
                          DCD      Run_Diagram_buff
                  |L9.7460|
                          DCD      Trans_open_Copy+0x4
                  |L9.7464|
                          DCD      State_monitor
                  |L9.7468|
                          DCD      set_time
                  |L9.7472|
001d30  0d0a7468          DCB      "\r\nthe 10 ",0
001d34  65203130
001d38  2000    
001d3a  00                DCB      0
001d3b  00                DCB      0
                  |L9.7484|
                          DCD      Hard_control
                  |L9.7488|
001d40  0d0a7468          DCB      "\r\nthe 10 end",0
001d44  65203130
001d48  20656e64
001d4c  00      
001d4d  00                DCB      0
001d4e  00                DCB      0
001d4f  00                DCB      0

                          AREA ||i.get_Standing_wave_ratio||, CODE, READONLY, ALIGN=2

                  get_Standing_wave_ratio PROC
;;;2440    */
;;;2441   float get_Standing_wave_ratio(float Forward_Power,float Reverse_Power)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2442   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;2443       float temp;
;;;2444       if(Forward_Power==0 || Forward_Power==Reverse_Power)
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_cfcmpeq
000010  d004              BEQ      |L10.28|
000012  4649              MOV      r1,r9
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       __aeabi_cfcmpeq
00001a  d102              BNE      |L10.34|
                  |L10.28|
;;;2445       {
;;;2446           return -1;
00001c  4810              LDR      r0,|L10.96|
                  |L10.30|
;;;2447       }
;;;2448       temp=(float)sqrt(Reverse_Power/Forward_Power);
;;;2449       return (1+temp)/(1-temp);
;;;2450   }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L10.34|
000022  4621              MOV      r1,r4                 ;2448
000024  4648              MOV      r0,r9                 ;2448
000026  f7fffffe          BL       __aeabi_fdiv
00002a  4683              MOV      r11,r0                ;2448
00002c  f7fffffe          BL       __aeabi_f2d
000030  4607              MOV      r7,r0                 ;2448
000032  f7fffffe          BL       sqrt
000036  4605              MOV      r5,r0                 ;2448
000038  f7fffffe          BL       __aeabi_d2f
00003c  4682              MOV      r10,r0                ;2448
00003e  4651              MOV      r1,r10                ;2449
000040  f04f507e          MOV      r0,#0x3f800000        ;2449
000044  f7fffffe          BL       __aeabi_fsub
000048  4605              MOV      r5,r0                 ;2449
00004a  4651              MOV      r1,r10                ;2449
00004c  f04f507e          MOV      r0,#0x3f800000        ;2449
000050  f7fffffe          BL       __aeabi_fadd
000054  4606              MOV      r6,r0                 ;2449
000056  4629              MOV      r1,r5                 ;2449
000058  f7fffffe          BL       __aeabi_fdiv
00005c  e7df              B        |L10.30|
;;;2451   /*
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      0xbf800000

                          AREA ||i.get_better_SWR||, CODE, READONLY, ALIGN=2

                  get_better_SWR PROC
;;;2453    */
;;;2454   static int get_better_SWR(float *array,int index)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;2455   {
000004  4682              MOV      r10,r0
000006  460c              MOV      r4,r1
;;;2456       //float *temp=array;
;;;2457       //float min=0;
;;;2458       int min_count=0;
000008  f04f0b00          MOV      r11,#0
;;;2459   #if defined(Eight_seg)
;;;2460       int SIZE =8;
;;;2461   #else
;;;2462       int SIZE = ceil((end-begain))+1;
00000c  483b              LDR      r0,|L11.252|
00000e  6801              LDR      r1,[r0,#0]  ; begain
000010  483b              LDR      r0,|L11.256|
000012  6800              LDR      r0,[r0,#0]  ; end
000014  f7fffffe          BL       __aeabi_fsub
000018  9001              STR      r0,[sp,#4]
00001a  f7fffffe          BL       __aeabi_f2d
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       ceil
000024  2200              MOVS     r2,#0
000026  4b37              LDR      r3,|L11.260|
000028  e9cd0102          STRD     r0,r1,[sp,#8]
00002c  f7fffffe          BL       __aeabi_dadd
000030  4605              MOV      r5,r0
000032  f7fffffe          BL       __aeabi_d2iz
000036  4681              MOV      r9,r0
;;;2463   #endif
;;;2464       App_printf("SIZE:%d\r\n",SIZE);
000038  4649              MOV      r1,r9
00003a  a033              ADR      r0,|L11.264|
00003c  f7fffffe          BL       App_printf
;;;2465       App_printf("swr:");
000040  a034              ADR      r0,|L11.276|
000042  f7fffffe          BL       App_printf
;;;2466       for(int i=0; i<SIZE; i++)
000046  2700              MOVS     r7,#0
000048  e00e              B        |L11.104|
                  |L11.74|
;;;2467       {
;;;2468           App_printf("%f ",array[i*10+index]);
00004a  eb070187          ADD      r1,r7,r7,LSL #2
00004e  eb040141          ADD      r1,r4,r1,LSL #1
000052  f85a0021          LDR      r0,[r10,r1,LSL #2]
000056  f7fffffe          BL       __aeabi_f2d
00005a  4605              MOV      r5,r0
00005c  462a              MOV      r2,r5
00005e  460b              MOV      r3,r1
000060  a02e              ADR      r0,|L11.284|
000062  f7fffffe          BL       App_printf
000066  1c7f              ADDS     r7,r7,#1              ;2466
                  |L11.104|
000068  454f              CMP      r7,r9                 ;2466
00006a  dbee              BLT      |L11.74|
;;;2469       }
;;;2470       App_printf("\r\n\r\n");
00006c  a02c              ADR      r0,|L11.288|
00006e  f7fffffe          BL       App_printf
;;;2471   
;;;2472       App_printf("Forward_Power:");
000072  a02d              ADR      r0,|L11.296|
000074  f7fffffe          BL       App_printf
;;;2473       for(int i=0; i<SIZE; i++)
000078  2700              MOVS     r7,#0
00007a  e036              B        |L11.234|
                  |L11.124|
;;;2474       {
;;;2475           App_printf("%f ",z[i*10+index]);
00007c  eb070187          ADD      r1,r7,r7,LSL #2
000080  eb040141          ADD      r1,r4,r1,LSL #1
000084  4a2c              LDR      r2,|L11.312|
000086  f8520021          LDR      r0,[r2,r1,LSL #2]
00008a  f7fffffe          BL       __aeabi_f2d
00008e  4605              MOV      r5,r0
000090  462a              MOV      r2,r5
000092  460b              MOV      r3,r1
000094  a021              ADR      r0,|L11.284|
000096  f7fffffe          BL       App_printf
;;;2476           if(z[i*10+index]<1100)
00009a  eb070187          ADD      r1,r7,r7,LSL #2
00009e  eb040141          ADD      r1,r4,r1,LSL #1
0000a2  4a25              LDR      r2,|L11.312|
0000a4  f8520021          LDR      r0,[r2,r1,LSL #2]
0000a8  4924              LDR      r1,|L11.316|
0000aa  f7fffffe          BL       __aeabi_cfcmple
0000ae  d208              BCS      |L11.194|
;;;2477           {
;;;2478               z[i*10+index]=0;
0000b0  2000              MOVS     r0,#0
0000b2  eb070187          ADD      r1,r7,r7,LSL #2
0000b6  eb040141          ADD      r1,r4,r1,LSL #1
0000ba  4a1f              LDR      r2,|L11.312|
0000bc  f8420021          STR      r0,[r2,r1,LSL #2]
0000c0  e012              B        |L11.232|
                  |L11.194|
;;;2479           }
;;;2480           else if(z[i*10+index]>=1550)
0000c2  eb070187          ADD      r1,r7,r7,LSL #2
0000c6  eb040141          ADD      r1,r4,r1,LSL #1
0000ca  4a1b              LDR      r2,|L11.312|
0000cc  f8520021          LDR      r0,[r2,r1,LSL #2]
0000d0  491b              LDR      r1,|L11.320|
0000d2  f7fffffe          BL       __aeabi_cfrcmple
0000d6  d807              BHI      |L11.232|
;;;2481           {
;;;2482               z[i*10+index]=1550;
0000d8  4819              LDR      r0,|L11.320|
0000da  eb070187          ADD      r1,r7,r7,LSL #2
0000de  eb040141          ADD      r1,r4,r1,LSL #1
0000e2  4a15              LDR      r2,|L11.312|
0000e4  f8420021          STR      r0,[r2,r1,LSL #2]
                  |L11.232|
0000e8  1c7f              ADDS     r7,r7,#1              ;2473
                  |L11.234|
0000ea  454f              CMP      r7,r9                 ;2473
0000ec  dbc6              BLT      |L11.124|
;;;2483           }
;;;2484   
;;;2485       }
;;;2486       App_printf("\r\n\r\n");
0000ee  a00c              ADR      r0,|L11.288|
0000f0  f7fffffe          BL       App_printf
;;;2487   
;;;2488   //App_printf("Reverse_Power:");
;;;2489   //	for(int i=0;i<SIZE;i++)
;;;2490   //	{
;;;2491   //		App_printf("%f ",f[i]);
;;;2492   //	}
;;;2493   //	App_printf("\r\n\r\n");
;;;2494   
;;;2495       return min_count;
0000f4  4658              MOV      r0,r11
;;;2496   }
0000f6  b004              ADD      sp,sp,#0x10
0000f8  e8bd9ff0          POP      {r4-r12,pc}
;;;2497   /*
                          ENDP

                  |L11.252|
                          DCD      begain
                  |L11.256|
                          DCD      end
                  |L11.260|
                          DCD      0x3ff00000
                  |L11.264|
000108  53495a45          DCB      "SIZE:%d\r\n",0
00010c  3a25640d
000110  0a00    
000112  00                DCB      0
000113  00                DCB      0
                  |L11.276|
000114  7377723a          DCB      "swr:",0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L11.284|
00011c  25662000          DCB      "%f ",0
                  |L11.288|
000120  0d0a0d0a          DCB      "\r\n\r\n",0
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L11.296|
000128  466f7277          DCB      "Forward_Power:",0
00012c  6172645f
000130  506f7765
000134  723a00  
000137  00                DCB      0
                  |L11.312|
                          DCD      z
                  |L11.316|
                          DCD      0x44898000
                  |L11.320|
                          DCD      0x44c1c000

                          AREA ||i.get_current_alm||, CODE, READONLY, ALIGN=2

                  get_current_alm PROC
;;;2355   /*返回1表示当前有报警消息*/
;;;2356   int get_current_alm(void)
000000  4805              LDR      r0,|L12.24|
;;;2357   {
;;;2358       if(Sys_State.alarm==1 || Sys_State.no_respond==1)
000002  7bc0              LDRB     r0,[r0,#0xf]  ; Sys_State
000004  2801              CMP      r0,#1
000006  d003              BEQ      |L12.16|
000008  4803              LDR      r0,|L12.24|
00000a  7c00              LDRB     r0,[r0,#0x10]  ; Sys_State
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
                  |L12.16|
;;;2359       {
;;;2360           /*感觉上面的if判断激励器相关的应该不使用，而只使用AD采集的*/
;;;2361           /*感觉上面的if判断激励器相关的应该不使用，而只使用AD采集的*/
;;;2362           /*感觉上面的if判断激励器相关的应该不使用，而只使用AD采集的*/
;;;2363           return 1;
000010  2001              MOVS     r0,#1
                  |L12.18|
;;;2364       }
;;;2365       return 0;
;;;2366   }
000012  4770              BX       lr
                  |L12.20|
000014  2000              MOVS     r0,#0                 ;2365
000016  e7fc              B        |L12.18|
;;;2367   
                          ENDP

                  |L12.24|
                          DCD      Sys_State

                          AREA ||i.get_history_alm||, CODE, READONLY, ALIGN=2

                  get_history_alm PROC
;;;2330   /*返回1表示有历史报警消息*/
;;;2331   int get_history_alm(void)
000000  4a08              LDR      r2,|L13.36|
;;;2332   {
;;;2333       volatile uint8_t* check=&Sys_State.SWR_alarm;
;;;2334       for(int i=0; i<9; i++)
000002  2100              MOVS     r1,#0
000004  e009              B        |L13.26|
                  |L13.6|
;;;2335       {
;;;2336           if(*check++==1)
000006  f8123b01          LDRB     r3,[r2],#1
00000a  2b01              CMP      r3,#1
00000c  d104              BNE      |L13.24|
;;;2337           {
;;;2338               Sys_State.History_alarm=1;//清除只能由PC清除
00000e  2001              MOVS     r0,#1
000010  4b04              LDR      r3,|L13.36|
000012  3b0d              SUBS     r3,r3,#0xd
000014  7218              STRB     r0,[r3,#8]
                  |L13.22|
;;;2339               return 1;
;;;2340           }
;;;2341   
;;;2342       }
;;;2343       return 0;
;;;2344   //	if(Sys_State.alarm==1 || Sys_State.no_respond==1)
;;;2345   //	{
;;;2346   //		//还需要加上ADC采集的数据进行判断，这里暂时先不写
;;;2347   //		//还需要加上ADC采集的数据进行判断，这里暂时先不写
;;;2348   //		//还需要加上ADC采集的数据进行判断，这里暂时先不写
;;;2349   //		Sys_State.History_alarm=1;//清除只能由PC清除
;;;2350   //		return 1;
;;;2351   //	}
;;;2352   //	return 0;
;;;2353   }
000016  4770              BX       lr
                  |L13.24|
000018  1c49              ADDS     r1,r1,#1              ;2334
                  |L13.26|
00001a  2909              CMP      r1,#9                 ;2334
00001c  dbf3              BLT      |L13.6|
00001e  2000              MOVS     r0,#0                 ;2343
000020  e7f9              B        |L13.22|
;;;2354   
                          ENDP

000022  0000              DCW      0x0000
                  |L13.36|
                          DCD      Sys_State+0xd

                          AREA ||i.juge_isOpen||, CODE, READONLY, ALIGN=2

                  juge_isOpen PROC
;;;3433   /*判断是否需要开机*/
;;;3434   void juge_isOpen(uint8_t Save_count)
000000  b570              PUSH     {r4-r6,lr}
;;;3435   {
000002  4602              MOV      r2,r0
;;;3436       uint32_t min;//分钟
;;;3437       min=set_time.tm_hour*60+set_time.tm_min;
000004  4896              LDR      r0,|L14.608|
000006  6840              LDR      r0,[r0,#4]  ; set_time
000008  4b95              LDR      r3,|L14.608|
00000a  689b              LDR      r3,[r3,#8]  ; set_time
00000c  ebc31303          RSB      r3,r3,r3,LSL #4
000010  eb000183          ADD      r1,r0,r3,LSL #2
;;;3438       for(int i=0; i<Save_count; i++)
000014  2000              MOVS     r0,#0
000016  e11d              B        |L14.596|
                  |L14.24|
;;;3439       {
;;;3440           for(int j=0; j<10; j++)
000018  2300              MOVS     r3,#0
00001a  e117              B        |L14.588|
                  |L14.28|
;;;3441           {
;;;3442               if(Sys_State.Sys_open==1)
00001c  4c91              LDR      r4,|L14.612|
00001e  78a4              LDRB     r4,[r4,#2]  ; Sys_State
000020  2c01              CMP      r4,#1
000022  d103              BNE      |L14.44|
;;;3443               {
;;;3444                   Monitor.need_open=0;
000024  2400              MOVS     r4,#0
000026  4d90              LDR      r5,|L14.616|
000028  712c              STRB     r4,[r5,#4]
                  |L14.42|
;;;3445                   return ;
;;;3446               }
;;;3447               if(Run_Diagram_buff[i].Start_Time1[0]*60+Run_Diagram_buff[i].Start_Time1[1]-min<=10)
;;;3448               {
;;;3449                   /*需要开机*/
;;;3450                   Monitor.need_open=1;
;;;3451               }
;;;3452               if(Run_Diagram_buff[i].Start_Time2[0]*60+Run_Diagram_buff[i].Start_Time2[1]-min<=10)
;;;3453               {
;;;3454                   /*需要开机*/
;;;3455                   Monitor.need_open=1;
;;;3456               }
;;;3457   
;;;3458               if(Run_Diagram_buff[i].Start_Time3[0]*60+Run_Diagram_buff[i].Start_Time3[1]-min<=10)
;;;3459               {
;;;3460                   /*需要开机*/
;;;3461                   Monitor.need_open=1;
;;;3462               }
;;;3463               if(Run_Diagram_buff[i].Start_Time4[0]*60+Run_Diagram_buff[i].Start_Time4[1]-min<=10)
;;;3464               {
;;;3465                   /*需要开机*/
;;;3466                   Monitor.need_open=1;
;;;3467               }
;;;3468               if(Run_Diagram_buff[i].Start_Time5[0]*60+Run_Diagram_buff[i].Start_Time5[1]-min<=10)
;;;3469               {
;;;3470                   /*需要开机*/
;;;3471                   Monitor.need_open=1;
;;;3472               }
;;;3473               if(Run_Diagram_buff[i].Start_Time6[0]*60+Run_Diagram_buff[i].Start_Time6[1]-min<=10)
;;;3474               {
;;;3475                   /*需要开机*/
;;;3476                   Monitor.need_open=1;
;;;3477               }
;;;3478               if(Run_Diagram_buff[i].Start_Time7[0]*60+Run_Diagram_buff[i].Start_Time7[1]-min<=10)
;;;3479               {
;;;3480                   /*需要开机*/
;;;3481                   Monitor.need_open=1;
;;;3482               }
;;;3483               if(Run_Diagram_buff[i].Start_Time8[0]*60+Run_Diagram_buff[i].Start_Time8[1]-min<=10)
;;;3484               {
;;;3485                   /*需要开机*/
;;;3486                   Monitor.need_open=1;
;;;3487               }
;;;3488               if(Run_Diagram_buff[i].Start_Time9[0]*60+Run_Diagram_buff[i].Start_Time9[1]-min<=10)
;;;3489               {
;;;3490                   /*需要开机*/
;;;3491                   Monitor.need_open=1;
;;;3492               }
;;;3493               if(Run_Diagram_buff[i].Start_Time10[0]*60+Run_Diagram_buff[i].Start_Time10[1]-min<=10)
;;;3494               {
;;;3495                   /*需要开机*/
;;;3496                   Monitor.need_open=1;
;;;3497               }
;;;3498   
;;;3499           }
;;;3500       }
;;;3501   }
00002a  bd70              POP      {r4-r6,pc}
                  |L14.44|
00002c  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3447
000030  eb041400          ADD      r4,r4,r0,LSL #4       ;3447
000034  4d8d              LDR      r5,|L14.620|
000036  eb050484          ADD      r4,r5,r4,LSL #2       ;3447
00003a  7864              LDRB     r4,[r4,#1]            ;3447
00003c  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3447
000040  eb051500          ADD      r5,r5,r0,LSL #4       ;3447
000044  4e89              LDR      r6,|L14.620|
000046  f8165025          LDRB     r5,[r6,r5,LSL #2]     ;3447
00004a  ebc51505          RSB      r5,r5,r5,LSL #4       ;3447
00004e  eb040485          ADD      r4,r4,r5,LSL #2       ;3447
000052  1a64              SUBS     r4,r4,r1              ;3447
000054  2c0a              CMP      r4,#0xa               ;3447
000056  d802              BHI      |L14.94|
000058  2401              MOVS     r4,#1                 ;3450
00005a  4d83              LDR      r5,|L14.616|
00005c  712c              STRB     r4,[r5,#4]            ;3450
                  |L14.94|
00005e  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3452
000062  eb041400          ADD      r4,r4,r0,LSL #4       ;3452
000066  4d81              LDR      r5,|L14.620|
000068  eb050484          ADD      r4,r5,r4,LSL #2       ;3452
00006c  7ae4              LDRB     r4,[r4,#0xb]          ;3452
00006e  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3452
000072  eb051500          ADD      r5,r5,r0,LSL #4       ;3452
000076  4e7d              LDR      r6,|L14.620|
000078  eb060585          ADD      r5,r6,r5,LSL #2       ;3452
00007c  7aad              LDRB     r5,[r5,#0xa]          ;3452
00007e  ebc51505          RSB      r5,r5,r5,LSL #4       ;3452
000082  eb040485          ADD      r4,r4,r5,LSL #2       ;3452
000086  1a64              SUBS     r4,r4,r1              ;3452
000088  2c0a              CMP      r4,#0xa               ;3452
00008a  d802              BHI      |L14.146|
00008c  2401              MOVS     r4,#1                 ;3455
00008e  4d76              LDR      r5,|L14.616|
000090  712c              STRB     r4,[r5,#4]            ;3455
                  |L14.146|
000092  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3458
000096  eb041400          ADD      r4,r4,r0,LSL #4       ;3458
00009a  4d74              LDR      r5,|L14.620|
00009c  eb050484          ADD      r4,r5,r4,LSL #2       ;3458
0000a0  7d64              LDRB     r4,[r4,#0x15]         ;3458
0000a2  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3458
0000a6  eb051500          ADD      r5,r5,r0,LSL #4       ;3458
0000aa  4e70              LDR      r6,|L14.620|
0000ac  eb060585          ADD      r5,r6,r5,LSL #2       ;3458
0000b0  7d2d              LDRB     r5,[r5,#0x14]         ;3458
0000b2  ebc51505          RSB      r5,r5,r5,LSL #4       ;3458
0000b6  eb040485          ADD      r4,r4,r5,LSL #2       ;3458
0000ba  1a64              SUBS     r4,r4,r1              ;3458
0000bc  2c0a              CMP      r4,#0xa               ;3458
0000be  d802              BHI      |L14.198|
0000c0  2401              MOVS     r4,#1                 ;3461
0000c2  4d69              LDR      r5,|L14.616|
0000c4  712c              STRB     r4,[r5,#4]            ;3461
                  |L14.198|
0000c6  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3463
0000ca  eb041400          ADD      r4,r4,r0,LSL #4       ;3463
0000ce  4d67              LDR      r5,|L14.620|
0000d0  eb050484          ADD      r4,r5,r4,LSL #2       ;3463
0000d4  7fe4              LDRB     r4,[r4,#0x1f]         ;3463
0000d6  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3463
0000da  eb051500          ADD      r5,r5,r0,LSL #4       ;3463
0000de  4e63              LDR      r6,|L14.620|
0000e0  eb060585          ADD      r5,r6,r5,LSL #2       ;3463
0000e4  7fad              LDRB     r5,[r5,#0x1e]         ;3463
0000e6  ebc51505          RSB      r5,r5,r5,LSL #4       ;3463
0000ea  eb040485          ADD      r4,r4,r5,LSL #2       ;3463
0000ee  1a64              SUBS     r4,r4,r1              ;3463
0000f0  2c0a              CMP      r4,#0xa               ;3463
0000f2  d802              BHI      |L14.250|
0000f4  2401              MOVS     r4,#1                 ;3466
0000f6  4d5c              LDR      r5,|L14.616|
0000f8  712c              STRB     r4,[r5,#4]            ;3466
                  |L14.250|
0000fa  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3468
0000fe  eb041400          ADD      r4,r4,r0,LSL #4       ;3468
000102  4d5a              LDR      r5,|L14.620|
000104  eb050484          ADD      r4,r5,r4,LSL #2       ;3468
000108  f8944029          LDRB     r4,[r4,#0x29]         ;3468
00010c  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3468
000110  eb051500          ADD      r5,r5,r0,LSL #4       ;3468
000114  4e55              LDR      r6,|L14.620|
000116  eb060585          ADD      r5,r6,r5,LSL #2       ;3468
00011a  f8955028          LDRB     r5,[r5,#0x28]         ;3468
00011e  ebc51505          RSB      r5,r5,r5,LSL #4       ;3468
000122  eb040485          ADD      r4,r4,r5,LSL #2       ;3468
000126  1a64              SUBS     r4,r4,r1              ;3468
000128  2c0a              CMP      r4,#0xa               ;3468
00012a  d802              BHI      |L14.306|
00012c  2401              MOVS     r4,#1                 ;3471
00012e  4d4e              LDR      r5,|L14.616|
000130  712c              STRB     r4,[r5,#4]            ;3471
                  |L14.306|
000132  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3473
000136  eb041400          ADD      r4,r4,r0,LSL #4       ;3473
00013a  4d4c              LDR      r5,|L14.620|
00013c  eb050484          ADD      r4,r5,r4,LSL #2       ;3473
000140  f8944033          LDRB     r4,[r4,#0x33]         ;3473
000144  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3473
000148  eb051500          ADD      r5,r5,r0,LSL #4       ;3473
00014c  4e47              LDR      r6,|L14.620|
00014e  eb060585          ADD      r5,r6,r5,LSL #2       ;3473
000152  f8955032          LDRB     r5,[r5,#0x32]         ;3473
000156  ebc51505          RSB      r5,r5,r5,LSL #4       ;3473
00015a  eb040485          ADD      r4,r4,r5,LSL #2       ;3473
00015e  1a64              SUBS     r4,r4,r1              ;3473
000160  2c0a              CMP      r4,#0xa               ;3473
000162  d802              BHI      |L14.362|
000164  2401              MOVS     r4,#1                 ;3476
000166  4d40              LDR      r5,|L14.616|
000168  712c              STRB     r4,[r5,#4]            ;3476
                  |L14.362|
00016a  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3478
00016e  eb041400          ADD      r4,r4,r0,LSL #4       ;3478
000172  4d3e              LDR      r5,|L14.620|
000174  eb050484          ADD      r4,r5,r4,LSL #2       ;3478
000178  f894403d          LDRB     r4,[r4,#0x3d]         ;3478
00017c  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3478
000180  eb051500          ADD      r5,r5,r0,LSL #4       ;3478
000184  4e39              LDR      r6,|L14.620|
000186  eb060585          ADD      r5,r6,r5,LSL #2       ;3478
00018a  f895503c          LDRB     r5,[r5,#0x3c]         ;3478
00018e  ebc51505          RSB      r5,r5,r5,LSL #4       ;3478
000192  eb040485          ADD      r4,r4,r5,LSL #2       ;3478
000196  1a64              SUBS     r4,r4,r1              ;3478
000198  2c0a              CMP      r4,#0xa               ;3478
00019a  d802              BHI      |L14.418|
00019c  2401              MOVS     r4,#1                 ;3481
00019e  4d32              LDR      r5,|L14.616|
0001a0  712c              STRB     r4,[r5,#4]            ;3481
                  |L14.418|
0001a2  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3483
0001a6  eb041400          ADD      r4,r4,r0,LSL #4       ;3483
0001aa  4d30              LDR      r5,|L14.620|
0001ac  eb050484          ADD      r4,r5,r4,LSL #2       ;3483
0001b0  f8944047          LDRB     r4,[r4,#0x47]         ;3483
0001b4  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3483
0001b8  eb051500          ADD      r5,r5,r0,LSL #4       ;3483
0001bc  4e2b              LDR      r6,|L14.620|
0001be  eb060585          ADD      r5,r6,r5,LSL #2       ;3483
0001c2  f8955046          LDRB     r5,[r5,#0x46]         ;3483
0001c6  ebc51505          RSB      r5,r5,r5,LSL #4       ;3483
0001ca  eb040485          ADD      r4,r4,r5,LSL #2       ;3483
0001ce  1a64              SUBS     r4,r4,r1              ;3483
0001d0  2c0a              CMP      r4,#0xa               ;3483
0001d2  d802              BHI      |L14.474|
0001d4  2401              MOVS     r4,#1                 ;3486
0001d6  4d24              LDR      r5,|L14.616|
0001d8  712c              STRB     r4,[r5,#4]            ;3486
                  |L14.474|
0001da  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3488
0001de  eb041400          ADD      r4,r4,r0,LSL #4       ;3488
0001e2  4d22              LDR      r5,|L14.620|
0001e4  eb050484          ADD      r4,r5,r4,LSL #2       ;3488
0001e8  f8944051          LDRB     r4,[r4,#0x51]         ;3488
0001ec  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3488
0001f0  eb051500          ADD      r5,r5,r0,LSL #4       ;3488
0001f4  4e1d              LDR      r6,|L14.620|
0001f6  eb060585          ADD      r5,r6,r5,LSL #2       ;3488
0001fa  f8955050          LDRB     r5,[r5,#0x50]         ;3488
0001fe  ebc51505          RSB      r5,r5,r5,LSL #4       ;3488
000202  eb040485          ADD      r4,r4,r5,LSL #2       ;3488
000206  1a64              SUBS     r4,r4,r1              ;3488
000208  2c0a              CMP      r4,#0xa               ;3488
00020a  d802              BHI      |L14.530|
00020c  2401              MOVS     r4,#1                 ;3491
00020e  4d16              LDR      r5,|L14.616|
000210  712c              STRB     r4,[r5,#4]            ;3491
                  |L14.530|
000212  eb0004c0          ADD      r4,r0,r0,LSL #3       ;3493
000216  eb041400          ADD      r4,r4,r0,LSL #4       ;3493
00021a  4d14              LDR      r5,|L14.620|
00021c  eb050484          ADD      r4,r5,r4,LSL #2       ;3493
000220  f894405b          LDRB     r4,[r4,#0x5b]         ;3493
000224  eb0005c0          ADD      r5,r0,r0,LSL #3       ;3493
000228  eb051500          ADD      r5,r5,r0,LSL #4       ;3493
00022c  4e0f              LDR      r6,|L14.620|
00022e  eb060585          ADD      r5,r6,r5,LSL #2       ;3493
000232  f895505a          LDRB     r5,[r5,#0x5a]         ;3493
000236  ebc51505          RSB      r5,r5,r5,LSL #4       ;3493
00023a  eb040485          ADD      r4,r4,r5,LSL #2       ;3493
00023e  1a64              SUBS     r4,r4,r1              ;3493
000240  2c0a              CMP      r4,#0xa               ;3493
000242  d802              BHI      |L14.586|
000244  2401              MOVS     r4,#1                 ;3496
000246  4d08              LDR      r5,|L14.616|
000248  712c              STRB     r4,[r5,#4]            ;3496
                  |L14.586|
00024a  1c5b              ADDS     r3,r3,#1              ;3440
                  |L14.588|
00024c  2b0a              CMP      r3,#0xa               ;3440
00024e  f6ffaee5          BLT      |L14.28|
000252  1c40              ADDS     r0,r0,#1              ;3438
                  |L14.596|
000254  4290              CMP      r0,r2                 ;3438
000256  f6ffaedf          BLT      |L14.24|
00025a  bf00              NOP      
00025c  e6e5              B        |L14.42|
;;;3502   
                          ENDP

00025e  0000              DCW      0x0000
                  |L14.608|
                          DCD      set_time
                  |L14.612|
                          DCD      Sys_State
                  |L14.616|
                          DCD      Monitor
                  |L14.620|
                          DCD      Run_Diagram_buff

                          AREA ||i.run_command||, CODE, READONLY, ALIGN=2

                  run_command PROC
;;;2191    */
;;;2192   static int run_command(TickType_t xTicksToWait)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2193   {
000004  4607              MOV      r7,r0
;;;2194       int ret=0;
000006  2400              MOVS     r4,#0
;;;2195   	
;;;2196       //循环三次无响应，就报警？？？
;;;2197       for(int i=0; i<2; i++)
000008  2500              MOVS     r5,#0
00000a  e09d              B        |L15.328|
                  |L15.12|
;;;2198       {
;;;2199   #if	NEW_PROTOCOL_EN
;;;2200   		switch( MT2000_Tx.cmd )
00000c  4869              LDR      r0,|L15.436|
00000e  7800              LDRB     r0,[r0,#0]  ; MT2000_Tx
000010  2844              CMP      r0,#0x44
000012  d04a              BEQ      |L15.170|
000014  dc0c              BGT      |L15.48|
000016  282b              CMP      r0,#0x2b
000018  d029              BEQ      |L15.110|
00001a  dc04              BGT      |L15.38|
00001c  280d              CMP      r0,#0xd
00001e  d014              BEQ      |L15.74|
000020  2818              CMP      r0,#0x18
000022  d144              BNE      |L15.174|
000024  e017              B        |L15.86|
                  |L15.38|
000026  282d              CMP      r0,#0x2d
000028  d027              BEQ      |L15.122|
00002a  2843              CMP      r0,#0x43
00002c  d13f              BNE      |L15.174|
00002e  e018              B        |L15.98|
                  |L15.48|
000030  2854              CMP      r0,#0x54
000032  d034              BEQ      |L15.158|
000034  dc04              BGT      |L15.64|
000036  284d              CMP      r0,#0x4d
000038  d033              BEQ      |L15.162|
00003a  2850              CMP      r0,#0x50
00003c  d137              BNE      |L15.174|
00003e  e032              B        |L15.166|
                  |L15.64|
000040  2874              CMP      r0,#0x74
000042  d026              BEQ      |L15.146|
000044  28ce              CMP      r0,#0xce
000046  d132              BNE      |L15.174|
000048  e01d              B        |L15.134|
                  |L15.74|
;;;2201   		{
;;;2202   			case EMISSION:		//发射
;;;2203   				MT2000_Cmd_Emit();
00004a  f7fffffe          BL       MT2000_Cmd_Emit
;;;2204   				ret = MT2000_Wait_Ack();
00004e  f7fffffe          BL       MT2000_Wait_Ack
000052  4604              MOV      r4,r0
;;;2205   				break;
000054  e02b              B        |L15.174|
                  |L15.86|
;;;2206   			
;;;2207   			case STOP:			//停止
;;;2208   				MT2000_Cmd_Stop();
000056  f7fffffe          BL       MT2000_Cmd_Stop
;;;2209   				ret = MT2000_Wait_Ack();
00005a  f7fffffe          BL       MT2000_Wait_Ack
00005e  4604              MOV      r4,r0
;;;2210   				break;
000060  e025              B        |L15.174|
                  |L15.98|
;;;2211   			
;;;2212   			case CHANNEL:		//调用信道
;;;2213   				MT2000_Cmd_Channel();
000062  f7fffffe          BL       MT2000_Cmd_Channel
;;;2214   				ret = MT2000_Wait_Ack();
000066  f7fffffe          BL       MT2000_Wait_Ack
00006a  4604              MOV      r4,r0
;;;2215   				break;
00006c  e01f              B        |L15.174|
                  |L15.110|
;;;2216   			
;;;2217   			case POWER_ADD:		//功率增加(微调)
;;;2218   				MT2000_Cmd_Power_Add();
00006e  f7fffffe          BL       MT2000_Cmd_Power_Add
;;;2219   				ret = MT2000_Wait_Ack();
000072  f7fffffe          BL       MT2000_Wait_Ack
000076  4604              MOV      r4,r0
;;;2220   				break;
000078  e019              B        |L15.174|
                  |L15.122|
;;;2221   			
;;;2222   			case POWER_SUB:		//功率减小(微调)
;;;2223   				MT2000_Cmd_Power_Sub();
00007a  f7fffffe          BL       MT2000_Cmd_Power_Sub
;;;2224   				ret = MT2000_Wait_Ack();
00007e  f7fffffe          BL       MT2000_Wait_Ack
000082  4604              MOV      r4,r0
;;;2225   				break;
000084  e013              B        |L15.174|
                  |L15.134|
;;;2226   			
;;;2227   			case INQUIRE:		//查询
;;;2228   				MT2000_Cmd_Inquire();
000086  f7fffffe          BL       MT2000_Cmd_Inquire
;;;2229   				ret = MT2000_Wait_Ack();
00008a  f7fffffe          BL       MT2000_Wait_Ack
00008e  4604              MOV      r4,r0
;;;2230   				break;
000090  e00d              B        |L15.174|
                  |L15.146|
;;;2231   			
;;;2232   			case TUNING:		//调谐
;;;2233   				MT2000_Cmd_Tune();
000092  f7fffffe          BL       MT2000_Cmd_Tune
;;;2234   				ret = MT2000_Wait_Ack();
000096  f7fffffe          BL       MT2000_Wait_Ack
00009a  4604              MOV      r4,r0
;;;2235   				break;
00009c  e007              B        |L15.174|
                  |L15.158|
;;;2236   			
;;;2237   			/* 以下几个，不处理		没有相应命令，只在设置信道的时候进行设置 */
;;;2238   			case FREQUENCY:		//频率-------------------------------------------
;;;2239   				ret = 1;
00009e  2401              MOVS     r4,#1
;;;2240   				break;
0000a0  e005              B        |L15.174|
                  |L15.162|
;;;2241   			
;;;2242   			case SPECIES:		//工作种类---------------------------------------
;;;2243   				ret = 1;
0000a2  2401              MOVS     r4,#1
;;;2244   				break;
0000a4  e003              B        |L15.174|
                  |L15.166|
;;;2245   			
;;;2246   			case POWER_LEVEL:	//功率等级---------------------------------------
;;;2247   				ret = 1;
0000a6  2401              MOVS     r4,#1
;;;2248   				break;
0000a8  e001              B        |L15.174|
                  |L15.170|
;;;2249   			
;;;2250   			case MODE:			//工作模式---------------------------------------
;;;2251   				ret = 1;
0000aa  2401              MOVS     r4,#1
;;;2252   				break;
0000ac  bf00              NOP      
                  |L15.174|
0000ae  bf00              NOP                            ;2205
;;;2253   		}
;;;2254   #else
;;;2255   		ret=MT2000_sendCommand(Emission_Tx,sizeof(EmissionCmd),xTicksToWait);
;;;2256   #endif
;;;2257           
;;;2258           if(ret==1)
0000b0  2c01              CMP      r4,#1
0000b2  d10b              BNE      |L15.204|
;;;2259           {
;;;2260               //正常时需要取消历史的报警标志
;;;2261               Sys_State.no_respond=0;
0000b4  2000              MOVS     r0,#0
0000b6  4940              LDR      r1,|L15.440|
0000b8  7408              STRB     r0,[r1,#0x10]
;;;2262               Alarm_historyBack.alarm_history[0] &=~(1<<7);
0000ba  4840              LDR      r0,|L15.444|
0000bc  7840              LDRB     r0,[r0,#1]  ; Alarm_historyBack
0000be  f0200080          BIC      r0,r0,#0x80
0000c2  493e              LDR      r1,|L15.444|
0000c4  7048              STRB     r0,[r1,#1]
;;;2263               //Sys_State.alarm=0;上面的无响应可以取消。但是激励器报警状态必须是PC取消
;;;2264               /*这个应该不打印*/
;;;2265               //App_printf("//查询 goto finish;\r\n");
;;;2266               return ret;
0000c6  4620              MOV      r0,r4
                  |L15.200|
;;;2267           }
;;;2268           if(ret==-2)
;;;2269           {
;;;2270               if(Sys_State.alarm==0)
;;;2271               {
;;;2272                   Sys_State.alarm=1;
;;;2273                   App_printf("the first alarm,needing save RTC time!!!\r\n");
;;;2274                   Time_Display( RTC_GetCounter(),&set_time);
;;;2275                   Alarm_historyBack.Exciter_alarm[0]=set_time.tm_year-2000;
;;;2276                   Alarm_historyBack.Exciter_alarm[1]=set_time.tm_mon;
;;;2277                   Alarm_historyBack.Exciter_alarm[2]=set_time.tm_mday;
;;;2278                   Alarm_historyBack.Exciter_alarm[3]=set_time.tm_hour;
;;;2279                   Alarm_historyBack.Exciter_alarm[4]=set_time.tm_min;
;;;2280                   Alarm_historyBack.Exciter_alarm[5]=set_time.tm_sec;
;;;2281                   /*这里需要获取相对应的RTC时间，然后赋值给0602包里面对应的字段*/
;;;2282                   /*这里需要获取相对应的RTC时间，然后赋值给0602包里面对应的字段*/
;;;2283                   /*这里需要获取相对应的RTC时间，然后赋值给0602包里面对应的字段*/
;;;2284               }
;;;2285               App_printf("alarm alarm alarm!!!\r\n");
;;;2286               return ret;
;;;2287           }
;;;2288           if(ret==-1 || ret==0)
;;;2289           {
;;;2290               if(i==2)
;;;2291               {
;;;2292   //					Sys_State.no_respond=1;
;;;2293   //					App_printf("Sys_State.no_respond =%d\r\n",Sys_State.no_respond);
;;;2294   //					return ret;
;;;2295                   break;
;;;2296               }
;;;2297           }
;;;2298       }
;;;2299   	
;;;2300       if(Sys_State.no_respond==0)
;;;2301       {
;;;2302           Sys_State.no_respond=1;
;;;2303           App_printf("the first no_respond,needing save RTC time!!!\r\n");
;;;2304           Time_Display( RTC_GetCounter(),&set_time);
;;;2305           Alarm_historyBack.No_response_time[0]=set_time.tm_year-2000;
;;;2306           Alarm_historyBack.No_response_time[1]=set_time.tm_mon;
;;;2307           Alarm_historyBack.No_response_time[2]=set_time.tm_mday;
;;;2308           Alarm_historyBack.No_response_time[3]=set_time.tm_hour;
;;;2309           Alarm_historyBack.No_response_time[4]=set_time.tm_min;
;;;2310           Alarm_historyBack.No_response_time[5]=set_time.tm_sec;
;;;2311       }
;;;2312   //	Sys_State.no_respond=1;
;;;2313   //	App_printf("Sys_State.no_respond =%d\r\n",Sys_State.no_respond);
;;;2314       return ret;		//为了不使用这个函数屏蔽了的模式，以前那样最后return 0是没有意义的
;;;2315   //	return 0;	//正常情况下，不可能执行到这里
;;;2316   }
0000c8  e8bd81f0          POP      {r4-r8,pc}
                  |L15.204|
0000cc  1ca0              ADDS     r0,r4,#2              ;2268
0000ce  2800              CMP      r0,#0                 ;2268
0000d0  d133              BNE      |L15.314|
0000d2  4839              LDR      r0,|L15.440|
0000d4  7bc0              LDRB     r0,[r0,#0xf]          ;2270  ; Sys_State
0000d6  bb58              CBNZ     r0,|L15.304|
0000d8  2001              MOVS     r0,#1                 ;2272
0000da  4937              LDR      r1,|L15.440|
0000dc  73c8              STRB     r0,[r1,#0xf]          ;2272
0000de  a038              ADR      r0,|L15.448|
0000e0  f7fffffe          BL       App_printf
0000e4  f7fffffe          BL       RTC_GetCounter
0000e8  4606              MOV      r6,r0                 ;2274
0000ea  4940              LDR      r1,|L15.492|
0000ec  f7fffffe          BL       Time_Display
0000f0  483e              LDR      r0,|L15.492|
0000f2  7d00              LDRB     r0,[r0,#0x14]         ;2275  ; set_time
0000f4  f5a060fa          SUB      r0,r0,#0x7d0          ;2275
0000f8  4930              LDR      r1,|L15.444|
0000fa  f8810037          STRB     r0,[r1,#0x37]         ;2275
0000fe  483b              LDR      r0,|L15.492|
000100  7c01              LDRB     r1,[r0,#0x10]         ;2276  ; set_time
000102  482e              LDR      r0,|L15.444|
000104  f8801038          STRB     r1,[r0,#0x38]         ;2276
000108  4838              LDR      r0,|L15.492|
00010a  7b01              LDRB     r1,[r0,#0xc]          ;2277  ; set_time
00010c  482b              LDR      r0,|L15.444|
00010e  f8801039          STRB     r1,[r0,#0x39]         ;2277
000112  4836              LDR      r0,|L15.492|
000114  7a01              LDRB     r1,[r0,#8]            ;2278  ; set_time
000116  4829              LDR      r0,|L15.444|
000118  f880103a          STRB     r1,[r0,#0x3a]         ;2278
00011c  4833              LDR      r0,|L15.492|
00011e  7901              LDRB     r1,[r0,#4]            ;2279  ; set_time
000120  4826              LDR      r0,|L15.444|
000122  f880103b          STRB     r1,[r0,#0x3b]         ;2279
000126  4831              LDR      r0,|L15.492|
000128  7801              LDRB     r1,[r0,#0]            ;2280  ; set_time
00012a  4824              LDR      r0,|L15.444|
00012c  f880103c          STRB     r1,[r0,#0x3c]         ;2280
                  |L15.304|
000130  a02f              ADR      r0,|L15.496|
000132  f7fffffe          BL       App_printf
000136  4620              MOV      r0,r4                 ;2286
000138  e7c6              B        |L15.200|
                  |L15.314|
00013a  1c60              ADDS     r0,r4,#1              ;2288
00013c  b100              CBZ      r0,|L15.320|
00013e  b914              CBNZ     r4,|L15.326|
                  |L15.320|
000140  2d02              CMP      r5,#2                 ;2290
000142  d100              BNE      |L15.326|
000144  e003              B        |L15.334|
                  |L15.326|
000146  1c6d              ADDS     r5,r5,#1              ;2197
                  |L15.328|
000148  2d02              CMP      r5,#2                 ;2197
00014a  f6ffaf5f          BLT      |L15.12|
                  |L15.334|
00014e  bf00              NOP                            ;2295
000150  4819              LDR      r0,|L15.440|
000152  7c00              LDRB     r0,[r0,#0x10]         ;2300  ; Sys_State
000154  bb58              CBNZ     r0,|L15.430|
000156  2001              MOVS     r0,#1                 ;2302
000158  4917              LDR      r1,|L15.440|
00015a  7408              STRB     r0,[r1,#0x10]         ;2302
00015c  a02a              ADR      r0,|L15.520|
00015e  f7fffffe          BL       App_printf
000162  f7fffffe          BL       RTC_GetCounter
000166  4605              MOV      r5,r0                 ;2304
000168  4920              LDR      r1,|L15.492|
00016a  f7fffffe          BL       Time_Display
00016e  481f              LDR      r0,|L15.492|
000170  7d00              LDRB     r0,[r0,#0x14]         ;2305  ; set_time
000172  f5a060fa          SUB      r0,r0,#0x7d0          ;2305
000176  4911              LDR      r1,|L15.444|
000178  f8810031          STRB     r0,[r1,#0x31]         ;2305
00017c  481b              LDR      r0,|L15.492|
00017e  7c01              LDRB     r1,[r0,#0x10]         ;2306  ; set_time
000180  480e              LDR      r0,|L15.444|
000182  f8801032          STRB     r1,[r0,#0x32]         ;2306
000186  4819              LDR      r0,|L15.492|
000188  7b01              LDRB     r1,[r0,#0xc]          ;2307  ; set_time
00018a  480c              LDR      r0,|L15.444|
00018c  f8801033          STRB     r1,[r0,#0x33]         ;2307
000190  4816              LDR      r0,|L15.492|
000192  7a01              LDRB     r1,[r0,#8]            ;2308  ; set_time
000194  4809              LDR      r0,|L15.444|
000196  f8801034          STRB     r1,[r0,#0x34]         ;2308
00019a  4814              LDR      r0,|L15.492|
00019c  7901              LDRB     r1,[r0,#4]            ;2309  ; set_time
00019e  4807              LDR      r0,|L15.444|
0001a0  f8801035          STRB     r1,[r0,#0x35]         ;2309
0001a4  4811              LDR      r0,|L15.492|
0001a6  7801              LDRB     r1,[r0,#0]            ;2310  ; set_time
0001a8  4804              LDR      r0,|L15.444|
0001aa  f8801036          STRB     r1,[r0,#0x36]         ;2310
                  |L15.430|
0001ae  4620              MOV      r0,r4                 ;2314
0001b0  e78a              B        |L15.200|
;;;2317   
                          ENDP

0001b2  0000              DCW      0x0000
                  |L15.436|
                          DCD      MT2000_Tx
                  |L15.440|
                          DCD      Sys_State
                  |L15.444|
                          DCD      Alarm_historyBack
                  |L15.448|
0001c0  74686520          DCB      "the first alarm,needing save RTC time!!!\r\n",0
0001c4  66697273
0001c8  7420616c
0001cc  61726d2c
0001d0  6e656564
0001d4  696e6720
0001d8  73617665
0001dc  20525443
0001e0  2074696d
0001e4  65212121
0001e8  0d0a00  
0001eb  00                DCB      0
                  |L15.492|
                          DCD      set_time
                  |L15.496|
0001f0  616c6172          DCB      "alarm alarm alarm!!!\r\n",0
0001f4  6d20616c
0001f8  61726d20
0001fc  616c6172
000200  6d212121
000204  0d0a00  
000207  00                DCB      0
                  |L15.520|
000208  74686520          DCB      "the first no_respond,needing save RTC time!!!\r\n",0
00020c  66697273
000210  74206e6f
000214  5f726573
000218  706f6e64
00021c  2c6e6565
000220  64696e67
000224  20736176
000228  65205254
00022c  43207469
000230  6d652121
000234  210d0a00

                          AREA ||i.vTaskTaskTaskEmis_Receive||, CODE, READONLY, ALIGN=2

                  vTaskTaskTaskEmis_Receive PROC
;;;1379    */
;;;1380   void vTaskTaskTaskEmis_Receive(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;1381   {
;;;1382       uint8_t read;
;;;1383   
;;;1384       int count =0;
000002  2400              MOVS     r4,#0
;;;1385       int ret=0;
000004  2500              MOVS     r5,#0
;;;1386   	
;;;1387   	MT2000_Cmd_Emit();
000006  f7fffffe          BL       MT2000_Cmd_Emit
;;;1388   	MT2000_Cmd_Stop();
00000a  f7fffffe          BL       MT2000_Cmd_Stop
;;;1389   	MT2000_Cmd_Channel();
00000e  f7fffffe          BL       MT2000_Cmd_Channel
;;;1390   	MT2000_Cmd_Power_ON();
000012  f7fffffe          BL       MT2000_Cmd_Power_ON
;;;1391   	MT2000_Cmd_Power_OFF();
000016  f7fffffe          BL       MT2000_Cmd_Power_OFF
;;;1392   	MT2000_Cmd_Power_Add();
00001a  f7fffffe          BL       MT2000_Cmd_Power_Add
;;;1393   	MT2000_Cmd_Power_Sub();
00001e  f7fffffe          BL       MT2000_Cmd_Power_Sub
;;;1394   	MT2000_Cmd_Inquire();
000022  f7fffffe          BL       MT2000_Cmd_Inquire
;;;1395   	MT2000_Cmd_Tune();
000026  f7fffffe          BL       MT2000_Cmd_Tune
;;;1396   	
;;;1397       while(1)
00002a  e048              B        |L16.190|
                  |L16.44|
;;;1398       {
;;;1399           while(comGetChar(COM4,&read))
00002c  e010              B        |L16.80|
                  |L16.46|
;;;1400           {
;;;1401               if(count<Emis_Size)
00002e  2c40              CMP      r4,#0x40
000030  da05              BGE      |L16.62|
;;;1402               {
;;;1403                   Emission_Rx[count++]=read;
000032  f89d2000          LDRB     r2,[sp,#0]
000036  4620              MOV      r0,r4
000038  1c64              ADDS     r4,r4,#1
00003a  4921              LDR      r1,|L16.192|
00003c  540a              STRB     r2,[r1,r0]
                  |L16.62|
;;;1404               }
;;;1405   
;;;1406               App_printf("%02x ",Emission_Rx[count-1]);
00003e  1e60              SUBS     r0,r4,#1
000040  4a1f              LDR      r2,|L16.192|
000042  5c11              LDRB     r1,[r2,r0]
000044  a01f              ADR      r0,|L16.196|
000046  f7fffffe          BL       App_printf
;;;1407               vTaskDelay(3);
00004a  2003              MOVS     r0,#3
00004c  f7fffffe          BL       vTaskDelay
                  |L16.80|
000050  4669              MOV      r1,sp                 ;1399
000052  2003              MOVS     r0,#3                 ;1399
000054  f7fffffe          BL       comGetChar
000058  2800              CMP      r0,#0                 ;1399
00005a  d1e8              BNE      |L16.46|
;;;1408           }
;;;1409   		
;;;1410           if(count>2)
00005c  2c02              CMP      r4,#2
00005e  dd2a              BLE      |L16.182|
;;;1411           {
;;;1412   #if	NEW_PROTOCOL_EN
;;;1413   //			Emission_Rx[count] = '\0';
;;;1414   			
;;;1415   //			/* 检验是否收到回车换行，即命令结束标志位 */
;;;1416   //			if( (Emission_Rx[count-2]=='\r') && (Emission_Rx[count-1]=='\n') )		//不支持连发，即如果收到两条指令，会当成一条指令解析
;;;1417   //			{				
;;;1418   				ret = MT2000_Cmd_Analyze(Emission_Rx);		//解析激励器的数据并返回结果
000060  4817              LDR      r0,|L16.192|
000062  f7fffffe          BL       MT2000_Cmd_Analyze
000066  4605              MOV      r5,r0
;;;1419   				count=0;
000068  2400              MOVS     r4,#0
;;;1420   //			}
;;;1421   #else
;;;1422   			count=0;
;;;1423               App_printf("\r\n");
;;;1424               ret=Is_available_data(Emission_Rx);		//解析激励器的数据并返回结果
;;;1425   #endif
;;;1426   			
;;;1427   			if(ret==1)			/* 正常控制激励器 */
00006a  2d01              CMP      r5,#1
00006c  d105              BNE      |L16.122|
;;;1428               {
;;;1429                   xEventGroupSetBits(xCreatedEventGroup, BIT_0);
00006e  2101              MOVS     r1,#1
000070  4816              LDR      r0,|L16.204|
000072  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
000074  f7fffffe          BL       xEventGroupSetBits
000078  e021              B        |L16.190|
                  |L16.122|
;;;1430                   //	uxBits = xEventGroupSetBits(xCreatedEventGroup, BIT_0);
;;;1431   //						if((uxBits & BIT_0) == 0)//该if判断是在本任务优先级低于发射任务优先级时有效
;;;1432   //						{
;;;1433   //							App_printf("BIT_0 notice successed!\r\n");
;;;1434   //						}
;;;1435               }
;;;1436               else if(ret==-1)	/* 指令执行失败 */
00007a  1c68              ADDS     r0,r5,#1
00007c  b940              CBNZ     r0,|L16.144|
;;;1437               {
;;;1438                   /*指令执行失败*/
;;;1439                   App_printf("cmd failure!!!\r\n");
00007e  a014              ADR      r0,|L16.208|
000080  f7fffffe          BL       App_printf
;;;1440                   xEventGroupSetBits(xCreatedEventGroup, BIT_1);
000084  2102              MOVS     r1,#2
000086  4811              LDR      r0,|L16.204|
000088  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
00008a  f7fffffe          BL       xEventGroupSetBits
00008e  e016              B        |L16.190|
                  |L16.144|
;;;1441   //						uxBits = xEventGroupSetBits(xCreatedEventGroup, BIT_1);
;;;1442   //						if((uxBits & BIT_1) == 0)//该if判断是在本任务优先级低于发射任务优先级时有效
;;;1443   //						{
;;;1444   //							App_printf("BIT_1 cmd not respond!\r\n");
;;;1445   //						}
;;;1446               }
;;;1447               else if(ret==-2)	/* 发射机报警，自动停止发射 */
000090  1ca8              ADDS     r0,r5,#2
000092  b940              CBNZ     r0,|L16.166|
;;;1448               {
;;;1449                   /*发射机报警，自动停止发射*/
;;;1450                   App_printf("emission alm!!!\r\n");
000094  a013              ADR      r0,|L16.228|
000096  f7fffffe          BL       App_printf
;;;1451                   xEventGroupSetBits(xCreatedEventGroup, BIT_2);
00009a  2104              MOVS     r1,#4
00009c  480b              LDR      r0,|L16.204|
00009e  6800              LDR      r0,[r0,#0]  ; xCreatedEventGroup
0000a0  f7fffffe          BL       xEventGroupSetBits
0000a4  e00b              B        |L16.190|
                  |L16.166|
;;;1452   //						uxBits = xEventGroupSetBits(xCreatedEventGroup, BIT_2);
;;;1453   //						if((uxBits & BIT_2) == 0)//该if判断是在本任务优先级低于发射任务优先级时有效
;;;1454   //						{
;;;1455   //							App_printf("BIT_2 Warning Stop Emit!\r\n");
;;;1456   //						}
;;;1457               }
;;;1458               else				/* 返回0，表示激励器数据无效 */
;;;1459               {
;;;1460                   App_printf("\r\n激励器数据无效!\r\n");
0000a6  a014              ADR      r0,|L16.248|
0000a8  f7fffffe          BL       App_printf
;;;1461                   memset(Emission_Rx,0,Emis_Size);
0000ac  2140              MOVS     r1,#0x40
0000ae  4804              LDR      r0,|L16.192|
0000b0  f7fffffe          BL       __aeabi_memclr4
0000b4  e003              B        |L16.190|
                  |L16.182|
;;;1462               }
;;;1463   
;;;1464           }
;;;1465           else
;;;1466           {
;;;1467               count=0;
0000b6  2400              MOVS     r4,#0
;;;1468               vTaskDelay(10);
0000b8  200a              MOVS     r0,#0xa
0000ba  f7fffffe          BL       vTaskDelay
                  |L16.190|
0000be  e7b5              B        |L16.44|
;;;1469           }
;;;1470   
;;;1471       }
;;;1472   }
;;;1473   /*
                          ENDP

                  |L16.192|
                          DCD      Emission_Rx
                  |L16.196|
0000c4  25303278          DCB      "%02x ",0
0000c8  2000    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L16.204|
                          DCD      xCreatedEventGroup
                  |L16.208|
0000d0  636d6420          DCB      "cmd failure!!!\r\n",0
0000d4  6661696c
0000d8  75726521
0000dc  21210d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L16.228|
0000e4  656d6973          DCB      "emission alm!!!\r\n",0
0000e8  73696f6e
0000ec  20616c6d
0000f0  2121210d
0000f4  0a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L16.248|
0000f8  0d0abca4          DCB      "\r\n",188,164,192,248,198,247,202,253,190,221,206,222,208
0000fc  c0f8c6f7
000100  cafdbedd
000104  ceded0  
000107  a7210d0a          DCB      167,"!\r\n",0
00010b  00      

                          AREA ||i.vTaskTaskTaskEmis_Send||, CODE, READONLY, ALIGN=2

                  vTaskTaskTaskEmis_Send PROC
;;;67      */
;;;68     void vTaskTaskTaskEmis_Send(void *pvParameters)
000000  b092              SUB      sp,sp,#0x48
;;;69     {
;;;70         const TickType_t xTicksToWait = 500; /* 最大延迟500ms */
000002  bf00              NOP      
;;;71         uint32_t ulValue;
;;;72         BaseType_t xResult;
;;;73     
;;;74     	uint8_t i = 0;
000004  2000              MOVS     r0,#0
000006  900f              STR      r0,[sp,#0x3c]
;;;75     	
;;;76         int ret;
;;;77         while(1)
000008  f001b909          B.W      |L17.4638|
                  |L17.12|
;;;78         {
;;;79             xResult = xTaskNotifyWait(0x00000000,
00000c  f04f33ff          MOV      r3,#0xffffffff
000010  aa11              ADD      r2,sp,#0x44
000012  4619              MOV      r1,r3
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       xTaskNotifyWait
00001a  9010              STR      r0,[sp,#0x40]
;;;80                                       0xFFFFFFFF,
;;;81                                       &ulValue,
;;;82                                       portMAX_DELAY); /* 最大允许延迟时间 */
;;;83             if( xResult == pdPASS )
00001c  9810              LDR      r0,[sp,#0x40]
00001e  2801              CMP      r0,#1
000020  f04180fa          BNE.W    |L17.4632|
;;;84             {
;;;85                 if((ulValue & BIT_0) != 0)			//若初始化完成，则查询报警状态，否则清零
000024  9811              LDR      r0,[sp,#0x44]
000026  f0000001          AND      r0,r0,#1
00002a  2800              CMP      r0,#0
00002c  d07e              BEQ      |L17.300|
;;;86                 {
;;;87                     //	Work_paraBack.Transmitte_id[0]=CAN_ID;//组包can id 既发射机 id
;;;88                     if(	Sys_State.Already_init==1)   //已经初始化了的
00002e  48fb              LDR      r0,|L17.1052|
000030  7a40              LDRB     r0,[r0,#9]  ; Sys_State
000032  2801              CMP      r0,#1
000034  d17b              BNE      |L17.302|
;;;89                     {
;;;90                         if(get_history_alm()==1)   //历史有报警状态
000036  f7fffffe          BL       get_history_alm
00003a  2801              CMP      r0,#1
00003c  d178              BNE      |L17.304|
;;;91                         {
;;;92                             App_printf("NO1. history state was alarm!\r\n");
00003e  a0f8              ADR      r0,|L17.1056|
000040  f7fffffe          BL       App_printf
;;;93                             Work_paraBack.Trans_current_state[0]=0x11;//当前是报警状态
000044  2011              MOVS     r0,#0x11
000046  49fe              LDR      r1,|L17.1088|
000048  7048              STRB     r0,[r1,#1]
;;;94                             if(Sys_State.No_power_level==1&&Sys_State.Emis_working==1)   //无功率报警
00004a  48f4              LDR      r0,|L17.1052|
00004c  7b80              LDRB     r0,[r0,#0xe]  ; Sys_State
00004e  2801              CMP      r0,#1
000050  d105              BNE      |L17.94|
000052  48f2              LDR      r0,|L17.1052|
000054  7980              LDRB     r0,[r0,#6]  ; Sys_State
000056  2801              CMP      r0,#1
000058  d101              BNE      |L17.94|
;;;95                             {
;;;96                                 Work_paraBack.Hist_alarm[0]=0x01;//正在发射
00005a  f881002d          STRB     r0,[r1,#0x2d]
                  |L17.94|
;;;97                             }
;;;98                             if(Sys_State.alarm==1)   //激励器报警
00005e  48ef              LDR      r0,|L17.1052|
000060  7bc0              LDRB     r0,[r0,#0xf]  ; Sys_State
000062  2801              CMP      r0,#1
000064  d105              BNE      |L17.114|
;;;99                             {
;;;100                                Sys_State.Emis_working=0;
000066  2000              MOVS     r0,#0
000068  49ec              LDR      r1,|L17.1052|
00006a  7188              STRB     r0,[r1,#6]
;;;101                                Work_paraBack.Hist_alarm[0]=0x00;//没有发射
00006c  49f4              LDR      r1,|L17.1088|
00006e  f881002d          STRB     r0,[r1,#0x2d]
                  |L17.114|
;;;102                            }
;;;103    
;;;104                            if(Sys_State.Emis_working==0)
000072  48ea              LDR      r0,|L17.1052|
000074  7980              LDRB     r0,[r0,#6]  ; Sys_State
000076  2800              CMP      r0,#0
000078  d13f              BNE      |L17.250|
;;;105                            {
;;;106                                memset(Work_paraBack.Channel,0,3);//信道清零
00007a  48f1              LDR      r0,|L17.1088|
00007c  2100              MOVS     r1,#0
00007e  f8a01003          STRH     r1,[r0,#3]
000082  7141              STRB     r1,[r0,#5]
;;;107                                memset(Work_paraBack.Freq,0,12);//频率清零
000084  1d80              ADDS     r0,r0,#6
000086  6001              STR      r1,[r0,#0]  ; Work_paraBack
000088  6041              STR      r1,[r0,#4]  ; Work_paraBack
00008a  6081              STR      r1,[r0,#8]  ; Work_paraBack
;;;108                                memset(Work_paraBack.Power_grade,0,3);//功率等级清零
00008c  1f80              SUBS     r0,r0,#6
00008e  8241              STRH     r1,[r0,#0x12]
000090  7501              STRB     r1,[r0,#0x14]
;;;109                                Work_paraBack.Type[0]=0;//工作种类清零
000092  2000              MOVS     r0,#0
000094  49ea              LDR      r1,|L17.1088|
000096  7088              STRB     r0,[r1,#2]
;;;110                                Work_paraBack.Forward_power[0]=0;
000098  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;111                                Work_paraBack.Reverse_power[0]=0;
00009c  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
;;;112                                Work_paraBack.Power_45_intensity[0]=0;
0000a0  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
;;;113                                Work_paraBack.Hist_alarm[0]=0x00;//没有发射
0000a4  f881002d          STRB     r0,[r1,#0x2d]
;;;114                                //电压显示
;;;115                                Work_paraBack.Power_45_voltage[0]=(float) ADC_ConvertedValue[2]/4096*3.3*2*Debug_M_45V;
0000a8  48e6              LDR      r0,|L17.1092|
0000aa  8880              LDRH     r0,[r0,#4]  ; ADC_ConvertedValue
0000ac  9003              STR      r0,[sp,#0xc]
0000ae  f7fffffe          BL       __aeabi_ui2f
0000b2  f04f418b          MOV      r1,#0x45800000
0000b6  9004              STR      r0,[sp,#0x10]
0000b8  f7fffffe          BL       __aeabi_fdiv
0000bc  9005              STR      r0,[sp,#0x14]
0000be  f7fffffe          BL       __aeabi_f2d
0000c2  f04f3266          MOV      r2,#0x66666666
0000c6  4be0              LDR      r3,|L17.1096|
0000c8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0000cc  f7fffffe          BL       __aeabi_dmul
0000d0  2200              MOVS     r2,#0
0000d2  f04f4380          MOV      r3,#0x40000000
0000d6  e9cd0108          STRD     r0,r1,[sp,#0x20]
0000da  f7fffffe          BL       __aeabi_dmul
0000de  4adb              LDR      r2,|L17.1100|
0000e0  4bdb              LDR      r3,|L17.1104|
0000e2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000e6  f7fffffe          BL       __aeabi_dmul
0000ea  e9cd010c          STRD     r0,r1,[sp,#0x30]
0000ee  f7fffffe          BL       __aeabi_d2f
0000f2  49d3              LDR      r1,|L17.1088|
0000f4  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
0000f8  e39d              B        |L17.2102|
                  |L17.250|
;;;116                            }
;;;117                            else
;;;118                            {
;;;119                                Work_paraBack.Hist_alarm[0]=0x01;//正在发射
0000fa  2001              MOVS     r0,#1
0000fc  49d0              LDR      r1,|L17.1088|
0000fe  f881002d          STRB     r0,[r1,#0x2d]
;;;120                                Work_paraBack.Type[0]=Trans_open.Type[0];//工作种类，固频，双频或者三频,把发射包的该状态给查询包
000102  48d4              LDR      r0,|L17.1108|
000104  7840              LDRB     r0,[r0,#1]  ; Trans_open
000106  7088              STRB     r0,[r1,#2]
;;;121                                Work_paraBack.Channel[0]=Trans_open.Channel[0];//Respond_Cmd.channel;//赋值信道
000108  48d2              LDR      r0,|L17.1108|
00010a  7880              LDRB     r0,[r0,#2]  ; Trans_open
00010c  70c8              STRB     r0,[r1,#3]
;;;122                                memcpy(Work_paraBack.Freq,Trans_open.Freq,4);//赋值频率
00010e  4608              MOV      r0,r1
000110  49d0              LDR      r1,|L17.1108|
000112  f8d11005          LDR      r1,[r1,#5]  ; Trans_open
000116  f8c01006          STR      r1,[r0,#6]  ; Work_paraBack
;;;123                                Work_paraBack.Power_grade[0]=Trans_open.Power_grade[0];//Respond_Cmd.power_level;//功率等级
00011a  48ce              LDR      r0,|L17.1108|
00011c  7c40              LDRB     r0,[r0,#0x11]  ; Trans_open
00011e  49c8              LDR      r1,|L17.1088|
000120  7488              STRB     r0,[r1,#0x12]
;;;124    							
;;;125                                if(Work_paraBack.Type[0]!=0x01)   //不是固频
000122  4608              MOV      r0,r1
000124  7880              LDRB     r0,[r0,#2]  ; Work_paraBack
000126  2801              CMP      r0,#1
000128  d020              BEQ      |L17.364|
;;;126                                {
;;;127                                    Work_paraBack.Channel[1]=Trans_open.Channel[1];//Respond_Cmd2.channel;//赋值信道
00012a  e002              B        |L17.306|
                  |L17.300|
00012c  e38b              B        |L17.2118|
                  |L17.302|
00012e  e33f              B        |L17.1968|
                  |L17.304|
000130  e0a3              B        |L17.634|
                  |L17.306|
000132  48c8              LDR      r0,|L17.1108|
000134  78c1              LDRB     r1,[r0,#3]
000136  48c2              LDR      r0,|L17.1088|
000138  7101              STRB     r1,[r0,#4]
;;;128                                    memcpy((uint8_t *)(Work_paraBack.Freq)+4,(uint8_t*)(Trans_open.Freq)+4,4);//赋值频率
00013a  49c6              LDR      r1,|L17.1108|
00013c  f8d11009          LDR      r1,[r1,#9]
000140  f8c0100a          STR      r1,[r0,#0xa]
;;;129                                    Work_paraBack.Power_grade[1]=Trans_open.Power_grade[1];//功率等级
000144  48c3              LDR      r0,|L17.1108|
000146  7c81              LDRB     r1,[r0,#0x12]
000148  48bd              LDR      r0,|L17.1088|
00014a  74c1              STRB     r1,[r0,#0x13]
;;;130                                    if(Work_paraBack.Type[0]!=0x02)   //也不是双频，那么只能是三频
00014c  7880              LDRB     r0,[r0,#2]  ; Work_paraBack
00014e  2802              CMP      r0,#2
000150  d00c              BEQ      |L17.364|
;;;131                                    {
;;;132                                        Work_paraBack.Channel[2]=Trans_open.Channel[2];//Respond_Cmd3.channel;//赋值信道
000152  48c0              LDR      r0,|L17.1108|
000154  7901              LDRB     r1,[r0,#4]
000156  48ba              LDR      r0,|L17.1088|
000158  7141              STRB     r1,[r0,#5]
;;;133                                        memcpy((uint8_t *)(Work_paraBack.Freq)+8,(uint8_t*)(Trans_open.Freq)+8,4);//赋值频率
00015a  49be              LDR      r1,|L17.1108|
00015c  f8d1100d          LDR      r1,[r1,#0xd]
000160  f8c0100e          STR      r1,[r0,#0xe]
;;;134                                        Work_paraBack.Power_grade[2]=Trans_open.Power_grade[2];//功率等级
000164  48bb              LDR      r0,|L17.1108|
000166  7cc1              LDRB     r1,[r0,#0x13]
000168  48b5              LDR      r0,|L17.1088|
00016a  7501              STRB     r1,[r0,#0x14]
                  |L17.364|
;;;135                                        //App_printf("Respond_Cmd3.power_level=%02x\r\n",Respond_Cmd3.power_level);
;;;136                                    }
;;;137                                }
;;;138    							
;;;139                                //电流显示
;;;140                                if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
00016c  48ba              LDR      r0,|L17.1112|
00016e  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000170  900b              STR      r0,[sp,#0x2c]
000172  f7fffffe          BL       __aeabi_f2d
000176  2200              MOVS     r2,#0
000178  4bb8              LDR      r3,|L17.1116|
00017a  e9cd010c          STRD     r0,r1,[sp,#0x30]
00017e  f7fffffe          BL       __aeabi_cdrcmple
000182  d21e              BCS      |L17.450|
;;;141                                {
;;;142                                    Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
000184  48b4              LDR      r0,|L17.1112|
000186  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000188  9005              STR      r0,[sp,#0x14]
00018a  f7fffffe          BL       __aeabi_f2d
00018e  2200              MOVS     r2,#0
000190  4bb2              LDR      r3,|L17.1116|
000192  e9cd0106          STRD     r0,r1,[sp,#0x18]
000196  f7fffffe          BL       __aeabi_dsub
00019a  2200              MOVS     r2,#0
00019c  4bb0              LDR      r3,|L17.1120|
00019e  e9cd0108          STRD     r0,r1,[sp,#0x20]
0001a2  f7fffffe          BL       __aeabi_dmul
0001a6  2200              MOVS     r2,#0
0001a8  4bae              LDR      r3,|L17.1124|
0001aa  e9cd010a          STRD     r0,r1,[sp,#0x28]
0001ae  f7fffffe          BL       __aeabi_dadd
0001b2  e9cd010c          STRD     r0,r1,[sp,#0x30]
0001b6  f7fffffe          BL       __aeabi_d2f
0001ba  49a1              LDR      r1,|L17.1088|
0001bc  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
0001c0  e008              B        |L17.468|
                  |L17.450|
;;;143                                }
;;;144                                else     //小于 1.5V电流系数为40
;;;145                                {
;;;146                                    Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
0001c2  48a5              LDR      r0,|L17.1112|
0001c4  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
0001c6  49a8              LDR      r1,|L17.1128|
0001c8  900d              STR      r0,[sp,#0x34]
0001ca  f7fffffe          BL       __aeabi_fmul
0001ce  499c              LDR      r1,|L17.1088|
0001d0  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L17.468|
;;;147                                }
;;;148                                //电压显示
;;;149                                Work_paraBack.Power_45_voltage[0]=Show_Parameter.M_45V*Debug_M_45V;
0001d4  48a0              LDR      r0,|L17.1112|
0001d6  6880              LDR      r0,[r0,#8]  ; Show_Parameter
0001d8  9009              STR      r0,[sp,#0x24]
0001da  f7fffffe          BL       __aeabi_f2d
0001de  4a9b              LDR      r2,|L17.1100|
0001e0  4b9b              LDR      r3,|L17.1104|
0001e2  e9cd010a          STRD     r0,r1,[sp,#0x28]
0001e6  f7fffffe          BL       __aeabi_dmul
0001ea  e9cd010c          STRD     r0,r1,[sp,#0x30]
0001ee  f7fffffe          BL       __aeabi_d2f
0001f2  4993              LDR      r1,|L17.1088|
0001f4  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
;;;150    
;;;151                                App_printf("Forward_power=%f \r\n",Work_paraBack.Forward_power[0]);
0001f8  4608              MOV      r0,r1
0001fa  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0001fe  900b              STR      r0,[sp,#0x2c]
000200  f7fffffe          BL       __aeabi_f2d
000204  4602              MOV      r2,r0
000206  460b              MOV      r3,r1
000208  e9cd010c          STRD     r0,r1,[sp,#0x30]
00020c  a097              ADR      r0,|L17.1132|
00020e  f7fffffe          BL       App_printf
;;;152                                App_printf("Reverse_power=%f \r\n",Work_paraBack.Reverse_power[0]);
000212  488b              LDR      r0,|L17.1088|
000214  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000218  900b              STR      r0,[sp,#0x2c]
00021a  f7fffffe          BL       __aeabi_f2d
00021e  4602              MOV      r2,r0
000220  460b              MOV      r3,r1
000222  e9cd010c          STRD     r0,r1,[sp,#0x30]
000226  a096              ADR      r0,|L17.1152|
000228  f7fffffe          BL       App_printf
;;;153                                App_printf("Power_45_voltage=%f \r\n",Work_paraBack.Power_45_voltage[0]);
00022c  4884              LDR      r0,|L17.1088|
00022e  f8d00021          LDR      r0,[r0,#0x21]  ; Work_paraBack
000232  900b              STR      r0,[sp,#0x2c]
000234  f7fffffe          BL       __aeabi_f2d
000238  4602              MOV      r2,r0
00023a  460b              MOV      r3,r1
00023c  e9cd010c          STRD     r0,r1,[sp,#0x30]
000240  a094              ADR      r0,|L17.1172|
000242  f7fffffe          BL       App_printf
;;;154                                App_printf("Power_45_intensity=%f \r\n",Work_paraBack.Power_45_intensity[0]);
000246  487e              LDR      r0,|L17.1088|
000248  f8d0001d          LDR      r0,[r0,#0x1d]  ; Work_paraBack
00024c  900b              STR      r0,[sp,#0x2c]
00024e  f7fffffe          BL       __aeabi_f2d
000252  4602              MOV      r2,r0
000254  460b              MOV      r3,r1
000256  e9cd010c          STRD     r0,r1,[sp,#0x30]
00025a  a094              ADR      r0,|L17.1196|
00025c  f7fffffe          BL       App_printf
;;;155                                App_printf("Standing_wave_ratio=%f \r\n",Show_Parameter.Standing_wave_ratio);
000260  487d              LDR      r0,|L17.1112|
000262  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
000264  900b              STR      r0,[sp,#0x2c]
000266  f7fffffe          BL       __aeabi_f2d
00026a  4602              MOV      r2,r0
00026c  460b              MOV      r3,r1
00026e  e9cd010c          STRD     r0,r1,[sp,#0x30]
000272  a095              ADR      r0,|L17.1224|
000274  f7fffffe          BL       App_printf
000278  e2dd              B        |L17.2102|
                  |L17.634|
;;;156                            }
;;;157                        }
;;;158                        else     //只是AD采集没有当前报警，在下面可能有激励器的当前报警
;;;159                        {
;;;160                            Work_paraBack.Hist_alarm[0]=0x01;//发射状态
00027a  2001              MOVS     r0,#1
00027c  4970              LDR      r1,|L17.1088|
00027e  f881002d          STRB     r0,[r1,#0x2d]
;;;161                            //查询
;;;162                            Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
000282  21ce              MOVS     r1,#0xce
000284  4897              LDR      r0,|L17.1252|
000286  f7fffffe          BL       Pre_EmissionSend
;;;163                            ret=run_command(xTicksToWait);//内部循环了3次
00028a  f44f70fa          MOV      r0,#0x1f4
00028e  f7fffffe          BL       run_command
000292  900e              STR      r0,[sp,#0x38]
;;;164                            if(ret==1)   //成功状态
000294  980e              LDR      r0,[sp,#0x38]
000296  2801              CMP      r0,#1
000298  d17e              BNE      |L17.920|
;;;165                            {
;;;166                                if(Respond_Cmd.status==1)   //发射状态
00029a  4893              LDR      r0,|L17.1256|
00029c  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
00029e  2801              CMP      r0,#1
0002a0  d17b              BNE      |L17.922|
;;;167                                {
;;;168                                    App_printf("working state...\r\n");
0002a2  a092              ADR      r0,|L17.1260|
0002a4  f7fffffe          BL       App_printf
;;;169                                    Sys_State.Emis_working=1;
0002a8  2001              MOVS     r0,#1
0002aa  495c              LDR      r1,|L17.1052|
0002ac  7188              STRB     r0,[r1,#6]
;;;170                                    Work_paraBack.Trans_current_state[0]=0x01;//正常发射状态
0002ae  4964              LDR      r1,|L17.1088|
0002b0  7048              STRB     r0,[r1,#1]
;;;171                                    Work_paraBack.Type[0]=Trans_open.Type[0];//工作种类，固频，双频或者三频,把发射包的该状态给查询包
0002b2  4868              LDR      r0,|L17.1108|
0002b4  7840              LDRB     r0,[r0,#1]  ; Trans_open
0002b6  7088              STRB     r0,[r1,#2]
;;;172                                    Work_paraBack.Channel[0]=Trans_open.Channel[0];//赋值信道
0002b8  4866              LDR      r0,|L17.1108|
0002ba  7880              LDRB     r0,[r0,#2]  ; Trans_open
0002bc  70c8              STRB     r0,[r1,#3]
;;;173                                    memcpy(Work_paraBack.Freq,Trans_open.Freq,4);//赋值频率
0002be  4608              MOV      r0,r1
0002c0  4964              LDR      r1,|L17.1108|
0002c2  f8d11005          LDR      r1,[r1,#5]  ; Trans_open
0002c6  f8c01006          STR      r1,[r0,#6]  ; Work_paraBack
;;;174                                    Work_paraBack.Power_grade[0]=Trans_open.Power_grade[0];//功率等级
0002ca  4862              LDR      r0,|L17.1108|
0002cc  7c40              LDRB     r0,[r0,#0x11]  ; Trans_open
0002ce  495c              LDR      r1,|L17.1088|
0002d0  7488              STRB     r0,[r1,#0x12]
;;;175                                    if(Work_paraBack.Type[0]!=0x01)   //不是固频
0002d2  4608              MOV      r0,r1
0002d4  7880              LDRB     r0,[r0,#2]  ; Work_paraBack
0002d6  2801              CMP      r0,#1
0002d8  d01c              BEQ      |L17.788|
;;;176                                    {
;;;177                                        Work_paraBack.Channel[1]=Trans_open.Channel[1];//Respond_Cmd2.channel;//赋值信道
0002da  485e              LDR      r0,|L17.1108|
0002dc  78c1              LDRB     r1,[r0,#3]
0002de  4858              LDR      r0,|L17.1088|
0002e0  7101              STRB     r1,[r0,#4]
;;;178                                        memcpy((uint8_t *)(Work_paraBack.Freq)+4,(uint8_t*)(Trans_open.Freq)+4,4);//赋值频率
0002e2  495c              LDR      r1,|L17.1108|
0002e4  f8d11009          LDR      r1,[r1,#9]
0002e8  f8c0100a          STR      r1,[r0,#0xa]
;;;179                                        Work_paraBack.Power_grade[1]=Trans_open.Power_grade[1];//功率等级
0002ec  4859              LDR      r0,|L17.1108|
0002ee  7c81              LDRB     r1,[r0,#0x12]
0002f0  4853              LDR      r0,|L17.1088|
0002f2  74c1              STRB     r1,[r0,#0x13]
;;;180                                        if(Work_paraBack.Type[0]!=0x02)   //也不是双频，那么只能是三频
0002f4  7880              LDRB     r0,[r0,#2]  ; Work_paraBack
0002f6  2802              CMP      r0,#2
0002f8  d00c              BEQ      |L17.788|
;;;181                                        {
;;;182                                            Work_paraBack.Channel[2]=Trans_open.Channel[2];//Respond_Cmd3.channel;//赋值信道
0002fa  4856              LDR      r0,|L17.1108|
0002fc  7901              LDRB     r1,[r0,#4]
0002fe  4850              LDR      r0,|L17.1088|
000300  7141              STRB     r1,[r0,#5]
;;;183                                            memcpy((uint8_t *)(Work_paraBack.Freq)+8,(uint8_t*)(Trans_open.Freq)+8,4);//赋值频率
000302  4954              LDR      r1,|L17.1108|
000304  f8d1100d          LDR      r1,[r1,#0xd]
000308  f8c0100e          STR      r1,[r0,#0xe]
;;;184                                            Work_paraBack.Power_grade[2]=Trans_open.Power_grade[2];//功率等级
00030c  4851              LDR      r0,|L17.1108|
00030e  7cc1              LDRB     r1,[r0,#0x13]
000310  484b              LDR      r0,|L17.1088|
000312  7501              STRB     r1,[r0,#0x14]
                  |L17.788|
;;;185                                        }
;;;186                                    }
;;;187                                    //电流显示
;;;188                                    if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
000314  4850              LDR      r0,|L17.1112|
000316  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000318  900b              STR      r0,[sp,#0x2c]
00031a  f7fffffe          BL       __aeabi_f2d
00031e  2200              MOVS     r2,#0
000320  4b4e              LDR      r3,|L17.1116|
000322  e9cd010c          STRD     r0,r1,[sp,#0x30]
000326  f7fffffe          BL       __aeabi_cdrcmple
00032a  d21e              BCS      |L17.874|
;;;189                                    {
;;;190                                        Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
00032c  484a              LDR      r0,|L17.1112|
00032e  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000330  9005              STR      r0,[sp,#0x14]
000332  f7fffffe          BL       __aeabi_f2d
000336  2200              MOVS     r2,#0
000338  4b48              LDR      r3,|L17.1116|
00033a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00033e  f7fffffe          BL       __aeabi_dsub
000342  2200              MOVS     r2,#0
000344  4b46              LDR      r3,|L17.1120|
000346  e9cd0108          STRD     r0,r1,[sp,#0x20]
00034a  f7fffffe          BL       __aeabi_dmul
00034e  2200              MOVS     r2,#0
000350  4b44              LDR      r3,|L17.1124|
000352  e9cd010a          STRD     r0,r1,[sp,#0x28]
000356  f7fffffe          BL       __aeabi_dadd
00035a  e9cd010c          STRD     r0,r1,[sp,#0x30]
00035e  f7fffffe          BL       __aeabi_d2f
000362  4937              LDR      r1,|L17.1088|
000364  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
000368  e008              B        |L17.892|
                  |L17.874|
;;;191                                    }
;;;192                                    else     //小于 1.5V电流系数为40
;;;193                                    {
;;;194                                        Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
00036a  483b              LDR      r0,|L17.1112|
00036c  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
00036e  493e              LDR      r1,|L17.1128|
000370  900d              STR      r0,[sp,#0x34]
000372  f7fffffe          BL       __aeabi_fmul
000376  4932              LDR      r1,|L17.1088|
000378  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L17.892|
;;;195                                    }
;;;196                                    //电压显示
;;;197                                    Work_paraBack.Power_45_voltage[0]=Show_Parameter.M_45V*Debug_M_45V;
00037c  4836              LDR      r0,|L17.1112|
00037e  6880              LDR      r0,[r0,#8]  ; Show_Parameter
000380  9009              STR      r0,[sp,#0x24]
000382  f7fffffe          BL       __aeabi_f2d
000386  4a31              LDR      r2,|L17.1100|
000388  4b31              LDR      r3,|L17.1104|
00038a  e9cd010a          STRD     r0,r1,[sp,#0x28]
00038e  f7fffffe          BL       __aeabi_dmul
000392  e9cd010c          STRD     r0,r1,[sp,#0x30]
000396  e001              B        |L17.924|
                  |L17.920|
000398  e101              B        |L17.1438|
                  |L17.922|
00039a  e0b9              B        |L17.1296|
                  |L17.924|
00039c  f7fffffe          BL       __aeabi_d2f
0003a0  4927              LDR      r1,|L17.1088|
0003a2  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
;;;198    
;;;199                                    App_printf("Forward_power=%f \r\n",Work_paraBack.Forward_power[0]);
0003a6  4608              MOV      r0,r1
0003a8  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0003ac  900b              STR      r0,[sp,#0x2c]
0003ae  f7fffffe          BL       __aeabi_f2d
0003b2  4602              MOV      r2,r0
0003b4  460b              MOV      r3,r1
0003b6  e9cd010c          STRD     r0,r1,[sp,#0x30]
0003ba  a02c              ADR      r0,|L17.1132|
0003bc  f7fffffe          BL       App_printf
;;;200                                    App_printf("Reverse_power=%f \r\n",Work_paraBack.Reverse_power[0]);
0003c0  481f              LDR      r0,|L17.1088|
0003c2  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
0003c6  900b              STR      r0,[sp,#0x2c]
0003c8  f7fffffe          BL       __aeabi_f2d
0003cc  4602              MOV      r2,r0
0003ce  460b              MOV      r3,r1
0003d0  e9cd010c          STRD     r0,r1,[sp,#0x30]
0003d4  a02a              ADR      r0,|L17.1152|
0003d6  f7fffffe          BL       App_printf
;;;201                                    App_printf("Power_45_voltage=%f \r\n",Work_paraBack.Power_45_voltage[0]);
0003da  4819              LDR      r0,|L17.1088|
0003dc  f8d00021          LDR      r0,[r0,#0x21]  ; Work_paraBack
0003e0  900b              STR      r0,[sp,#0x2c]
0003e2  f7fffffe          BL       __aeabi_f2d
0003e6  4602              MOV      r2,r0
0003e8  460b              MOV      r3,r1
0003ea  e9cd010c          STRD     r0,r1,[sp,#0x30]
0003ee  a029              ADR      r0,|L17.1172|
0003f0  f7fffffe          BL       App_printf
;;;202                                    App_printf("Power_45_intensity=%f \r\n",Work_paraBack.Power_45_intensity[0]);
0003f4  4812              LDR      r0,|L17.1088|
0003f6  f8d0001d          LDR      r0,[r0,#0x1d]  ; Work_paraBack
0003fa  900b              STR      r0,[sp,#0x2c]
0003fc  f7fffffe          BL       __aeabi_f2d
000400  4602              MOV      r2,r0
000402  460b              MOV      r3,r1
000404  e9cd010c          STRD     r0,r1,[sp,#0x30]
000408  a028              ADR      r0,|L17.1196|
00040a  f7fffffe          BL       App_printf
;;;203                                    App_printf("Standing_wave_ratio=%f \r\n",Show_Parameter.Standing_wave_ratio);
00040e  4812              LDR      r0,|L17.1112|
000410  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
000412  900b              STR      r0,[sp,#0x2c]
000414  f7fffffe          BL       __aeabi_f2d
000418  4602              MOV      r2,r0
00041a  e071              B        |L17.1280|
                  |L17.1052|
                          DCD      Sys_State
                  |L17.1056|
000420  4e4f312e          DCB      "NO1. history state was alarm!\r\n",0
000424  20686973
000428  746f7279
00042c  20737461
000430  74652077
000434  61732061
000438  6c61726d
00043c  210d0a00
                  |L17.1088|
                          DCD      Work_paraBack
                  |L17.1092|
                          DCD      ADC_ConvertedValue
                  |L17.1096|
                          DCD      0x400a6666
                  |L17.1100|
                          DCD      0x0ce8560d
                  |L17.1104|
                          DCD      0x4022e856
                  |L17.1108|
                          DCD      Trans_open
                  |L17.1112|
                          DCD      Show_Parameter
                  |L17.1116|
                          DCD      0x3ff80000
                  |L17.1120|
                          DCD      0x4042c000
                  |L17.1124|
                          DCD      0x404e0000
                  |L17.1128|
                          DCD      0x42200000
                  |L17.1132|
00046c  466f7277          DCB      "Forward_power=%f \r\n",0
000470  6172645f
000474  706f7765
000478  723d2566
00047c  200d0a00
                  |L17.1152|
000480  52657665          DCB      "Reverse_power=%f \r\n",0
000484  7273655f
000488  706f7765
00048c  723d2566
000490  200d0a00
                  |L17.1172|
000494  506f7765          DCB      "Power_45_voltage=%f \r\n",0
000498  725f3435
00049c  5f766f6c
0004a0  74616765
0004a4  3d256620
0004a8  0d0a00  
0004ab  00                DCB      0
                  |L17.1196|
0004ac  506f7765          DCB      "Power_45_intensity=%f \r\n",0
0004b0  725f3435
0004b4  5f696e74
0004b8  656e7369
0004bc  74793d25
0004c0  66200d0a
0004c4  00      
0004c5  00                DCB      0
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L17.1224|
0004c8  5374616e          DCB      "Standing_wave_ratio=%f \r\n",0
0004cc  64696e67
0004d0  5f776176
0004d4  655f7261
0004d8  74696f3d
0004dc  2566200d
0004e0  0a00    
0004e2  00                DCB      0
0004e3  00                DCB      0
                  |L17.1252|
                          DCD      EmissionCmd
                  |L17.1256|
                          DCD      Respond_Cmd
                  |L17.1260|
0004ec  776f726b          DCB      "working state...\r\n",0
0004f0  696e6720
0004f4  73746174
0004f8  652e2e2e
0004fc  0d0a00  
0004ff  00                DCB      0
                  |L17.1280|
000500  460b              MOV      r3,r1
000502  e9cd010c          STRD     r0,r1,[sp,#0x30]
000506  f2af0040          ADR      r0,|L17.1224|
00050a  f7fffffe          BL       App_printf
00050e  e192              B        |L17.2102|
                  |L17.1296|
;;;204                                }
;;;205                                else     //待机状态,Respond_Cmd.status 则为0，因为这个变量只有两个状态
;;;206                                {
;;;207                                    App_printf("waiting state...\r\n");
000510  a0f4              ADR      r0,|L17.2276|
000512  f7fffffe          BL       App_printf
;;;208                                    Sys_State.Emis_working=0;
000516  2000              MOVS     r0,#0
000518  49f7              LDR      r1,|L17.2296|
00051a  7188              STRB     r0,[r1,#6]
;;;209                                    Work_paraBack.Trans_current_state[0]=0x02;//停止状态，既待机状态
00051c  2002              MOVS     r0,#2
00051e  49f7              LDR      r1,|L17.2300|
000520  7048              STRB     r0,[r1,#1]
;;;210                                    memset(Work_paraBack.Channel,0,3);//信道清零
000522  4608              MOV      r0,r1
000524  2100              MOVS     r1,#0
000526  f8a01003          STRH     r1,[r0,#3]
00052a  7141              STRB     r1,[r0,#5]
;;;211                                    memset(Work_paraBack.Freq,0,12);//频率清零
00052c  1d80              ADDS     r0,r0,#6
00052e  6001              STR      r1,[r0,#0]  ; Work_paraBack
000530  6041              STR      r1,[r0,#4]  ; Work_paraBack
000532  6081              STR      r1,[r0,#8]  ; Work_paraBack
;;;212                                    memset(Work_paraBack.Power_grade,0,3);//功率等级清零
000534  1f80              SUBS     r0,r0,#6
000536  8241              STRH     r1,[r0,#0x12]
000538  7501              STRB     r1,[r0,#0x14]
;;;213                                    Work_paraBack.Type[0]=0;//工作种类清零
00053a  2000              MOVS     r0,#0
00053c  49ef              LDR      r1,|L17.2300|
00053e  7088              STRB     r0,[r1,#2]
;;;214                                    Work_paraBack.Forward_power[0]=0;
000540  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;215                                    Work_paraBack.Reverse_power[0]=0;
000544  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
;;;216                                    Work_paraBack.Power_45_intensity[0]=0;
000548  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
;;;217                                    //电压显示
;;;218                                    Work_paraBack.Power_45_voltage[0]=(float) ADC_ConvertedValue[2]/4096*3.3*2*Debug_M_45V;
00054c  48ec              LDR      r0,|L17.2304|
00054e  8880              LDRH     r0,[r0,#4]  ; ADC_ConvertedValue
000550  9003              STR      r0,[sp,#0xc]
000552  f7fffffe          BL       __aeabi_ui2f
000556  f04f418b          MOV      r1,#0x45800000
00055a  9004              STR      r0,[sp,#0x10]
00055c  f7fffffe          BL       __aeabi_fdiv
000560  9005              STR      r0,[sp,#0x14]
000562  f7fffffe          BL       __aeabi_f2d
000566  f04f3266          MOV      r2,#0x66666666
00056a  4be6              LDR      r3,|L17.2308|
00056c  e9cd0106          STRD     r0,r1,[sp,#0x18]
000570  f7fffffe          BL       __aeabi_dmul
000574  2200              MOVS     r2,#0
000576  f04f4380          MOV      r3,#0x40000000
00057a  e9cd0108          STRD     r0,r1,[sp,#0x20]
00057e  f7fffffe          BL       __aeabi_dmul
000582  4ae1              LDR      r2,|L17.2312|
000584  4be1              LDR      r3,|L17.2316|
000586  e9cd010a          STRD     r0,r1,[sp,#0x28]
00058a  f7fffffe          BL       __aeabi_dmul
00058e  e9cd010c          STRD     r0,r1,[sp,#0x30]
000592  f7fffffe          BL       __aeabi_d2f
000596  49d9              LDR      r1,|L17.2300|
000598  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
00059c  e14b              B        |L17.2102|
                  |L17.1438|
;;;219                                }
;;;220                            }
;;;221                            else     //报警状态
;;;222                            {
;;;223                                App_printf("NO2.current state is alarm!\r\n");
00059e  a0dc              ADR      r0,|L17.2320|
0005a0  f7fffffe          BL       App_printf
;;;224                                Work_paraBack.Trans_current_state[0]=0x11;//当前是报警状态
0005a4  2011              MOVS     r0,#0x11
0005a6  49d5              LDR      r1,|L17.2300|
0005a8  7048              STRB     r0,[r1,#1]
;;;225                                if(Sys_State.No_power_level==1&&Sys_State.Emis_working==1)   //无功率报警
0005aa  48d3              LDR      r0,|L17.2296|
0005ac  7b80              LDRB     r0,[r0,#0xe]  ; Sys_State
0005ae  2801              CMP      r0,#1
0005b0  d105              BNE      |L17.1470|
0005b2  48d1              LDR      r0,|L17.2296|
0005b4  7980              LDRB     r0,[r0,#6]  ; Sys_State
0005b6  2801              CMP      r0,#1
0005b8  d101              BNE      |L17.1470|
;;;226                                {
;;;227                                    Work_paraBack.Hist_alarm[0]=0x01;//正在发射
0005ba  f881002d          STRB     r0,[r1,#0x2d]
                  |L17.1470|
;;;228                                }
;;;229                                if(Sys_State.alarm==1)   //激励器报警
0005be  48ce              LDR      r0,|L17.2296|
0005c0  7bc0              LDRB     r0,[r0,#0xf]  ; Sys_State
0005c2  2801              CMP      r0,#1
0005c4  d105              BNE      |L17.1490|
;;;230                                {
;;;231                                    Sys_State.Emis_working=0;
0005c6  2000              MOVS     r0,#0
0005c8  49cb              LDR      r1,|L17.2296|
0005ca  7188              STRB     r0,[r1,#6]
;;;232                                    Work_paraBack.Hist_alarm[0]=0x00;//没有发射
0005cc  49cb              LDR      r1,|L17.2300|
0005ce  f881002d          STRB     r0,[r1,#0x2d]
                  |L17.1490|
;;;233                                }
;;;234                                if(Sys_State.Emis_working==0)
0005d2  48c9              LDR      r0,|L17.2296|
0005d4  7980              LDRB     r0,[r0,#6]  ; Sys_State
0005d6  bb50              CBNZ     r0,|L17.1582|
;;;235                                {
;;;236                                    memset(Work_paraBack.Channel,0,3);//信道清零
0005d8  48c8              LDR      r0,|L17.2300|
0005da  2100              MOVS     r1,#0
0005dc  f8a01003          STRH     r1,[r0,#3]
0005e0  7141              STRB     r1,[r0,#5]
;;;237                                    memset(Work_paraBack.Freq,0,12);//频率清零
0005e2  1d80              ADDS     r0,r0,#6
0005e4  6001              STR      r1,[r0,#0]  ; Work_paraBack
0005e6  6041              STR      r1,[r0,#4]  ; Work_paraBack
0005e8  6081              STR      r1,[r0,#8]  ; Work_paraBack
;;;238                                    memset(Work_paraBack.Power_grade,0,3);//功率等级清零
0005ea  1f80              SUBS     r0,r0,#6
0005ec  8241              STRH     r1,[r0,#0x12]
0005ee  7501              STRB     r1,[r0,#0x14]
;;;239                                    Work_paraBack.Type[0]=0;//工作种类清零
0005f0  2000              MOVS     r0,#0
0005f2  49c2              LDR      r1,|L17.2300|
0005f4  7088              STRB     r0,[r1,#2]
;;;240                                    Work_paraBack.Forward_power[0]=0;
0005f6  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;241                                    Work_paraBack.Reverse_power[0]=0;
0005fa  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
;;;242                                    Work_paraBack.Power_45_intensity[0]=0;
0005fe  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
;;;243                                    //电压显示
;;;244                                    Work_paraBack.Power_45_voltage[0]=Show_Parameter.M_45V*Debug_M_45V;
000602  48cb              LDR      r0,|L17.2352|
000604  6880              LDR      r0,[r0,#8]  ; Show_Parameter
000606  9009              STR      r0,[sp,#0x24]
000608  f7fffffe          BL       __aeabi_f2d
00060c  4abe              LDR      r2,|L17.2312|
00060e  4bbf              LDR      r3,|L17.2316|
000610  e9cd010a          STRD     r0,r1,[sp,#0x28]
000614  f7fffffe          BL       __aeabi_dmul
000618  e9cd010c          STRD     r0,r1,[sp,#0x30]
00061c  f7fffffe          BL       __aeabi_d2f
000620  49b6              LDR      r1,|L17.2300|
000622  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
;;;245                                    Work_paraBack.Hist_alarm[0]=0x00;//没有发射
000626  2000              MOVS     r0,#0
000628  f881002d          STRB     r0,[r1,#0x2d]
00062c  e103              B        |L17.2102|
                  |L17.1582|
;;;246                                }
;;;247                                else
;;;248                                {
;;;249                                    Work_paraBack.Hist_alarm[0]=0x01;//正在发射
00062e  2001              MOVS     r0,#1
000630  49b2              LDR      r1,|L17.2300|
000632  f881002d          STRB     r0,[r1,#0x2d]
;;;250                                    Work_paraBack.Type[0]=Trans_open.Type[0];//工作种类，固频，双频或者三频,把发射包的该状态给查询包
000636  48bf              LDR      r0,|L17.2356|
000638  7840              LDRB     r0,[r0,#1]  ; Trans_open
00063a  7088              STRB     r0,[r1,#2]
;;;251                                    Work_paraBack.Channel[0]=Trans_open.Channel[0];//Respond_Cmd.channel;//赋值信道
00063c  48bd              LDR      r0,|L17.2356|
00063e  7880              LDRB     r0,[r0,#2]  ; Trans_open
000640  70c8              STRB     r0,[r1,#3]
;;;252                                    memcpy(Work_paraBack.Freq,Trans_open.Freq,4);//赋值频率
000642  4608              MOV      r0,r1
000644  49bb              LDR      r1,|L17.2356|
000646  f8d11005          LDR      r1,[r1,#5]  ; Trans_open
00064a  f8c01006          STR      r1,[r0,#6]  ; Work_paraBack
;;;253                                    Work_paraBack.Power_grade[0]=Trans_open.Power_grade[0];//Respond_Cmd.power_level;//功率等级
00064e  48b9              LDR      r0,|L17.2356|
000650  7c40              LDRB     r0,[r0,#0x11]  ; Trans_open
000652  49aa              LDR      r1,|L17.2300|
000654  7488              STRB     r0,[r1,#0x12]
;;;254                                    if(Work_paraBack.Type[0]!=0x01)   //不是固频
000656  4608              MOV      r0,r1
000658  7880              LDRB     r0,[r0,#2]  ; Work_paraBack
00065a  2801              CMP      r0,#1
00065c  d01c              BEQ      |L17.1688|
;;;255                                    {
;;;256                                        Work_paraBack.Channel[1]=Trans_open.Channel[1];//Respond_Cmd2.channel;//赋值信道
00065e  48b5              LDR      r0,|L17.2356|
000660  78c1              LDRB     r1,[r0,#3]
000662  48a6              LDR      r0,|L17.2300|
000664  7101              STRB     r1,[r0,#4]
;;;257                                        memcpy((uint8_t *)(Work_paraBack.Freq)+4,(uint8_t*)(Trans_open.Freq)+4,4);//赋值频率
000666  49b3              LDR      r1,|L17.2356|
000668  f8d11009          LDR      r1,[r1,#9]
00066c  f8c0100a          STR      r1,[r0,#0xa]
;;;258                                        Work_paraBack.Power_grade[1]=Trans_open.Power_grade[1];//功率等级
000670  48b0              LDR      r0,|L17.2356|
000672  7c81              LDRB     r1,[r0,#0x12]
000674  48a1              LDR      r0,|L17.2300|
000676  74c1              STRB     r1,[r0,#0x13]
;;;259                                        if(Work_paraBack.Type[0]!=0x02)   //也不是双频，那么只能是三频
000678  7880              LDRB     r0,[r0,#2]  ; Work_paraBack
00067a  2802              CMP      r0,#2
00067c  d00c              BEQ      |L17.1688|
;;;260                                        {
;;;261                                            Work_paraBack.Channel[2]=Trans_open.Channel[2];//Respond_Cmd3.channel;//赋值信道
00067e  48ad              LDR      r0,|L17.2356|
000680  7901              LDRB     r1,[r0,#4]
000682  489e              LDR      r0,|L17.2300|
000684  7141              STRB     r1,[r0,#5]
;;;262                                            memcpy((uint8_t *)(Work_paraBack.Freq)+8,(uint8_t*)(Trans_open.Freq)+8,4);//赋值频率
000686  49ab              LDR      r1,|L17.2356|
000688  f8d1100d          LDR      r1,[r1,#0xd]
00068c  f8c0100e          STR      r1,[r0,#0xe]
;;;263                                            Work_paraBack.Power_grade[2]=Trans_open.Power_grade[2];//功率等级
000690  48a8              LDR      r0,|L17.2356|
000692  7cc1              LDRB     r1,[r0,#0x13]
000694  4899              LDR      r0,|L17.2300|
000696  7501              STRB     r1,[r0,#0x14]
                  |L17.1688|
;;;264                                            //App_printf("Respond_Cmd3.power_level=%02x\r\n",Respond_Cmd3.power_level);
;;;265                                        }
;;;266                                    }
;;;267                                    //电流显示
;;;268                                    if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
000698  48a5              LDR      r0,|L17.2352|
00069a  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
00069c  900b              STR      r0,[sp,#0x2c]
00069e  f7fffffe          BL       __aeabi_f2d
0006a2  2200              MOVS     r2,#0
0006a4  4ba4              LDR      r3,|L17.2360|
0006a6  e9cd010c          STRD     r0,r1,[sp,#0x30]
0006aa  f7fffffe          BL       __aeabi_cdrcmple
0006ae  d21e              BCS      |L17.1774|
;;;269                                    {
;;;270                                        Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
0006b0  489f              LDR      r0,|L17.2352|
0006b2  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
0006b4  9005              STR      r0,[sp,#0x14]
0006b6  f7fffffe          BL       __aeabi_f2d
0006ba  2200              MOVS     r2,#0
0006bc  4b9e              LDR      r3,|L17.2360|
0006be  e9cd0106          STRD     r0,r1,[sp,#0x18]
0006c2  f7fffffe          BL       __aeabi_dsub
0006c6  2200              MOVS     r2,#0
0006c8  4b9c              LDR      r3,|L17.2364|
0006ca  e9cd0108          STRD     r0,r1,[sp,#0x20]
0006ce  f7fffffe          BL       __aeabi_dmul
0006d2  2200              MOVS     r2,#0
0006d4  4b9a              LDR      r3,|L17.2368|
0006d6  e9cd010a          STRD     r0,r1,[sp,#0x28]
0006da  f7fffffe          BL       __aeabi_dadd
0006de  e9cd010c          STRD     r0,r1,[sp,#0x30]
0006e2  f7fffffe          BL       __aeabi_d2f
0006e6  4985              LDR      r1,|L17.2300|
0006e8  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
0006ec  e008              B        |L17.1792|
                  |L17.1774|
;;;271                                    }
;;;272                                    else     //小于 1.5V电流系数为40
;;;273                                    {
;;;274                                        Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
0006ee  4890              LDR      r0,|L17.2352|
0006f0  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
0006f2  4994              LDR      r1,|L17.2372|
0006f4  900d              STR      r0,[sp,#0x34]
0006f6  f7fffffe          BL       __aeabi_fmul
0006fa  4980              LDR      r1,|L17.2300|
0006fc  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L17.1792|
;;;275                                    }
;;;276                                    //电压显示
;;;277                                    Work_paraBack.Power_45_voltage[0]=Show_Parameter.M_45V*Debug_M_45V;
000700  488b              LDR      r0,|L17.2352|
000702  6880              LDR      r0,[r0,#8]  ; Show_Parameter
000704  9009              STR      r0,[sp,#0x24]
000706  f7fffffe          BL       __aeabi_f2d
00070a  4a7f              LDR      r2,|L17.2312|
00070c  4b7f              LDR      r3,|L17.2316|
00070e  e9cd010a          STRD     r0,r1,[sp,#0x28]
000712  f7fffffe          BL       __aeabi_dmul
000716  e9cd010c          STRD     r0,r1,[sp,#0x30]
00071a  f7fffffe          BL       __aeabi_d2f
00071e  4977              LDR      r1,|L17.2300|
000720  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
;;;278    
;;;279                                    App_printf("Forward_power=%f \r\n",Work_paraBack.Forward_power[0]);
000724  4608              MOV      r0,r1
000726  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
00072a  900b              STR      r0,[sp,#0x2c]
00072c  f7fffffe          BL       __aeabi_f2d
000730  4602              MOV      r2,r0
000732  460b              MOV      r3,r1
000734  e9cd010c          STRD     r0,r1,[sp,#0x30]
000738  f2af20d0          ADR      r0,|L17.1132|
00073c  f7fffffe          BL       App_printf
;;;280                                    App_printf("Reverse_power=%f \r\n",Work_paraBack.Reverse_power[0]);
000740  486e              LDR      r0,|L17.2300|
000742  f8d00019          LDR      r0,[r0,#0x19]  ; Work_paraBack
000746  900b              STR      r0,[sp,#0x2c]
000748  f7fffffe          BL       __aeabi_f2d
00074c  4602              MOV      r2,r0
00074e  460b              MOV      r3,r1
000750  e9cd010c          STRD     r0,r1,[sp,#0x30]
000754  f2af20d8          ADR      r0,|L17.1152|
000758  f7fffffe          BL       App_printf
;;;281                                    App_printf("Power_45_voltage=%f \r\n",Work_paraBack.Power_45_voltage[0]);
00075c  4867              LDR      r0,|L17.2300|
00075e  f8d00021          LDR      r0,[r0,#0x21]  ; Work_paraBack
000762  900b              STR      r0,[sp,#0x2c]
000764  f7fffffe          BL       __aeabi_f2d
000768  4602              MOV      r2,r0
00076a  460b              MOV      r3,r1
00076c  e9cd010c          STRD     r0,r1,[sp,#0x30]
000770  f2af20e0          ADR      r0,|L17.1172|
000774  f7fffffe          BL       App_printf
;;;282                                    App_printf("Power_45_intensity=%f \r\n",Work_paraBack.Power_45_intensity[0]);
000778  4860              LDR      r0,|L17.2300|
00077a  f8d0001d          LDR      r0,[r0,#0x1d]  ; Work_paraBack
00077e  900b              STR      r0,[sp,#0x2c]
000780  f7fffffe          BL       __aeabi_f2d
000784  4602              MOV      r2,r0
000786  460b              MOV      r3,r1
000788  e9cd010c          STRD     r0,r1,[sp,#0x30]
00078c  f2af20e4          ADR      r0,|L17.1196|
000790  f7fffffe          BL       App_printf
;;;283                                    App_printf("Standing_wave_ratio=%f \r\n",Show_Parameter.Standing_wave_ratio);
000794  4866              LDR      r0,|L17.2352|
000796  6900              LDR      r0,[r0,#0x10]  ; Show_Parameter
000798  900b              STR      r0,[sp,#0x2c]
00079a  f7fffffe          BL       __aeabi_f2d
00079e  4602              MOV      r2,r0
0007a0  460b              MOV      r3,r1
0007a2  e9cd010c          STRD     r0,r1,[sp,#0x30]
0007a6  f2af20e0          ADR      r0,|L17.1224|
0007aa  f7fffffe          BL       App_printf
0007ae  e042              B        |L17.2102|
                  |L17.1968|
;;;284                                }
;;;285                            }
;;;286    
;;;287                        }
;;;288                    }
;;;289                    else     //没有初始化
;;;290                    {
;;;291                        Work_paraBack.Trans_current_state[0]=0x10;//没有经过初始化
0007b0  2010              MOVS     r0,#0x10
0007b2  4952              LDR      r1,|L17.2300|
0007b4  7048              STRB     r0,[r1,#1]
;;;292                        memset(Work_paraBack.Channel,0,3);//信道清零
0007b6  4608              MOV      r0,r1
0007b8  2100              MOVS     r1,#0
0007ba  f8a01003          STRH     r1,[r0,#3]
0007be  7141              STRB     r1,[r0,#5]
;;;293                        memset(Work_paraBack.Freq,0,12);//频率清零
0007c0  1d80              ADDS     r0,r0,#6
0007c2  6001              STR      r1,[r0,#0]  ; Work_paraBack
0007c4  6041              STR      r1,[r0,#4]  ; Work_paraBack
0007c6  6081              STR      r1,[r0,#8]  ; Work_paraBack
;;;294                        memset(Work_paraBack.Power_grade,0,3);//功率等级清零
0007c8  1f80              SUBS     r0,r0,#6
0007ca  8241              STRH     r1,[r0,#0x12]
0007cc  7501              STRB     r1,[r0,#0x14]
;;;295                        Work_paraBack.Type[0]=0;//工作种类清零
0007ce  2000              MOVS     r0,#0
0007d0  494a              LDR      r1,|L17.2300|
0007d2  7088              STRB     r0,[r1,#2]
;;;296                        Work_paraBack.Forward_power[0]=0;
0007d4  f8c10015          STR      r0,[r1,#0x15]  ; Work_paraBack
;;;297                        Work_paraBack.Reverse_power[0]=0;
0007d8  f8c10019          STR      r0,[r1,#0x19]  ; Work_paraBack
;;;298                        Work_paraBack.Power_45_intensity[0]=0;
0007dc  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
;;;299                        //电压显示
;;;300                        Work_paraBack.Power_45_voltage[0]=(float) ADC_ConvertedValue[2]/4096*3.3*2*Debug_M_45V;
0007e0  4847              LDR      r0,|L17.2304|
0007e2  8880              LDRH     r0,[r0,#4]  ; ADC_ConvertedValue
0007e4  9003              STR      r0,[sp,#0xc]
0007e6  f7fffffe          BL       __aeabi_ui2f
0007ea  f04f418b          MOV      r1,#0x45800000
0007ee  9004              STR      r0,[sp,#0x10]
0007f0  f7fffffe          BL       __aeabi_fdiv
0007f4  9005              STR      r0,[sp,#0x14]
0007f6  f7fffffe          BL       __aeabi_f2d
0007fa  f04f3266          MOV      r2,#0x66666666
0007fe  4b41              LDR      r3,|L17.2308|
000800  e9cd0106          STRD     r0,r1,[sp,#0x18]
000804  f7fffffe          BL       __aeabi_dmul
000808  2200              MOVS     r2,#0
00080a  f04f4380          MOV      r3,#0x40000000
00080e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000812  f7fffffe          BL       __aeabi_dmul
000816  4a3c              LDR      r2,|L17.2312|
000818  4b3c              LDR      r3,|L17.2316|
00081a  e9cd010a          STRD     r0,r1,[sp,#0x28]
00081e  f7fffffe          BL       __aeabi_dmul
000822  e9cd010c          STRD     r0,r1,[sp,#0x30]
000826  f7fffffe          BL       __aeabi_d2f
00082a  4934              LDR      r1,|L17.2300|
00082c  f8c10021          STR      r0,[r1,#0x21]  ; Work_paraBack
;;;301                        Work_paraBack.Hist_alarm[0]=0;//没有发射
000830  2000              MOVS     r0,#0
000832  f881002d          STRB     r0,[r1,#0x2d]
                  |L17.2102|
;;;302                    }
;;;303                    //需要触发send to pc线程
;;;304                    xTaskNotify(xHandleTaskSendToPC, /* 目标任务 */
000836  2300              MOVS     r3,#0
000838  2201              MOVS     r2,#1
00083a  4611              MOV      r1,r2
00083c  4842              LDR      r0,|L17.2376|
00083e  6800              LDR      r0,[r0,#0]  ; xHandleTaskSendToPC
000840  f7fffffe          BL       xTaskGenericNotify
                  |L17.2116|
000844  e1d2              B        |L17.3052|
                  |L17.2118|
;;;305                                BIT_0, /* 设置目标任务事件标志位 bit0 */
;;;306                                eSetBits); /* 将目标任务的事件标志位与 BIT_0 进行或操作，将结果赋值给事件标志位。*/
;;;307                }
;;;308                else if((ulValue & BIT_1) != 0)		//查询
000846  9811              LDR      r0,[sp,#0x44]
000848  f0000002          AND      r0,r0,#2
00084c  2800              CMP      r0,#0
00084e  d046              BEQ      |L17.2270|
;;;309                {
;;;310                    /*挂起main函数中的ADC采集*/
;;;311                    if(xHandleTaskUserIF!=NULL)
000850  483e              LDR      r0,|L17.2380|
000852  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
000854  b130              CBZ      r0,|L17.2148|
;;;312                    {
;;;313                        vTaskSuspend(xHandleTaskUserIF);
000856  483d              LDR      r0,|L17.2380|
000858  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
00085a  f7fffffe          BL       vTaskSuspend
;;;314                        App_printf("stop task Suspend main->ADC task!!!\r\n");
00085e  a03c              ADR      r0,|L17.2384|
000860  f7fffffe          BL       App_printf
                  |L17.2148|
;;;315                    }
;;;316                    //停止发送,在停止的时候，再发送停止指令，也可以响应
;;;317                    Trans_stopBack.Transmitte_id[0]=CAN_ID;
000864  4844              LDR      r0,|L17.2424|
000866  7800              LDRB     r0,[r0,#0]  ; CAN_ID
000868  4944              LDR      r1,|L17.2428|
00086a  7008              STRB     r0,[r1,#0]
;;;318                    Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
00086c  21ce              MOVS     r1,#0xce
00086e  4844              LDR      r0,|L17.2432|
000870  f7fffffe          BL       Pre_EmissionSend
;;;319                    ret=run_command(xTicksToWait);
000874  f44f70fa          MOV      r0,#0x1f4
000878  f7fffffe          BL       run_command
00087c  900e              STR      r0,[sp,#0x38]
;;;320                    if(ret==1)   //成功查询了，才继续下面的，否则就是报警状态
00087e  980e              LDR      r0,[sp,#0x38]
000880  2801              CMP      r0,#1
000882  d11e              BNE      |L17.2242|
;;;321                    {
;;;322                        if(Respond_Cmd.status==0x00)   //如果是停止状态
000884  483f              LDR      r0,|L17.2436|
000886  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
000888  b930              CBNZ     r0,|L17.2200|
;;;323                        {
;;;324                            Trans_stopBack.Trans_state[0]=0xFC;//已经是停止状态
00088a  20fc              MOVS     r0,#0xfc
00088c  493b              LDR      r1,|L17.2428|
00088e  7048              STRB     r0,[r1,#1]
;;;325                            Sys_State.Emis_working=0;
000890  2000              MOVS     r0,#0
000892  4919              LDR      r1,|L17.2296|
000894  7188              STRB     r0,[r1,#6]
000896  e01e              B        |L17.2262|
                  |L17.2200|
;;;326                        }
;;;327                        else     //如果不是停止状态，发射停止指令
;;;328                        {
;;;329                            Pre_EmissionSend(&EmissionCmd,STOP);
000898  2118              MOVS     r1,#0x18
00089a  4839              LDR      r0,|L17.2432|
00089c  f7fffffe          BL       Pre_EmissionSend
;;;330                            if(run_command(xTicksToWait)==1)   //停止成功
0008a0  f44f70fa          MOV      r0,#0x1f4
0008a4  f7fffffe          BL       run_command
0008a8  2801              CMP      r0,#1
0008aa  d106              BNE      |L17.2234|
;;;331                            {
;;;332                                Trans_stopBack.Trans_state[0]=0xFE;
0008ac  20fe              MOVS     r0,#0xfe
0008ae  4933              LDR      r1,|L17.2428|
0008b0  7048              STRB     r0,[r1,#1]
;;;333                                Sys_State.Emis_working=0;
0008b2  2000              MOVS     r0,#0
0008b4  4910              LDR      r1,|L17.2296|
0008b6  7188              STRB     r0,[r1,#6]
0008b8  e00d              B        |L17.2262|
                  |L17.2234|
;;;334                            }
;;;335                            else     //不成功，返回停止失败，且处于报警状态
;;;336                            {
;;;337                                Trans_stopBack.Trans_state[0]=0x02;//停止失败
0008ba  2002              MOVS     r0,#2
0008bc  492f              LDR      r1,|L17.2428|
0008be  7048              STRB     r0,[r1,#1]
0008c0  e009              B        |L17.2262|
                  |L17.2242|
;;;338                            }
;;;339                        }
;;;340                    }
;;;341                    else if(ret==2)     //发射机报警
0008c2  980e              LDR      r0,[sp,#0x38]
0008c4  2802              CMP      r0,#2
0008c6  d103              BNE      |L17.2256|
;;;342                    {
;;;343                        Trans_stopBack.Trans_state[0]=0xFC;//有发射机报警时停止发射的
0008c8  20fc              MOVS     r0,#0xfc
0008ca  492c              LDR      r1,|L17.2428|
0008cc  7048              STRB     r0,[r1,#1]
0008ce  e002              B        |L17.2262|
                  |L17.2256|
;;;344                    }
;;;345                    else     //连查询都不成功，返回停止失败，且处于报警状态
;;;346                    {
;;;347                        Trans_stopBack.Trans_state[0]=0x02;//PC下发的信道停止失败
0008d0  2002              MOVS     r0,#2
0008d2  492a              LDR      r1,|L17.2428|
0008d4  7048              STRB     r0,[r1,#1]
                  |L17.2262|
;;;348                    }
;;;349                    if(xHandleTaskUserIF!=NULL)
0008d6  481d              LDR      r0,|L17.2380|
0008d8  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
0008da  b108              CBZ      r0,|L17.2272|
;;;350                    {
;;;351                        App_printf("stop task Resume main->ADC task!!!\r\n");
0008dc  e054              B        |L17.2440|
                  |L17.2270|
0008de  e062              B        |L17.2470|
                  |L17.2272|
0008e0  e059              B        |L17.2454|
0008e2  0000              DCW      0x0000
                  |L17.2276|
0008e4  77616974          DCB      "waiting state...\r\n",0
0008e8  696e6720
0008ec  73746174
0008f0  652e2e2e
0008f4  0d0a00  
0008f7  00                DCB      0
                  |L17.2296|
                          DCD      Sys_State
                  |L17.2300|
                          DCD      Work_paraBack
                  |L17.2304|
                          DCD      ADC_ConvertedValue
                  |L17.2308|
                          DCD      0x400a6666
                  |L17.2312|
                          DCD      0x0ce8560d
                  |L17.2316|
                          DCD      0x4022e856
                  |L17.2320|
000910  4e4f322e          DCB      "NO2.current state is alarm!\r\n",0
000914  63757272
000918  656e7420
00091c  73746174
000920  65206973
000924  20616c61
000928  726d210d
00092c  0a00    
00092e  00                DCB      0
00092f  00                DCB      0
                  |L17.2352|
                          DCD      Show_Parameter
                  |L17.2356|
                          DCD      Trans_open
                  |L17.2360|
                          DCD      0x3ff80000
                  |L17.2364|
                          DCD      0x4042c000
                  |L17.2368|
                          DCD      0x404e0000
                  |L17.2372|
                          DCD      0x42200000
                  |L17.2376|
                          DCD      xHandleTaskSendToPC
                  |L17.2380|
                          DCD      xHandleTaskUserIF
                  |L17.2384|
000950  73746f70          DCB      "stop task Suspend main->ADC task!!!\r\n",0
000954  20746173
000958  6b205375
00095c  7370656e
000960  64206d61
000964  696e2d3e
000968  41444320
00096c  7461736b
000970  2121210d
000974  0a00    
000976  00                DCB      0
000977  00                DCB      0
                  |L17.2424|
                          DCD      CAN_ID
                  |L17.2428|
                          DCD      Trans_stopBack
                  |L17.2432|
                          DCD      EmissionCmd
                  |L17.2436|
                          DCD      Respond_Cmd
                  |L17.2440|
000988  a0f5              ADR      r0,|L17.3424|
00098a  f7fffffe          BL       App_printf
;;;352                        vTaskResume(xHandleTaskUserIF);
00098e  48fe              LDR      r0,|L17.3464|
000990  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
000992  f7fffffe          BL       vTaskResume
                  |L17.2454|
;;;353                    }
;;;354                    //然后触发send to PC的查询回包
;;;355                    xTaskNotify(xHandleTaskSendToPC, /* 目标任务 */
000996  2300              MOVS     r3,#0
000998  2201              MOVS     r2,#1
00099a  2102              MOVS     r1,#2
00099c  48fb              LDR      r0,|L17.3468|
00099e  6800              LDR      r0,[r0,#0]  ; xHandleTaskSendToPC
0009a0  f7fffffe          BL       xTaskGenericNotify
                  |L17.2468|
0009a4  e74e              B        |L17.2116|
                  |L17.2470|
;;;356                                BIT_1, /* 设置目标任务事件标志位 bit1 */
;;;357                                eSetBits); /* 将目标任务的事件标志位与 BIT_1 进行或操作，将结果赋值给事件标志位。*/
;;;358                }
;;;359    
;;;360                else 	if((ulValue & BIT_2) != 0)	//保留
0009a6  9811              LDR      r0,[sp,#0x44]
0009a8  f0000004          AND      r0,r0,#4
0009ac  2800              CMP      r0,#0
0009ae  d1f9              BNE      |L17.2468|
;;;361                {
;;;362    //						//解除报警
;;;363    //						Sys_State.alarm=0;//先用这种清零，之后会写成一个函数
;;;364    //						App_printf("//解除报警\r\n");
;;;365                }
;;;366                else 	if((ulValue & BIT_3) != 0)	//发射
0009b0  9811              LDR      r0,[sp,#0x44]
0009b2  f0000008          AND      r0,r0,#8
0009b6  b348              CBZ      r0,|L17.2572|
;;;367                {
;;;368                    App_printf("Emis//执行操作\r\n");
0009b8  a0f5              ADR      r0,|L17.3472|
0009ba  f7fffffe          BL       App_printf
;;;369    				
;;;370    #if	NEW_PROTOCOL_EN	//新机器协议
;;;371    				MT2000_Cmd_Channel();			//设置信道、工作模式、工作方式、频率、跳频时间
0009be  f7fffffe          BL       MT2000_Cmd_Channel
;;;372    				ret = MT2000_Wait_Ack();
0009c2  f7fffffe          BL       MT2000_Wait_Ack
0009c6  900e              STR      r0,[sp,#0x38]
;;;373    				if( ret == 1 )
0009c8  980e              LDR      r0,[sp,#0x38]
0009ca  2801              CMP      r0,#1
0009cc  d11a              BNE      |L17.2564|
;;;374    				{
;;;375    					MT2000_Cmd_Tune();			//调谐
0009ce  f7fffffe          BL       MT2000_Cmd_Tune
;;;376    					for(i=0; i<10; i++)
0009d2  2000              MOVS     r0,#0
0009d4  900f              STR      r0,[sp,#0x3c]
0009d6  e00a              B        |L17.2542|
                  |L17.2520|
;;;377    					{
;;;378    						vTaskDelay(500);
0009d8  f44f70fa          MOV      r0,#0x1f4
0009dc  f7fffffe          BL       vTaskDelay
;;;379    						ret = MT2000_Wait_Ack();
0009e0  f7fffffe          BL       MT2000_Wait_Ack
0009e4  900e              STR      r0,[sp,#0x38]
0009e6  980f              LDR      r0,[sp,#0x3c]         ;376
0009e8  1c40              ADDS     r0,r0,#1              ;376
0009ea  b2c0              UXTB     r0,r0                 ;376
0009ec  900f              STR      r0,[sp,#0x3c]         ;376
                  |L17.2542|
0009ee  980f              LDR      r0,[sp,#0x3c]         ;376
0009f0  280a              CMP      r0,#0xa               ;376
0009f2  dbf1              BLT      |L17.2520|
;;;380    					}
;;;381    					
;;;382    					if( ret == 1 )
0009f4  980e              LDR      r0,[sp,#0x38]
0009f6  2801              CMP      r0,#1
0009f8  d104              BNE      |L17.2564|
;;;383    					{
;;;384    						MT2000_Cmd_Emit();		//发射
0009fa  f7fffffe          BL       MT2000_Cmd_Emit
;;;385    						ret = MT2000_Wait_Ack();
0009fe  f7fffffe          BL       MT2000_Wait_Ack
000a02  900e              STR      r0,[sp,#0x38]
                  |L17.2564|
;;;386    					}
;;;387    				}
;;;388    #else
;;;389                    Pre_EmissionSend(&EmissionCmd,CHANNEL,1);//调用信道
;;;390                    if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;391                    {
;;;392                        //	App_printf("Respond_Cmd.species=%d\r\n",Respond_Cmd.species);
;;;393                        if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
;;;394                        {
;;;395                            Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
;;;396                            if(run_command(xTicksToWait)!=1)   //失败，goto finish
;;;397                            {
;;;398                                goto finish;
;;;399                            }
;;;400                        }
;;;401    					
;;;402                        //调用信道成功才执行下面的:
;;;403                        Pre_EmissionSend(&EmissionCmd,FREQUENCY,1);//固频设置频率
;;;404                        if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;405                        {
;;;406                            if(Trans_open.Power_grade[0]==0x02)   //四分之一功率
;;;407                            {
;;;408                                Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,4);//先设置功率等级为四分之一
;;;409                            }
;;;410                            else if(Trans_open.Power_grade[0]==0x00)     //全功率
;;;411                            {
;;;412                                Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,1);//先设置功率等级为全功率
;;;413                            }
;;;414                            //else if(Trans_open.Power_grade[0]==0x01)//二分之一功率
;;;415                            else   //预防解析问题，当不是四分之一也不是全功率的时候就给二分之一
;;;416                            {
;;;417                                Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为二分之一
;;;418                            }
;;;419                            if(run_command(xTicksToWait)==1)
;;;420                            {
;;;421                                Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
;;;422                                if(run_command(xTicksToWait*14)==1)   //调谐给7s
;;;423                                {
;;;424                                    Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
;;;425                                    if(run_command(xTicksToWait)!=1)
;;;426                                    {
;;;427                                        goto finish;
;;;428                                    }
;;;429                                    else
;;;430                                    {
;;;431                                        Sys_State.Emis_working=1;//系统处于发射状态
;;;432                                    }
;;;433                                    if(Trans_open.Type[0]!=0x01)   //不是固频
;;;434                                    {
;;;435                                        Sys_State.Emis_working=0;//系统处于发射状态清零
;;;436                                        vTaskDelay(500);
;;;437                                        Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
;;;438                                        if(run_command(xTicksToWait)==1)   //如果停止成功，执行第二个信道
;;;439                                        {
;;;440                                            Pre_EmissionSend(&EmissionCmd,CHANNEL,2);//调用信道2
;;;441                                            if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;442                                            {
;;;443                                                if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
;;;444                                                {
;;;445                                                    Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
;;;446                                                    if(run_command(xTicksToWait)!=1)   //失败，goto finish
;;;447                                                    {
;;;448                                                        goto finish;
;;;449                                                    }
;;;450                                                }
;;;451                                                Pre_EmissionSend(&EmissionCmd,FREQUENCY,2);//双频设置频率
;;;452                                                if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;453                                                {
;;;454                                                    if(Trans_open.Power_grade[1]==0x02)   //四分之一功率
;;;455                                                    {
;;;456                                                        Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,4);//先设置功率等级为四分之一
;;;457                                                    }
;;;458                                                    else if(Trans_open.Power_grade[1]==0x00)     //全功率
;;;459                                                    {
;;;460                                                        Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,1);//先设置功率等级为全功率
;;;461                                                    }
;;;462                                                    //else if(Trans_open.Power_grade[0]==0x01)//二分之一功率
;;;463                                                    else   //预防解析问题，当不是四分之一也不是全功率的时候就给二分之一
;;;464                                                    {
;;;465                                                        Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为二分之一
;;;466                                                    }
;;;467                                                    if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;468                                                    {
;;;469                                                        Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
;;;470                                                        if(run_command(xTicksToWait*14)==1)   //调谐给7s
;;;471                                                        {
;;;472                                                            Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
;;;473                                                            if(run_command(xTicksToWait)==1)
;;;474                                                            {
;;;475                                                                vTaskDelay(500);
;;;476                                                                Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
;;;477                                                                if(run_command(xTicksToWait)==1)
;;;478                                                                {
;;;479                                                                    if(Trans_open.Type[0]==0x02)   //是双频
;;;480                                                                    {
;;;481                                                                        Pre_EmissionSend(&EmissionCmd,MODE,2);//开启双频
;;;482                                                                        if(run_command(xTicksToWait)==1)   //如果开启成功
;;;483                                                                        {
;;;484                                                                            Pre_EmissionSend(&EmissionCmd,EMISSION);//发射双频
;;;485                                                                            if(run_command(xTicksToWait)!=1)
;;;486                                                                            {
;;;487                                                                                goto finish;
;;;488                                                                            }
;;;489                                                                            else
;;;490                                                                            {
;;;491                                                                                Sys_State.Emis_working=1;//系统正在发射
;;;492                                                                            }
;;;493                                                                        }
;;;494                                                                    }
;;;495                                                                    else if(Trans_open.Type[0]==0x03)     //是三频
;;;496                                                                    {
;;;497                                                                        Pre_EmissionSend(&EmissionCmd,CHANNEL,3);//调用信道3
;;;498                                                                        if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;499                                                                        {
;;;500                                                                            if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
;;;501                                                                            {
;;;502                                                                                Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
;;;503                                                                                if(run_command(xTicksToWait)!=1)   //失败，goto finish
;;;504                                                                                {
;;;505                                                                                    goto finish;
;;;506                                                                                }
;;;507                                                                            }
;;;508                                                                            //调用信道成功才执行下面的:
;;;509                                                                            Pre_EmissionSend(&EmissionCmd,FREQUENCY,3);//三频设置频率
;;;510                                                                            if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;511                                                                            {
;;;512                                                                                if(Trans_open.Power_grade[2]==0x02)   //四分之一功率
;;;513                                                                                {
;;;514                                                                                    Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,4);//先设置功率等级为四分之一
;;;515                                                                                }
;;;516                                                                                else if(Trans_open.Power_grade[2]==0x01)     //二分之一功率
;;;517                                                                                {
;;;518                                                                                    Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为四分之一
;;;519                                                                                }
;;;520                                                                                else if(Trans_open.Power_grade[2]==0x00)     //全功率
;;;521                                                                                {
;;;522                                                                                    Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,1);//先设置功率等级为四分之一
;;;523                                                                                }
;;;524                                                                                if(run_command(xTicksToWait)==1)
;;;525                                                                                {
;;;526                                                                                    Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
;;;527                                                                                    if(run_command(xTicksToWait*14)==1)   //调谐给7s
;;;528                                                                                    {
;;;529                                                                                        Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
;;;530                                                                                        if(run_command(xTicksToWait)==1)
;;;531                                                                                        {
;;;532                                                                                            vTaskDelay(500);
;;;533                                                                                            Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
;;;534                                                                                            if(run_command(xTicksToWait)==1)
;;;535                                                                                            {
;;;536                                                                                                Pre_EmissionSend(&EmissionCmd,MODE,3);//开启三频
;;;537                                                                                                if(run_command(xTicksToWait)==1)   //如果开启成功
;;;538                                                                                                {
;;;539                                                                                                    Pre_EmissionSend(&EmissionCmd,EMISSION);//发射三频
;;;540                                                                                                    if(run_command(xTicksToWait)!=1)
;;;541                                                                                                    {
;;;542                                                                                                        goto finish;
;;;543                                                                                                    }
;;;544                                                                                                    else
;;;545                                                                                                    {
;;;546                                                                                                        Sys_State.Emis_working=1;//系统正在发射
;;;547                                                                                                    }
;;;548                                                                                                }
;;;549                                                                                            }
;;;550                                                                                        }
;;;551                                                                                    }
;;;552                                                                                }
;;;553                                                                            }
;;;554                                                                        }
;;;555                                                                    }
;;;556                                                                }
;;;557                                                            }
;;;558                                                        }
;;;559                                                    }
;;;560                                                }
;;;561                                            }
;;;562                                        }
;;;563                                    }
;;;564                                }
;;;565                            }
;;;566                        }
;;;567                    }
;;;568    finish:
;;;569    #endif
;;;570                    Sys_State.FM_working=0;//正在工作标志清零，不管上面成功与否，这个压制过程宣布结束
000a04  2000              MOVS     r0,#0
000a06  49e7              LDR      r1,|L17.3492|
000a08  7148              STRB     r0,[r1,#5]
000a0a  e71b              B        |L17.2116|
                  |L17.2572|
;;;571                }
;;;572                else 	if((ulValue & BIT_4) != 0)	//发射准备判断
000a0c  9811              LDR      r0,[sp,#0x44]
000a0e  f0000010          AND      r0,r0,#0x10
000a12  b368              CBZ      r0,|L17.2672|
;;;573                {
;;;574                    App_printf("先查询一下是不是停止状态\r\n");
000a14  a0e4              ADR      r0,|L17.3496|
000a16  f7fffffe          BL       App_printf
;;;575                    Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
000a1a  21ce              MOVS     r1,#0xce
000a1c  48e9              LDR      r0,|L17.3524|
000a1e  f7fffffe          BL       Pre_EmissionSend
;;;576                    if(run_command(xTicksToWait)==1)   //内部循环了3次
000a22  f44f70fa          MOV      r0,#0x1f4
000a26  f7fffffe          BL       run_command
000a2a  2801              CMP      r0,#1
000a2c  d115              BNE      |L17.2650|
;;;577                    {
;;;578                        if(Respond_Cmd.status==0x01 || get_history_alm()==1)   //如果是工作状态或者有报警，在没有接收停止状态情况下又接收到工作指令。报错
000a2e  48e6              LDR      r0,|L17.3528|
000a30  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
000a32  2801              CMP      r0,#1
000a34  d003              BEQ      |L17.2622|
000a36  f7fffffe          BL       get_history_alm
000a3a  2801              CMP      r0,#1
000a3c  d106              BNE      |L17.2636|
                  |L17.2622|
;;;579                        {
;;;580                            App_printf("waring: working or alarm state!\r\n");
000a3e  a0e3              ADR      r0,|L17.3532|
000a40  f7fffffe          BL       App_printf
;;;581                            Trans_openBack.Trans_state[0]=0xFC;//向PC报告
000a44  20fc              MOVS     r0,#0xfc
000a46  49ea              LDR      r1,|L17.3568|
000a48  7048              STRB     r0,[r1,#1]
000a4a  e009              B        |L17.2656|
                  |L17.2636|
;;;582                        }
;;;583                        else
;;;584                        {
;;;585                            Trans_openBack.Trans_state[0]=0xFD;//表示接收到了指令，但是需要时间去调频
000a4c  20fd              MOVS     r0,#0xfd
000a4e  49e8              LDR      r1,|L17.3568|
000a50  7048              STRB     r0,[r1,#1]
;;;586                            Sys_State.Emis_readay=1;//发射准备	标志
000a52  2001              MOVS     r0,#1
000a54  49d3              LDR      r1,|L17.3492|
000a56  71c8              STRB     r0,[r1,#7]
000a58  e002              B        |L17.2656|
                  |L17.2650|
;;;587                        }
;;;588                    }
;;;589                    else
;;;590                    {
;;;591                        Trans_openBack.Trans_state[0]=0xFC;//向PC报警
000a5a  20fc              MOVS     r0,#0xfc
000a5c  49e4              LDR      r1,|L17.3568|
000a5e  7048              STRB     r0,[r1,#1]
                  |L17.2656|
;;;592                    }
;;;593                    App_printf("Emiss:恢复ToPC线程\r\n");
000a60  a0e4              ADR      r0,|L17.3572|
000a62  f7fffffe          BL       App_printf
;;;594                    vTaskResume(xHandleTaskSendToPC);
000a66  48c9              LDR      r0,|L17.3468|
000a68  6800              LDR      r0,[r0,#0]  ; xHandleTaskSendToPC
000a6a  f7fffffe          BL       vTaskResume
000a6e  e3d6              B        |L17.4638|
                  |L17.2672|
;;;595                }
;;;596                else 	if((ulValue & BIT_5) != 0)	//扫频
000a70  9811              LDR      r0,[sp,#0x44]
000a72  f0000020          AND      r0,r0,#0x20
000a76  2800              CMP      r0,#0
000a78  d06f              BEQ      |L17.2906|
;;;597                {
;;;598                    /*挂起main函数中的ADC采集*/
;;;599                    if(xHandleTaskUserIF!=NULL)
000a7a  48c3              LDR      r0,|L17.3464|
000a7c  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
000a7e  b130              CBZ      r0,|L17.2702|
;;;600                    {
;;;601                        vTaskSuspend(xHandleTaskUserIF);
000a80  48c1              LDR      r0,|L17.3464|
000a82  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
000a84  f7fffffe          BL       vTaskSuspend
;;;602                        App_printf("Band_scan task Suspend main->ADC task!!!\r\n");
000a88  a0e0              ADR      r0,|L17.3596|
000a8a  f7fffffe          BL       App_printf
                  |L17.2702|
;;;603                    }
;;;604                    App_printf("Band scaning...\r\n");
000a8e  a0ea              ADR      r0,|L17.3640|
000a90  f7fffffe          BL       App_printf
;;;605                    for(int i=0; i<10&&Sys_State.Cancel_Sweeping!=1; i++)
000a94  2000              MOVS     r0,#0
000a96  900d              STR      r0,[sp,#0x34]
000a98  e077              B        |L17.2954|
                  |L17.2714|
;;;606                    {
;;;607                        switch(i)
000a9a  980d              LDR      r0,[sp,#0x34]
000a9c  280a              CMP      r0,#0xa
000a9e  d24c              BCS      |L17.2874|
000aa0  e8dff000          TBB      [pc,r0]
000aa4  050c131a          DCB      0x05,0x0c,0x13,0x1a
000aa8  21282f36          DCB      0x21,0x28,0x2f,0x36
000aac  3d44              DCB      0x3d,0x44
;;;608                        {
;;;609                        case 0:
;;;610                        {
;;;611                            begain=5;
000aae  48e7              LDR      r0,|L17.3660|
000ab0  49e7              LDR      r1,|L17.3664|
000ab2  6008              STR      r0,[r1,#0]  ; begain
;;;612                            end=26;
000ab4  49e7              LDR      r1,|L17.3668|
000ab6  48e8              LDR      r0,|L17.3672|
000ab8  6001              STR      r1,[r0,#0]  ; end
;;;613                            break;
000aba  e03e              B        |L17.2874|
;;;614                        }
;;;615                        case 1:
;;;616                        {
;;;617                            begain=5.1;
000abc  48e7              LDR      r0,|L17.3676|
000abe  49e4              LDR      r1,|L17.3664|
000ac0  6008              STR      r0,[r1,#0]  ; begain
;;;618                            end=26.1;
000ac2  49e7              LDR      r1,|L17.3680|
000ac4  48e4              LDR      r0,|L17.3672|
000ac6  6001              STR      r1,[r0,#0]  ; end
;;;619                            break;
000ac8  e037              B        |L17.2874|
;;;620                        }
;;;621                        case 2:
;;;622                        {
;;;623                            begain=5.2;
000aca  48e6              LDR      r0,|L17.3684|
000acc  49e0              LDR      r1,|L17.3664|
000ace  6008              STR      r0,[r1,#0]  ; begain
;;;624                            end=25.2;
000ad0  49e5              LDR      r1,|L17.3688|
000ad2  48e1              LDR      r0,|L17.3672|
000ad4  6001              STR      r1,[r0,#0]  ; end
;;;625                            break;
000ad6  e030              B        |L17.2874|
;;;626                        }
;;;627                        case 3:
;;;628                        {
;;;629                            begain=5.3;
000ad8  49e4              LDR      r1,|L17.3692|
000ada  48dd              LDR      r0,|L17.3664|
000adc  6001              STR      r1,[r0,#0]  ; begain
;;;630                            end=25.3;
000ade  48e4              LDR      r0,|L17.3696|
000ae0  49dd              LDR      r1,|L17.3672|
000ae2  6008              STR      r0,[r1,#0]  ; end
;;;631                            break;
000ae4  e029              B        |L17.2874|
;;;632                        }
;;;633                        case 4:
;;;634                        {
;;;635                            begain=5.4;
000ae6  48e3              LDR      r0,|L17.3700|
000ae8  49d9              LDR      r1,|L17.3664|
000aea  6008              STR      r0,[r1,#0]  ; begain
;;;636                            end=25.4;
000aec  48e2              LDR      r0,|L17.3704|
000aee  49da              LDR      r1,|L17.3672|
000af0  6008              STR      r0,[r1,#0]  ; end
;;;637                            break;
000af2  e022              B        |L17.2874|
;;;638                        }
;;;639                        case 5:
;;;640                        {
;;;641                            begain=5.5;
000af4  48e1              LDR      r0,|L17.3708|
000af6  49d6              LDR      r1,|L17.3664|
000af8  6008              STR      r0,[r1,#0]  ; begain
;;;642                            end=25.5;
000afa  48e1              LDR      r0,|L17.3712|
000afc  49d6              LDR      r1,|L17.3672|
000afe  6008              STR      r0,[r1,#0]  ; end
;;;643                            break;
000b00  e01b              B        |L17.2874|
;;;644                        }
;;;645                        case 6:
;;;646                        {
;;;647                            begain=5.6;
000b02  48e0              LDR      r0,|L17.3716|
000b04  49d2              LDR      r1,|L17.3664|
000b06  6008              STR      r0,[r1,#0]  ; begain
;;;648                            end=25.6;
000b08  48df              LDR      r0,|L17.3720|
000b0a  49d3              LDR      r1,|L17.3672|
000b0c  6008              STR      r0,[r1,#0]  ; end
;;;649                            break;
000b0e  e014              B        |L17.2874|
;;;650                        }
;;;651                        case 7:
;;;652                        {
;;;653                            begain=5.7;
000b10  49de              LDR      r1,|L17.3724|
000b12  48cf              LDR      r0,|L17.3664|
000b14  6001              STR      r1,[r0,#0]  ; begain
;;;654                            end=25.7;
000b16  48de              LDR      r0,|L17.3728|
000b18  49cf              LDR      r1,|L17.3672|
000b1a  6008              STR      r0,[r1,#0]  ; end
;;;655                            break;
000b1c  e00d              B        |L17.2874|
;;;656                        }
;;;657                        case 8:
;;;658                        {
;;;659                            begain=5.8;
000b1e  48dd              LDR      r0,|L17.3732|
000b20  49cb              LDR      r1,|L17.3664|
000b22  6008              STR      r0,[r1,#0]  ; begain
;;;660                            end=25.8;
000b24  48dc              LDR      r0,|L17.3736|
000b26  49cc              LDR      r1,|L17.3672|
000b28  6008              STR      r0,[r1,#0]  ; end
;;;661                            break;
000b2a  e006              B        |L17.2874|
;;;662                        }
;;;663                        case 9:
;;;664                        {
;;;665                            begain=5.9;
000b2c  48db              LDR      r0,|L17.3740|
000b2e  49c8              LDR      r1,|L17.3664|
000b30  6008              STR      r0,[r1,#0]  ; begain
;;;666                            end=25.9;
000b32  49db              LDR      r1,|L17.3744|
000b34  48c8              LDR      r0,|L17.3672|
000b36  6001              STR      r1,[r0,#0]  ; end
;;;667                            break;
000b38  bf00              NOP      
                  |L17.2874|
000b3a  bf00              NOP                            ;613
;;;668                        }
;;;669                        }
;;;670                        Band_scan(xTicksToWait,i);
000b3c  f44f70fa          MOV      r0,#0x1f4
000b40  990d              LDR      r1,[sp,#0x34]
000b42  f7fffffe          BL       Band_scan
;;;671                        if(get_history_alm()==1)
000b46  f7fffffe          BL       get_history_alm
000b4a  2801              CMP      r0,#1
000b4c  d100              BNE      |L17.2896|
;;;672                        {
;;;673                            break;
000b4e  e023              B        |L17.2968|
                  |L17.2896|
;;;674                        }
;;;675    //							if(i==1)
;;;676    //							{
;;;677    //								Sys_State.Cancel_Sweeping=1;//测试
;;;678    //								break;
;;;679    //							}
;;;680                        if(Sys_State.Cancel_Sweeping==1)
000b50  4894              LDR      r0,|L17.3492|
000b52  7b00              LDRB     r0,[r0,#0xc]  ; Sys_State
000b54  2801              CMP      r0,#1
000b56  d101              BNE      |L17.2908|
;;;681                        {
;;;682                            break;
000b58  e01e              B        |L17.2968|
                  |L17.2906|
000b5a  e048              B        |L17.3054|
                  |L17.2908|
;;;683                        }
;;;684                        for(unsigned int j=0; j<180&&Sys_State.Cancel_Sweeping!=1&&i!=9; j++)
000b5c  2000              MOVS     r0,#0
000b5e  900c              STR      r0,[sp,#0x30]
000b60  e006              B        |L17.2928|
                  |L17.2914|
;;;685                        {
;;;686                            vTaskDelay(1000);
000b62  f44f707a          MOV      r0,#0x3e8
000b66  f7fffffe          BL       vTaskDelay
000b6a  980c              LDR      r0,[sp,#0x30]         ;684
000b6c  1c40              ADDS     r0,r0,#1              ;684
000b6e  900c              STR      r0,[sp,#0x30]         ;684
                  |L17.2928|
000b70  980c              LDR      r0,[sp,#0x30]         ;684
000b72  28b4              CMP      r0,#0xb4              ;684
000b74  d206              BCS      |L17.2948|
000b76  488b              LDR      r0,|L17.3492|
000b78  7b00              LDRB     r0,[r0,#0xc]          ;684  ; Sys_State
000b7a  2801              CMP      r0,#1                 ;684
000b7c  d002              BEQ      |L17.2948|
000b7e  980d              LDR      r0,[sp,#0x34]         ;684
000b80  2809              CMP      r0,#9                 ;684
000b82  d1ee              BNE      |L17.2914|
                  |L17.2948|
000b84  980d              LDR      r0,[sp,#0x34]         ;605
000b86  1c40              ADDS     r0,r0,#1              ;605
000b88  900d              STR      r0,[sp,#0x34]         ;605
                  |L17.2954|
000b8a  980d              LDR      r0,[sp,#0x34]         ;605
000b8c  280a              CMP      r0,#0xa               ;605
000b8e  da03              BGE      |L17.2968|
000b90  4884              LDR      r0,|L17.3492|
000b92  7b00              LDRB     r0,[r0,#0xc]          ;605  ; Sys_State
000b94  2801              CMP      r0,#1                 ;605
000b96  d180              BNE      |L17.2714|
                  |L17.2968|
000b98  bf00              NOP                            ;673
;;;687                        }
;;;688    
;;;689                    }
;;;690                    if(Sys_State.Cancel_Sweeping==1)   //如果上面的Band_scan是由于取消扫频退出的
000b9a  4882              LDR      r0,|L17.3492|
000b9c  7b00              LDRB     r0,[r0,#0xc]  ; Sys_State
000b9e  2801              CMP      r0,#1
000ba0  d119              BNE      |L17.3030|
;;;691                    {
;;;692                        if(Sys_State.Sweeping!=0)   //上面的扫频由于强制停止中止了，需要将发射机先停止以保障安全
000ba2  4880              LDR      r0,|L17.3492|
000ba4  7a80              LDRB     r0,[r0,#0xa]  ; Sys_State
000ba6  b180              CBZ      r0,|L17.3018|
;;;693                        {
;;;694                            Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
000ba8  2118              MOVS     r1,#0x18
000baa  4886              LDR      r0,|L17.3524|
000bac  f7fffffe          BL       Pre_EmissionSend
;;;695                            if(run_command(xTicksToWait)==1)   //如果停止成功
000bb0  f44f70fa          MOV      r0,#0x1f4
000bb4  f7fffffe          BL       run_command
000bb8  2801              CMP      r0,#1
000bba  d10c              BNE      |L17.3030|
;;;696                            {
;;;697                                Sys_State.Cancel_Sweeping=0;//取消扫频标志清零
000bbc  2000              MOVS     r0,#0
000bbe  4979              LDR      r1,|L17.3492|
000bc0  7308              STRB     r0,[r1,#0xc]
;;;698                                clean_sweeping=1;
000bc2  2001              MOVS     r0,#1
000bc4  49b7              LDR      r1,|L17.3748|
000bc6  7008              STRB     r0,[r1,#0]
000bc8  e005              B        |L17.3030|
                  |L17.3018|
;;;699                            }
;;;700                        }
;;;701                        else     //已经扫频完成，清除标志
;;;702                        {
;;;703                            Sys_State.Cancel_Sweeping=0;//取消扫频标志清零
000bca  2000              MOVS     r0,#0
000bcc  4975              LDR      r1,|L17.3492|
000bce  7308              STRB     r0,[r1,#0xc]
;;;704                            clean_sweeping=1;
000bd0  2001              MOVS     r0,#1
000bd2  49b4              LDR      r1,|L17.3748|
000bd4  7008              STRB     r0,[r1,#0]
                  |L17.3030|
;;;705                        }
;;;706                    }
;;;707    //						Sys_State.Sweeping=0;//扫频结束标志清零
;;;708                    if(xHandleTaskUserIF!=NULL)
000bd6  486c              LDR      r0,|L17.3464|
000bd8  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
000bda  2800              CMP      r0,#0
000bdc  d006              BEQ      |L17.3052|
;;;709                    {
;;;710                        App_printf("Band_scan task Resume main->ADC task!!!\r\n");
000bde  a0b2              ADR      r0,|L17.3752|
000be0  f7fffffe          BL       App_printf
;;;711                        vTaskResume(xHandleTaskUserIF);
000be4  4868              LDR      r0,|L17.3464|
000be6  6800              LDR      r0,[r0,#0]  ; xHandleTaskUserIF
000be8  f7fffffe          BL       vTaskResume
                  |L17.3052|
000bec  e317              B        |L17.4638|
                  |L17.3054|
;;;712                    }
;;;713    
;;;714                }
;;;715                else 	if((ulValue & BIT_6) != 0)	//功率增加
000bee  9811              LDR      r0,[sp,#0x44]
000bf0  f0000040          AND      r0,r0,#0x40
000bf4  2800              CMP      r0,#0
000bf6  d078              BEQ      |L17.3306|
;;;716                {
;;;717                    App_printf("Gain_plus...\r\n");
000bf8  a0b6              ADR      r0,|L17.3796|
000bfa  f7fffffe          BL       App_printf
;;;718                    Sys_State.Sys_gain=1;
000bfe  2001              MOVS     r0,#1
000c00  4968              LDR      r1,|L17.3492|
000c02  7008              STRB     r0,[r1,#0]
;;;719                    //增加功率
;;;720                    if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
000c04  48b7              LDR      r0,|L17.3812|
000c06  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000c08  900b              STR      r0,[sp,#0x2c]
000c0a  f7fffffe          BL       __aeabi_f2d
000c0e  2200              MOVS     r2,#0
000c10  4bb5              LDR      r3,|L17.3816|
000c12  e9cd010c          STRD     r0,r1,[sp,#0x30]
000c16  f7fffffe          BL       __aeabi_cdrcmple
000c1a  d21e              BCS      |L17.3162|
;;;721                    {
;;;722                        Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
000c1c  48b1              LDR      r0,|L17.3812|
000c1e  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000c20  9005              STR      r0,[sp,#0x14]
000c22  f7fffffe          BL       __aeabi_f2d
000c26  2200              MOVS     r2,#0
000c28  4baf              LDR      r3,|L17.3816|
000c2a  e9cd0106          STRD     r0,r1,[sp,#0x18]
000c2e  f7fffffe          BL       __aeabi_dsub
000c32  2200              MOVS     r2,#0
000c34  4bad              LDR      r3,|L17.3820|
000c36  e9cd0108          STRD     r0,r1,[sp,#0x20]
000c3a  f7fffffe          BL       __aeabi_dmul
000c3e  2200              MOVS     r2,#0
000c40  4bab              LDR      r3,|L17.3824|
000c42  e9cd010a          STRD     r0,r1,[sp,#0x28]
000c46  f7fffffe          BL       __aeabi_dadd
000c4a  e9cd010c          STRD     r0,r1,[sp,#0x30]
000c4e  f7fffffe          BL       __aeabi_d2f
000c52  49a8              LDR      r1,|L17.3828|
000c54  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
000c58  e008              B        |L17.3180|
                  |L17.3162|
;;;723                    }
;;;724                    else     //小于 1.5V电流系数为40
;;;725                    {
;;;726                        Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
000c5a  48a2              LDR      r0,|L17.3812|
000c5c  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000c5e  49a6              LDR      r1,|L17.3832|
000c60  900d              STR      r0,[sp,#0x34]
000c62  f7fffffe          BL       __aeabi_fmul
000c66  49a3              LDR      r1,|L17.3828|
000c68  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L17.3180|
;;;727                    }
;;;728                    if(Work_paraBack.Forward_power[0]>=1800)
000c6c  48a1              LDR      r0,|L17.3828|
000c6e  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000c72  49a2              LDR      r1,|L17.3836|
000c74  900d              STR      r0,[sp,#0x34]
000c76  f7fffffe          BL       __aeabi_cfrcmple
000c7a  d802              BHI      |L17.3202|
;;;729                    {
;;;730                        Add_PowerBack.results [0]=0xFB;
000c7c  20fb              MOVS     r0,#0xfb
000c7e  49a0              LDR      r1,|L17.3840|
000c80  7048              STRB     r0,[r1,#1]
                  |L17.3202|
;;;731                    }
;;;732                    if(Work_paraBack.Forward_power[0]>=(float)Add_Power.Power_UP[0]*10.0)   //在增加中发现当前的功率大于需要增加到的功率
000c82  48a0              LDR      r0,|L17.3844|
000c84  7840              LDRB     r0,[r0,#1]  ; Add_Power
000c86  9006              STR      r0,[sp,#0x18]
000c88  f7fffffe          BL       __aeabi_ui2f
000c8c  9007              STR      r0,[sp,#0x1c]
000c8e  f7fffffe          BL       __aeabi_f2d
000c92  2200              MOVS     r2,#0
000c94  4b9c              LDR      r3,|L17.3848|
000c96  e9cd0108          STRD     r0,r1,[sp,#0x20]
000c9a  f7fffffe          BL       __aeabi_dmul
000c9e  e9cd010c          STRD     r0,r1,[sp,#0x30]
000ca2  4894              LDR      r0,|L17.3828|
000ca4  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000ca8  9009              STR      r0,[sp,#0x24]
000caa  f7fffffe          BL       __aeabi_f2d
000cae  e9cd010a          STRD     r0,r1,[sp,#0x28]
000cb2  e9dd230c          LDRD     r2,r3,[sp,#0x30]
000cb6  f7fffffe          BL       __aeabi_cdrcmple
000cba  d803              BHI      |L17.3268|
;;;733                    {
;;;734                        Add_PowerBack.results [0]=0xFB;//直接返回不能增加
000cbc  20fb              MOVS     r0,#0xfb
000cbe  4990              LDR      r1,|L17.3840|
000cc0  7048              STRB     r0,[r1,#1]
000cc2  e174              B        |L17.4014|
                  |L17.3268|
;;;735                    }
;;;736                    else if(Work_paraBack.Forward_power[0]<=1800)
000cc4  488b              LDR      r0,|L17.3828|
000cc6  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000cca  498c              LDR      r1,|L17.3836|
000ccc  900d              STR      r0,[sp,#0x34]
000cce  f7fffffe          BL       __aeabi_cfcmple
000cd2  d843              BHI      |L17.3420|
;;;737                    {
;;;738                        int Back = 0;
000cd4  2000              MOVS     r0,#0
000cd6  900d              STR      r0,[sp,#0x34]
;;;739                        float cmp_buffer = 0.0;
000cd8  900c              STR      r0,[sp,#0x30]
;;;740                        volatile uint8_t count = 0;
000cda  900b              STR      r0,[sp,#0x2c]
;;;741                        Pre_EmissionSend(&EmissionCmd,Gain_plus);//增益加指令组包给激励器的
000cdc  212b              MOVS     r1,#0x2b
000cde  4839              LDR      r0,|L17.3524|
000ce0  f7fffffe          BL       Pre_EmissionSend
;;;742                        for(int i = 0; i<50&&get_history_alm()==0&&Work_paraBack.Power_45_intensity[0]<100; i++)
000ce4  2000              MOVS     r0,#0
000ce6  900a              STR      r0,[sp,#0x28]
000ce8  e150              B        |L17.3980|
                  |L17.3306|
000cea  e164              B        |L17.4022|
                  |L17.3308|
;;;743                        {
;;;744                            cmp_buffer = Work_paraBack.Forward_power[0];//在每次发增加功率的命令之前就先保存当前的值
000cec  4881              LDR      r0,|L17.3828|
000cee  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000cf2  900c              STR      r0,[sp,#0x30]
;;;745                            Back = run_command(xTicksToWait*2);//如果加成功，返回-2发射机报警（必须要停），返回-1或是0都是激励器无响应
000cf4  f44f707a          MOV      r0,#0x3e8
000cf8  f7fffffe          BL       run_command
000cfc  900d              STR      r0,[sp,#0x34]
;;;746                            if(Back == -1 || Back == 0)   //如果返回激励器无响应，则再执行一次
000cfe  980d              LDR      r0,[sp,#0x34]
000d00  1c40              ADDS     r0,r0,#1
000d02  b108              CBZ      r0,|L17.3336|
000d04  980d              LDR      r0,[sp,#0x34]
000d06  b920              CBNZ     r0,|L17.3346|
                  |L17.3336|
;;;747                            {
;;;748                                Back = run_command(xTicksToWait);//如果加成功，返回-2发射机报警（必须要停），返回-1或是0都是激励器无响应
000d08  f44f70fa          MOV      r0,#0x1f4
000d0c  f7fffffe          BL       run_command
000d10  900d              STR      r0,[sp,#0x34]
                  |L17.3346|
;;;749                            }
;;;750                            //这里要加延时，大约200ms
;;;751                            vTaskDelay(1000);
000d12  f44f707a          MOV      r0,#0x3e8
000d16  f7fffffe          BL       vTaskDelay
;;;752                            if(fabs((float)Add_Power.Power_UP[0]*10.0 - Work_paraBack.Forward_power[0])<=30)   //加成功，且加到了预定的频率
000d1a  4876              LDR      r0,|L17.3828|
000d1c  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000d20  9003              STR      r0,[sp,#0xc]
000d22  f7fffffe          BL       __aeabi_f2d
000d26  e9cd0106          STRD     r0,r1,[sp,#0x18]
000d2a  4876              LDR      r0,|L17.3844|
000d2c  7840              LDRB     r0,[r0,#1]  ; Add_Power
000d2e  9000              STR      r0,[sp,#0]
000d30  f7fffffe          BL       __aeabi_ui2f
000d34  9001              STR      r0,[sp,#4]
000d36  f7fffffe          BL       __aeabi_f2d
000d3a  2200              MOVS     r2,#0
000d3c  4b72              LDR      r3,|L17.3848|
000d3e  e9cd0102          STRD     r0,r1,[sp,#8]
000d42  f7fffffe          BL       __aeabi_dmul
000d46  e9cd0104          STRD     r0,r1,[sp,#0x10]
000d4a  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000d4e  f7fffffe          BL       __aeabi_dsub
000d52  f0214100          BIC      r1,r1,#0x80000000
000d56  2200              MOVS     r2,#0
000d58  4b6c              LDR      r3,|L17.3852|
000d5a  e0d9              B        |L17.3856|
                  |L17.3420|
000d5c  e127              B        |L17.4014|
000d5e  0000              DCW      0x0000
                  |L17.3424|
000d60  73746f70          DCB      "stop task Resume main->ADC task!!!\r\n",0
000d64  20746173
000d68  6b205265
000d6c  73756d65
000d70  206d6169
000d74  6e2d3e41
000d78  44432074
000d7c  61736b21
000d80  21210d0a
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L17.3464|
                          DCD      xHandleTaskUserIF
                  |L17.3468|
                          DCD      xHandleTaskSendToPC
                  |L17.3472|
000d90  456d6973          DCB      "Emis//",214,180,208,208,178,217,215,247,"\r\n",0
000d94  2f2fd6b4
000d98  d0d0b2d9
000d9c  d7f70d0a
000da0  00      
000da1  00                DCB      0
000da2  00                DCB      0
000da3  00                DCB      0
                  |L17.3492|
                          DCD      Sys_State
                  |L17.3496|
000da8  cfc8b2e9          DCB      207,200,178,233,209,175,210,187,207,194,202,199,178,187,202
000dac  d1afd2bb
000db0  cfc2cac7
000db4  b2bbca  
000db7  c7cda3d6          DCB      199,205,163,214,185,215,180,204,172,"\r\n",0
000dbb  b9d7b4cc
000dbf  ac0d0a00
000dc3  00                DCB      0
                  |L17.3524|
                          DCD      EmissionCmd
                  |L17.3528|
                          DCD      Respond_Cmd
                  |L17.3532|
000dcc  77617269          DCB      "waring: working or alarm state!\r\n",0
000dd0  6e673a20
000dd4  776f726b
000dd8  696e6720
000ddc  6f722061
000de0  6c61726d
000de4  20737461
000de8  7465210d
000dec  0a00    
000dee  00                DCB      0
000def  00                DCB      0
                  |L17.3568|
                          DCD      Trans_openBack
                  |L17.3572|
000df4  456d6973          DCB      "Emiss:",187,214,184,180,"ToPC",207,223,179,204,"\r\n",0
000df8  733abbd6
000dfc  b8b4546f
000e00  5043cfdf
000e04  b3cc0d0a
000e08  00      
000e09  00                DCB      0
000e0a  00                DCB      0
000e0b  00                DCB      0
                  |L17.3596|
000e0c  42616e64          DCB      "Band_scan task Suspend main->ADC task!!!\r\n",0
000e10  5f736361
000e14  6e207461
000e18  736b2053
000e1c  75737065
000e20  6e64206d
000e24  61696e2d
000e28  3e414443
000e2c  20746173
000e30  6b212121
000e34  0d0a00  
000e37  00                DCB      0
                  |L17.3640|
000e38  42616e64          DCB      "Band scaning...\r\n",0
000e3c  20736361
000e40  6e696e67
000e44  2e2e2e0d
000e48  0a00    
000e4a  00                DCB      0
000e4b  00                DCB      0
                  |L17.3660|
                          DCD      0x40a00000
                  |L17.3664|
                          DCD      begain
                  |L17.3668|
                          DCD      0x41d00000
                  |L17.3672|
                          DCD      end
                  |L17.3676|
                          DCD      0x40a33333
                  |L17.3680|
                          DCD      0x41d0cccd
                  |L17.3684|
                          DCD      0x40a66666
                  |L17.3688|
                          DCD      0x41c9999a
                  |L17.3692|
                          DCD      0x40a9999a
                  |L17.3696|
                          DCD      0x41ca6666
                  |L17.3700|
                          DCD      0x40accccd
                  |L17.3704|
                          DCD      0x41cb3333
                  |L17.3708|
                          DCD      0x40b00000
                  |L17.3712|
                          DCD      0x41cc0000
                  |L17.3716|
                          DCD      0x40b33333
                  |L17.3720|
                          DCD      0x41cccccd
                  |L17.3724|
                          DCD      0x40b66666
                  |L17.3728|
                          DCD      0x41cd999a
                  |L17.3732|
                          DCD      0x40b9999a
                  |L17.3736|
                          DCD      0x41ce6666
                  |L17.3740|
                          DCD      0x40bccccd
                  |L17.3744|
                          DCD      0x41cf3333
                  |L17.3748|
                          DCD      clean_sweeping
                  |L17.3752|
000ea8  42616e64          DCB      "Band_scan task Resume main->ADC task!!!\r\n",0
000eac  5f736361
000eb0  6e207461
000eb4  736b2052
000eb8  6573756d
000ebc  65206d61
000ec0  696e2d3e
000ec4  41444320
000ec8  7461736b
000ecc  2121210d
000ed0  0a00    
000ed2  00                DCB      0
000ed3  00                DCB      0
                  |L17.3796|
000ed4  4761696e          DCB      "Gain_plus...\r\n",0
000ed8  5f706c75
000edc  732e2e2e
000ee0  0d0a00  
000ee3  00                DCB      0
                  |L17.3812|
                          DCD      Show_Parameter
                  |L17.3816|
                          DCD      0x3ff80000
                  |L17.3820|
                          DCD      0x4042c000
                  |L17.3824|
                          DCD      0x404e0000
                  |L17.3828|
                          DCD      Work_paraBack
                  |L17.3832|
                          DCD      0x42200000
                  |L17.3836|
                          DCD      0x44e10000
                  |L17.3840|
                          DCD      Add_PowerBack
                  |L17.3844|
                          DCD      Add_Power
                  |L17.3848|
                          DCD      0x40240000
                  |L17.3852|
                          DCD      0x403e0000
                  |L17.3856|
000f10  e9cd0108          STRD     r0,r1,[sp,#0x20]
000f14  f7fffffe          BL       __aeabi_cdcmple
000f18  d800              BHI      |L17.3868|
;;;753                            {
;;;754                                //Add_PowerBack.results [0]=0xFE;//返回增加成功
;;;755                                break;
000f1a  e046              B        |L17.4010|
                  |L17.3868|
;;;756                            }
;;;757                            if(Back != 1)   //发射机或则发射失败
000f1c  980d              LDR      r0,[sp,#0x34]
000f1e  2801              CMP      r0,#1
000f20  d000              BEQ      |L17.3876|
;;;758                            {
;;;759                                //Add_PowerBack.results [0]=0xFC;//返回增加失败
;;;760                                break;
000f22  e042              B        |L17.4010|
                  |L17.3876|
;;;761                            }
;;;762                            if(Work_paraBack.Forward_power[0]>=1800.0)   //增加之后大于了1800W
000f24  48bf              LDR      r0,|L17.4644|
000f26  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000f2a  9007              STR      r0,[sp,#0x1c]
000f2c  f7fffffe          BL       __aeabi_f2d
000f30  2200              MOVS     r2,#0
000f32  4bbd              LDR      r3,|L17.4648|
000f34  e9cd0108          STRD     r0,r1,[sp,#0x20]
000f38  f7fffffe          BL       __aeabi_cdrcmple
000f3c  d800              BHI      |L17.3904|
;;;763                            {
;;;764                                //Add_PowerBack.results [0]=0xFE;//返回增加成功
;;;765                                break;
000f3e  e034              B        |L17.4010|
                  |L17.3904|
;;;766                            }
;;;767                            else     //但是需要判断是否增加成功了
;;;768                            {
;;;769                                if(fabs(cmp_buffer-Work_paraBack.Forward_power[0])<=5)//说明增加前和增加后没有变化
000f40  48b8              LDR      r0,|L17.4644|
000f42  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
000f46  4601              MOV      r1,r0
000f48  9006              STR      r0,[sp,#0x18]
000f4a  980c              LDR      r0,[sp,#0x30]
000f4c  f7fffffe          BL       __aeabi_fsub
000f50  9007              STR      r0,[sp,#0x1c]
000f52  f7fffffe          BL       __aeabi_f2d
000f56  f0214100          BIC      r1,r1,#0x80000000
000f5a  2200              MOVS     r2,#0
000f5c  4bb3              LDR      r3,|L17.4652|
000f5e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000f62  f7fffffe          BL       __aeabi_cdcmple
000f66  d805              BHI      |L17.3956|
;;;770                                    count++;
000f68  f89d002c          LDRB     r0,[sp,#0x2c]
000f6c  1c40              ADDS     r0,r0,#1
000f6e  b2c0              UXTB     r0,r0
000f70  900b              STR      r0,[sp,#0x2c]
000f72  e001              B        |L17.3960|
                  |L17.3956|
;;;771                                else
;;;772                                {
;;;773                                    count = 0;//只要中间成功一次之后，就把计数清0.
000f74  2000              MOVS     r0,#0
000f76  900b              STR      r0,[sp,#0x2c]
                  |L17.3960|
;;;774                                }
;;;775                                if(count>=2)   //大等于2次没有增加功率成功，就返回增加失败
000f78  f89d002c          LDRB     r0,[sp,#0x2c]
000f7c  2802              CMP      r0,#2
000f7e  db02              BLT      |L17.3974|
;;;776                                {
;;;777                                    //Add_PowerBack.results [0]=0xFC;//直接返回增加失败
;;;778                                    count = 0;
000f80  2000              MOVS     r0,#0
000f82  900b              STR      r0,[sp,#0x2c]
;;;779                                    break;
000f84  e011              B        |L17.4010|
                  |L17.3974|
000f86  980a              LDR      r0,[sp,#0x28]         ;742
000f88  1c40              ADDS     r0,r0,#1              ;742
000f8a  900a              STR      r0,[sp,#0x28]         ;742
                  |L17.3980|
000f8c  980a              LDR      r0,[sp,#0x28]         ;742
000f8e  2832              CMP      r0,#0x32              ;742
000f90  da0b              BGE      |L17.4010|
000f92  f7fffffe          BL       get_history_alm
000f96  b940              CBNZ     r0,|L17.4010|
000f98  48a2              LDR      r0,|L17.4644|
000f9a  f8d0001d          LDR      r0,[r0,#0x1d]         ;742  ; Work_paraBack
000f9e  49a4              LDR      r1,|L17.4656|
000fa0  9009              STR      r0,[sp,#0x24]         ;742
000fa2  f7fffffe          BL       __aeabi_cfcmple
000fa6  f4ffaea1          BCC      |L17.3308|
                  |L17.4010|
000faa  bf00              NOP                            ;755
;;;780                                }
;;;781                            }
;;;782                        }
;;;783                    }
000fac  bf00              NOP      
                  |L17.4014|
;;;784                    clean_gain=1;
000fae  2001              MOVS     r0,#1
000fb0  49a0              LDR      r1,|L17.4660|
000fb2  7008              STRB     r0,[r1,#0]
000fb4  e133              B        |L17.4638|
                  |L17.4022|
;;;785    //						//然后触发send to PC的查询回包
;;;786    //						xTaskNotify(xHandleTaskSendToPC, /* 目标任务 */
;;;787    //												BIT_10, /* 设置目标任务事件标志位 bit10 */
;;;788    //												eSetBits); /* 将目标任务的事件标志位与 BIT_10 进行或操作，将结果赋值给事件标志位。*/
;;;789                }
;;;790                else 	if((ulValue & BIT_7) != 0)	//功率减小
000fb6  9811              LDR      r0,[sp,#0x44]
000fb8  f0000080          AND      r0,r0,#0x80
000fbc  2800              CMP      r0,#0
000fbe  d079              BEQ      |L17.4276|
;;;791                {
;;;792                    App_printf("Gain_reduction...\r\n");
000fc0  a09d              ADR      r0,|L17.4664|
000fc2  f7fffffe          BL       App_printf
;;;793                    Sys_State.Sys_reduction=1;
000fc6  2001              MOVS     r0,#1
000fc8  49a0              LDR      r1,|L17.4684|
000fca  7048              STRB     r0,[r1,#1]
;;;794                    //减少功率
;;;795                    if(Show_Parameter.M_45I>1.5)   //2.3-1.5V=0.8V =>对应 30A，步进37.5
000fcc  48a0              LDR      r0,|L17.4688|
000fce  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000fd0  900b              STR      r0,[sp,#0x2c]
000fd2  f7fffffe          BL       __aeabi_f2d
000fd6  2200              MOVS     r2,#0
000fd8  4b9e              LDR      r3,|L17.4692|
000fda  e9cd010c          STRD     r0,r1,[sp,#0x30]
000fde  f7fffffe          BL       __aeabi_cdrcmple
000fe2  d21e              BCS      |L17.4130|
;;;796                    {
;;;797                        Work_paraBack.Power_45_intensity[0]=(Show_Parameter.M_45I-1.5)*Debug_M_45I+60;
000fe4  489a              LDR      r0,|L17.4688|
000fe6  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
000fe8  9005              STR      r0,[sp,#0x14]
000fea  f7fffffe          BL       __aeabi_f2d
000fee  2200              MOVS     r2,#0
000ff0  4b98              LDR      r3,|L17.4692|
000ff2  e9cd0106          STRD     r0,r1,[sp,#0x18]
000ff6  f7fffffe          BL       __aeabi_dsub
000ffa  2200              MOVS     r2,#0
000ffc  4b96              LDR      r3,|L17.4696|
000ffe  e9cd0108          STRD     r0,r1,[sp,#0x20]
001002  f7fffffe          BL       __aeabi_dmul
001006  2200              MOVS     r2,#0
001008  4b94              LDR      r3,|L17.4700|
00100a  e9cd010a          STRD     r0,r1,[sp,#0x28]
00100e  f7fffffe          BL       __aeabi_dadd
001012  e9cd010c          STRD     r0,r1,[sp,#0x30]
001016  f7fffffe          BL       __aeabi_d2f
00101a  4982              LDR      r1,|L17.4644|
00101c  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
001020  e008              B        |L17.4148|
                  |L17.4130|
;;;798                    }
;;;799                    else     //小于 1.5V电流系数为40
;;;800                    {
;;;801                        Work_paraBack.Power_45_intensity[0]=Show_Parameter.M_45I*40;
001022  488b              LDR      r0,|L17.4688|
001024  68c0              LDR      r0,[r0,#0xc]  ; Show_Parameter
001026  498e              LDR      r1,|L17.4704|
001028  900d              STR      r0,[sp,#0x34]
00102a  f7fffffe          BL       __aeabi_fmul
00102e  497d              LDR      r1,|L17.4644|
001030  f8c1001d          STR      r0,[r1,#0x1d]  ; Work_paraBack
                  |L17.4148|
;;;802                    }
;;;803                    if(Work_paraBack.Forward_power[0]<=300)
001034  487b              LDR      r0,|L17.4644|
001036  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
00103a  498a              LDR      r1,|L17.4708|
00103c  900d              STR      r0,[sp,#0x34]
00103e  f7fffffe          BL       __aeabi_cfcmple
001042  d803              BHI      |L17.4172|
;;;804                    {
;;;805                        Sub_PowerBack.results [0]=0xFB;//不能减少
001044  20fb              MOVS     r0,#0xfb
001046  4988              LDR      r1,|L17.4712|
001048  7048              STRB     r0,[r1,#1]
00104a  e0bb              B        |L17.4548|
                  |L17.4172|
;;;806                    }
;;;807                    else if(Work_paraBack.Forward_power[0]<=(float)Sub_Power.Power_DOWN[0]*10.0)     //在减少中发现当前的功率小于需要减少到的功率
00104c  4887              LDR      r0,|L17.4716|
00104e  7840              LDRB     r0,[r0,#1]  ; Sub_Power
001050  9006              STR      r0,[sp,#0x18]
001052  f7fffffe          BL       __aeabi_ui2f
001056  9007              STR      r0,[sp,#0x1c]
001058  f7fffffe          BL       __aeabi_f2d
00105c  2200              MOVS     r2,#0
00105e  4b84              LDR      r3,|L17.4720|
001060  e9cd0108          STRD     r0,r1,[sp,#0x20]
001064  f7fffffe          BL       __aeabi_dmul
001068  e9cd010c          STRD     r0,r1,[sp,#0x30]
00106c  486d              LDR      r0,|L17.4644|
00106e  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
001072  9009              STR      r0,[sp,#0x24]
001074  f7fffffe          BL       __aeabi_f2d
001078  e9cd010a          STRD     r0,r1,[sp,#0x28]
00107c  e9dd230c          LDRD     r2,r3,[sp,#0x30]
001080  f7fffffe          BL       __aeabi_cdcmple
001084  d803              BHI      |L17.4238|
;;;808                    {
;;;809                        Sub_PowerBack.results [0]=0xFB;//不能减少
001086  20fb              MOVS     r0,#0xfb
001088  4977              LDR      r1,|L17.4712|
00108a  7048              STRB     r0,[r1,#1]
00108c  e09a              B        |L17.4548|
                  |L17.4238|
;;;810                    }
;;;811                    else if(Work_paraBack.Forward_power[0]>=300)
00108e  4865              LDR      r0,|L17.4644|
001090  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
001094  4973              LDR      r1,|L17.4708|
001096  900d              STR      r0,[sp,#0x34]
001098  f7fffffe          BL       __aeabi_cfrcmple
00109c  d874              BHI      |L17.4488|
;;;812                    {
;;;813                        int Back = 0;
00109e  2000              MOVS     r0,#0
0010a0  900d              STR      r0,[sp,#0x34]
;;;814                        float cmp_buffer = 0.0;
0010a2  900c              STR      r0,[sp,#0x30]
;;;815                        volatile uint8_t count = 0;
0010a4  900b              STR      r0,[sp,#0x2c]
;;;816                        //cmp_buffer = Work_paraBack.Forward_power[0];//首先保存没有增加功率之前的功率
;;;817                        Pre_EmissionSend(&EmissionCmd,Gain_reduction);//增益减指令
0010a6  212d              MOVS     r1,#0x2d
0010a8  4872              LDR      r0,|L17.4724|
0010aa  f7fffffe          BL       Pre_EmissionSend
;;;818                        for(int i = 0; i<50&&get_history_alm()==0&&Work_paraBack.Power_45_intensity[0]<100; i++)
0010ae  2000              MOVS     r0,#0
0010b0  900a              STR      r0,[sp,#0x28]
0010b2  e076              B        |L17.4514|
                  |L17.4276|
0010b4  e08a              B        |L17.4556|
                  |L17.4278|
;;;819                        {
;;;820                            cmp_buffer = Work_paraBack.Forward_power[0];//在每次发减少功率的命令之前就先保存当前的值
0010b6  485b              LDR      r0,|L17.4644|
0010b8  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0010bc  900c              STR      r0,[sp,#0x30]
;;;821                            Back = run_command(xTicksToWait*2);//如果加成功，返回-2发射机报警（必须要停），返回-1或是0都是激励器无响应
0010be  f44f707a          MOV      r0,#0x3e8
0010c2  f7fffffe          BL       run_command
0010c6  900d              STR      r0,[sp,#0x34]
;;;822                            if(Back == -1 || Back == 0)   //如果返回激励器无响应，则再执行一次
0010c8  980d              LDR      r0,[sp,#0x34]
0010ca  1c40              ADDS     r0,r0,#1
0010cc  b108              CBZ      r0,|L17.4306|
0010ce  980d              LDR      r0,[sp,#0x34]
0010d0  b920              CBNZ     r0,|L17.4316|
                  |L17.4306|
;;;823                            {
;;;824                                Back = run_command(xTicksToWait);//如果加成功，返回-2发射机报警（必须要停），返回-1或是0都是激励器无响应
0010d2  f44f70fa          MOV      r0,#0x1f4
0010d6  f7fffffe          BL       run_command
0010da  900d              STR      r0,[sp,#0x34]
                  |L17.4316|
;;;825                            }
;;;826                            //这里要加延时，大约200ms
;;;827                            vTaskDelay(1000);
0010dc  f44f707a          MOV      r0,#0x3e8
0010e0  f7fffffe          BL       vTaskDelay
;;;828                            if(fabs((float)Sub_Power.Power_DOWN[0]*10.0 - Work_paraBack.Forward_power[0])<=30)   //减成功，且减到了预定的功率
0010e4  484f              LDR      r0,|L17.4644|
0010e6  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
0010ea  9003              STR      r0,[sp,#0xc]
0010ec  f7fffffe          BL       __aeabi_f2d
0010f0  e9cd0106          STRD     r0,r1,[sp,#0x18]
0010f4  485d              LDR      r0,|L17.4716|
0010f6  7840              LDRB     r0,[r0,#1]  ; Sub_Power
0010f8  9000              STR      r0,[sp,#0]
0010fa  f7fffffe          BL       __aeabi_ui2f
0010fe  9001              STR      r0,[sp,#4]
001100  f7fffffe          BL       __aeabi_f2d
001104  2200              MOVS     r2,#0
001106  4b5a              LDR      r3,|L17.4720|
001108  e9cd0102          STRD     r0,r1,[sp,#8]
00110c  f7fffffe          BL       __aeabi_dmul
001110  e9cd0104          STRD     r0,r1,[sp,#0x10]
001114  e9dd2306          LDRD     r2,r3,[sp,#0x18]
001118  f7fffffe          BL       __aeabi_dsub
00111c  f0214100          BIC      r1,r1,#0x80000000
001120  2200              MOVS     r2,#0
001122  4b55              LDR      r3,|L17.4728|
001124  e9cd0108          STRD     r0,r1,[sp,#0x20]
001128  f7fffffe          BL       __aeabi_cdcmple
00112c  d800              BHI      |L17.4400|
;;;829                            {
;;;830                                //Sub_PowerBack.results [0]=0xFE;//返回减少成功
;;;831                                break;
00112e  e047              B        |L17.4544|
                  |L17.4400|
;;;832                            }
;;;833                            if(Back != 1)   //发射机或则发射失败
001130  980d              LDR      r0,[sp,#0x34]
001132  2801              CMP      r0,#1
001134  d000              BEQ      |L17.4408|
;;;834                            {
;;;835                                //Sub_PowerBack.results [0]=0xFC;//返回减少失败
;;;836                                break;
001136  e043              B        |L17.4544|
                  |L17.4408|
;;;837                            }
;;;838                            if(Work_paraBack.Forward_power[0]<=300.0)   //减少之后小于300W
001138  483a              LDR      r0,|L17.4644|
00113a  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
00113e  9007              STR      r0,[sp,#0x1c]
001140  f7fffffe          BL       __aeabi_f2d
001144  2200              MOVS     r2,#0
001146  4b4d              LDR      r3,|L17.4732|
001148  e9cd0108          STRD     r0,r1,[sp,#0x20]
00114c  f7fffffe          BL       __aeabi_cdcmple
001150  d800              BHI      |L17.4436|
;;;839                            {
;;;840                                //	Sub_PowerBack.results [0]=0xFE;//返回减少成功
;;;841                                break;
001152  e035              B        |L17.4544|
                  |L17.4436|
;;;842                            }
;;;843                            else     //但是需要判断是否减少成功了
;;;844                            {
;;;845                                if(fabs(cmp_buffer-Work_paraBack.Forward_power[0])<=5)//说明减少前和增加后没有变化
001154  4833              LDR      r0,|L17.4644|
001156  f8d00015          LDR      r0,[r0,#0x15]  ; Work_paraBack
00115a  4601              MOV      r1,r0
00115c  9006              STR      r0,[sp,#0x18]
00115e  980c              LDR      r0,[sp,#0x30]
001160  f7fffffe          BL       __aeabi_fsub
001164  9007              STR      r0,[sp,#0x1c]
001166  f7fffffe          BL       __aeabi_f2d
00116a  f0214100          BIC      r1,r1,#0x80000000
00116e  2200              MOVS     r2,#0
001170  4b2e              LDR      r3,|L17.4652|
001172  e9cd0108          STRD     r0,r1,[sp,#0x20]
001176  f7fffffe          BL       __aeabi_cdcmple
00117a  d806              BHI      |L17.4490|
;;;846                                    count++;
00117c  f89d002c          LDRB     r0,[sp,#0x2c]
001180  1c40              ADDS     r0,r0,#1
001182  b2c0              UXTB     r0,r0
001184  900b              STR      r0,[sp,#0x2c]
001186  e002              B        |L17.4494|
                  |L17.4488|
001188  e01c              B        |L17.4548|
                  |L17.4490|
;;;847                                else
;;;848                                {
;;;849                                    count = 0;//只要中间成功一次之后，就把计数清0.
00118a  2000              MOVS     r0,#0
00118c  900b              STR      r0,[sp,#0x2c]
                  |L17.4494|
;;;850                                }
;;;851                                if(count>=2)   //大等于2次没有增加功率成功，就返回减少失败
00118e  f89d002c          LDRB     r0,[sp,#0x2c]
001192  2802              CMP      r0,#2
001194  db02              BLT      |L17.4508|
;;;852                                {
;;;853                                    //Sub_PowerBack.results [0]=0xFC;//直接返回增加失败
;;;854                                    count = 0;
001196  2000              MOVS     r0,#0
001198  900b              STR      r0,[sp,#0x2c]
;;;855                                    break;
00119a  e011              B        |L17.4544|
                  |L17.4508|
00119c  980a              LDR      r0,[sp,#0x28]         ;818
00119e  1c40              ADDS     r0,r0,#1              ;818
0011a0  900a              STR      r0,[sp,#0x28]         ;818
                  |L17.4514|
0011a2  980a              LDR      r0,[sp,#0x28]         ;818
0011a4  2832              CMP      r0,#0x32              ;818
0011a6  da0b              BGE      |L17.4544|
0011a8  f7fffffe          BL       get_history_alm
0011ac  b940              CBNZ     r0,|L17.4544|
0011ae  481d              LDR      r0,|L17.4644|
0011b0  f8d0001d          LDR      r0,[r0,#0x1d]         ;818  ; Work_paraBack
0011b4  491e              LDR      r1,|L17.4656|
0011b6  9009              STR      r0,[sp,#0x24]         ;818
0011b8  f7fffffe          BL       __aeabi_cfcmple
0011bc  f4ffaf7b          BCC      |L17.4278|
                  |L17.4544|
0011c0  bf00              NOP                            ;831
;;;856                                }
;;;857                            }
;;;858                        }
;;;859                    }
0011c2  bf00              NOP      
                  |L17.4548|
;;;860                    clean_reduction=1;
0011c4  2001              MOVS     r0,#1
0011c6  492e              LDR      r1,|L17.4736|
0011c8  7008              STRB     r0,[r1,#0]
0011ca  e028              B        |L17.4638|
                  |L17.4556|
;;;861    //						//然后触发send to PC的查询回包
;;;862    //						xTaskNotify(xHandleTaskSendToPC, /* 目标任务 */
;;;863    //												BIT_11, /* 设置目标任务事件标志位 bit11 */
;;;864    //												eSetBits); /* 将目标任务的事件标志位与 BIT_11 进行或操作，将结果赋值给事件标志位。*/
;;;865                }
;;;866                else 	if((ulValue & BIT_8) != 0)	//开机
0011cc  9811              LDR      r0,[sp,#0x44]
0011ce  f4007080          AND      r0,r0,#0x100
0011d2  b1c8              CBZ      r0,|L17.4616|
;;;867                {
;;;868    				MT2000_Cmd_Tune();				//调谐
0011d4  f7fffffe          BL       MT2000_Cmd_Tune
;;;869    				for(i=0; i<10; i++)
0011d8  2000              MOVS     r0,#0
0011da  900f              STR      r0,[sp,#0x3c]
0011dc  e010              B        |L17.4608|
                  |L17.4574|
;;;870    				{
;;;871    					MT2000_Cmd_Power_ON();
0011de  f7fffffe          BL       MT2000_Cmd_Power_ON
;;;872    					vTaskDelay(100);
0011e2  2064              MOVS     r0,#0x64
0011e4  f7fffffe          BL       vTaskDelay
;;;873    					ret = MT2000_Wait_Ack();
0011e8  f7fffffe          BL       MT2000_Wait_Ack
0011ec  900e              STR      r0,[sp,#0x38]
;;;874    					if( ret == 1 )
0011ee  980e              LDR      r0,[sp,#0x38]
0011f0  2801              CMP      r0,#1
0011f2  d101              BNE      |L17.4600|
;;;875    					{
;;;876    						Sys_State.Sys_open = 1;
0011f4  4915              LDR      r1,|L17.4684|
0011f6  7088              STRB     r0,[r1,#2]
                  |L17.4600|
0011f8  980f              LDR      r0,[sp,#0x3c]         ;869
0011fa  1c40              ADDS     r0,r0,#1              ;869
0011fc  b2c0              UXTB     r0,r0                 ;869
0011fe  900f              STR      r0,[sp,#0x3c]         ;869
                  |L17.4608|
001200  980f              LDR      r0,[sp,#0x3c]         ;869
001202  280a              CMP      r0,#0xa               ;869
001204  da0b              BGE      |L17.4638|
001206  e7ea              B        |L17.4574|
                  |L17.4616|
;;;877    					}
;;;878    				}
;;;879                }
;;;880                else 	if((ulValue & BIT_9) != 0)	//保留
001208  9811              LDR      r0,[sp,#0x44]
00120a  f4007000          AND      r0,r0,#0x200
00120e  b930              CBNZ     r0,|L17.4638|
;;;881                {
;;;882    //						g_fuc_codToPC[0]=0x06;
;;;883    //						g_fuc_codToPC[1]=0x02;
;;;884    //						Alarm_historyBack.Transmitte_id[0]=	CAN_ID;
;;;885    //						Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
;;;886    //						if(run_command(xTicksToWait)==1)//内部循环了3次
;;;887    //						{
;;;888    //							if(Respond_Cmd.status==0x01)
;;;889    //							{
;;;890    //								Sys_State.Emis_working=1;
;;;891    //							}
;;;892    //							else
;;;893    //							{
;;;894    //								Sys_State.Emis_working=0;
;;;895    //							}
;;;896    //						}
;;;897    //						/*等待参数来写*/
;;;898    //						set_alarm_bit();//主要是组包报警的bit位
;;;899    //						Send_PC(g_fuc_codToPC);//发送出去，其他参数在报警处就应该填充在需要发送的包里面了
;;;900                }
;;;901                else								//没有对应事件
;;;902                {
;;;903                    App_printf("没有对应的事件!!!\r\n");
001210  a01c              ADR      r0,|L17.4740|
001212  f7fffffe          BL       App_printf
001216  e002              B        |L17.4638|
                  |L17.4632|
;;;904                }
;;;905    
;;;906            }
;;;907            else									//等待超时
;;;908            {
;;;909                App_printf("vTaskTaskTaskEmis_Send TIME OUT!!!\r\n");
001218  a01f              ADR      r0,|L17.4760|
00121a  f7fffffe          BL       App_printf
                  |L17.4638|
00121e  f7febef5          B        |L17.12|
;;;910            }
;;;911        }
;;;912    }
;;;913    volatile int lock_flag1;
                          ENDP

001222  0000              DCW      0x0000
                  |L17.4644|
                          DCD      Work_paraBack
                  |L17.4648|
                          DCD      0x409c2000
                  |L17.4652|
                          DCD      0x40140000
                  |L17.4656|
                          DCD      0x42c80000
                  |L17.4660|
                          DCD      clean_gain
                  |L17.4664|
001238  4761696e          DCB      "Gain_reduction...\r\n",0
00123c  5f726564
001240  75637469
001244  6f6e2e2e
001248  2e0d0a00
                  |L17.4684|
                          DCD      Sys_State
                  |L17.4688|
                          DCD      Show_Parameter
                  |L17.4692|
                          DCD      0x3ff80000
                  |L17.4696|
                          DCD      0x4042c000
                  |L17.4700|
                          DCD      0x404e0000
                  |L17.4704|
                          DCD      0x42200000
                  |L17.4708|
                          DCD      0x43960000
                  |L17.4712|
                          DCD      Sub_PowerBack
                  |L17.4716|
                          DCD      Sub_Power
                  |L17.4720|
                          DCD      0x40240000
                  |L17.4724|
                          DCD      EmissionCmd
                  |L17.4728|
                          DCD      0x403e0000
                  |L17.4732|
                          DCD      0x4072c000
                  |L17.4736|
                          DCD      clean_reduction
                  |L17.4740|
001284  c3bbd3d0          DCB      195,187,211,208,182,212,211,166,181,196,202,194,188,254,"!"
001288  b6d4d3a6
00128c  b5c4cac2
001290  bcfe21  
001293  21210d0a          DCB      "!!\r\n",0
001297  00      
                  |L17.4760|
001298  76546173          DCB      "vTaskTaskTaskEmis_Send TIME OUT!!!\r\n",0
00129c  6b546173
0012a0  6b546173
0012a4  6b456d69
0012a8  735f5365
0012ac  6e642054
0012b0  494d4520
0012b4  4f555421
0012b8  21210d0a
0012bc  00      
0012bd  00                DCB      0
0012be  00                DCB      0
0012bf  00                DCB      0

                          AREA ||i.vTaskTaskTask_hard_control||, CODE, READONLY, ALIGN=2

                  vTaskTaskTask_hard_control PROC
;;;1071    */
;;;1072   void vTaskTaskTask_hard_control(void *pvParameters)
000000  b500              PUSH     {lr}
;;;1073   {
000002  b085              SUB      sp,sp,#0x14
;;;1074       const TickType_t xTicksToWait = 500; /* 最大延迟500ms */
000004  bf00              NOP      
;;;1075       uint32_t ulValue;
;;;1076       BaseType_t xResult;
;;;1077   	
;;;1078   	uint8_t i = 0;
000006  f04f0900          MOV      r9,#0
;;;1079   	uint8_t ret = 0;
00000a  46ca              MOV      r10,r9
;;;1080   	
;;;1081       while(1)
00000c  e0ed              B        |L18.490|
                  |L18.14|
;;;1082       {
;;;1083           xResult = xTaskNotifyWait(0x00000000,
00000e  f04f33ff          MOV      r3,#0xffffffff
000012  aa04              ADD      r2,sp,#0x10
000014  4619              MOV      r1,r3
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       xTaskNotifyWait
00001c  4604              MOV      r4,r0
;;;1084                                     0xFFFFFFFF,
;;;1085                                     &ulValue,
;;;1086                                     portMAX_DELAY); /* 最大允许延迟时间 */
;;;1087           if( xResult == pdPASS && Monitor.hard_control==1)   //硬件接管
00001e  2c01              CMP      r4,#1
                  |L18.32|
000020  d17e              BNE      |L18.288|
000022  4872              LDR      r0,|L18.492|
000024  7840              LDRB     r0,[r0,#1]  ; Monitor
000026  2801              CMP      r0,#1
000028  d1fa              BNE      |L18.32|
;;;1088           {
;;;1089               if(xHandleTask_hard_monitor!=NULL)
00002a  4871              LDR      r0,|L18.496|
00002c  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_monitor
00002e  b130              CBZ      r0,|L18.62|
;;;1090               {
;;;1091                   vTaskSuspend(xHandleTask_hard_monitor);
000030  486f              LDR      r0,|L18.496|
000032  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_monitor
000034  f7fffffe          BL       vTaskSuspend
;;;1092                   App_printf("hard_control task Suspend hard_monitor task!!!\r\n");
000038  a06e              ADR      r0,|L18.500|
00003a  f7fffffe          BL       App_printf
                  |L18.62|
;;;1093               }
;;;1094   			
;;;1095               if((ulValue & BIT_0) != 0)   		//固频 双频 三频
00003e  9804              LDR      r0,[sp,#0x10]
000040  f0000001          AND      r0,r0,#1
000044  b360              CBZ      r0,|L18.160|
;;;1096               {
;;;1097                   App_printf("Hard//执行操作\r\n");
000046  a078              ADR      r0,|L18.552|
000048  f7fffffe          BL       App_printf
;;;1098   				
;;;1099   #if	NEW_PROTOCOL_EN	//新机器协议
;;;1100   				MT2000_Cmd_Channel();			//设置信道、工作模式、工作方式、频率、跳频时间
00004c  f7fffffe          BL       MT2000_Cmd_Channel
;;;1101   				ret = MT2000_Wait_Ack();
000050  f7fffffe          BL       MT2000_Wait_Ack
000054  f0000aff          AND      r10,r0,#0xff
;;;1102   				if( ret == 1 )
000058  f1ba0f01          CMP      r10,#1
00005c  d11c              BNE      |L18.152|
;;;1103   				{
;;;1104   					MT2000_Cmd_Tune();			//调谐
00005e  f7fffffe          BL       MT2000_Cmd_Tune
;;;1105   					for(i=0; i<10; i++)
000062  f04f0900          MOV      r9,#0
000066  e00b              B        |L18.128|
                  |L18.104|
;;;1106   					{
;;;1107   						vTaskDelay(500);
000068  f44f70fa          MOV      r0,#0x1f4
00006c  f7fffffe          BL       vTaskDelay
;;;1108   						ret = MT2000_Wait_Ack();
000070  f7fffffe          BL       MT2000_Wait_Ack
000074  f0000aff          AND      r10,r0,#0xff
000078  f1090001          ADD      r0,r9,#1              ;1105
00007c  f00009ff          AND      r9,r0,#0xff           ;1105
                  |L18.128|
000080  f1b90f0a          CMP      r9,#0xa               ;1105
000084  dbf0              BLT      |L18.104|
;;;1109   					}
;;;1110   					if( ret == 1 )
000086  f1ba0f01          CMP      r10,#1
00008a  d105              BNE      |L18.152|
;;;1111   					{
;;;1112   						MT2000_Cmd_Emit();		//发射
00008c  f7fffffe          BL       MT2000_Cmd_Emit
;;;1113   						ret = MT2000_Wait_Ack();
000090  f7fffffe          BL       MT2000_Wait_Ack
000094  f0000aff          AND      r10,r0,#0xff
                  |L18.152|
;;;1114   					}
;;;1115   				}
;;;1116   #else
;;;1117                   Pre_EmissionSend(&EmissionCmd,CHANNEL,1);//调用信道
;;;1118                   if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1119                   {
;;;1120                       if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
;;;1121                       {
;;;1122                           Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
;;;1123                           if(run_command(xTicksToWait)!=1)   //失败，goto finish
;;;1124                           {
;;;1125                               goto option_fish1;
;;;1126                           }
;;;1127                       }
;;;1128                       Pre_EmissionSend(&EmissionCmd,FREQUENCY,1);//固频设置频率
;;;1129                       if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1130                       {
;;;1131                           if(Trans_open.Power_grade[0]==0x02)   //四分之一功率
;;;1132                           {
;;;1133                               Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,4);//先设置功率等级为四分之一
;;;1134                           }
;;;1135                           else if(Trans_open.Power_grade[0]==0x00)     //全功率
;;;1136                           {
;;;1137                               Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,1);//先设置功率等级为全功率
;;;1138                           }
;;;1139                           //else if(Trans_open.Power_grade[0]==0x01)//二分之一功率
;;;1140                           else   //预防解析问题，当不是四分之一也不是全功率的时候就给二分之一
;;;1141                           {
;;;1142                               Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为二分之一
;;;1143                           }
;;;1144                           if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1145                           {
;;;1146                               Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
;;;1147                               if(run_command(xTicksToWait*14)==1)   //调谐给7s
;;;1148                               {
;;;1149                                   Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
;;;1150                                   if(run_command(xTicksToWait)!=1)
;;;1151                                   {
;;;1152                                       goto option_fish1;
;;;1153                                   }
;;;1154                                   else
;;;1155                                   {
;;;1156                                       Sys_State.Emis_working=1;//系统处于发射状态
;;;1157                                   }
;;;1158                                   if(Trans_open.Type[0]!=0x01)   //不是固频
;;;1159                                   {
;;;1160                                       Sys_State.Emis_working=0;//系统处于发射状态清零
;;;1161                                       vTaskDelay(500);
;;;1162                                       Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
;;;1163                                       if(run_command(xTicksToWait)==1)   //如果停止成功，执行第二个信道
;;;1164                                       {
;;;1165                                           Pre_EmissionSend(&EmissionCmd,CHANNEL,2);//调用信道2
;;;1166                                           if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1167                                           {
;;;1168                                               if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
;;;1169                                               {
;;;1170                                                   Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
;;;1171                                                   if(run_command(xTicksToWait)!=1)   //失败，goto finish
;;;1172                                                   {
;;;1173                                                       goto option_fish1;
;;;1174                                                   }
;;;1175                                               }
;;;1176                                               Pre_EmissionSend(&EmissionCmd,FREQUENCY,2);//双频设置频率
;;;1177                                               if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1178                                               {
;;;1179                                                   if(Trans_open.Power_grade[1]==0x02)   //四分之一功率
;;;1180                                                   {
;;;1181                                                       Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,4);//先设置功率等级为四分之一
;;;1182                                                   }
;;;1183                                                   else if(Trans_open.Power_grade[1]==0x00)     //全功率
;;;1184                                                   {
;;;1185                                                       Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,1);//先设置功率等级为全功率
;;;1186                                                   }
;;;1187                                                   //else if(Trans_open.Power_grade[0]==0x01)//二分之一功率
;;;1188                                                   else   //预防解析问题，当不是四分之一也不是全功率的时候就给二分之一
;;;1189                                                   {
;;;1190                                                       Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为二分之一
;;;1191                                                   }
;;;1192                                                   if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1193                                                   {
;;;1194                                                       if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1195                                                       {
;;;1196                                                           Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
;;;1197                                                           if(run_command(xTicksToWait*14)==1)   //调谐给7s
;;;1198                                                           {
;;;1199                                                               Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
;;;1200                                                               if(run_command(xTicksToWait)==1)
;;;1201                                                               {
;;;1202                                                                   vTaskDelay(500);
;;;1203                                                                   Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
;;;1204                                                                   if(run_command(xTicksToWait)==1)
;;;1205                                                                   {
;;;1206                                                                       if(Trans_open.Type[0]==0x02)   //是双频
;;;1207                                                                       {
;;;1208                                                                           Pre_EmissionSend(&EmissionCmd,MODE,2);//开启双频
;;;1209                                                                           if(run_command(xTicksToWait)==1)   //如果开启成功
;;;1210                                                                           {
;;;1211                                                                               Pre_EmissionSend(&EmissionCmd,EMISSION);//发射双频
;;;1212                                                                               if(run_command(xTicksToWait)!=1)
;;;1213                                                                               {
;;;1214                                                                                   goto option_fish1;
;;;1215                                                                               }
;;;1216                                                                               else
;;;1217                                                                               {
;;;1218                                                                                   Sys_State.Emis_working=1;//系统正在发射
;;;1219                                                                               }
;;;1220                                                                           }
;;;1221                                                                       }
;;;1222                                                                       else if(Trans_open.Type[0]==0x03)     //是三频
;;;1223                                                                       {
;;;1224                                                                           Pre_EmissionSend(&EmissionCmd,CHANNEL,3);//调用信道3
;;;1225                                                                           if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1226                                                                           {
;;;1227                                                                               if(Respond_Cmd.species!=0x03)   //如果不是调频状态，先切换到调频状态
;;;1228                                                                               {
;;;1229                                                                                   Pre_EmissionSend(&EmissionCmd,SPECIES);//调频状态
;;;1230                                                                                   if(run_command(xTicksToWait)!=1)   //失败，goto finish
;;;1231                                                                                   {
;;;1232                                                                                       goto option_fish1;
;;;1233                                                                                   }
;;;1234                                                                               }
;;;1235                                                                               //调用信道成功才执行下面的:
;;;1236                                                                               Pre_EmissionSend(&EmissionCmd,FREQUENCY,3);//三频设置频率
;;;1237                                                                               if(run_command(xTicksToWait)==1)   //内部循环了3次
;;;1238                                                                               {
;;;1239                                                                                   if(Trans_open.Power_grade[2]==0x02)   //四分之一功率
;;;1240                                                                                   {
;;;1241                                                                                       Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,4);//先设置功率等级为四分之一
;;;1242                                                                                   }
;;;1243                                                                                   else if(Trans_open.Power_grade[2]==0x01)     //二分之一功率
;;;1244                                                                                   {
;;;1245                                                                                       Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,2);//先设置功率等级为四分之一
;;;1246                                                                                   }
;;;1247                                                                                   else if(Trans_open.Power_grade[2]==0x00)     //全功率
;;;1248                                                                                   {
;;;1249                                                                                       Pre_EmissionSend(&EmissionCmd,POWER_LEVEL,1);//先设置功率等级为四分之一
;;;1250                                                                                   }
;;;1251                                                                                   if(run_command(xTicksToWait)==1)
;;;1252                                                                                   {
;;;1253                                                                                       Pre_EmissionSend(&EmissionCmd,TUNING);//调谐
;;;1254                                                                                       if(run_command(xTicksToWait*14)==1)   //调谐给7s
;;;1255                                                                                       {
;;;1256                                                                                           Pre_EmissionSend(&EmissionCmd,EMISSION);//发射指令
;;;1257                                                                                           if(run_command(xTicksToWait)==1)
;;;1258                                                                                           {
;;;1259                                                                                               vTaskDelay(500);
;;;1260                                                                                               Pre_EmissionSend(&EmissionCmd,STOP);//停止指令
;;;1261                                                                                               if(run_command(xTicksToWait)==1)
;;;1262                                                                                               {
;;;1263                                                                                                   Pre_EmissionSend(&EmissionCmd,MODE,3);//开启三频
;;;1264                                                                                                   if(run_command(xTicksToWait)==1)   //如果开启成功
;;;1265                                                                                                   {
;;;1266                                                                                                       Pre_EmissionSend(&EmissionCmd,EMISSION);//发射三频
;;;1267                                                                                                       if(run_command(xTicksToWait)!=1)
;;;1268                                                                                                       {
;;;1269                                                                                                           goto option_fish1;
;;;1270                                                                                                       }
;;;1271                                                                                                       else
;;;1272                                                                                                       {
;;;1273                                                                                                           Sys_State.Emis_working=1;//系统正在发射
;;;1274                                                                                                       }
;;;1275                                                                                                   }
;;;1276                                                                                               }
;;;1277                                                                                           }
;;;1278                                                                                       }
;;;1279                                                                                   }
;;;1280                                                                               }
;;;1281                                                                           }
;;;1282                                                                       }
;;;1283                                                                   }
;;;1284                                                               }
;;;1285                                                           }
;;;1286                                                       }
;;;1287                                                   }
;;;1288                                               }
;;;1289                                           }
;;;1290                                       }
;;;1291                                   }
;;;1292                               }
;;;1293                           }
;;;1294                       }
;;;1295                   }
;;;1296   option_fish1:
;;;1297   #endif
;;;1298                   Sys_State.FM_working=0;
000098  2000              MOVS     r0,#0
00009a  4968              LDR      r1,|L18.572|
00009c  7148              STRB     r0,[r1,#5]
00009e  e09a              B        |L18.470|
                  |L18.160|
;;;1299               }
;;;1300               else if((ulValue & BIT_1) != 0)     //开机
0000a0  9804              LDR      r0,[sp,#0x10]
0000a2  f0000002          AND      r0,r0,#2
0000a6  2800              CMP      r0,#0
0000a8  d05f              BEQ      |L18.362|
;;;1301               {
;;;1302                   if((float)ADC_ConvertedValue[2]/4096*3.3*2>4)		//45V电压有电，证明已经是开机状态
0000aa  4965              LDR      r1,|L18.576|
0000ac  8888              LDRH     r0,[r1,#4]  ; ADC_ConvertedValue
0000ae  f7fffffe          BL       __aeabi_ui2f
0000b2  f04f418b          MOV      r1,#0x45800000
0000b6  9001              STR      r0,[sp,#4]
0000b8  f7fffffe          BL       __aeabi_fdiv
0000bc  4683              MOV      r11,r0
0000be  f7fffffe          BL       __aeabi_f2d
0000c2  f04f3266          MOV      r2,#0x66666666
0000c6  4b5f              LDR      r3,|L18.580|
0000c8  e9cd0102          STRD     r0,r1,[sp,#8]
0000cc  f7fffffe          BL       __aeabi_dmul
0000d0  4607              MOV      r7,r0
0000d2  2200              MOVS     r2,#0
0000d4  f04f4380          MOV      r3,#0x40000000
0000d8  f7fffffe          BL       __aeabi_dmul
0000dc  4605              MOV      r5,r0
0000de  2200              MOVS     r2,#0
0000e0  4b59              LDR      r3,|L18.584|
0000e2  f7fffffe          BL       __aeabi_cdrcmple
0000e6  d209              BCS      |L18.252|
;;;1303                   {
;;;1304                       Monitor.need_open=0;
0000e8  2000              MOVS     r0,#0
0000ea  4940              LDR      r1,|L18.492|
0000ec  7108              STRB     r0,[r1,#4]
;;;1305                       Sys_State.Sys_open=1;
0000ee  2001              MOVS     r0,#1
0000f0  4952              LDR      r1,|L18.572|
0000f2  7088              STRB     r0,[r1,#2]
;;;1306                       App_printf("system already open !\n");
0000f4  a055              ADR      r0,|L18.588|
0000f6  f7fffffe          BL       App_printf
0000fa  e06c              B        |L18.470|
                  |L18.252|
;;;1307                   }
;;;1308                   else
;;;1309                   {
;;;1310   					
;;;1311                       if((float)ADC_ConvertedValue[2]/4096*3.3*2>4)   //45V电压有电，证明已经是开机状态
0000fc  4950              LDR      r1,|L18.576|
0000fe  8888              LDRH     r0,[r1,#4]  ; ADC_ConvertedValue
000100  f7fffffe          BL       __aeabi_ui2f
000104  f04f418b          MOV      r1,#0x45800000
000108  9001              STR      r0,[sp,#4]
00010a  f7fffffe          BL       __aeabi_fdiv
00010e  4683              MOV      r11,r0
000110  f7fffffe          BL       __aeabi_f2d
000114  f04f3266          MOV      r2,#0x66666666
000118  4b4a              LDR      r3,|L18.580|
00011a  e9cd0102          STRD     r0,r1,[sp,#8]
00011e  e000              B        |L18.290|
                  |L18.288|
000120  e056              B        |L18.464|
                  |L18.290|
000122  f7fffffe          BL       __aeabi_dmul
000126  4605              MOV      r5,r0
000128  2200              MOVS     r2,#0
00012a  f04f4380          MOV      r3,#0x40000000
00012e  f7fffffe          BL       __aeabi_dmul
000132  4607              MOV      r7,r0
000134  2200              MOVS     r2,#0
000136  4b44              LDR      r3,|L18.584|
000138  f7fffffe          BL       __aeabi_cdrcmple
00013c  d20b              BCS      |L18.342|
;;;1312                       {
;;;1313                           App_printf("system open succeed!\n");
00013e  a049              ADR      r0,|L18.612|
000140  f7fffffe          BL       App_printf
;;;1314                           Monitor.need_open=0;
000144  2000              MOVS     r0,#0
000146  4929              LDR      r1,|L18.492|
000148  7108              STRB     r0,[r1,#4]
;;;1315                           Sys_State.Sys_open=1;
00014a  2001              MOVS     r0,#1
00014c  493b              LDR      r1,|L18.572|
00014e  7088              STRB     r0,[r1,#2]
;;;1316   						Sys_State.Sys_opening = 0;					//修改7s潜在BUG
000150  2000              MOVS     r0,#0
000152  7108              STRB     r0,[r1,#4]
000154  e03f              B        |L18.470|
                  |L18.342|
;;;1317                       }
;;;1318                       else
;;;1319                       {
;;;1320                           Sys_State.Sys_close=1;
000156  2001              MOVS     r0,#1
000158  4938              LDR      r1,|L18.572|
00015a  70c8              STRB     r0,[r1,#3]
;;;1321                           Sys_State.Sys_open=0;
00015c  2000              MOVS     r0,#0
00015e  7088              STRB     r0,[r1,#2]
;;;1322   						Sys_State.Sys_opening = 0;					//修改7s潜在BUG
000160  7108              STRB     r0,[r1,#4]
;;;1323                           App_printf("system open failure!\n");
000162  a046              ADR      r0,|L18.636|
000164  f7fffffe          BL       App_printf
000168  e035              B        |L18.470|
                  |L18.362|
;;;1324                       }
;;;1325                   }
;;;1326               }
;;;1327               else if((ulValue & BIT_2) != 0)     //保留
00016a  9804              LDR      r0,[sp,#0x10]
00016c  f0000004          AND      r0,r0,#4
000170  2800              CMP      r0,#0
000172  d130              BNE      |L18.470|
;;;1328               {
;;;1329   
;;;1330               }
;;;1331               else if((ulValue & BIT_3) != 0)     //停止
000174  9804              LDR      r0,[sp,#0x10]
000176  f0000008          AND      r0,r0,#8
00017a  2800              CMP      r0,#0
00017c  d02b              BEQ      |L18.470|
;;;1332               {
;;;1333                   Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
00017e  21ce              MOVS     r1,#0xce
000180  4844              LDR      r0,|L18.660|
000182  f7fffffe          BL       Pre_EmissionSend
;;;1334                   if(run_command(xTicksToWait))
000186  f44f70fa          MOV      r0,#0x1f4
00018a  f7fffffe          BL       run_command
00018e  b310              CBZ      r0,|L18.470|
;;;1335                   {
;;;1336                       lock_flag1=0;
000190  2000              MOVS     r0,#0
000192  4941              LDR      r1,|L18.664|
000194  6008              STR      r0,[r1,#0]  ; lock_flag1
;;;1337                       lock_flag2=0;
000196  4941              LDR      r1,|L18.668|
000198  6008              STR      r0,[r1,#0]  ; lock_flag2
;;;1338                       lock_flag3=0;
00019a  4941              LDR      r1,|L18.672|
00019c  6008              STR      r0,[r1,#0]  ; lock_flag3
;;;1339                       if(Respond_Cmd.status==0x00)   //如果是停止状态
00019e  4841              LDR      r0,|L18.676|
0001a0  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
0001a2  b918              CBNZ     r0,|L18.428|
;;;1340                       {
;;;1341                           //已经是停止状态
;;;1342                           Sys_State.Emis_working=0;
0001a4  2000              MOVS     r0,#0
0001a6  4925              LDR      r1,|L18.572|
0001a8  7188              STRB     r0,[r1,#6]
0001aa  e014              B        |L18.470|
                  |L18.428|
;;;1343                       }
;;;1344                       else     //如果不是停止状态，发射停止指令
;;;1345                       {
;;;1346                           Pre_EmissionSend(&EmissionCmd,STOP);
0001ac  2118              MOVS     r1,#0x18
0001ae  4839              LDR      r0,|L18.660|
0001b0  f7fffffe          BL       Pre_EmissionSend
;;;1347                           if(run_command(xTicksToWait)==1)   //停止成功
0001b4  f44f70fa          MOV      r0,#0x1f4
0001b8  f7fffffe          BL       run_command
0001bc  2801              CMP      r0,#1
0001be  d103              BNE      |L18.456|
;;;1348                           {
;;;1349   //							lock_flag1=0;
;;;1350   //							lock_flag2=0;
;;;1351   //							lock_flag3=0;
;;;1352                               Sys_State.Emis_working=0;
0001c0  2000              MOVS     r0,#0
0001c2  491e              LDR      r1,|L18.572|
0001c4  7188              STRB     r0,[r1,#6]
0001c6  e006              B        |L18.470|
                  |L18.456|
;;;1353                           }
;;;1354                           else     //不成功，返回停止失败，且处于报警状态
;;;1355                           {
;;;1356                               App_printf("Stop failure!\r\n");
0001c8  a037              ADR      r0,|L18.680|
0001ca  f7fffffe          BL       App_printf
0001ce  e002              B        |L18.470|
                  |L18.464|
;;;1357                           }
;;;1358                       }
;;;1359                   }
;;;1360               }
;;;1361           }
;;;1362           else
;;;1363           {
;;;1364               App_printf("vTaskTaskTask_hard_control TIME OUT!\r\n");
0001d0  a039              ADR      r0,|L18.696|
0001d2  f7fffffe          BL       App_printf
                  |L18.470|
;;;1365           }
;;;1366           if(xHandleTask_hard_monitor!=NULL)
0001d6  4806              LDR      r0,|L18.496|
0001d8  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_monitor
0001da  b130              CBZ      r0,|L18.490|
;;;1367           {
;;;1368               App_printf("hard_control task Resume hard_monitor task!!!\r\n");
0001dc  a040              ADR      r0,|L18.736|
0001de  f7fffffe          BL       App_printf
;;;1369               vTaskResume(xHandleTask_hard_monitor);
0001e2  4803              LDR      r0,|L18.496|
0001e4  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_monitor
0001e6  f7fffffe          BL       vTaskResume
                  |L18.490|
0001ea  e710              B        |L18.14|
;;;1370           }
;;;1371       }
;;;1372   }
;;;1373   
                          ENDP

                  |L18.492|
                          DCD      Monitor
                  |L18.496|
                          DCD      xHandleTask_hard_monitor
                  |L18.500|
0001f4  68617264          DCB      "hard_control task Suspend hard_monitor task!!!\r\n",0
0001f8  5f636f6e
0001fc  74726f6c
000200  20746173
000204  6b205375
000208  7370656e
00020c  64206861
000210  72645f6d
000214  6f6e6974
000218  6f722074
00021c  61736b21
000220  21210d0a
000224  00      
000225  00                DCB      0
000226  00                DCB      0
000227  00                DCB      0
                  |L18.552|
000228  48617264          DCB      "Hard//",214,180,208,208,178,217,215,247,"\r\n",0
00022c  2f2fd6b4
000230  d0d0b2d9
000234  d7f70d0a
000238  00      
000239  00                DCB      0
00023a  00                DCB      0
00023b  00                DCB      0
                  |L18.572|
                          DCD      Sys_State
                  |L18.576|
                          DCD      ADC_ConvertedValue
                  |L18.580|
                          DCD      0x400a6666
                  |L18.584|
                          DCD      0x40100000
                  |L18.588|
00024c  73797374          DCB      "system already open !\n",0
000250  656d2061
000254  6c726561
000258  6479206f
00025c  70656e20
000260  210a00  
000263  00                DCB      0
                  |L18.612|
000264  73797374          DCB      "system open succeed!\n",0
000268  656d206f
00026c  70656e20
000270  73756363
000274  65656421
000278  0a00    
00027a  00                DCB      0
00027b  00                DCB      0
                  |L18.636|
00027c  73797374          DCB      "system open failure!\n",0
000280  656d206f
000284  70656e20
000288  6661696c
00028c  75726521
000290  0a00    
000292  00                DCB      0
000293  00                DCB      0
                  |L18.660|
                          DCD      EmissionCmd
                  |L18.664|
                          DCD      lock_flag1
                  |L18.668|
                          DCD      lock_flag2
                  |L18.672|
                          DCD      lock_flag3
                  |L18.676|
                          DCD      Respond_Cmd
                  |L18.680|
0002a8  53746f70          DCB      "Stop failure!\r\n",0
0002ac  20666169
0002b0  6c757265
0002b4  210d0a00
                  |L18.696|
0002b8  76546173          DCB      "vTaskTaskTask_hard_control TIME OUT!\r\n",0
0002bc  6b546173
0002c0  6b546173
0002c4  6b5f6861
0002c8  72645f63
0002cc  6f6e7472
0002d0  6f6c2054
0002d4  494d4520
0002d8  4f555421
0002dc  0d0a00  
0002df  00                DCB      0
                  |L18.736|
0002e0  68617264          DCB      "hard_control task Resume hard_monitor task!!!\r\n",0
0002e4  5f636f6e
0002e8  74726f6c
0002ec  20746173
0002f0  6b205265
0002f4  73756d65
0002f8  20686172
0002fc  645f6d6f
000300  6e69746f
000304  72207461
000308  736b2121
00030c  210d0a00

                          AREA ||i.vTaskTask_hard_monitor||, CODE, READONLY, ALIGN=2

                  vTaskTask_hard_monitor PROC
;;;919     */
;;;920    void vTaskTask_hard_monitor(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;921    {
;;;922        const TickType_t xTicksToWait = 500; /* 最大延迟500ms */
000002  bf00              NOP      
;;;923        volatile uint8_t watch_count=0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;924    
;;;925        while(1)
000008  e104              B        |L19.532|
                  |L19.10|
;;;926        {
;;;927            if(Monitor.hard_control==1&&flash_3_once_flag==1)   //硬件接管
00000a  4883              LDR      r0,|L19.536|
00000c  7840              LDRB     r0,[r0,#1]  ; Monitor
00000e  2801              CMP      r0,#1
                  |L19.16|
000010  d11c              BNE      |L19.76|
000012  4882              LDR      r0,|L19.540|
000014  6800              LDR      r0,[r0,#0]  ; flash_3_once_flag
000016  2801              CMP      r0,#1
000018  d1fa              BNE      |L19.16|
;;;928            {
;;;929                /*debug*/
;;;930    //			App_printf("\r\n%d %d %d %d\r\n",Trans_open_Copy.Type[0],lock_flag1,lock_flag2,lock_flag3);
;;;931    //			vTaskDelay(1000);
;;;932                if(Monitor.need_open==1)
00001a  487f              LDR      r0,|L19.536|
00001c  7900              LDRB     r0,[r0,#4]  ; Monitor
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L19.48|
;;;933                {
;;;934                    xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
000022  2300              MOVS     r3,#0
000024  2201              MOVS     r2,#1
000026  2102              MOVS     r1,#2
000028  487d              LDR      r0,|L19.544|
00002a  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
00002c  f7fffffe          BL       xTaskGenericNotify
                  |L19.48|
;;;935                                BIT_1, /* 设置目标任务事件标志位 BIT_1 */
;;;936                                eSetBits); /* 将目标任务的事件标志位与 BIT_1 进行或操作，将结果赋值给事件标志位。*/
;;;937                }
;;;938                if(Trans_open_Copy.Type[0]==0)   //该停止了
000030  487c              LDR      r0,|L19.548|
000032  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000034  b958              CBNZ     r0,|L19.78|
;;;939                {
;;;940                    if(Sys_State.Emis_working==1)
000036  487c              LDR      r0,|L19.552|
000038  7980              LDRB     r0,[r0,#6]  ; Sys_State
00003a  2801              CMP      r0,#1
00003c  d1e8              BNE      |L19.16|
;;;941                    {
;;;942                        //停止
;;;943                        xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
00003e  2300              MOVS     r3,#0
000040  2201              MOVS     r2,#1
000042  2108              MOVS     r1,#8
000044  4876              LDR      r0,|L19.544|
000046  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
000048  f7fffffe          BL       xTaskGenericNotify
                  |L19.76|
00004c  e0df              B        |L19.526|
                  |L19.78|
;;;944                                    BIT_3, /* 设置目标任务事件标志位 BIT_3 */
;;;945                                    eSetBits); /* 将目标任务的事件标志位与 BIT_3 进行或操作，将结果赋值给事件标志位。*/
;;;946                    }
;;;947                }
;;;948                else if(Trans_open_Copy.Type[0]==1&&lock_flag1==0)     //固频  加个标志，让这个函数发射成功之后就不再执行了，只有停止过了，就清除
00004e  4875              LDR      r0,|L19.548|
000050  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000052  2801              CMP      r0,#1
000054  d13f              BNE      |L19.214|
000056  4875              LDR      r0,|L19.556|
000058  6800              LDR      r0,[r0,#0]  ; lock_flag1
00005a  bbb8              CBNZ     r0,|L19.204|
;;;949                {
;;;950                    if(Sys_State.FM_working!=1)   //不是调频中，即可查询状态
00005c  4872              LDR      r0,|L19.552|
00005e  7940              LDRB     r0,[r0,#5]  ; Sys_State
000060  2801              CMP      r0,#1
000062  d0f3              BEQ      |L19.76|
;;;951                    {
;;;952                        Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
000064  21ce              MOVS     r1,#0xce
000066  4872              LDR      r0,|L19.560|
000068  f7fffffe          BL       Pre_EmissionSend
;;;953                        if(run_command(xTicksToWait)==1)   //内部循环了3次
00006c  f44f70fa          MOV      r0,#0x1f4
000070  f7fffffe          BL       run_command
000074  2801              CMP      r0,#1
000076  d1e9              BNE      |L19.76|
;;;954                        {
;;;955                            if(Respond_Cmd.status==0)   //停止状态
000078  486e              LDR      r0,|L19.564|
00007a  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
00007c  b990              CBNZ     r0,|L19.164|
;;;956                            {
;;;957                                //有任务需要发射了
;;;958                                memcpy(Trans_open.Type,Trans_open_Copy.Type,19);
00007e  2213              MOVS     r2,#0x13
000080  4968              LDR      r1,|L19.548|
000082  486d              LDR      r0,|L19.568|
000084  f7fffffe          BL       __aeabi_memcpy
;;;959                                Sys_State.FM_working=1;//正在工作标志置位
000088  2001              MOVS     r0,#1
00008a  4967              LDR      r1,|L19.552|
00008c  7148              STRB     r0,[r1,#5]
;;;960                                xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
00008e  2300              MOVS     r3,#0
000090  2201              MOVS     r2,#1
000092  4611              MOV      r1,r2
000094  4862              LDR      r0,|L19.544|
000096  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
000098  f7fffffe          BL       xTaskGenericNotify
;;;961                                            BIT_0, /* 设置目标任务事件标志位 bit0 */
;;;962                                            eSetBits); /* 将目标任务的事件标志位与 BIT_0 进行或操作，将结果赋值给事件标志位。*/
;;;963                                Sys_State.FM_working=0;
00009c  2000              MOVS     r0,#0
00009e  4962              LDR      r1,|L19.552|
0000a0  7148              STRB     r0,[r1,#5]
0000a2  e0b4              B        |L19.526|
                  |L19.164|
;;;964                            }
;;;965                            else
;;;966                            {
;;;967                                if(memcmp(Trans_open.Freq,Respond_Cmd.frequency,3)!=0||Respond_Cmd.mode!=1)   //NOTE:这里使用Trans_open，可能PC控制发射之后崩掉，所以不是使用Trans_open_Copy
0000a4  2203              MOVS     r2,#3
0000a6  4963              LDR      r1,|L19.564|
0000a8  1cc9              ADDS     r1,r1,#3
0000aa  4863              LDR      r0,|L19.568|
0000ac  1d00              ADDS     r0,r0,#4
0000ae  f7fffffe          BL       memcmp
0000b2  b918              CBNZ     r0,|L19.188|
0000b4  485f              LDR      r0,|L19.564|
0000b6  7a40              LDRB     r0,[r0,#9]  ; Respond_Cmd
0000b8  2801              CMP      r0,#1
0000ba  d008              BEQ      |L19.206|
                  |L19.188|
;;;968                                {
;;;969                                    //停止
;;;970                                    xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
0000bc  2300              MOVS     r3,#0
0000be  2201              MOVS     r2,#1
0000c0  2108              MOVS     r1,#8
0000c2  4857              LDR      r0,|L19.544|
0000c4  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
0000c6  f7fffffe          BL       xTaskGenericNotify
0000ca  e0a0              B        |L19.526|
                  |L19.204|
0000cc  e003              B        |L19.214|
                  |L19.206|
;;;971                                                BIT_3, /* 设置目标任务事件标志位 BIT_3 */
;;;972                                                eSetBits); /* 将目标任务的事件标志位与 BIT_3 进行或操作，将结果赋值给事件标志位。*/
;;;973                                }
;;;974                                else
;;;975                                {
;;;976                                    lock_flag1=1;
0000ce  2001              MOVS     r0,#1
0000d0  4956              LDR      r1,|L19.556|
0000d2  6008              STR      r0,[r1,#0]  ; lock_flag1
0000d4  e09b              B        |L19.526|
                  |L19.214|
;;;977                                }
;;;978                            }
;;;979                        }
;;;980                    }
;;;981                }
;;;982                else if(Trans_open_Copy.Type[0]==2&&lock_flag2==0)     //双频
0000d6  4853              LDR      r0,|L19.548|
0000d8  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
0000da  2802              CMP      r0,#2
0000dc  d147              BNE      |L19.366|
0000de  4857              LDR      r0,|L19.572|
0000e0  6800              LDR      r0,[r0,#0]  ; lock_flag2
0000e2  bbe0              CBNZ     r0,|L19.350|
;;;983                {
;;;984                    if(Sys_State.FM_working!=1)   //不是调频中，即可查询状态
0000e4  4850              LDR      r0,|L19.552|
0000e6  7940              LDRB     r0,[r0,#5]  ; Sys_State
0000e8  2801              CMP      r0,#1
0000ea  d0af              BEQ      |L19.76|
;;;985                    {
;;;986                        Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
0000ec  21ce              MOVS     r1,#0xce
0000ee  4850              LDR      r0,|L19.560|
0000f0  f7fffffe          BL       Pre_EmissionSend
;;;987                        if(run_command(xTicksToWait)==1)   //内部循环了3次
0000f4  f44f70fa          MOV      r0,#0x1f4
0000f8  f7fffffe          BL       run_command
0000fc  2801              CMP      r0,#1
0000fe  d1a5              BNE      |L19.76|
;;;988                        {
;;;989                            if(Respond_Cmd.status==0)   //停止状态
000100  484c              LDR      r0,|L19.564|
000102  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
000104  b990              CBNZ     r0,|L19.300|
;;;990                            {
;;;991                                //有任务需要发射了
;;;992                                memcpy(Trans_open.Type,Trans_open_Copy.Type,19);
000106  2213              MOVS     r2,#0x13
000108  4946              LDR      r1,|L19.548|
00010a  484b              LDR      r0,|L19.568|
00010c  f7fffffe          BL       __aeabi_memcpy
;;;993                                Sys_State.FM_working=1;//正在工作标志置位
000110  2001              MOVS     r0,#1
000112  4945              LDR      r1,|L19.552|
000114  7148              STRB     r0,[r1,#5]
;;;994                                xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
000116  2300              MOVS     r3,#0
000118  2201              MOVS     r2,#1
00011a  4611              MOV      r1,r2
00011c  4840              LDR      r0,|L19.544|
00011e  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
000120  f7fffffe          BL       xTaskGenericNotify
;;;995                                            BIT_0, /* 设置目标任务事件标志位 BIT_0 */
;;;996                                            eSetBits); /* 将目标任务的事件标志位与 BIT_0 进行或操作，将结果赋值给事件标志位。*/
;;;997                                Sys_State.FM_working=0;
000124  2000              MOVS     r0,#0
000126  4940              LDR      r1,|L19.552|
000128  7148              STRB     r0,[r1,#5]
00012a  e070              B        |L19.526|
                  |L19.300|
;;;998                            }
;;;999                            else
;;;1000                           {
;;;1001                               /*NOTE ：这里排序为1 2 3,3被踢出之后，下面的判断不会执行停止，bug*/
;;;1002                               /*NOTE ：这里排序为1 2 3,3被踢出之后，下面的判断不会执行停止，bug*/
;;;1003                               /*NOTE ：这里排序为1 2 3,3被踢出之后，下面的判断不会执行停止，bug*/
;;;1004                               if((memcmp(Trans_open.Freq,Respond_Cmd.frequency,3)!=0\
00012c  2203              MOVS     r2,#3
00012e  4941              LDR      r1,|L19.564|
000130  1cc9              ADDS     r1,r1,#3
000132  4841              LDR      r0,|L19.568|
000134  1d00              ADDS     r0,r0,#4
000136  f7fffffe          BL       memcmp
00013a  b950              CBNZ     r0,|L19.338|
;;;1005                                       ||memcmp((uint8_t*)Trans_open.Freq+4,Respond_Cmd2.frequency,3)!=0)||Respond_Cmd.mode!=2)   //NOTE:这里使用Trans_open，可能PC控制发射之后崩掉，所以不是使用Trans_open_Copy
00013c  2203              MOVS     r2,#3
00013e  4940              LDR      r1,|L19.576|
000140  483d              LDR      r0,|L19.568|
000142  3008              ADDS     r0,r0,#8
000144  f7fffffe          BL       memcmp
000148  b918              CBNZ     r0,|L19.338|
00014a  483a              LDR      r0,|L19.564|
00014c  7a40              LDRB     r0,[r0,#9]  ; Respond_Cmd
00014e  2802              CMP      r0,#2
000150  d009              BEQ      |L19.358|
                  |L19.338|
;;;1006                               {
;;;1007                                   //停止
;;;1008                                   xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
000152  2300              MOVS     r3,#0
000154  2201              MOVS     r2,#1
000156  2108              MOVS     r1,#8
000158  4831              LDR      r0,|L19.544|
00015a  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
00015c  e000              B        |L19.352|
                  |L19.350|
00015e  e006              B        |L19.366|
                  |L19.352|
000160  f7fffffe          BL       xTaskGenericNotify
000164  e053              B        |L19.526|
                  |L19.358|
;;;1009                                               BIT_3, /* 设置目标任务事件标志位 BIT_3 */
;;;1010                                               eSetBits); /* 将目标任务的事件标志位与 BIT_3 进行或操作，将结果赋值给事件标志位。*/
;;;1011                               }
;;;1012                               else
;;;1013                               {
;;;1014                                   lock_flag2=1;
000166  2001              MOVS     r0,#1
000168  4934              LDR      r1,|L19.572|
00016a  6008              STR      r0,[r1,#0]  ; lock_flag2
00016c  e04f              B        |L19.526|
                  |L19.366|
;;;1015                               }
;;;1016                           }
;;;1017                       }
;;;1018                   }
;;;1019               }
;;;1020               else if(Trans_open_Copy.Type[0]==3&&lock_flag3==0)     //三频
00016e  482d              LDR      r0,|L19.548|
000170  7800              LDRB     r0,[r0,#0]  ; Trans_open_Copy
000172  2803              CMP      r0,#3
000174  d14b              BNE      |L19.526|
000176  4833              LDR      r0,|L19.580|
000178  6800              LDR      r0,[r0,#0]  ; lock_flag3
00017a  bb10              CBNZ     r0,|L19.450|
;;;1021               {
;;;1022                   if(Sys_State.FM_working!=1)   //不是调频中，即可查询状态
00017c  482a              LDR      r0,|L19.552|
00017e  7940              LDRB     r0,[r0,#5]  ; Sys_State
000180  2801              CMP      r0,#1
000182  d044              BEQ      |L19.526|
;;;1023                   {
;;;1024                       Pre_EmissionSend(&EmissionCmd,INQUIRE);//查询组包
000184  21ce              MOVS     r1,#0xce
000186  482a              LDR      r0,|L19.560|
000188  f7fffffe          BL       Pre_EmissionSend
;;;1025                       if(run_command(xTicksToWait)==1)   //内部循环了3次
00018c  f44f70fa          MOV      r0,#0x1f4
000190  f7fffffe          BL       run_command
000194  2801              CMP      r0,#1
000196  d13a              BNE      |L19.526|
;;;1026                       {
;;;1027                           if(Respond_Cmd.status==0)   //停止状态
000198  4826              LDR      r0,|L19.564|
00019a  7a00              LDRB     r0,[r0,#8]  ; Respond_Cmd
00019c  b990              CBNZ     r0,|L19.452|
;;;1028                           {
;;;1029                               //有任务需要发射了
;;;1030                               memcpy(Trans_open.Type,Trans_open_Copy.Type,19);
00019e  2213              MOVS     r2,#0x13
0001a0  4920              LDR      r1,|L19.548|
0001a2  4825              LDR      r0,|L19.568|
0001a4  f7fffffe          BL       __aeabi_memcpy
;;;1031                               Sys_State.FM_working=1;//正在工作标志置位
0001a8  2001              MOVS     r0,#1
0001aa  491f              LDR      r1,|L19.552|
0001ac  7148              STRB     r0,[r1,#5]
;;;1032                               xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
0001ae  2300              MOVS     r3,#0
0001b0  2201              MOVS     r2,#1
0001b2  4611              MOV      r1,r2
0001b4  481a              LDR      r0,|L19.544|
0001b6  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
0001b8  f7fffffe          BL       xTaskGenericNotify
;;;1033                                           BIT_0, /* 设置目标任务事件标志位 BIT_0 */
;;;1034                                           eSetBits); /* 将目标任务的事件标志位与 BIT_0 进行或操作，将结果赋值给事件标志位。*/
;;;1035                               Sys_State.FM_working=0;
0001bc  2000              MOVS     r0,#0
0001be  491a              LDR      r1,|L19.552|
0001c0  7148              STRB     r0,[r1,#5]
                  |L19.450|
0001c2  e024              B        |L19.526|
                  |L19.452|
;;;1036                           }
;;;1037                           else
;;;1038                           {
;;;1039                               if((memcmp(Trans_open.Freq,Respond_Cmd.frequency,3)!=0\
0001c4  2203              MOVS     r2,#3
0001c6  491b              LDR      r1,|L19.564|
0001c8  1cc9              ADDS     r1,r1,#3
0001ca  481b              LDR      r0,|L19.568|
0001cc  1d00              ADDS     r0,r0,#4
0001ce  f7fffffe          BL       memcmp
0001d2  b988              CBNZ     r0,|L19.504|
;;;1040                                       ||memcmp((uint8_t*)Trans_open.Freq+4,Respond_Cmd2.frequency,3)!=0\
0001d4  2203              MOVS     r2,#3
0001d6  491a              LDR      r1,|L19.576|
0001d8  4817              LDR      r0,|L19.568|
0001da  3008              ADDS     r0,r0,#8
0001dc  f7fffffe          BL       memcmp
0001e0  b950              CBNZ     r0,|L19.504|
;;;1041                                       ||memcmp((uint8_t*)Trans_open.Freq+8,Respond_Cmd3.frequency,3)!=0)||Respond_Cmd.mode!=3)   //NOTE:这里使用Trans_open，可能PC控制发射之后崩掉，所以不是使用Trans_open_Copy
0001e2  2203              MOVS     r2,#3
0001e4  4918              LDR      r1,|L19.584|
0001e6  4814              LDR      r0,|L19.568|
0001e8  300c              ADDS     r0,r0,#0xc
0001ea  f7fffffe          BL       memcmp
0001ee  b918              CBNZ     r0,|L19.504|
0001f0  4810              LDR      r0,|L19.564|
0001f2  7a40              LDRB     r0,[r0,#9]  ; Respond_Cmd
0001f4  2803              CMP      r0,#3
0001f6  d007              BEQ      |L19.520|
                  |L19.504|
;;;1042                               {
;;;1043                                   //停止
;;;1044                                   xTaskNotify(xHandleTask_hard_control, /* 目标任务的优先级更低，会先执行完本任务才去执行其他任务 */
0001f8  2300              MOVS     r3,#0
0001fa  2201              MOVS     r2,#1
0001fc  2108              MOVS     r1,#8
0001fe  4808              LDR      r0,|L19.544|
000200  6800              LDR      r0,[r0,#0]  ; xHandleTask_hard_control
000202  f7fffffe          BL       xTaskGenericNotify
000206  e002              B        |L19.526|
                  |L19.520|
;;;1045                                               BIT_3, /* 设置目标任务事件标志位 BIT_3 */
;;;1046                                               eSetBits); /* 将目标任务的事件标志位与 BIT_3 进行或操作，将结果赋值给事件标志位。*/
;;;1047                               }
;;;1048                               else
;;;1049                               {
;;;1050                                   lock_flag3=1;
000208  2001              MOVS     r0,#1
00020a  490e              LDR      r1,|L19.580|
00020c  6008              STR      r0,[r1,#0]  ; lock_flag3
                  |L19.526|
;;;1051                               }
;;;1052                           }
;;;1053                       }
;;;1054                   }
;;;1055               }
;;;1056           }
;;;1057           vTaskDelay(100);
00020e  2064              MOVS     r0,#0x64
000210  f7fffffe          BL       vTaskDelay
                  |L19.532|
000214  e6f9              B        |L19.10|
;;;1058           //	if(watch_count++>=2)
;;;1059           //	{
;;;1060           //	watch_count=0;
;;;1061           //	IWDG_Feed();
;;;1062           //}
;;;1063   
;;;1064       }
;;;1065   }
;;;1066   
                          ENDP

000216  0000              DCW      0x0000
                  |L19.536|
                          DCD      Monitor
                  |L19.540|
                          DCD      flash_3_once_flag
                  |L19.544|
                          DCD      xHandleTask_hard_control
                  |L19.548|
                          DCD      Trans_open_Copy
                  |L19.552|
                          DCD      Sys_State
                  |L19.556|
                          DCD      lock_flag1
                  |L19.560|
                          DCD      EmissionCmd
                  |L19.564|
                          DCD      Respond_Cmd
                  |L19.568|
                          DCD      Trans_open+0x1
                  |L19.572|
                          DCD      lock_flag2
                  |L19.576|
                          DCD      Respond_Cmd2+0x3
                  |L19.580|
                          DCD      lock_flag3
                  |L19.584|
                          DCD      Respond_Cmd3+0x3

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  z
                          %        1024
                  int_z
                          %        256
                  f
                          %        1024
                  Emission_Rx
                          %        64
                  Emission_Tx
                          %        64
                  Respond_Cmd
                          %        15
                  Respond_Cmd2
                          %        15
                  Respond_Cmd3
                          %        15
                  Sys_State
                          %        23
                  Show_Parameter
                          %        20
                  State_monitor
                          %        200
                  eADC0_buff
                          %        400
                  eADC1_buff
                          %        400
                  eADC2_buff
                          %        400
                  eADC3_buff
                          %        400
                  SWR_array
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  begain
                          DCD      0x00000000
                  end
                          DCD      0x00000000
                  clean_sweeping
000008  00                DCB      0x00
                  clean_gain
000009  00                DCB      0x00
                  clean_reduction
00000a  00                DCB      0x00
                  clean_FM
00000b  00                DCB      0x00
                  xHandleTaskEmis_Send
                          DCD      0x00000000
                  xHandleTask_Receive
                          DCD      0x00000000
                  xHandleTask_hard_control
                          DCD      0x00000000
                  xHandleTask_hard_monitor
                          DCD      0x00000000
                  EmissionCmd
                          DCD      0x00000000
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  Best_band
                          %        8
                  Temperature_Humidity
                          %        8
                  Monitor
                          DCD      0x00000000
000038  00                DCB      0x00
                  Hard_control
000039  000000            DCB      0x00,0x00,0x00
                  lock_flag1
                          DCD      0x00000000
                  lock_flag2
                          DCD      0x00000000
                  lock_flag3
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\bsp_emission.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_emission_c_25cedbbb____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_emission_c_25cedbbb____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_emission_c_25cedbbb____REVSH|
#line 128
|__asm___14_bsp_emission_c_25cedbbb____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
