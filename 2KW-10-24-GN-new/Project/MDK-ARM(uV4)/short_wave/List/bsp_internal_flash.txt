; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\bsp_internal_flash.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\bsp_internal_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\bsp_internal_flash.crf ..\..\User\internal_flash\bsp_internal_flash.c]
                          THUMB

                          AREA ||i.Flash2_to_AcceptAPP||, CODE, READONLY, ALIGN=2

                  Flash2_to_AcceptAPP PROC
;;;671    //读取flash内的正向功率和驻波比到Scan_FrqBackx
;;;672    _Bool Flash2_to_AcceptAPP(void)
000000  b570              PUSH     {r4-r6,lr}
;;;673    {
000002  b0bc              SUB      sp,sp,#0xf0
;;;674        uint32_t i = 0;
000004  2500              MOVS     r5,#0
;;;675        uint32_t Address = 0x00;//记录写入的地址
000006  2400              MOVS     r4,#0
;;;676    	
;;;677    	uint8_t forward_power[240];
;;;678    //	uint32_t temp[424];
;;;679    
;;;680        /* 检查写入的数据是否正确 */
;;;681        Address = WRITE_START_ADDR_second;
000008  4c67              LDR      r4,|L1.424|
;;;682        flash_2_once_flag=*(__IO uint32_t*) Address;
00000a  6820              LDR      r0,[r4,#0]
00000c  4967              LDR      r1,|L1.428|
00000e  6008              STR      r0,[r1,#0]  ; flash_2_once_flag
;;;683        System.already_swept = flash_2_once_flag;
000010  4608              MOV      r0,r1
000012  6800              LDR      r0,[r0,#0]  ; flash_2_once_flag
000014  4966              LDR      r1,|L1.432|
000016  70c8              STRB     r0,[r1,#3]
;;;684    
;;;685    //    if( System.already_swept != 1 )
;;;686    //    {
;;;687    //        return 0;
;;;688    //    }
;;;689    
;;;690        Address = Address + 4;
000018  1d24              ADDS     r4,r4,#4
;;;691        for(i=0; i<466 && Address < WRITE_END_ADDR_second ; i++)
00001a  bf00              NOP      
00001c  e005              B        |L1.42|
                  |L1.30|
;;;692        {
;;;693            flash2_arry[i].i_data=(*(__IO uint32_t*) Address);
00001e  6820              LDR      r0,[r4,#0]
000020  4964              LDR      r1,|L1.436|
000022  f8410025          STR      r0,[r1,r5,LSL #2]
;;;694            Address = Address + 4;
000026  1d24              ADDS     r4,r4,#4
000028  1c6d              ADDS     r5,r5,#1              ;691
                  |L1.42|
00002a  f5b57fe9          CMP      r5,#0x1d2             ;691
00002e  d202              BCS      |L1.54|
000030  4861              LDR      r0,|L1.440|
000032  4284              CMP      r4,r0                 ;691
000034  d3f3              BCC      |L1.30|
                  |L1.54|
;;;695        }
;;;696    
;;;697        for(i=0; i<10 && Address < WRITE_END_ADDR_second ; i++)
000036  2500              MOVS     r5,#0
000038  e005              B        |L1.70|
                  |L1.58|
;;;698        {
;;;699            freq_band_time_stamp[i]=(*(__IO uint32_t*) Address);
00003a  6820              LDR      r0,[r4,#0]
00003c  495f              LDR      r1,|L1.444|
00003e  f8410025          STR      r0,[r1,r5,LSL #2]
;;;700            Address = Address + 4;
000042  1d24              ADDS     r4,r4,#4
000044  1c6d              ADDS     r5,r5,#1              ;697
                  |L1.70|
000046  2d0a              CMP      r5,#0xa               ;697
000048  d202              BCS      |L1.80|
00004a  485b              LDR      r0,|L1.440|
00004c  4284              CMP      r4,r0                 ;697
00004e  d3f4              BCC      |L1.58|
                  |L1.80|
;;;701        }
;;;702    
;;;703        memcpy(SWR_array, flash2_arry, 233*4);						//驻波比
000050  f44f7269          MOV      r2,#0x3a4
000054  4957              LDR      r1,|L1.436|
000056  485a              LDR      r0,|L1.448|
000058  f7fffffe          BL       __aeabi_memcpy4
;;;704        memcpy(Forward_Power_array, flash2_arry+233, 233*4);		//正向功率
00005c  f44f7269          MOV      r2,#0x3a4
000060  4958              LDR      r1,|L1.452|
000062  4859              LDR      r0,|L1.456|
000064  f7fffffe          BL       __aeabi_memcpy4
;;;705    
;;;706    	for(int i=0; i<233; i++)
000068  2600              MOVS     r6,#0
00006a  e008              B        |L1.126|
                  |L1.108|
;;;707    	{
;;;708    		forward_power[i] = (uint8_t)Forward_Power_array[i];
00006c  4956              LDR      r1,|L1.456|
00006e  f8510026          LDR      r0,[r1,r6,LSL #2]
000072  f7fffffe          BL       __aeabi_f2uiz
000076  b2c0              UXTB     r0,r0
000078  f80d0006          STRB     r0,[sp,r6]
00007c  1c76              ADDS     r6,r6,#1              ;706
                  |L1.126|
00007e  2ee9              CMP      r6,#0xe9              ;706
000080  dbf4              BLT      |L1.108|
;;;709    	}
;;;710    		memcpy(Scan_FrqBack1.swr,SWR_array,20*4);			  //3.2-4.9
000082  2250              MOVS     r2,#0x50
000084  494e              LDR      r1,|L1.448|
000086  4851              LDR      r0,|L1.460|
000088  f7fffffe          BL       __aeabi_memcpy
;;;711        memcpy(Scan_FrqBack2.swr,SWR_array+20,20*4);		//5-6.9
00008c  2250              MOVS     r2,#0x50
00008e  494c              LDR      r1,|L1.448|
000090  3150              ADDS     r1,r1,#0x50
000092  484f              LDR      r0,|L1.464|
000094  f7fffffe          BL       __aeabi_memcpy
;;;712        memcpy(Scan_FrqBack3.swr,	SWR_array+40,	20*4);	//7-8.9
000098  2250              MOVS     r2,#0x50
00009a  4949              LDR      r1,|L1.448|
00009c  31a0              ADDS     r1,r1,#0xa0
00009e  484d              LDR      r0,|L1.468|
0000a0  f7fffffe          BL       __aeabi_memcpy
;;;713        memcpy(Scan_FrqBack4.swr,	SWR_array+60,	20*4);	//9-10.9
0000a4  2250              MOVS     r2,#0x50
0000a6  4946              LDR      r1,|L1.448|
0000a8  31f0              ADDS     r1,r1,#0xf0
0000aa  484b              LDR      r0,|L1.472|
0000ac  f7fffffe          BL       __aeabi_memcpy
;;;714        memcpy(Scan_FrqBack5.swr,	SWR_array+80,	20*4);	//11-12.9
0000b0  2250              MOVS     r2,#0x50
0000b2  494a              LDR      r1,|L1.476|
0000b4  484a              LDR      r0,|L1.480|
0000b6  f7fffffe          BL       __aeabi_memcpy
;;;715        memcpy(Scan_FrqBack6.swr,	SWR_array+100,	20*4);	//13-14.9
0000ba  2250              MOVS     r2,#0x50
0000bc  4947              LDR      r1,|L1.476|
0000be  3150              ADDS     r1,r1,#0x50
0000c0  4848              LDR      r0,|L1.484|
0000c2  f7fffffe          BL       __aeabi_memcpy
;;;716        memcpy(Scan_FrqBack7.swr,	SWR_array+120,	20*4);	//15-16.9
0000c6  2250              MOVS     r2,#0x50
0000c8  4944              LDR      r1,|L1.476|
0000ca  31a0              ADDS     r1,r1,#0xa0
0000cc  4846              LDR      r0,|L1.488|
0000ce  f7fffffe          BL       __aeabi_memcpy
;;;717        memcpy(Scan_FrqBack8.swr,	SWR_array+140,	20*4);	//17-18.9
0000d2  2250              MOVS     r2,#0x50
0000d4  4941              LDR      r1,|L1.476|
0000d6  31f0              ADDS     r1,r1,#0xf0
0000d8  4844              LDR      r0,|L1.492|
0000da  f7fffffe          BL       __aeabi_memcpy
;;;718        memcpy(Scan_FrqBack9.swr,	SWR_array+160,	20*4);	//19-20.9
0000de  2250              MOVS     r2,#0x50
0000e0  4943              LDR      r1,|L1.496|
0000e2  4844              LDR      r0,|L1.500|
0000e4  f7fffffe          BL       __aeabi_memcpy
;;;719        memcpy(Scan_FrqBack10.swr,	SWR_array+180,	20*4);	//21-22.9
0000e8  2250              MOVS     r2,#0x50
0000ea  4941              LDR      r1,|L1.496|
0000ec  3150              ADDS     r1,r1,#0x50
0000ee  4842              LDR      r0,|L1.504|
0000f0  f7fffffe          BL       __aeabi_memcpy
;;;720        memcpy(Scan_FrqBack11.swr,	SWR_array+200,	20*4);	//23-24.9
0000f4  2250              MOVS     r2,#0x50
0000f6  493e              LDR      r1,|L1.496|
0000f8  31a0              ADDS     r1,r1,#0xa0
0000fa  4840              LDR      r0,|L1.508|
0000fc  f7fffffe          BL       __aeabi_memcpy
;;;721        memcpy(Scan_FrqBack12.swr,	SWR_array+220,	12*4);	//25-26.1
000100  2230              MOVS     r2,#0x30
000102  493b              LDR      r1,|L1.496|
000104  31f0              ADDS     r1,r1,#0xf0
000106  483e              LDR      r0,|L1.512|
000108  f7fffffe          BL       __aeabi_memcpy
;;;722    
;;;723    	  memcpy(Scan_FrqBack1.Power_UP,	forward_power,		20);	//3.2-4.9
00010c  2214              MOVS     r2,#0x14
00010e  4669              MOV      r1,sp
000110  482e              LDR      r0,|L1.460|
000112  3050              ADDS     r0,r0,#0x50
000114  f7fffffe          BL       __aeabi_memcpy
;;;724        memcpy(Scan_FrqBack2.Power_UP,	forward_power+20,		20);	//5-6.9
000118  2214              MOVS     r2,#0x14
00011a  a905              ADD      r1,sp,#0x14
00011c  482c              LDR      r0,|L1.464|
00011e  3050              ADDS     r0,r0,#0x50
000120  f7fffffe          BL       __aeabi_memcpy
;;;725        memcpy(Scan_FrqBack3.Power_UP,	forward_power+40,		20);	//7-8.9
000124  2214              MOVS     r2,#0x14
000126  a90a              ADD      r1,sp,#0x28
000128  482a              LDR      r0,|L1.468|
00012a  3050              ADDS     r0,r0,#0x50
00012c  f7fffffe          BL       __aeabi_memcpy
;;;726        memcpy(Scan_FrqBack4.Power_UP,	forward_power+60,		20);	//9-10.9
000130  2214              MOVS     r2,#0x14
000132  a90f              ADD      r1,sp,#0x3c
000134  4828              LDR      r0,|L1.472|
000136  3050              ADDS     r0,r0,#0x50
000138  f7fffffe          BL       __aeabi_memcpy
;;;727        memcpy(Scan_FrqBack5.Power_UP,	forward_power+80,		20);	//11-12.9
00013c  2214              MOVS     r2,#0x14
00013e  a914              ADD      r1,sp,#0x50
000140  4827              LDR      r0,|L1.480|
000142  3050              ADDS     r0,r0,#0x50
000144  f7fffffe          BL       __aeabi_memcpy
;;;728        memcpy(Scan_FrqBack6.Power_UP,	forward_power+100,	20);	//13-14.9
000148  2214              MOVS     r2,#0x14
00014a  a919              ADD      r1,sp,#0x64
00014c  4825              LDR      r0,|L1.484|
00014e  3050              ADDS     r0,r0,#0x50
000150  f7fffffe          BL       __aeabi_memcpy
;;;729        memcpy(Scan_FrqBack7.Power_UP,	forward_power+120,	20);	//15-16.9
000154  2214              MOVS     r2,#0x14
000156  a91e              ADD      r1,sp,#0x78
000158  4823              LDR      r0,|L1.488|
00015a  3050              ADDS     r0,r0,#0x50
00015c  f7fffffe          BL       __aeabi_memcpy
;;;730        memcpy(Scan_FrqBack8.Power_UP,	forward_power+140,	20);	//17-18.9
000160  2214              MOVS     r2,#0x14
000162  a923              ADD      r1,sp,#0x8c
000164  4821              LDR      r0,|L1.492|
000166  3050              ADDS     r0,r0,#0x50
000168  f7fffffe          BL       __aeabi_memcpy
;;;731        memcpy(Scan_FrqBack9.Power_UP,	forward_power+160,	20);	//19-20.9
00016c  2214              MOVS     r2,#0x14
00016e  a928              ADD      r1,sp,#0xa0
000170  4820              LDR      r0,|L1.500|
000172  3050              ADDS     r0,r0,#0x50
000174  f7fffffe          BL       __aeabi_memcpy
;;;732        memcpy(Scan_FrqBack10.Power_UP,	forward_power+180,	20);	//21-22.9
000178  2214              MOVS     r2,#0x14
00017a  a92d              ADD      r1,sp,#0xb4
00017c  481e              LDR      r0,|L1.504|
00017e  3050              ADDS     r0,r0,#0x50
000180  f7fffffe          BL       __aeabi_memcpy
;;;733        memcpy(Scan_FrqBack11.Power_UP,	forward_power+200,	20);	//23-24.9
000184  2214              MOVS     r2,#0x14
000186  a932              ADD      r1,sp,#0xc8
000188  481c              LDR      r0,|L1.508|
00018a  3050              ADDS     r0,r0,#0x50
00018c  f7fffffe          BL       __aeabi_memcpy
;;;734        memcpy(Scan_FrqBack12.Power_UP,	forward_power+220,	12);	//25-26.1
000190  481b              LDR      r0,|L1.512|
000192  3050              ADDS     r0,r0,#0x50
000194  9937              LDR      r1,[sp,#0xdc]
000196  6001              STR      r1,[r0,#0]  ; Scan_FrqBack12
000198  9938              LDR      r1,[sp,#0xe0]
00019a  6041              STR      r1,[r0,#4]  ; Scan_FrqBack12
00019c  9939              LDR      r1,[sp,#0xe4]
00019e  6081              STR      r1,[r0,#8]  ; Scan_FrqBack12
;;;735        return 1;
0001a0  2001              MOVS     r0,#1
;;;736    }
0001a2  b03c              ADD      sp,sp,#0xf0
0001a4  bd70              POP      {r4-r6,pc}
;;;737    
                          ENDP

0001a6  0000              DCW      0x0000
                  |L1.424|
                          DCD      0x08032800
                  |L1.428|
                          DCD      flash_2_once_flag
                  |L1.432|
                          DCD      System
                  |L1.436|
                          DCD      flash2_arry
                  |L1.440|
                          DCD      0x08032fff
                  |L1.444|
                          DCD      freq_band_time_stamp
                  |L1.448|
                          DCD      SWR_array
                  |L1.452|
                          DCD      flash2_arry+0x3a4
                  |L1.456|
                          DCD      Forward_Power_array
                  |L1.460|
                          DCD      Scan_FrqBack1+0xa
                  |L1.464|
                          DCD      Scan_FrqBack2+0xa
                  |L1.468|
                          DCD      Scan_FrqBack3+0xa
                  |L1.472|
                          DCD      Scan_FrqBack4+0xa
                  |L1.476|
                          DCD      SWR_array+0x140
                  |L1.480|
                          DCD      Scan_FrqBack5+0xa
                  |L1.484|
                          DCD      Scan_FrqBack6+0xa
                  |L1.488|
                          DCD      Scan_FrqBack7+0xa
                  |L1.492|
                          DCD      Scan_FrqBack8+0xa
                  |L1.496|
                          DCD      SWR_array+0x280
                  |L1.500|
                          DCD      Scan_FrqBack9+0xa
                  |L1.504|
                          DCD      Scan_FrqBack10+0xa
                  |L1.508|
                          DCD      Scan_FrqBack11+0xa
                  |L1.512|
                          DCD      Scan_FrqBack12+0xa

                          AREA ||i.Flash3_to_AcceptAPP||, CODE, READONLY, ALIGN=2

                  Flash3_to_AcceptAPP PROC
;;;779    //读取运行图标志位和数量
;;;780    _Bool Flash3_to_AcceptAPP(void)
000000  2100              MOVS     r1,#0
;;;781    {
;;;782        uint32_t Address = 0x00;				//记录写入的地址
;;;783    
;;;784        /* 检查写入的数据是否正确 */
;;;785        Address = WRITE_START_ADDR_third;
000002  4905              LDR      r1,|L2.24|
;;;786        flash_3_once_flag=*(__IO uint32_t*) Address;
000004  6808              LDR      r0,[r1,#0]
000006  4a05              LDR      r2,|L2.28|
000008  6010              STR      r0,[r2,#0]  ; flash_3_once_flag
;;;787        Address=Address+4;
00000a  1d09              ADDS     r1,r1,#4
;;;788    
;;;789        flash3_Save=*(__IO uint32_t*) Address;
00000c  6808              LDR      r0,[r1,#0]
00000e  4a04              LDR      r2,|L2.32|
000010  7010              STRB     r0,[r2,#0]
;;;790    
;;;791    //    App_printf("flash_3_once_flag=%d, flash3_Save=%d\r\n",flash_3_once_flag,flash3_Save);
;;;792    //    if(flash_3_once_flag==1)
;;;793    //    {
;;;794    //        for(int i=0; i<100; i++)
;;;795    //        {
;;;796    //            if(i<4||(i>=5&&i<=7)||(i<14&&i>=10)||(i>=15&&i<=17)||(i<24&&i>=20)||(i>=25&&i<=27)||(i<34&&i>=30)\
;;;797    //                    ||(i>=35&&i<=37)||(i<44&&i>=40)||(i>=45&&i<=47)||(i<54&&i>=50)||(i>=55&&i<=57)||(i<64&&i>=60)||\
;;;798    //                    (i>=65&&i<=67)||(i<74&&i>=70)||(i>=75&&i<=77)||(i<84&&i>=80)||(i>=85&&i<=87)||(i<94&&i>=90))
;;;799    //                App_printf("%02x ",Flash_p1[i]);
;;;800    //        }
;;;801    //        App_printf("\r\n");
;;;802    //    }
;;;803    //
;;;804        return 0;
000012  2000              MOVS     r0,#0
;;;805    }
000014  4770              BX       lr
;;;806    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x08033000
                  |L2.28|
                          DCD      flash_3_once_flag
                  |L2.32|
                          DCD      flash3_Save

                          AREA ||i.Flash_Read_Run_Diagram||, CODE, READONLY, ALIGN=2

                  Flash_Read_Run_Diagram PROC
;;;742      */
;;;743    int Flash_Read_Run_Diagram(uint32_t start,uint32_t end,uint8_t judge_read_diagram)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;744    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;745        uint32_t Address = 0x00;				//记录写入的地址
00000a  2500              MOVS     r5,#0
;;;746        uint8_t *Flash_p=NULL;
00000c  2600              MOVS     r6,#0
;;;747    
;;;748        switch(judge_read_diagram)
00000e  2c0b              CMP      r4,#0xb
000010  d225              BCS      |L3.94|
000012  e8dff004          TBB      [pc,r4]
000016  2406              DCB      0x24,0x06
000018  090c0f12          DCB      0x09,0x0c,0x0f,0x12
00001c  15181b1e          DCB      0x15,0x18,0x1b,0x1e
000020  2100              DCB      0x21,0x00
;;;749        {
;;;750    		case 1:			Flash_p=Flash_p1;			break;
000022  481b              LDR      r0,|L3.144|
000024  6806              LDR      r6,[r0,#0]  ; Flash_p1
000026  e01e              B        |L3.102|
;;;751    		case 2:			Flash_p=Flash_p2;			break;
000028  481a              LDR      r0,|L3.148|
00002a  6806              LDR      r6,[r0,#0]  ; Flash_p2
00002c  e01b              B        |L3.102|
;;;752    		case 3:			Flash_p=Flash_p3;			break;
00002e  481a              LDR      r0,|L3.152|
000030  6806              LDR      r6,[r0,#0]  ; Flash_p3
000032  e018              B        |L3.102|
;;;753    		case 4:			Flash_p=Flash_p4;			break;
000034  4819              LDR      r0,|L3.156|
000036  6806              LDR      r6,[r0,#0]  ; Flash_p4
000038  e015              B        |L3.102|
;;;754    		case 5:			Flash_p=Flash_p5;			break;
00003a  4819              LDR      r0,|L3.160|
00003c  6806              LDR      r6,[r0,#0]  ; Flash_p5
00003e  e012              B        |L3.102|
;;;755    		case 6:			Flash_p=Flash_p6;			break;
000040  4818              LDR      r0,|L3.164|
000042  6806              LDR      r6,[r0,#0]  ; Flash_p6
000044  e00f              B        |L3.102|
;;;756    		case 7:			Flash_p=Flash_p7;			break;
000046  4818              LDR      r0,|L3.168|
000048  6806              LDR      r6,[r0,#0]  ; Flash_p7
00004a  e00c              B        |L3.102|
;;;757    		case 8:			Flash_p=Flash_p8;			break;
00004c  4817              LDR      r0,|L3.172|
00004e  6806              LDR      r6,[r0,#0]  ; Flash_p8
000050  e009              B        |L3.102|
;;;758    		case 9:			Flash_p=Flash_p9;			break;
000052  4817              LDR      r0,|L3.176|
000054  6806              LDR      r6,[r0,#0]  ; Flash_p9
000056  e006              B        |L3.102|
;;;759    		case 10:		Flash_p=Flash_p10;			break;
000058  4816              LDR      r0,|L3.180|
00005a  6806              LDR      r6,[r0,#0]  ; Flash_p10
00005c  e003              B        |L3.102|
                  |L3.94|
;;;760    		default:		App_printf("No match parameter!\r\n");		break;
00005e  a016              ADR      r0,|L3.184|
000060  f7fffffe          BL       App_printf
000064  bf00              NOP      
                  |L3.102|
000066  bf00              NOP                            ;750
;;;761        }
;;;762    
;;;763        if(Flash_p==NULL)
000068  b91e              CBNZ     r6,|L3.114|
;;;764        {
;;;765            return -1;
00006a  f04f30ff          MOV      r0,#0xffffffff
                  |L3.110|
;;;766        }
;;;767    
;;;768        Address = start;
;;;769        for(int i=0; i<100 && Address < end ; i++)
;;;770        {
;;;771            *Flash_p++=*(__IO uint32_t*) Address;	//sorry,flash 4 byte全是1赋值给uint8_t ，最后为255，不想再复杂的判断了，选择了这个方式
;;;772            Address = Address + 4;
;;;773        }
;;;774    
;;;775        return 0;
;;;776    }
00006e  e8bd81f0          POP      {r4-r8,pc}
                  |L3.114|
000072  463d              MOV      r5,r7                 ;768
000074  2000              MOVS     r0,#0                 ;769
000076  e004              B        |L3.130|
                  |L3.120|
000078  6829              LDR      r1,[r5,#0]            ;771
00007a  f8061b01          STRB     r1,[r6],#1            ;771
00007e  1d2d              ADDS     r5,r5,#4              ;772
000080  1c40              ADDS     r0,r0,#1              ;769
                  |L3.130|
000082  2864              CMP      r0,#0x64              ;769
000084  da01              BGE      |L3.138|
000086  4545              CMP      r5,r8                 ;769
000088  d3f6              BCC      |L3.120|
                  |L3.138|
00008a  2000              MOVS     r0,#0                 ;775
00008c  e7ef              B        |L3.110|
;;;777    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      Flash_p1
                  |L3.148|
                          DCD      Flash_p2
                  |L3.152|
                          DCD      Flash_p3
                  |L3.156|
                          DCD      Flash_p4
                  |L3.160|
                          DCD      Flash_p5
                  |L3.164|
                          DCD      Flash_p6
                  |L3.168|
                          DCD      Flash_p7
                  |L3.172|
                          DCD      Flash_p8
                  |L3.176|
                          DCD      Flash_p9
                  |L3.180|
                          DCD      Flash_p10
                  |L3.184|
0000b8  4e6f206d          DCB      "No match parameter!\r\n",0
0000bc  61746368
0000c0  20706172
0000c4  616d6574
0000c8  6572210d
0000cc  0a00    
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||i.Flash_Save_Run_Diagram||, CODE, READONLY, ALIGN=2

                  Flash_Save_Run_Diagram PROC
;;;486    
;;;487    int Flash_Save_Run_Diagram(uint32_t start, uint32_t end, uint8_t run_diagram_count)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;488    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;489    
;;;490        uint32_t EraseCounter = 0x00; 	//记录要擦除多少页
00000a  f04f0800          MOV      r8,#0
;;;491        uint32_t Address = 0x00;				//记录写入的地址
00000e  2500              MOVS     r5,#0
;;;492        uint32_t NbrOfPage = 0x00;			//记录写入多少页
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;493    
;;;494        FLASH_Status FLASHStatus = FLASH_COMPLETE; //记录每次擦除的结果
000014  f04f0a04          MOV      r10,#4
;;;495        TestStatus MemoryProgramStatus = PASSED;//记录整个测试结果
000018  f04f0b01          MOV      r11,#1
;;;496        switch(run_diagram_count)
00001c  2c0b              CMP      r4,#0xb
00001e  d257              BCS      |L4.208|
000020  e8dff004          TBB      [pc,r4]
000024  56060e16          DCB      0x56,0x06,0x0e,0x16
000028  1e262e36          DCB      0x1e,0x26,0x2e,0x36
00002c  3e464e00          DCB      0x3e,0x46,0x4e,0x00
;;;497        {
;;;498    		case 1:
;;;499    		{
;;;500    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000030  eb040084          ADD      r0,r4,r4,LSL #2
000034  0042              LSLS     r2,r0,#1
000036  494d              LDR      r1,|L4.364|
000038  484d              LDR      r0,|L4.368|
00003a  f7fffffe          BL       __aeabi_memcpy
;;;501    			break;
00003e  e047              B        |L4.208|
;;;502    		}
;;;503    		case 2:
;;;504    		{
;;;505    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000040  eb040084          ADD      r0,r4,r4,LSL #2
000044  0042              LSLS     r2,r0,#1
000046  4949              LDR      r1,|L4.364|
000048  4849              LDR      r0,|L4.368|
00004a  f7fffffe          BL       __aeabi_memcpy
;;;506    			break;
00004e  e03f              B        |L4.208|
;;;507    		}
;;;508    		case 3:
;;;509    		{
;;;510    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000050  eb040084          ADD      r0,r4,r4,LSL #2
000054  0042              LSLS     r2,r0,#1
000056  4945              LDR      r1,|L4.364|
000058  4845              LDR      r0,|L4.368|
00005a  f7fffffe          BL       __aeabi_memcpy
;;;511    			break;
00005e  e037              B        |L4.208|
;;;512    		}
;;;513    		case 4:
;;;514    		{
;;;515    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000060  eb040084          ADD      r0,r4,r4,LSL #2
000064  0042              LSLS     r2,r0,#1
000066  4941              LDR      r1,|L4.364|
000068  4841              LDR      r0,|L4.368|
00006a  f7fffffe          BL       __aeabi_memcpy
;;;516    			break;
00006e  e02f              B        |L4.208|
;;;517    		}
;;;518    		case 5:
;;;519    		{
;;;520    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000070  eb040084          ADD      r0,r4,r4,LSL #2
000074  0042              LSLS     r2,r0,#1
000076  493d              LDR      r1,|L4.364|
000078  483d              LDR      r0,|L4.368|
00007a  f7fffffe          BL       __aeabi_memcpy
;;;521    			break;
00007e  e027              B        |L4.208|
;;;522    		}
;;;523    		case 6:
;;;524    		{
;;;525    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000080  eb040084          ADD      r0,r4,r4,LSL #2
000084  0042              LSLS     r2,r0,#1
000086  4939              LDR      r1,|L4.364|
000088  4839              LDR      r0,|L4.368|
00008a  f7fffffe          BL       __aeabi_memcpy
;;;526    			break;
00008e  e01f              B        |L4.208|
;;;527    		}
;;;528    		case 7:
;;;529    		{
;;;530    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
000090  eb040084          ADD      r0,r4,r4,LSL #2
000094  0042              LSLS     r2,r0,#1
000096  4935              LDR      r1,|L4.364|
000098  4835              LDR      r0,|L4.368|
00009a  f7fffffe          BL       __aeabi_memcpy
;;;531    			break;
00009e  e017              B        |L4.208|
;;;532    		}
;;;533    		case 8:
;;;534    		{
;;;535    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
0000a0  eb040084          ADD      r0,r4,r4,LSL #2
0000a4  0042              LSLS     r2,r0,#1
0000a6  4931              LDR      r1,|L4.364|
0000a8  4831              LDR      r0,|L4.368|
0000aa  f7fffffe          BL       __aeabi_memcpy
;;;536    			break;
0000ae  e00f              B        |L4.208|
;;;537    		}
;;;538    		case 9:
;;;539    		{
;;;540    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
0000b0  eb040084          ADD      r0,r4,r4,LSL #2
0000b4  0042              LSLS     r2,r0,#1
0000b6  492d              LDR      r1,|L4.364|
0000b8  482d              LDR      r0,|L4.368|
0000ba  f7fffffe          BL       __aeabi_memcpy
;;;541    			break;
0000be  e007              B        |L4.208|
;;;542    		}
;;;543    		case 10:
;;;544    		{
;;;545    			memcpy(flash_run_diagram, &Run_Diagram.Start_Time1[0], 10*run_diagram_count);
0000c0  eb040084          ADD      r0,r4,r4,LSL #2
0000c4  0042              LSLS     r2,r0,#1
0000c6  4929              LDR      r1,|L4.364|
0000c8  4829              LDR      r0,|L4.368|
0000ca  f7fffffe          BL       __aeabi_memcpy
;;;546    			break;
0000ce  bf00              NOP      
                  |L4.208|
0000d0  bf00              NOP                            ;501
;;;547    		}
;;;548        }
;;;549    
;;;550        /* 解锁 */
;;;551        FLASH_Unlock();
0000d2  f7fffffe          BL       FLASH_Unlock
;;;552    
;;;553        /* 计算要擦除多少页 */
;;;554        NbrOfPage = (end-start+1) / FLASH_PAGE_SIZE;
0000d6  1bb8              SUBS     r0,r7,r6
0000d8  1c40              ADDS     r0,r0,#1
0000da  0ac0              LSRS     r0,r0,#11
0000dc  9000              STR      r0,[sp,#0]
;;;555    
;;;556        /* 清空所有标志位 */
;;;557        FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
0000de  2034              MOVS     r0,#0x34
0000e0  f7fffffe          BL       FLASH_ClearFlag
;;;558    
;;;559        /* 按页擦除*/
;;;560        for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)
0000e4  f04f0800          MOV      r8,#0
0000e8  e008              B        |L4.252|
                  |L4.234|
;;;561        {
;;;562            FLASHStatus = FLASH_ErasePage(start + (FLASH_PAGE_SIZE * EraseCounter));
0000ea  f44f6100          MOV      r1,#0x800
0000ee  fb016008          MLA      r0,r1,r8,r6
0000f2  f7fffffe          BL       FLASH_ErasePage
0000f6  4682              MOV      r10,r0
0000f8  f1080801          ADD      r8,r8,#1              ;560
                  |L4.252|
0000fc  9800              LDR      r0,[sp,#0]            ;560
0000fe  4580              CMP      r8,r0                 ;560
000100  d202              BCS      |L4.264|
000102  f1ba0f04          CMP      r10,#4                ;560
000106  d0f0              BEQ      |L4.234|
                  |L4.264|
;;;563        }
;;;564        /* 向内部FLASH写入数据 */
;;;565        Address = start;
000108  4635              MOV      r5,r6
;;;566        for(int i=0; i<10*run_diagram_count && Address < end && (FLASHStatus == FLASH_COMPLETE) ; i++)
00010a  f04f0900          MOV      r9,#0
00010e  e008              B        |L4.290|
                  |L4.272|
;;;567        {
;;;568            FLASH_ProgramWord(Address,flash_run_diagram[i]);
000110  4817              LDR      r0,|L4.368|
000112  f8101009          LDRB     r1,[r0,r9]
000116  4628              MOV      r0,r5
000118  f7fffffe          BL       FLASH_ProgramWord
;;;569            Address = Address + 4;
00011c  1d2d              ADDS     r5,r5,#4
00011e  f1090901          ADD      r9,r9,#1              ;566
                  |L4.290|
000122  eb040084          ADD      r0,r4,r4,LSL #2       ;566
000126  0040              LSLS     r0,r0,#1              ;566
000128  4548              CMP      r0,r9                 ;566
00012a  dd04              BLE      |L4.310|
00012c  42bd              CMP      r5,r7                 ;566
00012e  d202              BCS      |L4.310|
000130  f1ba0f04          CMP      r10,#4                ;566
000134  d0ec              BEQ      |L4.272|
                  |L4.310|
;;;570        }
;;;571    
;;;572        FLASH_Lock();
000136  f7fffffe          BL       FLASH_Lock
;;;573    
;;;574        /* 检查写入的数据是否正确 */
;;;575        Address = start;
00013a  4635              MOV      r5,r6
;;;576        for(int i=0; i<10*run_diagram_count && Address < end && (MemoryProgramStatus != FAILED); i++)
00013c  2000              MOVS     r0,#0
00013e  e008              B        |L4.338|
                  |L4.320|
;;;577        {
;;;578            if((*(__IO uint32_t*) Address) !=flash_run_diagram[i])
000140  6829              LDR      r1,[r5,#0]
000142  4a0b              LDR      r2,|L4.368|
000144  5c12              LDRB     r2,[r2,r0]
000146  4291              CMP      r1,r2
000148  d001              BEQ      |L4.334|
;;;579            {
;;;580                //	uint32_t hi=*(__IO uint32_t*) Address;
;;;581                MemoryProgramStatus = FAILED;
00014a  f04f0b00          MOV      r11,#0
                  |L4.334|
;;;582            }
;;;583            Address = Address + 4;
00014e  1d2d              ADDS     r5,r5,#4
000150  1c40              ADDS     r0,r0,#1              ;576
                  |L4.338|
000152  eb040184          ADD      r1,r4,r4,LSL #2       ;576
000156  0049              LSLS     r1,r1,#1              ;576
000158  4281              CMP      r1,r0                 ;576
00015a  dd04              BLE      |L4.358|
00015c  42bd              CMP      r5,r7                 ;576
00015e  d202              BCS      |L4.358|
000160  f1bb0f00          CMP      r11,#0                ;576
000164  d1ec              BNE      |L4.320|
                  |L4.358|
;;;584        }
;;;585    
;;;586        return MemoryProgramStatus;
000166  4658              MOV      r0,r11
;;;587    }
000168  e8bd8ff8          POP      {r3-r11,pc}
;;;588    
                          ENDP

                  |L4.364|
                          DCD      Run_Diagram+0x4
                  |L4.368|
                          DCD      flash_run_diagram

                          AREA ||i.Flash_to_AcceptAPP||, CODE, READONLY, ALIGN=2

                  Flash_to_AcceptAPP PROC
;;;636    //获取报警参数
;;;637    _Bool Flash_to_AcceptAPP(void)
000000  b530              PUSH     {r4,r5,lr}
;;;638    {
;;;639        uint32_t Address = 0x00;				//记录写入的地址
000002  2100              MOVS     r1,#0
;;;640        TestStatus MemoryProgramStatus = PASSED;//记录整个测试结果
000004  2301              MOVS     r3,#1
;;;641    
;;;642        /* 检查写入的数据是否正确 */
;;;643        Address = WRITE_START_ADDR_first;
000006  4919              LDR      r1,|L5.108|
;;;644        for(int i=0; i<9 && Address < WRITE_END_ADDR_first && (MemoryProgramStatus != FAILED); i++)
000008  2000              MOVS     r0,#0
00000a  e005              B        |L5.24|
                  |L5.12|
;;;645        {
;;;646            flash1_arry[i].i_data=*(__IO uint32_t*) Address;
00000c  680c              LDR      r4,[r1,#0]
00000e  4d18              LDR      r5,|L5.112|
000010  f8454020          STR      r4,[r5,r0,LSL #2]
;;;647    //        if(i!=0)
;;;648    //            App_printf("%f ",flash1_arry[i].f_data);
;;;649    //        else
;;;650    //            App_printf("%d ",flash1_arry[i].i_data);
;;;651            Address = Address + 4;
000014  1d09              ADDS     r1,r1,#4
000016  1c40              ADDS     r0,r0,#1              ;644
                  |L5.24|
000018  2809              CMP      r0,#9                 ;644
00001a  da04              BGE      |L5.38|
00001c  4c15              LDR      r4,|L5.116|
00001e  42a1              CMP      r1,r4                 ;644
000020  d201              BCS      |L5.38|
000022  2b00              CMP      r3,#0                 ;644
000024  d1f2              BNE      |L5.12|
                  |L5.38|
;;;652        }
;;;653    
;;;654        flash_1_once_flag=*(__IO uint32_t*) Address;				//flash固化标志写1,如果为65535即为没有初始化
000026  6808              LDR      r0,[r1,#0]
000028  4c13              LDR      r4,|L5.120|
00002a  6020              STR      r0,[r4,#0]  ; flash_1_once_flag
;;;655        System.already_init = flash_1_once_flag;					//已经初始化标志
00002c  4620              MOV      r0,r4
00002e  6800              LDR      r0,[r0,#0]  ; flash_1_once_flag
000030  4c12              LDR      r4,|L5.124|
000032  70a0              STRB     r0,[r4,#2]
;;;656        Alarm_threshold.Transmitte_id[0] = flash1_arry[0].i_data;
000034  480e              LDR      r0,|L5.112|
000036  7800              LDRB     r0,[r0,#0]  ; flash1_arry
000038  4c11              LDR      r4,|L5.128|
00003a  f8840026          STRB     r0,[r4,#0x26]
;;;657        System.CAN_ID[0] = Alarm_threshold.Transmitte_id[0];		//固化CAN_ID号
00003e  4620              MOV      r0,r4
000040  f8900026          LDRB     r0,[r0,#0x26]  ; Alarm_threshold
000044  4c0d              LDR      r4,|L5.124|
000046  7020              STRB     r0,[r4,#0]
;;;658        Alarm_threshold.Low_temp_limit[0] = flash1_arry[1].f_data;
000048  4809              LDR      r0,|L5.112|
00004a  6840              LDR      r0,[r0,#4]  ; flash1_arry
00004c  4c0c              LDR      r4,|L5.128|
00004e  6020              STR      r0,[r4,#0]  ; Alarm_threshold
;;;659        float *	Alarm_threshold_p =(float *)&(Alarm_threshold.Low_temp_limit);
000050  4622              MOV      r2,r4
;;;660    //    float *temp=Alarm_threshold_p;
;;;661    
;;;662        for(int i=2; i<=8; i++)
000052  2002              MOVS     r0,#2
000054  e005              B        |L5.98|
                  |L5.86|
;;;663        {
;;;664            Alarm_threshold_p +=1;
000056  1d12              ADDS     r2,r2,#4
;;;665            *Alarm_threshold_p=flash1_arry[i].f_data;
000058  4c05              LDR      r4,|L5.112|
00005a  f8544020          LDR      r4,[r4,r0,LSL #2]
00005e  6014              STR      r4,[r2,#0]
000060  1c40              ADDS     r0,r0,#1              ;662
                  |L5.98|
000062  2808              CMP      r0,#8                 ;662
000064  ddf7              BLE      |L5.86|
;;;666        }
;;;667    
;;;668        return 1;
000066  2001              MOVS     r0,#1
;;;669    }
000068  bd30              POP      {r4,r5,pc}
;;;670    
                          ENDP

00006a  0000              DCW      0x0000
                  |L5.108|
                          DCD      0x08032000
                  |L5.112|
                          DCD      flash1_arry
                  |L5.116|
                          DCD      0x080327ff
                  |L5.120|
                          DCD      flash_1_once_flag
                  |L5.124|
                          DCD      System
                  |L5.128|
                          DCD      Alarm_threshold

                          AREA ||i.InternalFlash_SaveData_1||, CODE, READONLY, ALIGN=2

                  InternalFlash_SaveData_1 PROC
;;;299    
;;;300    int InternalFlash_SaveData_1(uint8_t init)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;301    {
000004  4605              MOV      r5,r0
;;;302        uint32_t EraseCounter = 0x00;		//记录要擦除多少页
000006  2600              MOVS     r6,#0
;;;303        uint32_t Address = 0x00;			//记录写入的地址
000008  2400              MOVS     r4,#0
;;;304        uint32_t NbrOfPage = 0x00;			//记录写入多少页
00000a  46a2              MOV      r10,r4
;;;305        FLASH_Status FLASHStatus = FLASH_COMPLETE; //记录每次擦除的结果
00000c  2704              MOVS     r7,#4
;;;306        TestStatus MemoryProgramStatus = PASSED;//记录整个测试结果
00000e  f04f0801          MOV      r8,#1
;;;307        flash1_arry[0].i_data=Alarm_threshold.Transmitte_id[0];
000012  486b              LDR      r0,|L6.448|
000014  f8900026          LDRB     r0,[r0,#0x26]  ; Alarm_threshold
000018  496a              LDR      r1,|L6.452|
00001a  6008              STR      r0,[r1,#0]  ; flash1_arry
;;;308    
;;;309    		flash1_arry[1].f_data=Alarm_threshold.Low_temp_limit[0];
00001c  4868              LDR      r0,|L6.448|
00001e  6800              LDR      r0,[r0,#0]  ; Alarm_threshold
000020  6048              STR      r0,[r1,#4]  ; flash1_arry
;;;310    		flash1_arry[2].f_data=Alarm_threshold.Upp_temp_limit[0];
000022  4867              LDR      r0,|L6.448|
000024  6840              LDR      r0,[r0,#4]  ; Alarm_threshold
000026  6088              STR      r0,[r1,#8]  ; flash1_arry
;;;311    		flash1_arry[3].f_data=Alarm_threshold.Low_humidity_limit[0];
000028  4865              LDR      r0,|L6.448|
00002a  6880              LDR      r0,[r0,#8]  ; Alarm_threshold
00002c  60c8              STR      r0,[r1,#0xc]  ; flash1_arry
;;;312    		flash1_arry[4].f_data=Alarm_threshold.Upp_humidity_limit[0];
00002e  4864              LDR      r0,|L6.448|
000030  68c0              LDR      r0,[r0,#0xc]  ; Alarm_threshold
000032  6108              STR      r0,[r1,#0x10]  ; flash1_arry
;;;313    		flash1_arry[5].f_data=Alarm_threshold.Low_45I_limit[0];
000034  4862              LDR      r0,|L6.448|
000036  6900              LDR      r0,[r0,#0x10]  ; Alarm_threshold
000038  6148              STR      r0,[r1,#0x14]  ; flash1_arry
;;;314    		flash1_arry[6].f_data=Alarm_threshold.Upp_45I_limit[0];
00003a  4861              LDR      r0,|L6.448|
00003c  6940              LDR      r0,[r0,#0x14]  ; Alarm_threshold
00003e  6188              STR      r0,[r1,#0x18]  ; flash1_arry
;;;315    		flash1_arry[7].f_data=Alarm_threshold.Low_45V_limit[0];
000040  485f              LDR      r0,|L6.448|
000042  6980              LDR      r0,[r0,#0x18]  ; Alarm_threshold
000044  61c8              STR      r0,[r1,#0x1c]  ; flash1_arry
;;;316    		flash1_arry[8].f_data=Alarm_threshold.Upp_45V_limit[0];
000046  485e              LDR      r0,|L6.448|
000048  69c0              LDR      r0,[r0,#0x1c]  ; Alarm_threshold
00004a  6208              STR      r0,[r1,#0x20]  ; flash1_arry
;;;317    	  
;;;318    		for(int i=0;i<4;i++)
00004c  2000              MOVS     r0,#0
00004e  e004              B        |L6.90|
                  |L6.80|
;;;319    		{
;;;320    			flash1_IP[i]=System.Ip[i];
000050  495d              LDR      r1,|L6.456|
000052  5c09              LDRB     r1,[r1,r0]
000054  4a5d              LDR      r2,|L6.460|
000056  5411              STRB     r1,[r2,r0]
000058  1c40              ADDS     r0,r0,#1              ;318
                  |L6.90|
00005a  2804              CMP      r0,#4                 ;318
00005c  dbf8              BLT      |L6.80|
;;;321    		}
;;;322    		flash1_Port[0]=System.Port[0];
00005e  485a              LDR      r0,|L6.456|
000060  38a0              SUBS     r0,r0,#0xa0
000062  f89000a4          LDRB     r0,[r0,#0xa4]  ; System
000066  495a              LDR      r1,|L6.464|
000068  7008              STRB     r0,[r1,#0]
;;;323    		flash1_Port[1]=System.Port[1];
00006a  4857              LDR      r0,|L6.456|
00006c  38a0              SUBS     r0,r0,#0xa0
00006e  f89000a5          LDRB     r0,[r0,#0xa5]
000072  7048              STRB     r0,[r1,#1]
;;;324        /* 解锁 */
;;;325        FLASH_Unlock();
000074  f7fffffe          BL       FLASH_Unlock
;;;326    
;;;327        /* 计算要擦除多少页 */
;;;328        NbrOfPage = (WRITE_END_ADDR_first - WRITE_START_ADDR_first+1) / FLASH_PAGE_SIZE;
000078  f04f0a01          MOV      r10,#1
;;;329    
;;;330        /* 清空所有标志位 */
;;;331        FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
00007c  2034              MOVS     r0,#0x34
00007e  f7fffffe          BL       FLASH_ClearFlag
;;;332    
;;;333        /* 按页擦除*/
;;;334        for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)
000082  2600              MOVS     r6,#0
000084  e008              B        |L6.152|
                  |L6.134|
;;;335        {
;;;336            FLASHStatus = FLASH_ErasePage(WRITE_START_ADDR_first + (FLASH_PAGE_SIZE * EraseCounter));
000086  4953              LDR      r1,|L6.468|
000088  f44f6200          MOV      r2,#0x800
00008c  fb021006          MLA      r0,r2,r6,r1
000090  f7fffffe          BL       FLASH_ErasePage
000094  4607              MOV      r7,r0
000096  1c76              ADDS     r6,r6,#1              ;334
                  |L6.152|
000098  4556              CMP      r6,r10                ;334
00009a  d201              BCS      |L6.160|
00009c  2f04              CMP      r7,#4                 ;334
00009e  d0f2              BEQ      |L6.134|
                  |L6.160|
;;;337    
;;;338        }
;;;339    
;;;340        /* 向内部FLASH写入数据 */
;;;341        Address = WRITE_START_ADDR_first;
0000a0  4c4c              LDR      r4,|L6.468|
;;;342    
;;;343        FLASH_ProgramWord(Address,flash1_arry[0].i_data);//发射机ID
0000a2  4848              LDR      r0,|L6.452|
0000a4  6801              LDR      r1,[r0,#0]  ; flash1_arry
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       FLASH_ProgramWord
;;;344        Address = Address + 4;
0000ac  1d24              ADDS     r4,r4,#4
;;;345        for(int i=1; i<=8 && Address < WRITE_END_ADDR_first && (FLASHStatus == FLASH_COMPLETE) ; i++)
0000ae  f04f0901          MOV      r9,#1
0000b2  e008              B        |L6.198|
                  |L6.180|
;;;346        {
;;;347            FLASH_ProgramWord(Address,flash1_arry[i].i_data);
0000b4  4843              LDR      r0,|L6.452|
0000b6  f8501029          LDR      r1,[r0,r9,LSL #2]
0000ba  4620              MOV      r0,r4
0000bc  f7fffffe          BL       FLASH_ProgramWord
;;;348            Address = Address + 4;
0000c0  1d24              ADDS     r4,r4,#4
0000c2  f1090901          ADD      r9,r9,#1              ;345
                  |L6.198|
0000c6  f1b90f08          CMP      r9,#8                 ;345
0000ca  dc04              BGT      |L6.214|
0000cc  4842              LDR      r0,|L6.472|
0000ce  4284              CMP      r4,r0                 ;345
0000d0  d201              BCS      |L6.214|
0000d2  2f04              CMP      r7,#4                 ;345
0000d4  d0ee              BEQ      |L6.180|
                  |L6.214|
;;;349        }
;;;350    //	FLASH_ProgramWord(Address,flash1_arry[13].i_data);//类型
;;;351    //	Address = Address + 4;
;;;352    	
;;;353    //    uint32_t one=1;
;;;354    //写入flash_1_once_flag固化一次标志
;;;355        FLASH_ProgramWord(Address,init);
0000d6  4629              MOV      r1,r5
0000d8  4620              MOV      r0,r4
0000da  f7fffffe          BL       FLASH_ProgramWord
;;;356    		if(System.Init_Mark!=1)		//避免初始化时误写IP和Port
0000de  483a              LDR      r0,|L6.456|
0000e0  38a0              SUBS     r0,r0,#0xa0
0000e2  f89000a6          LDRB     r0,[r0,#0xa6]  ; System
0000e6  2801              CMP      r0,#1
0000e8  d024              BEQ      |L6.308|
;;;357    		{
;;;358    			FLASHStatus=FLASH_ErasePage(Ip_Port_Addr);		//先擦除这一页再写
0000ea  483c              LDR      r0,|L6.476|
0000ec  f7fffffe          BL       FLASH_ErasePage
0000f0  4607              MOV      r7,r0
;;;359    			Address = Ip_Port_Addr;
0000f2  4c3a              LDR      r4,|L6.476|
;;;360    			/*向flash写IP*/
;;;361    			for(int i=0; i<4 && Address < Ip_Port_Addr+26 && (FLASHStatus == FLASH_COMPLETE) ; i++)
0000f4  f04f0900          MOV      r9,#0
0000f8  e008              B        |L6.268|
                  |L6.250|
;;;362    			{
;;;363    					FLASH_ProgramWord(Address,flash1_IP[i]);
0000fa  4834              LDR      r0,|L6.460|
0000fc  f8101009          LDRB     r1,[r0,r9]
000100  4620              MOV      r0,r4
000102  f7fffffe          BL       FLASH_ProgramWord
;;;364    					Address = Address + 4;
000106  1d24              ADDS     r4,r4,#4
000108  f1090901          ADD      r9,r9,#1              ;361
                  |L6.268|
00010c  f1b90f04          CMP      r9,#4                 ;361
000110  da05              BGE      |L6.286|
000112  4832              LDR      r0,|L6.476|
000114  301a              ADDS     r0,r0,#0x1a           ;361
000116  4284              CMP      r4,r0                 ;361
000118  d201              BCS      |L6.286|
00011a  2f04              CMP      r7,#4                 ;361
00011c  d0ed              BEQ      |L6.250|
                  |L6.286|
;;;365    			}
;;;366    			/*向flash写PORT*/
;;;367    			FLASH_ProgramWord(Address,flash1_Port[0]);
00011e  482c              LDR      r0,|L6.464|
000120  7801              LDRB     r1,[r0,#0]  ; flash1_Port
000122  4620              MOV      r0,r4
000124  f7fffffe          BL       FLASH_ProgramWord
;;;368    			Address = Address + 4;
000128  1d24              ADDS     r4,r4,#4
;;;369    			FLASH_ProgramWord(Address,flash1_Port[1]);
00012a  4829              LDR      r0,|L6.464|
00012c  7841              LDRB     r1,[r0,#1]  ; flash1_Port
00012e  4620              MOV      r0,r4
000130  f7fffffe          BL       FLASH_ProgramWord
                  |L6.308|
;;;370    		}
;;;371        FLASH_Lock();//flash上锁
000134  f7fffffe          BL       FLASH_Lock
;;;372    
;;;373        /* 检查写入的数据是否正确 */
;;;374        Address = WRITE_START_ADDR_first;
000138  4c26              LDR      r4,|L6.468|
;;;375        for(int i=0; i<9 && Address < WRITE_END_ADDR_first && (MemoryProgramStatus != FAILED); i++)
00013a  2000              MOVS     r0,#0
00013c  e009              B        |L6.338|
                  |L6.318|
;;;376        {
;;;377    
;;;378            if((*(__IO uint32_t*) Address) != flash1_arry[i].i_data)
00013e  6821              LDR      r1,[r4,#0]
000140  4a20              LDR      r2,|L6.452|
000142  f8522020          LDR      r2,[r2,r0,LSL #2]
000146  4291              CMP      r1,r2
000148  d001              BEQ      |L6.334|
;;;379            {
;;;380                //uint32_t hi=*(__IO uint32_t*) Address;
;;;381                MemoryProgramStatus = FAILED;
00014a  f04f0800          MOV      r8,#0
                  |L6.334|
;;;382            }
;;;383            Address = Address + 4;
00014e  1d24              ADDS     r4,r4,#4
000150  1c40              ADDS     r0,r0,#1              ;375
                  |L6.338|
000152  2809              CMP      r0,#9                 ;375
000154  da05              BGE      |L6.354|
000156  4920              LDR      r1,|L6.472|
000158  428c              CMP      r4,r1                 ;375
00015a  d202              BCS      |L6.354|
00015c  f1b80f00          CMP      r8,#0                 ;375
000160  d1ed              BNE      |L6.318|
                  |L6.354|
;;;384        }
;;;385        if((*(__IO uint32_t*) Address) != init)
000162  6820              LDR      r0,[r4,#0]
000164  42a8              CMP      r0,r5
000166  d001              BEQ      |L6.364|
;;;386        {
;;;387            MemoryProgramStatus = FAILED;
000168  f04f0800          MOV      r8,#0
                  |L6.364|
;;;388        }
;;;389    		
;;;390    	if(System.Init_Mark!=1)		//避免初始化时误写IP和Port
00016c  4816              LDR      r0,|L6.456|
00016e  38a0              SUBS     r0,r0,#0xa0
000170  f89000a6          LDRB     r0,[r0,#0xa6]  ; System
000174  2801              CMP      r0,#1
000176  d020              BEQ      |L6.442|
;;;391    	{	
;;;392    		Address= Ip_Port_Addr;//地址指向IP[0]
000178  4c18              LDR      r4,|L6.476|
;;;393    		
;;;394    		for(int i=0; i<4 && Address < Ip_Port_Addr+26 && (MemoryProgramStatus != FAILED); i++)
00017a  2000              MOVS     r0,#0
00017c  e008              B        |L6.400|
                  |L6.382|
;;;395        {
;;;396    
;;;397            if((*(__IO uint32_t*) Address) != flash1_IP[i])
00017e  6821              LDR      r1,[r4,#0]
000180  4a12              LDR      r2,|L6.460|
000182  5c12              LDRB     r2,[r2,r0]
000184  4291              CMP      r1,r2
000186  d001              BEQ      |L6.396|
;;;398            {
;;;399                MemoryProgramStatus = FAILED;
000188  f04f0800          MOV      r8,#0
                  |L6.396|
;;;400            }
;;;401            Address = Address + 4;
00018c  1d24              ADDS     r4,r4,#4
00018e  1c40              ADDS     r0,r0,#1              ;394
                  |L6.400|
000190  2804              CMP      r0,#4                 ;394
000192  da06              BGE      |L6.418|
000194  4911              LDR      r1,|L6.476|
000196  311a              ADDS     r1,r1,#0x1a           ;394
000198  428c              CMP      r4,r1                 ;394
00019a  d202              BCS      |L6.418|
00019c  f1b80f00          CMP      r8,#0                 ;394
0001a0  d1ed              BNE      |L6.382|
                  |L6.418|
;;;402        }
;;;403    		
;;;404    		if((*(__IO uint32_t*) Address) != flash1_Port[0]||(*(__IO uint32_t*)(Address+4)) != flash1_Port[1])
0001a2  6820              LDR      r0,[r4,#0]
0001a4  490a              LDR      r1,|L6.464|
0001a6  7809              LDRB     r1,[r1,#0]  ; flash1_Port
0001a8  4288              CMP      r0,r1
0001aa  d104              BNE      |L6.438|
0001ac  6860              LDR      r0,[r4,#4]
0001ae  4908              LDR      r1,|L6.464|
0001b0  7849              LDRB     r1,[r1,#1]  ; flash1_Port
0001b2  4288              CMP      r0,r1
0001b4  d001              BEQ      |L6.442|
                  |L6.438|
;;;405    		{
;;;406    				MemoryProgramStatus = FAILED;
0001b6  f04f0800          MOV      r8,#0
                  |L6.442|
;;;407    		}
;;;408    	}
;;;409        return MemoryProgramStatus;
0001ba  4640              MOV      r0,r8
;;;410    }
0001bc  e8bd87f0          POP      {r4-r10,pc}
;;;411    
                          ENDP

                  |L6.448|
                          DCD      Alarm_threshold
                  |L6.452|
                          DCD      flash1_arry
                  |L6.456|
                          DCD      System+0xa0
                  |L6.460|
                          DCD      flash1_IP
                  |L6.464|
                          DCD      flash1_Port
                  |L6.468|
                          DCD      0x08032000
                  |L6.472|
                          DCD      0x080327ff
                  |L6.476|
                          DCD      0x08039800

                          AREA ||i.InternalFlash_SaveData_2||, CODE, READONLY, ALIGN=2

                  InternalFlash_SaveData_2 PROC
;;;413    //将正向功率和驻波比保存到flash
;;;414    int InternalFlash_SaveData_2(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;415    {
;;;416        uint32_t EraseCounter = 0x00; 			//记录要擦除多少页
000004  2500              MOVS     r5,#0
;;;417        uint32_t Address = 0x00;				//记录写入的地址
000006  2400              MOVS     r4,#0
;;;418        uint32_t NbrOfPage = 0x00;				//记录写入多少页
000008  46a1              MOV      r9,r4
;;;419    
;;;420        FLASH_Status FLASHStatus = FLASH_COMPLETE; //记录每次擦除的结果
00000a  2604              MOVS     r6,#4
;;;421        TestStatus MemoryProgramStatus = PASSED;//记录整个测试结果
00000c  2701              MOVS     r7,#1
;;;422    
;;;423        memcpy(flash2_arry,		SWR_array,				233*4);
00000e  f44f7269          MOV      r2,#0x3a4
000012  4942              LDR      r1,|L7.284|
000014  4842              LDR      r0,|L7.288|
000016  f7fffffe          BL       __aeabi_memcpy4
;;;424        memcpy(flash2_arry+233,	Forward_Power_array,	233*4);
00001a  f44f7269          MOV      r2,#0x3a4
00001e  4941              LDR      r1,|L7.292|
000020  4841              LDR      r0,|L7.296|
000022  f7fffffe          BL       __aeabi_memcpy4
;;;425    
;;;426        FLASH_Unlock();	/* 解锁 */
000026  f7fffffe          BL       FLASH_Unlock
;;;427        NbrOfPage = (WRITE_END_ADDR_second-WRITE_START_ADDR_second+1) / FLASH_PAGE_SIZE;	/* 计算要擦除多少页 */
00002a  f04f0901          MOV      r9,#1
;;;428        FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);			/* 清空所有标志位 */
00002e  2034              MOVS     r0,#0x34
000030  f7fffffe          BL       FLASH_ClearFlag
;;;429        for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)	/* 按页擦除 */
000034  bf00              NOP      
000036  e008              B        |L7.74|
                  |L7.56|
;;;430        {
;;;431            FLASHStatus = FLASH_ErasePage(WRITE_START_ADDR_second + (FLASH_PAGE_SIZE * EraseCounter));
000038  493c              LDR      r1,|L7.300|
00003a  f44f6200          MOV      r2,#0x800
00003e  fb021005          MLA      r0,r2,r5,r1
000042  f7fffffe          BL       FLASH_ErasePage
000046  4606              MOV      r6,r0
000048  1c6d              ADDS     r5,r5,#1              ;429
                  |L7.74|
00004a  454d              CMP      r5,r9                 ;429
00004c  d201              BCS      |L7.82|
00004e  2e04              CMP      r6,#4                 ;429
000050  d0f2              BEQ      |L7.56|
                  |L7.82|
;;;432        }
;;;433    
;;;434        Address = WRITE_START_ADDR_second;			/* 向内部FLASH写入数据 */
000052  4c36              LDR      r4,|L7.300|
;;;435    
;;;436        //写入flash_2_once_flag固化一次标志
;;;437    	if( System.sweep == 0x02 )
000054  4836              LDR      r0,|L7.304|
000056  7b80              LDRB     r0,[r0,#0xe]  ; System
000058  2802              CMP      r0,#2
00005a  d104              BNE      |L7.102|
;;;438    		FLASH_ProgramWord(Address, 1);		//已经扫频结束
00005c  2101              MOVS     r1,#1
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       FLASH_ProgramWord
000064  e003              B        |L7.110|
                  |L7.102|
;;;439    	else
;;;440    		FLASH_ProgramWord(Address, 0);		//保持已扫数据
000066  2100              MOVS     r1,#0
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       FLASH_ProgramWord
                  |L7.110|
;;;441    	
;;;442        Address = Address + 4;
00006e  1d24              ADDS     r4,r4,#4
;;;443        for(int i=0; i<466 && Address < WRITE_END_ADDR_second && (FLASHStatus == FLASH_COMPLETE) ; i++)
000070  f04f0800          MOV      r8,#0
000074  e008              B        |L7.136|
                  |L7.118|
;;;444        {
;;;445            FLASH_ProgramWord(Address,flash2_arry[i].i_data);
000076  482a              LDR      r0,|L7.288|
000078  f8501028          LDR      r1,[r0,r8,LSL #2]
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       FLASH_ProgramWord
;;;446            Address = Address + 4;
000082  1d24              ADDS     r4,r4,#4
000084  f1080801          ADD      r8,r8,#1              ;443
                  |L7.136|
000088  f5b87fe9          CMP      r8,#0x1d2             ;443
00008c  da04              BGE      |L7.152|
00008e  4829              LDR      r0,|L7.308|
000090  4284              CMP      r4,r0                 ;443
000092  d201              BCS      |L7.152|
000094  2e04              CMP      r6,#4                 ;443
000096  d0ee              BEQ      |L7.118|
                  |L7.152|
;;;447        }
;;;448    
;;;449        for(int i=0; i<10 && Address < WRITE_END_ADDR_second && (FLASHStatus == FLASH_COMPLETE) ; i++)
000098  f04f0800          MOV      r8,#0
00009c  e008              B        |L7.176|
                  |L7.158|
;;;450        {
;;;451            FLASH_ProgramWord(Address, freq_band_time_stamp[i]);
00009e  4826              LDR      r0,|L7.312|
0000a0  f8501028          LDR      r1,[r0,r8,LSL #2]
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       FLASH_ProgramWord
;;;452            Address = Address + 4;
0000aa  1d24              ADDS     r4,r4,#4
0000ac  f1080801          ADD      r8,r8,#1              ;449
                  |L7.176|
0000b0  f1b80f0a          CMP      r8,#0xa               ;449
0000b4  da04              BGE      |L7.192|
0000b6  481f              LDR      r0,|L7.308|
0000b8  4284              CMP      r4,r0                 ;449
0000ba  d201              BCS      |L7.192|
0000bc  2e04              CMP      r6,#4                 ;449
0000be  d0ee              BEQ      |L7.158|
                  |L7.192|
;;;453        }
;;;454    
;;;455        FLASH_Lock();	/* 上锁 */
0000c0  f7fffffe          BL       FLASH_Lock
;;;456    
;;;457        /* 检查写入的数据是否正确 */
;;;458        Address = WRITE_START_ADDR_second;
0000c4  4c19              LDR      r4,|L7.300|
;;;459        if((*(__IO uint32_t*) Address) != 1)
0000c6  6820              LDR      r0,[r4,#0]
;;;460        {
;;;461    //        MemoryProgramStatus = FAILED;
;;;462        }
;;;463    
;;;464        Address = Address + 4;
0000c8  1d24              ADDS     r4,r4,#4
;;;465        for(int i=0; i<466 && Address < WRITE_END_ADDR_second && (MemoryProgramStatus != FAILED); i++)	//校验
0000ca  2000              MOVS     r0,#0
0000cc  e008              B        |L7.224|
                  |L7.206|
;;;466        {
;;;467            if((*(__IO uint32_t*) Address) != flash2_arry[i].i_data)
0000ce  6821              LDR      r1,[r4,#0]
0000d0  4a13              LDR      r2,|L7.288|
0000d2  f8522020          LDR      r2,[r2,r0,LSL #2]
0000d6  4291              CMP      r1,r2
0000d8  d000              BEQ      |L7.220|
;;;468            {
;;;469                MemoryProgramStatus = FAILED;
0000da  2700              MOVS     r7,#0
                  |L7.220|
;;;470            }
;;;471            Address = Address + 4;
0000dc  1d24              ADDS     r4,r4,#4
0000de  1c40              ADDS     r0,r0,#1              ;465
                  |L7.224|
0000e0  f5b07fe9          CMP      r0,#0x1d2             ;465
0000e4  da04              BGE      |L7.240|
0000e6  4913              LDR      r1,|L7.308|
0000e8  428c              CMP      r4,r1                 ;465
0000ea  d201              BCS      |L7.240|
0000ec  2f00              CMP      r7,#0                 ;465
0000ee  d1ee              BNE      |L7.206|
                  |L7.240|
;;;472        }
;;;473    
;;;474        for(int i=0; i<10 && Address < WRITE_END_ADDR_second && (MemoryProgramStatus != FAILED); i++)	//校验
0000f0  2000              MOVS     r0,#0
0000f2  e008              B        |L7.262|
                  |L7.244|
;;;475        {
;;;476            if((*(__IO uint32_t*) Address) != freq_band_time_stamp[i])
0000f4  6821              LDR      r1,[r4,#0]
0000f6  4a10              LDR      r2,|L7.312|
0000f8  f8522020          LDR      r2,[r2,r0,LSL #2]
0000fc  4291              CMP      r1,r2
0000fe  d000              BEQ      |L7.258|
;;;477            {
;;;478                MemoryProgramStatus = FAILED;  //内存存储状态：FAILED失败   
000100  2700              MOVS     r7,#0
                  |L7.258|
;;;479            }
;;;480            Address = Address + 4;
000102  1d24              ADDS     r4,r4,#4
000104  1c40              ADDS     r0,r0,#1              ;474
                  |L7.262|
000106  280a              CMP      r0,#0xa               ;474
000108  da04              BGE      |L7.276|
00010a  490a              LDR      r1,|L7.308|
00010c  428c              CMP      r4,r1                 ;474
00010e  d201              BCS      |L7.276|
000110  2f00              CMP      r7,#0                 ;474
000112  d1ef              BNE      |L7.244|
                  |L7.276|
;;;481        }
;;;482    
;;;483        return MemoryProgramStatus;
000114  4638              MOV      r0,r7
;;;484    }
000116  e8bd87f0          POP      {r4-r10,pc}
;;;485    
                          ENDP

00011a  0000              DCW      0x0000
                  |L7.284|
                          DCD      SWR_array
                  |L7.288|
                          DCD      flash2_arry
                  |L7.292|
                          DCD      Forward_Power_array
                  |L7.296|
                          DCD      flash2_arry+0x3a4
                  |L7.300|
                          DCD      0x08032800
                  |L7.304|
                          DCD      System
                  |L7.308|
                          DCD      0x08032fff
                  |L7.312|
                          DCD      freq_band_time_stamp

                          AREA ||i.InternalFlash_SaveData_3||, CODE, READONLY, ALIGN=2

                  InternalFlash_SaveData_3 PROC
;;;593      */
;;;594    int InternalFlash_SaveData_3(uint8_t num)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;595    {
000004  4605              MOV      r5,r0
;;;596    
;;;597        uint32_t EraseCounter = 0x00; 	//记录要擦除多少页
000006  2600              MOVS     r6,#0
;;;598        uint32_t Address = 0x00;				//记录写入的地址
000008  2400              MOVS     r4,#0
;;;599        uint32_t NbrOfPage = 0x00;			//记录写入多少页
00000a  2700              MOVS     r7,#0
;;;600    
;;;601        FLASH_Status FLASHStatus = FLASH_COMPLETE; //记录每次擦除的结果
00000c  f04f0804          MOV      r8,#4
;;;602        TestStatus MemoryProgramStatus = PASSED;//记录整个测试结果
000010  f04f0901          MOV      r9,#1
;;;603        /* 解锁 */
;;;604        FLASH_Unlock();
000014  f7fffffe          BL       FLASH_Unlock
;;;605        /* 计算要擦除多少页 */
;;;606        NbrOfPage = (WRITE_END_ADDR_third - WRITE_START_ADDR_third+1) / FLASH_PAGE_SIZE;
000018  2701              MOVS     r7,#1
;;;607        /* 清空所有标志位 */
;;;608        FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
00001a  2034              MOVS     r0,#0x34
00001c  f7fffffe          BL       FLASH_ClearFlag
;;;609    
;;;610        /* 按页擦除*/
;;;611        for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)
000020  bf00              NOP      
000022  e008              B        |L8.54|
                  |L8.36|
;;;612        {
;;;613            FLASHStatus = FLASH_ErasePage(WRITE_START_ADDR_third + (FLASH_PAGE_SIZE * EraseCounter));
000024  4914              LDR      r1,|L8.120|
000026  f44f6200          MOV      r2,#0x800
00002a  fb021006          MLA      r0,r2,r6,r1
00002e  f7fffffe          BL       FLASH_ErasePage
000032  4680              MOV      r8,r0
000034  1c76              ADDS     r6,r6,#1              ;611
                  |L8.54|
000036  42be              CMP      r6,r7                 ;611
000038  d202              BCS      |L8.64|
00003a  f1b80f04          CMP      r8,#4                 ;611
00003e  d0f1              BEQ      |L8.36|
                  |L8.64|
;;;614        }
;;;615        /* 向内部FLASH写入数据 */
;;;616        Address = WRITE_START_ADDR_third;
000040  4c0d              LDR      r4,|L8.120|
;;;617        FLASH_ProgramWord(Address,1);
000042  2101              MOVS     r1,#1
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       FLASH_ProgramWord
;;;618        Address=Address+4;
00004a  1d24              ADDS     r4,r4,#4
;;;619        FLASH_ProgramWord(Address,num);
00004c  4629              MOV      r1,r5
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       FLASH_ProgramWord
;;;620        FLASH_Lock();//flash上锁
000054  f7fffffe          BL       FLASH_Lock
;;;621    
;;;622        /* 检查写入的数据是否正确 */
;;;623        Address = WRITE_START_ADDR_third;
000058  1f24              SUBS     r4,r4,#4
;;;624        if((*(__IO uint32_t*) Address) !=1)
00005a  6820              LDR      r0,[r4,#0]
00005c  2801              CMP      r0,#1
00005e  d001              BEQ      |L8.100|
;;;625        {
;;;626            MemoryProgramStatus = FAILED;
000060  f04f0900          MOV      r9,#0
                  |L8.100|
;;;627        }
;;;628        Address=Address+4;
000064  1d24              ADDS     r4,r4,#4
;;;629        if((*(__IO uint32_t*) Address) !=num)
000066  6820              LDR      r0,[r4,#0]
000068  42a8              CMP      r0,r5
00006a  d001              BEQ      |L8.112|
;;;630        {
;;;631            MemoryProgramStatus = FAILED;
00006c  f04f0900          MOV      r9,#0
                  |L8.112|
;;;632        }
;;;633        return MemoryProgramStatus;
000070  4648              MOV      r0,r9
;;;634    }
000072  e8bd87f0          POP      {r4-r10,pc}
;;;635    
                          ENDP

000076  0000              DCW      0x0000
                  |L8.120|
                          DCD      0x08033000

                          AREA ||i.System_InternalFlash_Init||, CODE, READONLY, ALIGN=2

                  System_InternalFlash_Init PROC
;;;230    
;;;231    int System_InternalFlash_Init(uint32_t init_flag)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;232    {
000004  4605              MOV      r5,r0
;;;233        uint32_t EraseCounter = 0x00;		//记录要擦除多少页
000006  2600              MOVS     r6,#0
;;;234        uint32_t Address = 0x00;			//记录写入的地址
000008  2400              MOVS     r4,#0
;;;235        uint32_t NbrOfPage = 0x00;			//记录写入多少页
00000a  46a3              MOV      r11,r4
;;;236    
;;;237        FLASH_Status FLASHStatus = FLASH_COMPLETE; //记录每次擦除的结果
00000c  f04f0804          MOV      r8,#4
;;;238        TestStatus MemoryProgramStatus = PASSED;//记录整个测试结果
000010  f04f0901          MOV      r9,#1
;;;239        flash1_arry[0].i_data=Alarm_threshold.Transmitte_id[0];
000014  4832              LDR      r0,|L9.224|
000016  f8900026          LDRB     r0,[r0,#0x26]  ; Alarm_threshold
00001a  4932              LDR      r1,|L9.228|
00001c  6008              STR      r0,[r1,#0]  ; flash1_arry
;;;240        float *Alarm_threshold_p =(float *)&(Alarm_threshold.Low_temp_limit);
00001e  f8dfa0c0          LDR      r10,|L9.224|
;;;241        for(int i=1; i<=8; i++)
000022  2001              MOVS     r0,#1
000024  e007              B        |L9.54|
                  |L9.38|
;;;242        {
;;;243            flash1_arry[i].f_data=*Alarm_threshold_p;
000026  4a2f              LDR      r2,|L9.228|
000028  f8da1000          LDR      r1,[r10,#0]
00002c  f8421020          STR      r1,[r2,r0,LSL #2]
;;;244    //        App_printf("%f ",flash1_arry[i].f_data);
;;;245            Alarm_threshold_p +=1;
000030  f10a0a04          ADD      r10,r10,#4
000034  1c40              ADDS     r0,r0,#1              ;241
                  |L9.54|
000036  2808              CMP      r0,#8                 ;241
000038  ddf5              BLE      |L9.38|
;;;246        }
;;;247    //    App_printf("....\r\n");
;;;248    //	flash1_arry[13].i_data=Alarm_threshold.Type[0];//现在这个字段不再有意义，也没有再使用
;;;249        /* 解锁 */
;;;250        FLASH_Unlock();
00003a  f7fffffe          BL       FLASH_Unlock
;;;251    
;;;252        /* 计算要擦除多少页 */
;;;253        NbrOfPage = (WRITE_END_ADDR_first - WRITE_START_ADDR_first+1) / FLASH_PAGE_SIZE;
00003e  f04f0b01          MOV      r11,#1
;;;254    
;;;255        /* 清空所有标志位 */
;;;256        FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
000042  2034              MOVS     r0,#0x34
000044  f7fffffe          BL       FLASH_ClearFlag
;;;257    
;;;258        /* 按页擦除*/
;;;259        for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)
000048  2600              MOVS     r6,#0
00004a  e008              B        |L9.94|
                  |L9.76|
;;;260        {
;;;261            FLASHStatus = FLASH_ErasePage(WRITE_START_ADDR_first + (FLASH_PAGE_SIZE * EraseCounter));
00004c  4926              LDR      r1,|L9.232|
00004e  f44f6200          MOV      r2,#0x800
000052  fb021006          MLA      r0,r2,r6,r1
000056  f7fffffe          BL       FLASH_ErasePage
00005a  4680              MOV      r8,r0
00005c  1c76              ADDS     r6,r6,#1              ;259
                  |L9.94|
00005e  455e              CMP      r6,r11                ;259
000060  d202              BCS      |L9.104|
000062  f1b80f04          CMP      r8,#4                 ;259
000066  d0f1              BEQ      |L9.76|
                  |L9.104|
;;;262    
;;;263        }
;;;264    
;;;265        /* 向内部FLASH写入数据 */
;;;266        Address = WRITE_START_ADDR_first;
000068  4c1f              LDR      r4,|L9.232|
;;;267    
;;;268        FLASH_ProgramWord(Address,flash1_arry[0].i_data);//发射机ID
00006a  481e              LDR      r0,|L9.228|
00006c  6801              LDR      r1,[r0,#0]  ; flash1_arry
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       FLASH_ProgramWord
;;;269        Address = Address + 4;
000074  1d24              ADDS     r4,r4,#4
;;;270        for(int i=1; i<=8 && Address < WRITE_END_ADDR_first && (FLASHStatus == FLASH_COMPLETE) ; i++)
000076  2701              MOVS     r7,#1
000078  e007              B        |L9.138|
                  |L9.122|
;;;271        {
;;;272            FLASH_ProgramWord(Address,flash1_arry[i].i_data);
00007a  481a              LDR      r0,|L9.228|
00007c  f8501027          LDR      r1,[r0,r7,LSL #2]
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       FLASH_ProgramWord
;;;273            Address = Address + 4;
000086  1d24              ADDS     r4,r4,#4
000088  1c7f              ADDS     r7,r7,#1              ;270
                  |L9.138|
00008a  2f08              CMP      r7,#8                 ;270
00008c  dc05              BGT      |L9.154|
00008e  4817              LDR      r0,|L9.236|
000090  4284              CMP      r4,r0                 ;270
000092  d202              BCS      |L9.154|
000094  f1b80f04          CMP      r8,#4                 ;270
000098  d0ef              BEQ      |L9.122|
                  |L9.154|
;;;274        }
;;;275    //	FLASH_ProgramWord(Address,flash1_arry[13].i_data);//类型
;;;276    //	Address = Address + 4;
;;;277    
;;;278    //写入flash_1_once_flag固化一次标志
;;;279        FLASH_ProgramWord(Address,init_flag);
00009a  4629              MOV      r1,r5
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       FLASH_ProgramWord
;;;280        FLASH_Lock();//flash上锁
0000a2  f7fffffe          BL       FLASH_Lock
;;;281    
;;;282        /* 检查写入的数据是否正确 */
;;;283        Address = WRITE_START_ADDR_first;
0000a6  4c10              LDR      r4,|L9.232|
;;;284        for(int i=0; i<9 && Address < WRITE_END_ADDR_first && (MemoryProgramStatus != FAILED); i++)
0000a8  2000              MOVS     r0,#0
0000aa  e009              B        |L9.192|
                  |L9.172|
;;;285        {
;;;286            if((*(__IO uint32_t*) Address) != flash1_arry[i].i_data)
0000ac  6821              LDR      r1,[r4,#0]
0000ae  4a0d              LDR      r2,|L9.228|
0000b0  f8522020          LDR      r2,[r2,r0,LSL #2]
0000b4  4291              CMP      r1,r2
0000b6  d001              BEQ      |L9.188|
;;;287            {
;;;288                //uint32_t hi=*(__IO uint32_t*) Address;
;;;289                MemoryProgramStatus = FAILED;
0000b8  f04f0900          MOV      r9,#0
                  |L9.188|
;;;290            }
;;;291            Address = Address + 4;
0000bc  1d24              ADDS     r4,r4,#4
0000be  1c40              ADDS     r0,r0,#1              ;284
                  |L9.192|
0000c0  2809              CMP      r0,#9                 ;284
0000c2  da05              BGE      |L9.208|
0000c4  4909              LDR      r1,|L9.236|
0000c6  428c              CMP      r4,r1                 ;284
0000c8  d202              BCS      |L9.208|
0000ca  f1b90f00          CMP      r9,#0                 ;284
0000ce  d1ed              BNE      |L9.172|
                  |L9.208|
;;;292        }
;;;293        if((*(__IO uint32_t*) Address) != init_flag)
0000d0  6820              LDR      r0,[r4,#0]
0000d2  42a8              CMP      r0,r5
0000d4  d001              BEQ      |L9.218|
;;;294        {
;;;295            MemoryProgramStatus = FAILED;
0000d6  f04f0900          MOV      r9,#0
                  |L9.218|
;;;296        }
;;;297        return MemoryProgramStatus;
0000da  4648              MOV      r0,r9
;;;298    }
0000dc  e8bd9ff0          POP      {r4-r12,pc}
;;;299    
                          ENDP

                  |L9.224|
                          DCD      Alarm_threshold
                  |L9.228|
                          DCD      flash1_arry
                  |L9.232|
                          DCD      0x08032000
                  |L9.236|
                          DCD      0x080327ff

                          AREA ||i.clear_flash_save||, CODE, READONLY, ALIGN=2

                  clear_flash_save PROC
;;;61     
;;;62     void clear_flash_save(uint8_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;63     {
000002  4605              MOV      r5,r0
;;;64         uint8_t  *Flash_p=Flash_p1;
000004  4834              LDR      r0,|L10.216|
000006  6804              LDR      r4,[r0,#0]  ; Flash_p1
;;;65         switch(num)
000008  1ea8              SUBS     r0,r5,#2
00000a  2809              CMP      r0,#9
00000c  d25e              BCS      |L10.204|
00000e  e8dff000          TBB      [pc,r0]
000012  050e              DCB      0x05,0x0e
000014  17212b35          DCB      0x17,0x21,0x2b,0x35
000018  3f495300          DCB      0x3f,0x49,0x53,0x00
;;;66         {
;;;67     		case 2:
;;;68     		{
;;;69     			for(int i=100; i<100*10; i++)
00001c  2064              MOVS     r0,#0x64
00001e  e002              B        |L10.38|
                  |L10.32|
;;;70     			{
;;;71     				Flash_p[i]=0xFF;
000020  21ff              MOVS     r1,#0xff
000022  5421              STRB     r1,[r4,r0]
000024  1c40              ADDS     r0,r0,#1              ;69
                  |L10.38|
000026  f5b07f7a          CMP      r0,#0x3e8             ;69
00002a  dbf9              BLT      |L10.32|
;;;72     			}
;;;73     			break;
00002c  e052              B        |L10.212|
;;;74     		}
;;;75     		case 3:
;;;76     		{
;;;77     			for(int i=200; i<100*10; i++)
00002e  20c8              MOVS     r0,#0xc8
000030  e002              B        |L10.56|
                  |L10.50|
;;;78     			{
;;;79     				Flash_p[i]=0xFF;
000032  21ff              MOVS     r1,#0xff
000034  5421              STRB     r1,[r4,r0]
000036  1c40              ADDS     r0,r0,#1              ;77
                  |L10.56|
000038  f5b07f7a          CMP      r0,#0x3e8             ;77
00003c  dbf9              BLT      |L10.50|
;;;80     			}
;;;81     			break;
00003e  e049              B        |L10.212|
;;;82     		}
;;;83     		case 4:
;;;84     		{
;;;85     			for(int i=300; i<100*10; i++)
000040  f44f7096          MOV      r0,#0x12c
000044  e002              B        |L10.76|
                  |L10.70|
;;;86     			{
;;;87     				Flash_p[i]=0xFF;
000046  21ff              MOVS     r1,#0xff
000048  5421              STRB     r1,[r4,r0]
00004a  1c40              ADDS     r0,r0,#1              ;85
                  |L10.76|
00004c  f5b07f7a          CMP      r0,#0x3e8             ;85
000050  dbf9              BLT      |L10.70|
;;;88     			}
;;;89     			break;
000052  e03f              B        |L10.212|
;;;90     		}
;;;91     		case 5:
;;;92     		{
;;;93     			for(int i=400; i<100*10; i++)
000054  f44f70c8          MOV      r0,#0x190
000058  e002              B        |L10.96|
                  |L10.90|
;;;94     			{
;;;95     				Flash_p[i]=0xFF;
00005a  21ff              MOVS     r1,#0xff
00005c  5421              STRB     r1,[r4,r0]
00005e  1c40              ADDS     r0,r0,#1              ;93
                  |L10.96|
000060  f5b07f7a          CMP      r0,#0x3e8             ;93
000064  dbf9              BLT      |L10.90|
;;;96     			}
;;;97     			break;
000066  e035              B        |L10.212|
;;;98     		}
;;;99     		case 6:
;;;100    		{
;;;101    			for(int i=500; i<100*10; i++)
000068  f44f70fa          MOV      r0,#0x1f4
00006c  e002              B        |L10.116|
                  |L10.110|
;;;102    			{
;;;103    				Flash_p[i]=0xFF;
00006e  21ff              MOVS     r1,#0xff
000070  5421              STRB     r1,[r4,r0]
000072  1c40              ADDS     r0,r0,#1              ;101
                  |L10.116|
000074  f5b07f7a          CMP      r0,#0x3e8             ;101
000078  dbf9              BLT      |L10.110|
;;;104    			}
;;;105    			break;
00007a  e02b              B        |L10.212|
;;;106    		}
;;;107    		case 7:
;;;108    		{
;;;109    			for(int i=600; i<100*10; i++)
00007c  f44f7016          MOV      r0,#0x258
000080  e002              B        |L10.136|
                  |L10.130|
;;;110    			{
;;;111    				Flash_p[i]=0xFF;
000082  21ff              MOVS     r1,#0xff
000084  5421              STRB     r1,[r4,r0]
000086  1c40              ADDS     r0,r0,#1              ;109
                  |L10.136|
000088  f5b07f7a          CMP      r0,#0x3e8             ;109
00008c  dbf9              BLT      |L10.130|
;;;112    			}
;;;113    			break;
00008e  e021              B        |L10.212|
;;;114    		}
;;;115    		case 8:
;;;116    		{
;;;117    			for(int i=700; i<100*10; i++)
000090  f44f702f          MOV      r0,#0x2bc
000094  e002              B        |L10.156|
                  |L10.150|
;;;118    			{
;;;119    				Flash_p[i]=0xFF;
000096  21ff              MOVS     r1,#0xff
000098  5421              STRB     r1,[r4,r0]
00009a  1c40              ADDS     r0,r0,#1              ;117
                  |L10.156|
00009c  f5b07f7a          CMP      r0,#0x3e8             ;117
0000a0  dbf9              BLT      |L10.150|
;;;120    			}
;;;121    			break;
0000a2  e017              B        |L10.212|
;;;122    		}
;;;123    		case 9:
;;;124    		{
;;;125    			for(int i=800; i<100*10; i++)
0000a4  f44f7048          MOV      r0,#0x320
0000a8  e002              B        |L10.176|
                  |L10.170|
;;;126    			{
;;;127    				Flash_p[i]=0xFF;
0000aa  21ff              MOVS     r1,#0xff
0000ac  5421              STRB     r1,[r4,r0]
0000ae  1c40              ADDS     r0,r0,#1              ;125
                  |L10.176|
0000b0  f5b07f7a          CMP      r0,#0x3e8             ;125
0000b4  dbf9              BLT      |L10.170|
;;;128    			}
;;;129    			break;
0000b6  e00d              B        |L10.212|
;;;130    		}
;;;131    		case 10:
;;;132    		{
;;;133    			for(int i=900; i<100*10; i++)
0000b8  f44f7061          MOV      r0,#0x384
0000bc  e002              B        |L10.196|
                  |L10.190|
;;;134    			{
;;;135    				Flash_p[i]=0xFF;
0000be  21ff              MOVS     r1,#0xff
0000c0  5421              STRB     r1,[r4,r0]
0000c2  1c40              ADDS     r0,r0,#1              ;133
                  |L10.196|
0000c4  f5b07f7a          CMP      r0,#0x3e8             ;133
0000c8  dbf9              BLT      |L10.190|
;;;136    			}
;;;137    			break;
0000ca  e003              B        |L10.212|
                  |L10.204|
;;;138    		}
;;;139    		default:
;;;140    		{
;;;141    			App_printf("num not match!\r\n");
0000cc  a003              ADR      r0,|L10.220|
0000ce  f7fffffe          BL       App_printf
;;;142    			break;
0000d2  bf00              NOP      
                  |L10.212|
0000d4  bf00              NOP                            ;73
;;;143    		}
;;;144        }
;;;145    }
0000d6  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP

                  |L10.216|
                          DCD      Flash_p1
                  |L10.220|
0000dc  6e756d20          DCB      "num not match!\r\n",0
0000e0  6e6f7420
0000e4  6d617463
0000e8  68210d0a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.judg_read_flash||, CODE, READONLY, ALIGN=2

                  judg_read_flash PROC
;;;149     */
;;;150    void judg_read_flash(uint32_t save_cout)
000000  b538              PUSH     {r3-r5,lr}
;;;151    {
000002  4604              MOV      r4,r0
;;;152        volatile uint8_t count=1;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;153    	
;;;154        Flash_Read_Run_Diagram(WRITE_START_ADDR_1,WRITE_END_ADDR_1,count);
000008  f89d2000          LDRB     r2,[sp,#0]
00000c  4961              LDR      r1,|L11.404|
00000e  4862              LDR      r0,|L11.408|
000010  f7fffffe          BL       Flash_Read_Run_Diagram
;;;155        ++count;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  1c40              ADDS     r0,r0,#1
00001a  b2c0              UXTB     r0,r0
00001c  9000              STR      r0,[sp,#0]
;;;156        if(count>save_cout)
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  42a0              CMP      r0,r4
000024  d904              BLS      |L11.48|
;;;157        {
;;;158            clear_flash_save(count);
000026  f89d0000          LDRB     r0,[sp,#0]
00002a  f7fffffe          BL       clear_flash_save
                  |L11.46|
;;;159            return;
;;;160        }
;;;161    	
;;;162        Flash_Read_Run_Diagram(WRITE_START_ADDR_2,WRITE_END_ADDR_2,count);
;;;163        ++count;
;;;164        if(count>save_cout)
;;;165        {
;;;166            clear_flash_save(count);
;;;167            return;
;;;168        }
;;;169    	
;;;170        Flash_Read_Run_Diagram(WRITE_START_ADDR_3,WRITE_END_ADDR_3,count);
;;;171        ++count;
;;;172        if(count>save_cout)
;;;173        {
;;;174            clear_flash_save(count);
;;;175            return;
;;;176        }
;;;177    	
;;;178        Flash_Read_Run_Diagram(WRITE_START_ADDR_4,WRITE_END_ADDR_4,count);
;;;179        ++count;
;;;180        if(count>save_cout)
;;;181        {
;;;182            clear_flash_save(count);
;;;183            return;
;;;184        }
;;;185    	
;;;186        Flash_Read_Run_Diagram(WRITE_START_ADDR_5,WRITE_END_ADDR_5,count);
;;;187        ++count;
;;;188        if(count>save_cout)
;;;189        {
;;;190            clear_flash_save(count);
;;;191            return;
;;;192        }
;;;193    	
;;;194        Flash_Read_Run_Diagram(WRITE_START_ADDR_6,WRITE_END_ADDR_6,count);
;;;195        ++count;
;;;196        if(count>save_cout)
;;;197        {
;;;198            clear_flash_save(count);
;;;199            return;
;;;200        }
;;;201    	
;;;202        Flash_Read_Run_Diagram(WRITE_START_ADDR_7,WRITE_END_ADDR_7,count);
;;;203        ++count;
;;;204        if(count>save_cout)
;;;205        {
;;;206            clear_flash_save(count);
;;;207            return;
;;;208        }
;;;209    	
;;;210        Flash_Read_Run_Diagram(WRITE_START_ADDR_8,WRITE_END_ADDR_8,count);
;;;211        ++count;
;;;212        if(count>save_cout)
;;;213        {
;;;214            clear_flash_save(count);
;;;215            return;
;;;216        }
;;;217    	
;;;218        Flash_Read_Run_Diagram(WRITE_START_ADDR_9,WRITE_END_ADDR_9,count);
;;;219        ++count;
;;;220        if(count>save_cout)
;;;221        {
;;;222            clear_flash_save(count);
;;;223            return;
;;;224        }
;;;225    	
;;;226        Flash_Read_Run_Diagram(WRITE_START_ADDR_10,WRITE_END_ADDR_10,count);
;;;227    //		++count;
;;;228    //	if(count>save_cout) {return;}
;;;229    }
00002e  bd38              POP      {r3-r5,pc}
                  |L11.48|
000030  f89d2000          LDRB     r2,[sp,#0]            ;162
000034  4959              LDR      r1,|L11.412|
000036  4857              LDR      r0,|L11.404|
000038  1c40              ADDS     r0,r0,#1              ;162
00003a  f7fffffe          BL       Flash_Read_Run_Diagram
00003e  f89d0000          LDRB     r0,[sp,#0]            ;163
000042  1c40              ADDS     r0,r0,#1              ;163
000044  b2c0              UXTB     r0,r0                 ;163
000046  9000              STR      r0,[sp,#0]            ;163
000048  f89d0000          LDRB     r0,[sp,#0]            ;164
00004c  42a0              CMP      r0,r4                 ;164
00004e  d904              BLS      |L11.90|
000050  f89d0000          LDRB     r0,[sp,#0]            ;166
000054  f7fffffe          BL       clear_flash_save
000058  e7e9              B        |L11.46|
                  |L11.90|
00005a  f89d2000          LDRB     r2,[sp,#0]            ;170
00005e  4950              LDR      r1,|L11.416|
000060  484e              LDR      r0,|L11.412|
000062  1c40              ADDS     r0,r0,#1              ;170
000064  f7fffffe          BL       Flash_Read_Run_Diagram
000068  f89d0000          LDRB     r0,[sp,#0]            ;171
00006c  1c40              ADDS     r0,r0,#1              ;171
00006e  b2c0              UXTB     r0,r0                 ;171
000070  9000              STR      r0,[sp,#0]            ;171
000072  f89d0000          LDRB     r0,[sp,#0]            ;172
000076  42a0              CMP      r0,r4                 ;172
000078  d904              BLS      |L11.132|
00007a  f89d0000          LDRB     r0,[sp,#0]            ;174
00007e  f7fffffe          BL       clear_flash_save
000082  e7d4              B        |L11.46|
                  |L11.132|
000084  f89d2000          LDRB     r2,[sp,#0]            ;178
000088  4946              LDR      r1,|L11.420|
00008a  4845              LDR      r0,|L11.416|
00008c  1c40              ADDS     r0,r0,#1              ;178
00008e  f7fffffe          BL       Flash_Read_Run_Diagram
000092  f89d0000          LDRB     r0,[sp,#0]            ;179
000096  1c40              ADDS     r0,r0,#1              ;179
000098  b2c0              UXTB     r0,r0                 ;179
00009a  9000              STR      r0,[sp,#0]            ;179
00009c  f89d0000          LDRB     r0,[sp,#0]            ;180
0000a0  42a0              CMP      r0,r4                 ;180
0000a2  d904              BLS      |L11.174|
0000a4  f89d0000          LDRB     r0,[sp,#0]            ;182
0000a8  f7fffffe          BL       clear_flash_save
0000ac  e7bf              B        |L11.46|
                  |L11.174|
0000ae  f89d2000          LDRB     r2,[sp,#0]            ;186
0000b2  493d              LDR      r1,|L11.424|
0000b4  483b              LDR      r0,|L11.420|
0000b6  1c40              ADDS     r0,r0,#1              ;186
0000b8  f7fffffe          BL       Flash_Read_Run_Diagram
0000bc  f89d0000          LDRB     r0,[sp,#0]            ;187
0000c0  1c40              ADDS     r0,r0,#1              ;187
0000c2  b2c0              UXTB     r0,r0                 ;187
0000c4  9000              STR      r0,[sp,#0]            ;187
0000c6  f89d0000          LDRB     r0,[sp,#0]            ;188
0000ca  42a0              CMP      r0,r4                 ;188
0000cc  d904              BLS      |L11.216|
0000ce  f89d0000          LDRB     r0,[sp,#0]            ;190
0000d2  f7fffffe          BL       clear_flash_save
0000d6  e7aa              B        |L11.46|
                  |L11.216|
0000d8  f89d2000          LDRB     r2,[sp,#0]            ;194
0000dc  4933              LDR      r1,|L11.428|
0000de  4832              LDR      r0,|L11.424|
0000e0  1c40              ADDS     r0,r0,#1              ;194
0000e2  f7fffffe          BL       Flash_Read_Run_Diagram
0000e6  f89d0000          LDRB     r0,[sp,#0]            ;195
0000ea  1c40              ADDS     r0,r0,#1              ;195
0000ec  b2c0              UXTB     r0,r0                 ;195
0000ee  9000              STR      r0,[sp,#0]            ;195
0000f0  f89d0000          LDRB     r0,[sp,#0]            ;196
0000f4  42a0              CMP      r0,r4                 ;196
0000f6  d904              BLS      |L11.258|
0000f8  f89d0000          LDRB     r0,[sp,#0]            ;198
0000fc  f7fffffe          BL       clear_flash_save
000100  e795              B        |L11.46|
                  |L11.258|
000102  f89d2000          LDRB     r2,[sp,#0]            ;202
000106  492a              LDR      r1,|L11.432|
000108  4828              LDR      r0,|L11.428|
00010a  1c40              ADDS     r0,r0,#1              ;202
00010c  f7fffffe          BL       Flash_Read_Run_Diagram
000110  f89d0000          LDRB     r0,[sp,#0]            ;203
000114  1c40              ADDS     r0,r0,#1              ;203
000116  b2c0              UXTB     r0,r0                 ;203
000118  9000              STR      r0,[sp,#0]            ;203
00011a  f89d0000          LDRB     r0,[sp,#0]            ;204
00011e  42a0              CMP      r0,r4                 ;204
000120  d904              BLS      |L11.300|
000122  f89d0000          LDRB     r0,[sp,#0]            ;206
000126  f7fffffe          BL       clear_flash_save
00012a  e780              B        |L11.46|
                  |L11.300|
00012c  f89d2000          LDRB     r2,[sp,#0]            ;210
000130  4920              LDR      r1,|L11.436|
000132  481f              LDR      r0,|L11.432|
000134  1c40              ADDS     r0,r0,#1              ;210
000136  f7fffffe          BL       Flash_Read_Run_Diagram
00013a  f89d0000          LDRB     r0,[sp,#0]            ;211
00013e  1c40              ADDS     r0,r0,#1              ;211
000140  b2c0              UXTB     r0,r0                 ;211
000142  9000              STR      r0,[sp,#0]            ;211
000144  f89d0000          LDRB     r0,[sp,#0]            ;212
000148  42a0              CMP      r0,r4                 ;212
00014a  d904              BLS      |L11.342|
00014c  f89d0000          LDRB     r0,[sp,#0]            ;214
000150  f7fffffe          BL       clear_flash_save
000154  e76b              B        |L11.46|
                  |L11.342|
000156  f89d2000          LDRB     r2,[sp,#0]            ;218
00015a  4917              LDR      r1,|L11.440|
00015c  4815              LDR      r0,|L11.436|
00015e  1c40              ADDS     r0,r0,#1              ;218
000160  f7fffffe          BL       Flash_Read_Run_Diagram
000164  f89d0000          LDRB     r0,[sp,#0]            ;219
000168  1c40              ADDS     r0,r0,#1              ;219
00016a  b2c0              UXTB     r0,r0                 ;219
00016c  9000              STR      r0,[sp,#0]            ;219
00016e  f89d0000          LDRB     r0,[sp,#0]            ;220
000172  42a0              CMP      r0,r4                 ;220
000174  d904              BLS      |L11.384|
000176  f89d0000          LDRB     r0,[sp,#0]            ;222
00017a  f7fffffe          BL       clear_flash_save
00017e  e756              B        |L11.46|
                  |L11.384|
000180  f89d2000          LDRB     r2,[sp,#0]            ;226
000184  490d              LDR      r1,|L11.444|
000186  480c              LDR      r0,|L11.440|
000188  1c40              ADDS     r0,r0,#1              ;226
00018a  f7fffffe          BL       Flash_Read_Run_Diagram
00018e  bf00              NOP      
000190  e74d              B        |L11.46|
;;;230    
                          ENDP

000192  0000              DCW      0x0000
                  |L11.404|
                          DCD      0x08033fff
                  |L11.408|
                          DCD      0x08033800
                  |L11.412|
                          DCD      0x080347ff
                  |L11.416|
                          DCD      0x08034fff
                  |L11.420|
                          DCD      0x080357ff
                  |L11.424|
                          DCD      0x08035fff
                  |L11.428|
                          DCD      0x080367ff
                  |L11.432|
                          DCD      0x08036fff
                  |L11.436|
                          DCD      0x080377ff
                  |L11.440|
                          DCD      0x08037fff
                  |L11.444|
                          DCD      0x080387ff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  flash1_arry
                          %        36
                  flash2_arry
                          %        1920
                  flash_run_diagram
                          %        100

                          AREA ||.data||, DATA, ALIGN=2

                  flash_1_once_flag
                          DCD      0x00000000
                  flash_2_once_flag
                          DCD      0x00000000
                  flash_3_once_flag
                          DCD      0x00000000
                  flash1_IP
                          DCD      0x00000000
                  flash1_Port
000010  0000              DCB      0x00,0x00
                  flash3_Save
000012  0000              DCB      0x00,0x00
                  Flash_p1
                          DCD      Run_Diagram_buf
                  Flash_p2
                          DCD      Run_Diagram_buf+0x64
                  Flash_p3
                          DCD      Run_Diagram_buf+0xc8
                  Flash_p4
                          DCD      Run_Diagram_buf+0x12c
                  Flash_p5
                          DCD      Run_Diagram_buf+0x190
                  Flash_p6
                          DCD      Run_Diagram_buf+0x1f4
                  Flash_p7
                          DCD      Run_Diagram_buf+0x258
                  Flash_p8
                          DCD      Run_Diagram_buf+0x2bc
                  Flash_p9
                          DCD      Run_Diagram_buf+0x320
                  Flash_p10
                          DCD      Run_Diagram_buf+0x384

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\internal_flash\\bsp_internal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_bsp_internal_flash_c_Flash_p1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_bsp_internal_flash_c_Flash_p1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_bsp_internal_flash_c_Flash_p1____REVSH|
#line 128
|__asm___20_bsp_internal_flash_c_Flash_p1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
