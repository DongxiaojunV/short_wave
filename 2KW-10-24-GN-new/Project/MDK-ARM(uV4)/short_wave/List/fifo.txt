; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\fifo.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\fifo.crf ..\..\User\fifo.c]
                          THUMB

                          AREA ||i.fifo_clean||, CODE, READONLY, ALIGN=1

                  fifo_clean PROC
;;;24     
;;;25     void fifo_clean(fifo_t *fifo)
000000  88c1              LDRH     r1,[r0,#6]
;;;26     {
;;;27         fifo->heart	= fifo->tail;
000002  8081              STRH     r1,[r0,#4]
;;;28         fifo->len	= 0;
000004  2100              MOVS     r1,#0
000006  8101              STRH     r1,[r0,#8]
;;;29     }
000008  4770              BX       lr
;;;30     
                          ENDP


                          AREA ||i.fifo_init||, CODE, READONLY, ALIGN=1

                  fifo_init PROC
;;;16     
;;;17     void fifo_init(fifo_t *fifo, uint8_t *buf, uint16_t len)
000000  6001              STR      r1,[r0,#0]
;;;18     {
;;;19         fifo->data	= buf;
;;;20         fifo->heart	= 0;
000002  2300              MOVS     r3,#0
000004  8083              STRH     r3,[r0,#4]
;;;21         fifo->tail	= 0;
000006  80c3              STRH     r3,[r0,#6]
;;;22         fifo->len	= len;
000008  8102              STRH     r2,[r0,#8]
;;;23     }
00000a  4770              BX       lr
;;;24     
                          ENDP


                          AREA ||i.fifo_len||, CODE, READONLY, ALIGN=1

                  fifo_len PROC
;;;46     
;;;47     uint8_t fifo_len(fifo_t *fifo)
000000  4601              MOV      r1,r0
;;;48     {
;;;49         if( fifo->tail >= fifo->heart )
000002  88c8              LDRH     r0,[r1,#6]
000004  888a              LDRH     r2,[r1,#4]
000006  4290              CMP      r0,r2
000008  db04              BLT      |L3.20|
;;;50             return ( fifo->tail - fifo->heart );
00000a  7988              LDRB     r0,[r1,#6]
00000c  790a              LDRB     r2,[r1,#4]
00000e  1a80              SUBS     r0,r0,r2
000010  b2c0              UXTB     r0,r0
                  |L3.18|
;;;51         else
;;;52             return ( fifo->tail + fifo->len - fifo->heart );
;;;53     }
000012  4770              BX       lr
                  |L3.20|
000014  7988              LDRB     r0,[r1,#6]            ;52
000016  7a0a              LDRB     r2,[r1,#8]            ;52
000018  4410              ADD      r0,r0,r2              ;52
00001a  790a              LDRB     r2,[r1,#4]            ;52
00001c  1a80              SUBS     r0,r0,r2              ;52
00001e  b2c0              UXTB     r0,r0                 ;52
000020  e7f7              B        |L3.18|
;;;54     
                          ENDP


                          AREA ||i.fifo_npull||, CODE, READONLY, ALIGN=1

                  fifo_npull PROC
;;;85     
;;;86     uint8_t fifo_npull(fifo_t *fifo, uint8_t *buf, uint8_t num)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;87     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;88     //    uint8_t i = 0;
;;;89         uint8_t len;
;;;90     
;;;91         len	= fifo_len(fifo);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       fifo_len
000010  4606              MOV      r6,r0
;;;92     
;;;93         if( num > len )
000012  42b5              CMP      r5,r6
000014  dd00              BLE      |L4.24|
;;;94         {
;;;95             num = len;
000016  4635              MOV      r5,r6
                  |L4.24|
;;;96         }
;;;97     	
;;;98     //    for(i=0; i<num; i++)
;;;99     //    {
;;;100    //        *(buf+i) = fifo->data[fifo->heart];
;;;101    //        fifo->heart = ( fifo->heart + 1 ) % fifo->len;
;;;102    //    }
;;;103    
;;;104    	memcpy(buf, fifo->data+fifo->heart, num);
000018  88a2              LDRH     r2,[r4,#4]
00001a  6820              LDR      r0,[r4,#0]
00001c  1881              ADDS     r1,r0,r2
00001e  462a              MOV      r2,r5
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       __aeabi_memcpy
;;;105    	fifo->heart = ( fifo->heart + num ) % fifo->len;
000026  88a0              LDRH     r0,[r4,#4]
000028  4428              ADD      r0,r0,r5
00002a  8921              LDRH     r1,[r4,#8]
00002c  fb90f2f1          SDIV     r2,r0,r1
000030  fb010012          MLS      r0,r1,r2,r0
000034  80a0              STRH     r0,[r4,#4]
;;;106        return len;
000036  4630              MOV      r0,r6
;;;107    }
000038  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||i.fifo_pull||, CODE, READONLY, ALIGN=1

                  fifo_pull PROC
;;;69     
;;;70     uint8_t fifo_pull(fifo_t *fifo, uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;71     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;72         if( is_fifo_empty(fifo) )
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       is_fifo_empty
00000c  b108              CBZ      r0,|L5.18|
;;;73         {
;;;74             return 0;
00000e  2000              MOVS     r0,#0
                  |L5.16|
;;;75         }
;;;76         else
;;;77         {
;;;78             *buf = fifo->data[fifo->heart];
;;;79             fifo->heart = ( fifo->heart + 1 ) % fifo->len;
;;;80     
;;;81             return 1;
;;;82         }
;;;83     
;;;84     }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  8899              LDRH     r1,[r3,#4]            ;78
000014  6818              LDR      r0,[r3,#0]            ;78
000016  5c40              LDRB     r0,[r0,r1]            ;78
000018  7020              STRB     r0,[r4,#0]            ;78
00001a  8898              LDRH     r0,[r3,#4]            ;79
00001c  1c40              ADDS     r0,r0,#1              ;79
00001e  8919              LDRH     r1,[r3,#8]            ;79
000020  fb90f2f1          SDIV     r2,r0,r1              ;79
000024  fb010012          MLS      r0,r1,r2,r0           ;79
000028  8098              STRH     r0,[r3,#4]            ;79
00002a  2001              MOVS     r0,#1                 ;81
00002c  e7f0              B        |L5.16|
;;;85     
                          ENDP


                          AREA ||i.fifo_push||, CODE, READONLY, ALIGN=1

                  fifo_push PROC
;;;54     
;;;55     uint8_t fifo_push(fifo_t *fifo, uint8_t buf)
000000  b530              PUSH     {r4,r5,lr}
;;;56     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;57     #if	FIFO_NO_COVER_WRITE
;;;58         if( is_fifo_full(fifo) )
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       is_fifo_full
00000c  b108              CBZ      r0,|L6.18|
;;;59         {
;;;60             return 0;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;61         }
;;;62     #endif
;;;63     
;;;64         fifo->data[fifo->tail] = buf;
;;;65         fifo->tail = ( fifo->tail + 1 ) % fifo->len;
;;;66     
;;;67         return 1;
;;;68     }
000010  bd30              POP      {r4,r5,pc}
                  |L6.18|
000012  88e1              LDRH     r1,[r4,#6]            ;64
000014  6820              LDR      r0,[r4,#0]            ;64
000016  5445              STRB     r5,[r0,r1]            ;64
000018  88e0              LDRH     r0,[r4,#6]            ;65
00001a  1c40              ADDS     r0,r0,#1              ;65
00001c  8921              LDRH     r1,[r4,#8]            ;65
00001e  fb90f2f1          SDIV     r2,r0,r1              ;65
000022  fb010012          MLS      r0,r1,r2,r0           ;65
000026  80e0              STRH     r0,[r4,#6]            ;65
000028  2001              MOVS     r0,#1                 ;67
00002a  e7f1              B        |L6.16|
;;;69     
                          ENDP


                          AREA ||i.is_fifo_empty||, CODE, READONLY, ALIGN=1

                  is_fifo_empty PROC
;;;30     
;;;31     uint8_t is_fifo_empty(fifo_t *fifo)
000000  4601              MOV      r1,r0
;;;32     {
;;;33         if( fifo->heart == fifo->tail )
000002  8888              LDRH     r0,[r1,#4]
000004  88ca              LDRH     r2,[r1,#6]
000006  4290              CMP      r0,r2
000008  d101              BNE      |L7.14|
;;;34             return 1;
00000a  2001              MOVS     r0,#1
                  |L7.12|
;;;35         else
;;;36             return 0;
;;;37     }
00000c  4770              BX       lr
                  |L7.14|
00000e  2000              MOVS     r0,#0                 ;36
000010  e7fc              B        |L7.12|
;;;38     
                          ENDP


                          AREA ||i.is_fifo_full||, CODE, READONLY, ALIGN=1

                  is_fifo_full PROC
;;;38     
;;;39     uint8_t is_fifo_full(fifo_t *fifo)
000000  4601              MOV      r1,r0
;;;40     {
;;;41         if( ( (fifo->tail + 1) % fifo->len) == fifo->heart )
000002  88c8              LDRH     r0,[r1,#6]
000004  1c40              ADDS     r0,r0,#1
000006  890a              LDRH     r2,[r1,#8]
000008  fb90f3f2          SDIV     r3,r0,r2
00000c  fb020013          MLS      r0,r2,r3,r0
000010  888a              LDRH     r2,[r1,#4]
000012  4290              CMP      r0,r2
000014  d101              BNE      |L8.26|
;;;42             return 1;
000016  2001              MOVS     r0,#1
                  |L8.24|
;;;43         else
;;;44             return 0;
;;;45     }
000018  4770              BX       lr
                  |L8.26|
00001a  2000              MOVS     r0,#0                 ;44
00001c  e7fc              B        |L8.24|
;;;46     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fifo_uart5
                          %        12
