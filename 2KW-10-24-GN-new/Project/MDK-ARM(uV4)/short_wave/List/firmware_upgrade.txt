; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\firmware_upgrade.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\firmware_upgrade.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\firmware_upgrade.crf ..\..\User\firmware_upgrade\firmware_upgrade.c]
                          THUMB

                          AREA ||i.APP_Version_Read||, CODE, READONLY, ALIGN=1

                  APP_Version_Read PROC
;;;154    //读固件版本号
;;;155    void APP_Version_Read(uint32_t Address, uint8_t *pBuffer_1, uint8_t *pBuffer_2)
000000  b570              PUSH     {r4-r6,lr}
;;;156    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;157    	FLASH_Read(Address,		pBuffer_1,	APPLICATION_VERSION_LEN);
000008  2204              MOVS     r2,#4
00000a  4631              MOV      r1,r6
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       FLASH_Read
;;;158    	FLASH_Read(Address+8,	pBuffer_2,	APPLICATION_VERSION_LEN);
000012  2204              MOVS     r2,#4
000014  4629              MOV      r1,r5
000016  f1040008          ADD      r0,r4,#8
00001a  f7fffffe          BL       FLASH_Read
;;;159    }
00001e  bd70              POP      {r4-r6,pc}
;;;160    
                          ENDP


                          AREA ||i.APP_Version_Write||, CODE, READONLY, ALIGN=1

                  APP_Version_Write PROC
;;;161    //写固件版本号
;;;162    void APP_Version_Write(uint32_t Address, uint8_t *p_data_1, uint8_t *p_data_2)
000000  b57c              PUSH     {r2-r6,lr}
;;;163    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;164    	uint8_t p_data[2*APPLICATION_VERSION_LEN];
;;;165    	
;;;166    	memcpy(p_data,		p_data_1,	APPLICATION_VERSION_LEN);
000008  6820              LDR      r0,[r4,#0]
00000a  9000              STR      r0,[sp,#0]
;;;167    	memcpy(p_data+4,	p_data_2,	APPLICATION_VERSION_LEN);
00000c  6828              LDR      r0,[r5,#0]
00000e  9001              STR      r0,[sp,#4]
;;;168    	Flash_Write(Address, p_data, 2*APPLICATION_VERSION_LEN);
000010  2208              MOVS     r2,#8
000012  4669              MOV      r1,sp
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       Flash_Write
;;;169    }
00001a  bd7c              POP      {r2-r6,pc}
;;;170    
                          ENDP


                          AREA ||i.BootLoad_Jump||, CODE, READONLY, ALIGN=2

                  BootLoad_Jump PROC
;;;33     //BootLoader 跳转
;;;34     void BootLoad_Jump(void)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
;;;36     	u32 Application_Address;
;;;37         u32 JumpAddress;
;;;38         pFunction  Jump_To_Application;
;;;39         /* Check Vector Table: Test if user code is programmed starting from address 
;;;40         "APPLICATION_ADDRESS" */
;;;41     	
;;;42     	Application_Address = Get_Application_Address();
000002  f7fffffe          BL       Get_Application_Address
000006  4604              MOV      r4,r0
;;;43     	
;;;44         //d_printfhex32((*(__IO uint32_t*)APPLICATION_ADDRESS));d_printf("\n");
;;;45         if (((*(__IO uint32_t*)Application_Address) & 0x2FFE0000 ) == 0x20000000)		//判断栈顶地址是否在0x2000 0000 ~ 0x2000 2000之间
000008  6820              LDR      r0,[r4,#0]
00000a  4906              LDR      r1,|L3.36|
00000c  4008              ANDS     r0,r0,r1
00000e  f1b05f00          CMP      r0,#0x20000000
000012  d106              BNE      |L3.34|
;;;46         {
;;;47     		__disable_irq();															//失能中断
000014  b672              CPSID    i
;;;48     	
;;;49     		JumpAddress = *(__IO uint32_t*) (Application_Address +4);					//中断向量表的第二项 复位中断入口向量地址(第一项为堆栈指针)
000016  6865              LDR      r5,[r4,#4]
;;;50     		//d_printfhex32(JumpAddress);d_printf("\n");
;;;51     	
;;;52     		Jump_To_Application = (pFunction)JumpAddress;								//指向复位函数所在地址
000018  462e              MOV      r6,r5
;;;53     		
;;;54     		/* Initialize user application's Stack Pointer */
;;;55     		MSR_MSP(*(__IO uint32_t*) Application_Address);								//设置主函数栈指针
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       MSR_MSP
;;;56     		Jump_To_Application();														//执行复位函数
000020  47b0              BLX      r6
                  |L3.34|
;;;57         }
;;;58     }
000022  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP

                  |L3.36|
                          DCD      0x2ffe0000

                          AREA ||i.BootLoad_Jump_Recover||, CODE, READONLY, ALIGN=2

                  BootLoad_Jump_Recover PROC
;;;60     //BootLoader 跳转恢复
;;;61     void BootLoad_Jump_Recover(void)
000000  b570              PUSH     {r4-r6,lr}
;;;62     {
;;;63     	u32 Application_Address;
;;;64         u32 JumpAddress;
;;;65         pFunction  Jump_To_Application;
;;;66         /* Check Vector Table: Test if user code is programmed starting from address 
;;;67         "APPLICATION_ADDRESS" */
;;;68     	
;;;69     	Application_Address = Get_Old_Application_Address();
000002  f7fffffe          BL       Get_Old_Application_Address
000006  4604              MOV      r4,r0
;;;70     	
;;;71         //d_printfhex32((*(__IO uint32_t*)APPLICATION_ADDRESS));d_printf("\n");
;;;72         if (((*(__IO uint32_t*)Application_Address) & 0x2FFE0000 ) == 0x20000000)		//判断栈顶地址是否在0x2000 0000 ~ 0x2000 2000之间
000008  6820              LDR      r0,[r4,#0]
00000a  4906              LDR      r1,|L4.36|
00000c  4008              ANDS     r0,r0,r1
00000e  f1b05f00          CMP      r0,#0x20000000
000012  d106              BNE      |L4.34|
;;;73         {
;;;74     		__disable_irq();															//失能中断
000014  b672              CPSID    i
;;;75     	
;;;76     		JumpAddress = *(__IO uint32_t*) (Application_Address +4);					//中断向量表的第二项 复位中断入口向量地址(第一项为堆栈指针)
000016  6865              LDR      r5,[r4,#4]
;;;77     		//d_printfhex32(JumpAddress);d_printf("\n");
;;;78     	
;;;79     		Jump_To_Application = (pFunction)JumpAddress;								//指向复位函数所在地址
000018  462e              MOV      r6,r5
;;;80     		
;;;81     		/* Initialize user application's Stack Pointer */
;;;82     		MSR_MSP(*(__IO uint32_t*) Application_Address);								//设置主函数栈指针
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       MSR_MSP
;;;83     		Jump_To_Application();														//执行复位函数
000020  47b0              BLX      r6
                  |L4.34|
;;;84         }
;;;85     }
000022  bd70              POP      {r4-r6,pc}
;;;86     
                          ENDP

                  |L4.36|
                          DCD      0x2ffe0000

                          AREA ||i.FLASH_Read||, CODE, READONLY, ALIGN=1

                  FLASH_Read PROC
;;;177    //读flash
;;;178    void FLASH_Read(uint32_t ReadAddr, uint8_t *pBuffer, uint16_t len) 	
000000  b530              PUSH     {r4,r5,lr}
;;;179    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;180    	uint16_t i;
;;;181    	
;;;182    	for(i=0; i<len; i++)
000008  2200              MOVS     r2,#0
00000a  e006              B        |L5.26|
                  |L5.12|
;;;183    	{
;;;184    		pBuffer[i] = FLASH_ReadHalfWord(ReadAddr);	//读取2个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       FLASH_ReadHalfWord
000012  54a0              STRB     r0,[r4,r2]
;;;185    		ReadAddr += 2;	//偏移2个字节.	
000014  1c9b              ADDS     r3,r3,#2
000016  1c50              ADDS     r0,r2,#1              ;182
000018  b282              UXTH     r2,r0                 ;182
                  |L5.26|
00001a  42aa              CMP      r2,r5                 ;182
00001c  dbf6              BLT      |L5.12|
;;;186    	}
;;;187    }
00001e  bd30              POP      {r4,r5,pc}
;;;188    
                          ENDP


                          AREA ||i.FLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  FLASH_ReadHalfWord PROC
;;;171    //读flash
;;;172    uint16_t FLASH_ReadHalfWord(uint32_t ReadAddr)
000000  4601              MOV      r1,r0
;;;173    {
;;;174    	return *(__IO uint32_t*)ReadAddr; 
000002  6808              LDR      r0,[r1,#0]
000004  b280              UXTH     r0,r0
;;;175    }
000006  4770              BX       lr
;;;176    
                          ENDP


                          AREA ||i.Flash_Write||, CODE, READONLY, ALIGN=1

                  Flash_Write PROC
;;;189    //写flash(半字)		擦除整页再写，没做保存数据处理
;;;190    uint8_t Flash_Write(uint32_t baseAddress, uint8_t *p_data, uint32_t len)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;191    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;192    	uint8_t i = 0;
00000a  2400              MOVS     r4,#0
;;;193    	
;;;194        uint32_t EraseCounter = 0x00;		//记录要擦除多少页
00000c  46a1              MOV      r9,r4
;;;195        uint32_t Address = 0x00;			//记录写入的地址
00000e  2700              MOVS     r7,#0
;;;196        uint32_t NbrOfPage = 0x00;			//记录写入多少页
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;197    
;;;198        FLASH_Status FLASHStatus = FLASH_COMPLETE;		//记录每次擦除的结果
000014  f04f0a04          MOV      r10,#4
;;;199        uint8_t MemoryProgramStatus = 0x01;				//记录整个测试结果
000018  f04f0b01          MOV      r11,#1
;;;200    
;;;201    	//flash解锁
;;;202        FLASH_Unlock();
00001c  f7fffffe          BL       FLASH_Unlock
;;;203    
;;;204        /* 计算要擦除多少页 */
;;;205        NbrOfPage = len/FLASH_PAGE_SIZE + 1;
000020  2001              MOVS     r0,#1
000022  eb0020d6          ADD      r0,r0,r6,LSR #11
000026  9000              STR      r0,[sp,#0]
;;;206    
;;;207        /* 清空所有标志位 */
;;;208    	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
000028  2035              MOVS     r0,#0x35
00002a  f7fffffe          BL       FLASH_ClearFlag
;;;209    
;;;210        /* 按页擦除*/
;;;211        for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)
00002e  bf00              NOP      
000030  e008              B        |L7.68|
                  |L7.50|
;;;212        {
;;;213            FLASHStatus = FLASH_ErasePage(baseAddress + (FLASH_PAGE_SIZE * EraseCounter));
000032  f44f6100          MOV      r1,#0x800
000036  fb015009          MLA      r0,r1,r9,r5
00003a  f7fffffe          BL       FLASH_ErasePage
00003e  4682              MOV      r10,r0
000040  f1090901          ADD      r9,r9,#1              ;211
                  |L7.68|
000044  9800              LDR      r0,[sp,#0]            ;211
000046  4581              CMP      r9,r0                 ;211
000048  d202              BCS      |L7.80|
00004a  f1ba0f04          CMP      r10,#4                ;211
00004e  d0f0              BEQ      |L7.50|
                  |L7.80|
;;;214        }
;;;215    
;;;216        /* 向内部FLASH写入数据 */
;;;217        Address = baseAddress;
000050  462f              MOV      r7,r5
;;;218        for(i=0; (i<len)&&(FLASHStatus == FLASH_COMPLETE); i++)
000052  2400              MOVS     r4,#0
000054  e007              B        |L7.102|
                  |L7.86|
;;;219        {
;;;220            FLASH_ProgramHalfWord(Address, *(p_data+i) );
000056  f8181004          LDRB     r1,[r8,r4]
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       FLASH_ProgramHalfWord
;;;221            Address += 2;
000060  1cbf              ADDS     r7,r7,#2
000062  1c60              ADDS     r0,r4,#1              ;218
000064  b2c4              UXTB     r4,r0                 ;218
                  |L7.102|
000066  42b4              CMP      r4,r6                 ;218
000068  d202              BCS      |L7.112|
00006a  f1ba0f04          CMP      r10,#4                ;218
00006e  d0f2              BEQ      |L7.86|
                  |L7.112|
;;;222        }
;;;223    
;;;224    	//flash上锁
;;;225        FLASH_Lock();
000070  f7fffffe          BL       FLASH_Lock
;;;226    
;;;227        /* 检查写入的数据是否正确 */
;;;228        Address = baseAddress;
000074  462f              MOV      r7,r5
;;;229        for(i=0; (i<len)&&(MemoryProgramStatus != 0x00); i++)
000076  2400              MOVS     r4,#0
000078  e009              B        |L7.142|
                  |L7.122|
;;;230        {
;;;231            if( (*(__IO uint32_t*) Address) != (*(p_data+i)) )
00007a  6838              LDR      r0,[r7,#0]
00007c  f8181004          LDRB     r1,[r8,r4]
000080  4288              CMP      r0,r1
000082  d001              BEQ      |L7.136|
;;;232            {
;;;233                MemoryProgramStatus = 0x00;
000084  f04f0b00          MOV      r11,#0
                  |L7.136|
;;;234            }
;;;235    		
;;;236            Address += 2;
000088  1cbf              ADDS     r7,r7,#2
00008a  1c60              ADDS     r0,r4,#1              ;229
00008c  b2c4              UXTB     r4,r0                 ;229
                  |L7.142|
00008e  42b4              CMP      r4,r6                 ;229
000090  d202              BCS      |L7.152|
000092  f1bb0f00          CMP      r11,#0                ;229
000096  d1f0              BNE      |L7.122|
                  |L7.152|
;;;237        }
;;;238    	
;;;239        return MemoryProgramStatus;
000098  4658              MOV      r0,r11
;;;240    }
00009a  e8bd8ff8          POP      {r3-r11,pc}
;;;241    
                          ENDP


                          AREA ||i.Get_APP_Version||, CODE, READONLY, ALIGN=2

                  Get_APP_Version PROC
;;;87     //获取最新的APP版本号	0:APP1	1:APP2
;;;88     uint8_t	Get_APP_Version(void)
000000  b500              PUSH     {lr}
;;;89     {
;;;90     	APP_Version_Read(APPLICATION_VERSION_ADDRESS, APP_Version_1, APP_Version_2);
000002  4a43              LDR      r2,|L8.272|
000004  4943              LDR      r1,|L8.276|
000006  4844              LDR      r0,|L8.280|
000008  f7fffffe          BL       APP_Version_Read
;;;91     	
;;;92     	//如果都是有效数据，
;;;93     	if( ( (APP_Version_1[0]<0x9A) && (APP_Version_1[1]<0x9A) && (APP_Version_1[2]<0x32) && (APP_Version_1[3]<0x32) ) &&		//有效数据
00000c  4841              LDR      r0,|L8.276|
00000e  7800              LDRB     r0,[r0,#0]  ; APP_Version_1
000010  289a              CMP      r0,#0x9a
000012  da37              BGE      |L8.132|
000014  483f              LDR      r0,|L8.276|
000016  7840              LDRB     r0,[r0,#1]  ; APP_Version_1
000018  289a              CMP      r0,#0x9a
00001a  da33              BGE      |L8.132|
00001c  483d              LDR      r0,|L8.276|
00001e  7880              LDRB     r0,[r0,#2]  ; APP_Version_1
000020  2832              CMP      r0,#0x32
000022  da2f              BGE      |L8.132|
000024  483b              LDR      r0,|L8.276|
000026  78c0              LDRB     r0,[r0,#3]  ; APP_Version_1
000028  2832              CMP      r0,#0x32
00002a  da2b              BGE      |L8.132|
;;;94     		( (APP_Version_2[0]<0x9A) && (APP_Version_2[1]<0x9A) && (APP_Version_2[2]<0x32) && (APP_Version_2[3]<0x32) ) )		//有效数据
00002c  4838              LDR      r0,|L8.272|
00002e  7800              LDRB     r0,[r0,#0]  ; APP_Version_2
000030  289a              CMP      r0,#0x9a
000032  da27              BGE      |L8.132|
000034  4836              LDR      r0,|L8.272|
000036  7840              LDRB     r0,[r0,#1]  ; APP_Version_2
000038  289a              CMP      r0,#0x9a
00003a  da23              BGE      |L8.132|
00003c  4834              LDR      r0,|L8.272|
00003e  7880              LDRB     r0,[r0,#2]  ; APP_Version_2
000040  2832              CMP      r0,#0x32
000042  da1f              BGE      |L8.132|
000044  4832              LDR      r0,|L8.272|
000046  78c0              LDRB     r0,[r0,#3]  ; APP_Version_2
000048  2832              CMP      r0,#0x32
00004a  da1b              BGE      |L8.132|
;;;95     	{
;;;96     		if( (APP_Version_1[0]<APP_Version_2[0]) || (APP_Version_1[1]<APP_Version_2[1]) || 	//APP2版本号大于APP1
00004c  4831              LDR      r0,|L8.276|
00004e  7800              LDRB     r0,[r0,#0]  ; APP_Version_1
000050  492f              LDR      r1,|L8.272|
000052  7809              LDRB     r1,[r1,#0]  ; APP_Version_2
000054  4288              CMP      r0,r1
000056  db11              BLT      |L8.124|
000058  482e              LDR      r0,|L8.276|
00005a  7840              LDRB     r0,[r0,#1]  ; APP_Version_1
00005c  492c              LDR      r1,|L8.272|
00005e  7849              LDRB     r1,[r1,#1]  ; APP_Version_2
000060  4288              CMP      r0,r1
000062  db0b              BLT      |L8.124|
;;;97     			(APP_Version_1[2]<APP_Version_2[2]) || (APP_Version_1[3]<APP_Version_2[3]) )
000064  482b              LDR      r0,|L8.276|
000066  7880              LDRB     r0,[r0,#2]  ; APP_Version_1
000068  4929              LDR      r1,|L8.272|
00006a  7889              LDRB     r1,[r1,#2]  ; APP_Version_2
00006c  4288              CMP      r0,r1
00006e  db05              BLT      |L8.124|
000070  4828              LDR      r0,|L8.276|
000072  78c0              LDRB     r0,[r0,#3]  ; APP_Version_1
000074  4926              LDR      r1,|L8.272|
000076  78c9              LDRB     r1,[r1,#3]  ; APP_Version_2
000078  4288              CMP      r0,r1
00007a  da01              BGE      |L8.128|
                  |L8.124|
;;;98     		{
;;;99     			return 1;
00007c  2001              MOVS     r0,#1
                  |L8.126|
;;;100    		}
;;;101    		else
;;;102    		{
;;;103    			return 0;
;;;104    		}
;;;105    	}
;;;106    	else	if( ( (APP_Version_1[0]>=0x9A) && (APP_Version_1[1]>=0x9A) && (APP_Version_1[2]>=0x32) && (APP_Version_1[3]>=0x32) ) &&		//无效数据
;;;107    				( (APP_Version_2[0]<0x9A) && (APP_Version_2[1]<0x9A) && (APP_Version_2[2]<0x32) && (APP_Version_2[3]<0x32) ) )			//有效数据
;;;108    	{
;;;109    		return 1;
;;;110    	}
;;;111    	else	if( ( (APP_Version_1[0]<0x9A) && (APP_Version_1[1]<0x9A) && (APP_Version_1[2]<0x32) && (APP_Version_1[3]<0x32) ) &&			//有效数据
;;;112    				( (APP_Version_2[0]>=0x9A) && (APP_Version_2[1]>=0x9A) && (APP_Version_2[2]>=0x32) && (APP_Version_2[3]>=0x32) ) )		//无效数据
;;;113    	{
;;;114    		return 0;
;;;115    	}
;;;116    	
;;;117    	return 0;
;;;118    }
00007e  bd00              POP      {pc}
                  |L8.128|
000080  2000              MOVS     r0,#0                 ;103
000082  e7fc              B        |L8.126|
                  |L8.132|
000084  4823              LDR      r0,|L8.276|
000086  7800              LDRB     r0,[r0,#0]            ;106  ; APP_Version_1
000088  289a              CMP      r0,#0x9a              ;106
00008a  db1d              BLT      |L8.200|
00008c  4821              LDR      r0,|L8.276|
00008e  7840              LDRB     r0,[r0,#1]            ;106  ; APP_Version_1
000090  289a              CMP      r0,#0x9a              ;106
000092  db19              BLT      |L8.200|
000094  481f              LDR      r0,|L8.276|
000096  7880              LDRB     r0,[r0,#2]            ;106  ; APP_Version_1
000098  2832              CMP      r0,#0x32              ;106
00009a  db15              BLT      |L8.200|
00009c  481d              LDR      r0,|L8.276|
00009e  78c0              LDRB     r0,[r0,#3]            ;106  ; APP_Version_1
0000a0  2832              CMP      r0,#0x32              ;106
0000a2  db11              BLT      |L8.200|
0000a4  481a              LDR      r0,|L8.272|
0000a6  7800              LDRB     r0,[r0,#0]            ;107  ; APP_Version_2
0000a8  289a              CMP      r0,#0x9a              ;107
0000aa  da0d              BGE      |L8.200|
0000ac  4818              LDR      r0,|L8.272|
0000ae  7840              LDRB     r0,[r0,#1]            ;107  ; APP_Version_2
0000b0  289a              CMP      r0,#0x9a              ;107
0000b2  da09              BGE      |L8.200|
0000b4  4816              LDR      r0,|L8.272|
0000b6  7880              LDRB     r0,[r0,#2]            ;107  ; APP_Version_2
0000b8  2832              CMP      r0,#0x32              ;107
0000ba  da05              BGE      |L8.200|
0000bc  4814              LDR      r0,|L8.272|
0000be  78c0              LDRB     r0,[r0,#3]            ;107  ; APP_Version_2
0000c0  2832              CMP      r0,#0x32              ;107
0000c2  da01              BGE      |L8.200|
0000c4  2001              MOVS     r0,#1                 ;109
0000c6  e7da              B        |L8.126|
                  |L8.200|
0000c8  4812              LDR      r0,|L8.276|
0000ca  7800              LDRB     r0,[r0,#0]            ;111  ; APP_Version_1
0000cc  289a              CMP      r0,#0x9a              ;111
0000ce  da1d              BGE      |L8.268|
0000d0  4810              LDR      r0,|L8.276|
0000d2  7840              LDRB     r0,[r0,#1]            ;111  ; APP_Version_1
0000d4  289a              CMP      r0,#0x9a              ;111
0000d6  da19              BGE      |L8.268|
0000d8  480e              LDR      r0,|L8.276|
0000da  7880              LDRB     r0,[r0,#2]            ;111  ; APP_Version_1
0000dc  2832              CMP      r0,#0x32              ;111
0000de  da15              BGE      |L8.268|
0000e0  480c              LDR      r0,|L8.276|
0000e2  78c0              LDRB     r0,[r0,#3]            ;111  ; APP_Version_1
0000e4  2832              CMP      r0,#0x32              ;111
0000e6  da11              BGE      |L8.268|
0000e8  4809              LDR      r0,|L8.272|
0000ea  7800              LDRB     r0,[r0,#0]            ;112  ; APP_Version_2
0000ec  289a              CMP      r0,#0x9a              ;112
0000ee  db0d              BLT      |L8.268|
0000f0  4807              LDR      r0,|L8.272|
0000f2  7840              LDRB     r0,[r0,#1]            ;112  ; APP_Version_2
0000f4  289a              CMP      r0,#0x9a              ;112
0000f6  db09              BLT      |L8.268|
0000f8  4805              LDR      r0,|L8.272|
0000fa  7880              LDRB     r0,[r0,#2]            ;112  ; APP_Version_2
0000fc  2832              CMP      r0,#0x32              ;112
0000fe  db05              BLT      |L8.268|
000100  4803              LDR      r0,|L8.272|
000102  78c0              LDRB     r0,[r0,#3]            ;112  ; APP_Version_2
000104  2832              CMP      r0,#0x32              ;112
000106  db01              BLT      |L8.268|
000108  2000              MOVS     r0,#0                 ;114
00010a  e7b8              B        |L8.126|
                  |L8.268|
00010c  2000              MOVS     r0,#0                 ;117
00010e  e7b6              B        |L8.126|
;;;119    
                          ENDP

                  |L8.272|
                          DCD      APP_Version_2
                  |L8.276|
                          DCD      APP_Version_1
                  |L8.280|
                          DCD      0x08038800

                          AREA ||i.Get_Application_Address||, CODE, READONLY, ALIGN=2

                  Get_Application_Address PROC
;;;120    //获取最新版本APP地址
;;;121    uint32_t Get_Application_Address(void)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123    	u32 Application_Address;
;;;124    	
;;;125    	if( Get_APP_Version() )
000002  f7fffffe          BL       Get_APP_Version
000006  b108              CBZ      r0,|L9.12|
;;;126    	{
;;;127    		Application_Address = APPLICATION_ADDRESS_BASE + APPLICATION_ADDRESS_OFFSET_2;
000008  4c02              LDR      r4,|L9.20|
00000a  e000              B        |L9.14|
                  |L9.12|
;;;128    	}
;;;129    	else
;;;130    	{
;;;131    		Application_Address = APPLICATION_ADDRESS_BASE + APPLICATION_ADDRESS_OFFSET_1;
00000c  4c02              LDR      r4,|L9.24|
                  |L9.14|
;;;132    	}
;;;133    	
;;;134    	return Application_Address;
00000e  4620              MOV      r0,r4
;;;135    }
000010  bd10              POP      {r4,pc}
;;;136    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x0801a000
                  |L9.24|
                          DCD      0x08002000

                          AREA ||i.Get_Old_Application_Address||, CODE, READONLY, ALIGN=2

                  Get_Old_Application_Address PROC
;;;137    //获取旧版本APP地址
;;;138    uint32_t Get_Old_Application_Address(void)
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140    	u32 Application_Address;
;;;141    	
;;;142    	if( Get_APP_Version() )
000002  f7fffffe          BL       Get_APP_Version
000006  b108              CBZ      r0,|L10.12|
;;;143    	{
;;;144    		Application_Address = APPLICATION_ADDRESS_BASE + APPLICATION_ADDRESS_OFFSET_1;
000008  4c02              LDR      r4,|L10.20|
00000a  e000              B        |L10.14|
                  |L10.12|
;;;145    	}
;;;146    	else
;;;147    	{
;;;148    		Application_Address = APPLICATION_ADDRESS_BASE + APPLICATION_ADDRESS_OFFSET_2;
00000c  4c02              LDR      r4,|L10.24|
                  |L10.14|
;;;149    	}
;;;150    	
;;;151    	return Application_Address;
00000e  4620              MOV      r0,r4
;;;152    }
000010  bd10              POP      {r4,pc}
;;;153    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x08002000
                  |L10.24|
                          DCD      0x0801a000

                          AREA ||i.Set_Vector_Table||, CODE, READONLY, ALIGN=1

                  Set_Vector_Table PROC
;;;20     //设置中断向量表偏移地址
;;;21     void Set_Vector_Table(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     	if( Get_APP_Version() )
000002  f7fffffe          BL       Get_APP_Version
000006  b130              CBZ      r0,|L11.22|
;;;24     	{
;;;25     		NVIC_SetVectorTable(NVIC_VectTab_FLASH, APPLICATION_ADDRESS_OFFSET_2);	//设置中断向量表偏移地址	0x1A000
000008  f44f31d0          MOV      r1,#0x1a000
00000c  f04f6000          MOV      r0,#0x8000000
000010  f7fffffe          BL       NVIC_SetVectorTable
000014  e004              B        |L11.32|
                  |L11.22|
;;;26     	}
;;;27     	else
;;;28     	{
;;;29     		NVIC_SetVectorTable(NVIC_VectTab_FLASH, APPLICATION_ADDRESS_OFFSET_1);	//设置中断向量表偏移地址	0x2000
000016  f44f5100          MOV      r1,#0x2000
00001a  0388              LSLS     r0,r1,#14
00001c  f7fffffe          BL       NVIC_SetVectorTable
                  |L11.32|
;;;30     	}
;;;31     }
000020  bd10              POP      {r4,pc}
;;;32     
                          ENDP


                          AREA ||i.iap_write_appbin||, CODE, READONLY, ALIGN=1

                  iap_write_appbin PROC
;;;247    //appsize:	应用程序大小(字节)
;;;248    void iap_write_appbin(u32 appxaddr,u8 *appbuf,u32 appsize)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;249    {
000004  f6ad0d04          SUB      sp,sp,#0x804
000008  4606              MOV      r6,r0
00000a  460f              MOV      r7,r1
00000c  4690              MOV      r8,r2
;;;250    	u16 t;
;;;251    	u16 i=0;
00000e  2400              MOVS     r4,#0
;;;252    	u16 temp;
;;;253    	u16 iapbuf[1024];
;;;254    	
;;;255    	u32 fwaddr=appxaddr;		//当前写入的地址
000010  46b3              MOV      r11,r6
;;;256    	u8 *dfu=appbuf;
000012  463d              MOV      r5,r7
;;;257    	
;;;258    	for(t=0;t<appsize;t+=2)
000014  46a1              MOV      r9,r4
000016  e01c              B        |L12.82|
                  |L12.24|
;;;259    	{						    
;;;260    		temp=(u16)dfu[1]<<8;
000018  7868              LDRB     r0,[r5,#1]
00001a  ea4f2a00          LSL      r10,r0,#8
;;;261    		temp+=(u16)dfu[0];	  
00001e  7828              LDRB     r0,[r5,#0]
000020  4450              ADD      r0,r0,r10
000022  fa1ffa80          UXTH     r10,r0
;;;262    		dfu+=2;					//偏移2个字节
000026  1cad              ADDS     r5,r5,#2
;;;263    		
;;;264    		iapbuf[i++]=temp;	    
000028  4620              MOV      r0,r4
00002a  1c61              ADDS     r1,r4,#1
00002c  b28c              UXTH     r4,r1
00002e  a901              ADD      r1,sp,#4
000030  f821a010          STRH     r10,[r1,r0,LSL #1]
;;;265    		if(i==1024)
000034  f5b46f80          CMP      r4,#0x400
000038  d107              BNE      |L12.74|
;;;266    		{
;;;267    			i=0;
00003a  2400              MOVS     r4,#0
;;;268    			STMFLASH_Write(fwaddr, iapbuf, 1024);	
00003c  f44f6280          MOV      r2,#0x400
000040  4658              MOV      r0,r11
000042  f7fffffe          BL       STMFLASH_Write
;;;269    			fwaddr+=2048;		//偏移2048  16=2*8.所以要乘以2.
000046  f50b6b00          ADD      r11,r11,#0x800
                  |L12.74|
00004a  f1090002          ADD      r0,r9,#2              ;258
00004e  fa1ff980          UXTH     r9,r0                 ;258
                  |L12.82|
000052  45c1              CMP      r9,r8                 ;258
000054  d3e0              BCC      |L12.24|
;;;270    		}
;;;271    	}
;;;272    	
;;;273    	if( i )
000056  b124              CBZ      r4,|L12.98|
;;;274    		STMFLASH_Write(fwaddr, iapbuf, i);	//将最后的一些内容字节写进去.  
000058  4622              MOV      r2,r4
00005a  a901              ADD      r1,sp,#4
00005c  4658              MOV      r0,r11
00005e  f7fffffe          BL       STMFLASH_Write
                  |L12.98|
;;;275    }
000062  f60d0d04          ADD      sp,sp,#0x804
000066  e8bd8ff0          POP      {r4-r11,pc}
;;;276    #endif
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APP_Version_1
                          DCDU     0x00000000
                  APP_Version_2
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\firmware_upgrade\\firmware_upgrade.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_firmware_upgrade_c_MSR_MSP____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_firmware_upgrade_c_MSR_MSP____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_firmware_upgrade_c_MSR_MSP____REVSH|
#line 128
|__asm___18_firmware_upgrade_c_MSR_MSP____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |MSR_MSP|
#line 13 "..\\..\\User\\firmware_upgrade\\firmware_upgrade.c"
|MSR_MSP| PROC
#line 14

 MSR MSP, r0
 BX r14
	ENDP

;*** End   embedded assembler ***
