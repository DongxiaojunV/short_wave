; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\hard_control.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\hard_control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\hard_control.crf ..\..\User\hard_control.c]
                          THUMB

                          AREA ||i.find_hard_control||, CODE, READONLY, ALIGN=2

                  find_hard_control PROC
;;;487    /* 扫描flash内的运行图，按时开启和结束 */
;;;488    int find_hard_control(uint8_t Save_count)
000000  b570              PUSH     {r4-r6,lr}
;;;489    {
000002  4605              MOV      r5,r0
;;;490        for(int i=0; i<Save_count; i++)
000004  2400              MOVS     r4,#0
000006  f002b830          B.W      |L1.8298|
                  |L1.10|
;;;491        {
;;;492            if(Monitor.start[i][0]!=1)	//第一个
00000a  eb040084          ADD      r0,r4,r4,LSL #2
00000e  49fc              LDR      r1,|L1.1024|
000010  f8110010          LDRB     r0,[r1,r0,LSL #1]
000014  2801              CMP      r0,#1
                  |L1.22|
000016  d07a              BEQ      |L1.270|
;;;493            {
;;;494                if(Run_Diagram_buf[i].Start_Time1[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time1[0]*60+Run_Diagram_buf[i].Start_Time1[1]))\
000018  eb0400c4          ADD      r0,r4,r4,LSL #3
00001c  eb001004          ADD      r0,r0,r4,LSL #4
000020  49f8              LDR      r1,|L1.1028|
000022  f8110020          LDRB     r0,[r1,r0,LSL #2]
000026  28ff              CMP      r0,#0xff
000028  d0f5              BEQ      |L1.22|
00002a  48f7              LDR      r0,|L1.1032|
00002c  6840              LDR      r0,[r0,#4]  ; set_time
00002e  49f6              LDR      r1,|L1.1032|
000030  6889              LDR      r1,[r1,#8]  ; set_time
000032  ebc11101          RSB      r1,r1,r1,LSL #4
000036  eb000081          ADD      r0,r0,r1,LSL #2
00003a  eb0401c4          ADD      r1,r4,r4,LSL #3
00003e  eb011104          ADD      r1,r1,r4,LSL #4
000042  4af0              LDR      r2,|L1.1028|
000044  eb020181          ADD      r1,r2,r1,LSL #2
000048  7849              LDRB     r1,[r1,#1]
00004a  eb0402c4          ADD      r2,r4,r4,LSL #3
00004e  eb021204          ADD      r2,r2,r4,LSL #4
000052  4bec              LDR      r3,|L1.1028|
000054  f8132022          LDRB     r2,[r3,r2,LSL #2]
000058  ebc21202          RSB      r2,r2,r2,LSL #4
00005c  eb010182          ADD      r1,r1,r2,LSL #2
000060  4288              CMP      r0,r1
000062  db54              BLT      |L1.270|
;;;495                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time1[0]*60+Run_Diagram_buf[i].End_Time1[1])))
000064  48e8              LDR      r0,|L1.1032|
000066  6840              LDR      r0,[r0,#4]  ; set_time
000068  49e7              LDR      r1,|L1.1032|
00006a  6889              LDR      r1,[r1,#8]  ; set_time
00006c  ebc11101          RSB      r1,r1,r1,LSL #4
000070  eb000181          ADD      r1,r0,r1,LSL #2
000074  eb0400c4          ADD      r0,r4,r4,LSL #3
000078  eb001004          ADD      r0,r0,r4,LSL #4
00007c  461a              MOV      r2,r3
00007e  eb020080          ADD      r0,r2,r0,LSL #2
000082  78c0              LDRB     r0,[r0,#3]
000084  eb0402c4          ADD      r2,r4,r4,LSL #3
000088  eb021204          ADD      r2,r2,r4,LSL #4
00008c  eb030282          ADD      r2,r3,r2,LSL #2
000090  7892              LDRB     r2,[r2,#2]
000092  ebc21202          RSB      r2,r2,r2,LSL #4
000096  eb000082          ADD      r0,r0,r2,LSL #2
00009a  4281              CMP      r1,r0
00009c  da79              BGE      |L1.402|
;;;496                {
;;;497                    App_printf("\r\nthe %d1 start\r\n", i);
00009e  4621              MOV      r1,r4
0000a0  a0da              ADR      r0,|L1.1036|
0000a2  f7fffffe          BL       App_printf
;;;498                    Monitor.start[i][0]=1;
0000a6  2001              MOVS     r0,#1
0000a8  eb040184          ADD      r1,r4,r4,LSL #2
0000ac  4ad4              LDR      r2,|L1.1024|
0000ae  f8020011          STRB     r0,[r2,r1,LSL #1]
;;;499                    Monitor.end[i][0]=0;
0000b2  2100              MOVS     r1,#0
0000b4  eb040284          ADD      r2,r4,r4,LSL #2
0000b8  48d1              LDR      r0,|L1.1024|
0000ba  3064              ADDS     r0,r0,#0x64
0000bc  f8001012          STRB     r1,[r0,r2,LSL #1]
;;;500                    Monitor.usage_diagram_count++;
0000c0  3864              SUBS     r0,r0,#0x64
0000c2  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0000c6  1c40              ADDS     r0,r0,#1
0000c8  49cd              LDR      r1,|L1.1024|
0000ca  f88100c8          STRB     r0,[r1,#0xc8]
;;;501    
;;;502                    if(Monitor.usage_diagram_count==1)
0000ce  4608              MOV      r0,r1
0000d0  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0000d4  2801              CMP      r0,#1
0000d6  d11b              BNE      |L1.272|
;;;503                    {
;;;504                        Run_Diagram_data.mode='1';
0000d8  2031              MOVS     r0,#0x31
0000da  49d1              LDR      r1,|L1.1056|
0000dc  7008              STRB     r0,[r1,#0]
;;;505                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power1[0]);
0000de  eb0402c4          ADD      r2,r4,r4,LSL #3
0000e2  eb021204          ADD      r2,r2,r4,LSL #4
0000e6  4bc7              LDR      r3,|L1.1028|
0000e8  eb030282          ADD      r2,r3,r2,LSL #2
0000ec  7911              LDRB     r1,[r2,#4]
0000ee  4acc              LDR      r2,|L1.1056|
0000f0  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0000f2  f7fffffe          BL       set_run_diagram_new_power_level
;;;506                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq1,4);
0000f6  eb0400c4          ADD      r0,r4,r4,LSL #3
0000fa  eb001004          ADD      r0,r0,r4,LSL #4
0000fe  49c1              LDR      r1,|L1.1028|
000100  eb010180          ADD      r1,r1,r0,LSL #2
000104  48c6              LDR      r0,|L1.1056|
000106  f8d11005          LDR      r1,[r1,#5]
00010a  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
                  |L1.270|
00010e  e040              B        |L1.402|
                  |L1.272|
;;;507                    }
;;;508                    else if(Monitor.usage_diagram_count==2)
000110  48bb              LDR      r0,|L1.1024|
000112  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000116  2802              CMP      r0,#2
000118  d11b              BNE      |L1.338|
;;;509                    {
;;;510                        Run_Diagram_data.mode='2';
00011a  2032              MOVS     r0,#0x32
00011c  49c0              LDR      r1,|L1.1056|
00011e  7008              STRB     r0,[r1,#0]
;;;511                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power1[0]);
000120  eb0402c4          ADD      r2,r4,r4,LSL #3
000124  eb021204          ADD      r2,r2,r4,LSL #4
000128  4bb6              LDR      r3,|L1.1028|
00012a  eb030282          ADD      r2,r3,r2,LSL #2
00012e  7911              LDRB     r1,[r2,#4]
000130  4abb              LDR      r2,|L1.1056|
000132  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000134  f7fffffe          BL       set_run_diagram_new_power_level
;;;512                        memcpy(Run_Diagram_data.Freq+4,Run_Diagram_buf[i].Frq1,4);
000138  eb0400c4          ADD      r0,r4,r4,LSL #3
00013c  eb001004          ADD      r0,r0,r4,LSL #4
000140  49b0              LDR      r1,|L1.1028|
000142  eb010180          ADD      r1,r1,r0,LSL #2
000146  48b6              LDR      r0,|L1.1056|
000148  f8d11005          LDR      r1,[r1,#5]
00014c  f8c01005          STR      r1,[r0,#5]
000150  e01f              B        |L1.402|
                  |L1.338|
;;;513                    }
;;;514                    else if(Monitor.usage_diagram_count==3)
000152  48ab              LDR      r0,|L1.1024|
000154  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000158  2803              CMP      r0,#3
00015a  d11a              BNE      |L1.402|
;;;515                    {
;;;516                        Run_Diagram_data.mode='3';
00015c  2033              MOVS     r0,#0x33
00015e  49b0              LDR      r1,|L1.1056|
000160  7008              STRB     r0,[r1,#0]
;;;517                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power1[0]);
000162  eb0402c4          ADD      r2,r4,r4,LSL #3
000166  eb021204          ADD      r2,r2,r4,LSL #4
00016a  4ba6              LDR      r3,|L1.1028|
00016c  eb030282          ADD      r2,r3,r2,LSL #2
000170  7911              LDRB     r1,[r2,#4]
000172  4aab              LDR      r2,|L1.1056|
000174  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000176  f7fffffe          BL       set_run_diagram_new_power_level
;;;518                        memcpy(Run_Diagram_data.Freq+8,Run_Diagram_buf[i].Frq1,4);
00017a  eb0400c4          ADD      r0,r4,r4,LSL #3
00017e  eb001004          ADD      r0,r0,r4,LSL #4
000182  49a0              LDR      r1,|L1.1028|
000184  eb010180          ADD      r1,r1,r0,LSL #2
000188  48a5              LDR      r0,|L1.1056|
00018a  f8d11005          LDR      r1,[r1,#5]
00018e  f8c01009          STR      r1,[r0,#9]
                  |L1.402|
;;;519                    }
;;;520                }
;;;521            }
;;;522    
;;;523            if(Monitor.end[i][0]!=1)	//结束
000192  eb040184          ADD      r1,r4,r4,LSL #2
000196  489a              LDR      r0,|L1.1024|
000198  3064              ADDS     r0,r0,#0x64
00019a  f8100011          LDRB     r0,[r0,r1,LSL #1]
00019e  2801              CMP      r0,#1
0001a0  d07d              BEQ      |L1.670|
;;;524            {
;;;525                if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time1[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time1[1]) ) ||
0001a2  4899              LDR      r0,|L1.1032|
0001a4  6880              LDR      r0,[r0,#8]  ; set_time
0001a6  eb0401c4          ADD      r1,r4,r4,LSL #3
0001aa  eb011104          ADD      r1,r1,r4,LSL #4
0001ae  4a95              LDR      r2,|L1.1028|
0001b0  eb020181          ADD      r1,r2,r1,LSL #2
0001b4  7889              LDRB     r1,[r1,#2]
0001b6  4288              CMP      r0,r1
0001b8  d10a              BNE      |L1.464|
0001ba  4893              LDR      r0,|L1.1032|
0001bc  6841              LDR      r1,[r0,#4]  ; set_time
0001be  eb0400c4          ADD      r0,r4,r4,LSL #3
0001c2  eb001004          ADD      r0,r0,r4,LSL #4
0001c6  eb020080          ADD      r0,r2,r0,LSL #2
0001ca  78c0              LDRB     r0,[r0,#3]
0001cc  4281              CMP      r1,r0
0001ce  d011              BEQ      |L1.500|
                  |L1.464|
;;;526                        ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time1[0] == 24) ) )
0001d0  488d              LDR      r0,|L1.1032|
0001d2  6880              LDR      r0,[r0,#8]  ; set_time
0001d4  2800              CMP      r0,#0
                  |L1.470|
0001d6  d162              BNE      |L1.670|
0001d8  488b              LDR      r0,|L1.1032|
0001da  6840              LDR      r0,[r0,#4]  ; set_time
0001dc  2800              CMP      r0,#0
0001de  d1fa              BNE      |L1.470|
0001e0  eb0400c4          ADD      r0,r4,r4,LSL #3
0001e4  eb001004          ADD      r0,r0,r4,LSL #4
0001e8  4986              LDR      r1,|L1.1028|
0001ea  eb010080          ADD      r0,r1,r0,LSL #2
0001ee  7880              LDRB     r0,[r0,#2]
0001f0  2818              CMP      r0,#0x18
0001f2  d17d              BNE      |L1.752|
                  |L1.500|
;;;527                {
;;;528                    App_printf("\r\nthe %d1 end\r\n", i);
0001f4  4621              MOV      r1,r4
0001f6  a08b              ADR      r0,|L1.1060|
0001f8  f7fffffe          BL       App_printf
;;;529                    Monitor.usage_diagram_count--;
0001fc  4880              LDR      r0,|L1.1024|
0001fe  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000202  1e40              SUBS     r0,r0,#1
000204  497e              LDR      r1,|L1.1024|
000206  f88100c8          STRB     r0,[r1,#0xc8]
;;;530                    Monitor.end[i][0]=1;
00020a  2101              MOVS     r1,#1
00020c  eb040284          ADD      r2,r4,r4,LSL #2
000210  487b              LDR      r0,|L1.1024|
000212  3064              ADDS     r0,r0,#0x64
000214  f8001012          STRB     r1,[r0,r2,LSL #1]
;;;531                    Monitor.start[i][0]=0;//清除标志
000218  2000              MOVS     r0,#0
00021a  eb040184          ADD      r1,r4,r4,LSL #2
00021e  4a78              LDR      r2,|L1.1024|
000220  f8020011          STRB     r0,[r2,r1,LSL #1]
;;;532                    if(Run_Diagram_data.mode=='1')
000224  487e              LDR      r0,|L1.1056|
000226  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000228  2831              CMP      r0,#0x31
00022a  d107              BNE      |L1.572|
;;;533                    {
;;;534                        Run_Diagram_data.mode='0';
00022c  2030              MOVS     r0,#0x30
00022e  497c              LDR      r1,|L1.1056|
000230  7008              STRB     r0,[r1,#0]
;;;535                        //固频时，时间到，停止即可
;;;536                        memset(Run_Diagram_data.Freq,0,12);//清零
000232  1c48              ADDS     r0,r1,#1
000234  2100              MOVS     r1,#0
000236  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
000238  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
00023a  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.572|
;;;537                    }
;;;538                    if(Run_Diagram_data.mode=='2')
00023c  4878              LDR      r0,|L1.1056|
00023e  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000240  2832              CMP      r0,#0x32
000242  d119              BNE      |L1.632|
;;;539                    {
;;;540                        Run_Diagram_data.mode='1';
000244  2031              MOVS     r0,#0x31
000246  4976              LDR      r1,|L1.1056|
000248  7008              STRB     r0,[r1,#0]
;;;541                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq1,4)==0)   //Run_Diagram_data.Freq的前4位和运行图的频率相同，踢出第一个
00024a  eb0400c4          ADD      r0,r4,r4,LSL #3
00024e  eb001004          ADD      r0,r0,r4,LSL #4
000252  4a6c              LDR      r2,|L1.1028|
000254  eb020080          ADD      r0,r2,r0,LSL #2
000258  1d41              ADDS     r1,r0,#5
00025a  2204              MOVS     r2,#4
00025c  4870              LDR      r0,|L1.1056|
00025e  1c40              ADDS     r0,r0,#1
000260  f7fffffe          BL       memcmp
000264  b940              CBNZ     r0,|L1.632|
;;;542                        {
;;;543                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
000266  486e              LDR      r0,|L1.1056|
000268  7940              LDRB     r0,[r0,#5]
00026a  496d              LDR      r1,|L1.1056|
00026c  7048              STRB     r0,[r1,#1]
;;;544                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
00026e  4608              MOV      r0,r1
000270  7981              LDRB     r1,[r0,#6]
000272  7081              STRB     r1,[r0,#2]
;;;545                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000274  79c1              LDRB     r1,[r0,#7]
000276  70c1              STRB     r1,[r0,#3]
                  |L1.632|
;;;546                            //最后1byte都为0，所以不处理
;;;547                        }
;;;548                        //如果是踢出第二个，不需要做处理了
;;;549                    }
;;;550                    if(Run_Diagram_data.mode=='3')
000278  4869              LDR      r0,|L1.1056|
00027a  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
00027c  2833              CMP      r0,#0x33
00027e  d137              BNE      |L1.752|
;;;551                    {
;;;552                        Run_Diagram_data.mode='2';
000280  2032              MOVS     r0,#0x32
000282  4967              LDR      r1,|L1.1056|
000284  7008              STRB     r0,[r1,#0]
;;;553                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq1,4)==0)   //踢出第一个
000286  eb0400c4          ADD      r0,r4,r4,LSL #3
00028a  eb001004          ADD      r0,r0,r4,LSL #4
00028e  4a5d              LDR      r2,|L1.1028|
000290  eb020080          ADD      r0,r2,r0,LSL #2
000294  1d41              ADDS     r1,r0,#5
000296  2204              MOVS     r2,#4
000298  4861              LDR      r0,|L1.1056|
00029a  1c40              ADDS     r0,r0,#1
00029c  e000              B        |L1.672|
                  |L1.670|
00029e  e027              B        |L1.752|
                  |L1.672|
0002a0  f7fffffe          BL       memcmp
0002a4  b978              CBNZ     r0,|L1.710|
;;;554                        {
;;;555                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
0002a6  485e              LDR      r0,|L1.1056|
0002a8  7940              LDRB     r0,[r0,#5]
0002aa  495d              LDR      r1,|L1.1056|
0002ac  7048              STRB     r0,[r1,#1]
;;;556                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
0002ae  4608              MOV      r0,r1
0002b0  7981              LDRB     r1,[r0,#6]
0002b2  7081              STRB     r1,[r0,#2]
;;;557                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
0002b4  79c1              LDRB     r1,[r0,#7]
0002b6  70c1              STRB     r1,[r0,#3]
;;;558                            //最后1byte都为0，所以不处理
;;;559                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
0002b8  7a41              LDRB     r1,[r0,#9]
0002ba  7141              STRB     r1,[r0,#5]
;;;560                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
0002bc  7a81              LDRB     r1,[r0,#0xa]
0002be  7181              STRB     r1,[r0,#6]
;;;561                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
0002c0  7ac1              LDRB     r1,[r0,#0xb]
0002c2  71c1              STRB     r1,[r0,#7]
0002c4  e014              B        |L1.752|
                  |L1.710|
;;;562                        }
;;;563                        else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq1,4)==0)     //踢出第二个
0002c6  eb0400c4          ADD      r0,r4,r4,LSL #3
0002ca  eb001004          ADD      r0,r0,r4,LSL #4
0002ce  4a4d              LDR      r2,|L1.1028|
0002d0  eb020080          ADD      r0,r2,r0,LSL #2
0002d4  1d41              ADDS     r1,r0,#5
0002d6  2204              MOVS     r2,#4
0002d8  4851              LDR      r0,|L1.1056|
0002da  1d40              ADDS     r0,r0,#5
0002dc  f7fffffe          BL       memcmp
0002e0  b930              CBNZ     r0,|L1.752|
;;;564                        {
;;;565                            //最后1byte都为0，所以不处理
;;;566                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
0002e2  484f              LDR      r0,|L1.1056|
0002e4  7a41              LDRB     r1,[r0,#9]
0002e6  7141              STRB     r1,[r0,#5]
;;;567                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
0002e8  7a81              LDRB     r1,[r0,#0xa]
0002ea  7181              STRB     r1,[r0,#6]
;;;568                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
0002ec  7ac1              LDRB     r1,[r0,#0xb]
0002ee  71c1              STRB     r1,[r0,#7]
                  |L1.752|
;;;569                        }
;;;570                        //如果是踢出第三个，不需要做处理了
;;;571                    }
;;;572                }
;;;573            }
;;;574    
;;;575    
;;;576            if(Monitor.start[i][1]!=1)	//第二个
0002f0  eb040084          ADD      r0,r4,r4,LSL #2
0002f4  4942              LDR      r1,|L1.1024|
0002f6  eb010040          ADD      r0,r1,r0,LSL #1
0002fa  7840              LDRB     r0,[r0,#1]
0002fc  2801              CMP      r0,#1
                  |L1.766|
0002fe  d07d              BEQ      |L1.1020|
;;;577            {
;;;578                if(Run_Diagram_buf[i].Start_Time2[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time2[0]*60+Run_Diagram_buf[i].Start_Time2[1]))\
000300  eb0400c4          ADD      r0,r4,r4,LSL #3
000304  eb001004          ADD      r0,r0,r4,LSL #4
000308  493e              LDR      r1,|L1.1028|
00030a  eb010080          ADD      r0,r1,r0,LSL #2
00030e  7a80              LDRB     r0,[r0,#0xa]
000310  28ff              CMP      r0,#0xff
000312  d0f4              BEQ      |L1.766|
000314  483c              LDR      r0,|L1.1032|
000316  6840              LDR      r0,[r0,#4]  ; set_time
000318  493b              LDR      r1,|L1.1032|
00031a  6889              LDR      r1,[r1,#8]  ; set_time
00031c  ebc11101          RSB      r1,r1,r1,LSL #4
000320  eb000181          ADD      r1,r0,r1,LSL #2
000324  eb0400c4          ADD      r0,r4,r4,LSL #3
000328  eb001004          ADD      r0,r0,r4,LSL #4
00032c  4a35              LDR      r2,|L1.1028|
00032e  eb020080          ADD      r0,r2,r0,LSL #2
000332  7ac0              LDRB     r0,[r0,#0xb]
000334  eb0402c4          ADD      r2,r4,r4,LSL #3
000338  eb021204          ADD      r2,r2,r4,LSL #4
00033c  4b31              LDR      r3,|L1.1028|
00033e  eb030282          ADD      r2,r3,r2,LSL #2
000342  7a92              LDRB     r2,[r2,#0xa]
000344  ebc21202          RSB      r2,r2,r2,LSL #4
000348  eb000082          ADD      r0,r0,r2,LSL #2
00034c  4281              CMP      r1,r0
00034e  db55              BLT      |L1.1020|
;;;579                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time2[0]*60+Run_Diagram_buf[i].End_Time2[1])))
000350  482d              LDR      r0,|L1.1032|
000352  6840              LDR      r0,[r0,#4]  ; set_time
000354  492c              LDR      r1,|L1.1032|
000356  6889              LDR      r1,[r1,#8]  ; set_time
000358  ebc11101          RSB      r1,r1,r1,LSL #4
00035c  eb000181          ADD      r1,r0,r1,LSL #2
000360  eb0400c4          ADD      r0,r4,r4,LSL #3
000364  eb001004          ADD      r0,r0,r4,LSL #4
000368  461a              MOV      r2,r3
00036a  eb020080          ADD      r0,r2,r0,LSL #2
00036e  7b40              LDRB     r0,[r0,#0xd]
000370  eb0402c4          ADD      r2,r4,r4,LSL #3
000374  eb021204          ADD      r2,r2,r4,LSL #4
000378  eb030282          ADD      r2,r3,r2,LSL #2
00037c  7b12              LDRB     r2,[r2,#0xc]
00037e  ebc21202          RSB      r2,r2,r2,LSL #4
000382  eb000082          ADD      r0,r0,r2,LSL #2
000386  4281              CMP      r1,r0
000388  da38              BGE      |L1.1020|
;;;580                {
;;;581                    App_printf("\r\nthe %d2 start\r\n", i);
00038a  4621              MOV      r1,r4
00038c  a029              ADR      r0,|L1.1076|
00038e  f7fffffe          BL       App_printf
;;;582                    Monitor.start[i][1]=1;
000392  2001              MOVS     r0,#1
000394  eb040184          ADD      r1,r4,r4,LSL #2
000398  4a19              LDR      r2,|L1.1024|
00039a  eb020141          ADD      r1,r2,r1,LSL #1
00039e  7048              STRB     r0,[r1,#1]
;;;583                    Monitor.end[i][1]=0;
0003a0  2100              MOVS     r1,#0
0003a2  eb040284          ADD      r2,r4,r4,LSL #2
0003a6  4816              LDR      r0,|L1.1024|
0003a8  3064              ADDS     r0,r0,#0x64
0003aa  eb000042          ADD      r0,r0,r2,LSL #1
0003ae  7041              STRB     r1,[r0,#1]
;;;584                    Monitor.usage_diagram_count++;
0003b0  4813              LDR      r0,|L1.1024|
0003b2  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0003b6  1c40              ADDS     r0,r0,#1
0003b8  4911              LDR      r1,|L1.1024|
0003ba  f88100c8          STRB     r0,[r1,#0xc8]
;;;585                    if(Monitor.usage_diagram_count==1)
0003be  4608              MOV      r0,r1
0003c0  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0003c4  2801              CMP      r0,#1
0003c6  d142              BNE      |L1.1102|
;;;586                    {
;;;587                        Run_Diagram_data.mode='1';
0003c8  2031              MOVS     r0,#0x31
0003ca  4915              LDR      r1,|L1.1056|
0003cc  7008              STRB     r0,[r1,#0]
;;;588                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power2[0]);
0003ce  eb0402c4          ADD      r2,r4,r4,LSL #3
0003d2  eb021204          ADD      r2,r2,r4,LSL #4
0003d6  4b0b              LDR      r3,|L1.1028|
0003d8  eb030282          ADD      r2,r3,r2,LSL #2
0003dc  7b91              LDRB     r1,[r2,#0xe]
0003de  4a10              LDR      r2,|L1.1056|
0003e0  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0003e2  f7fffffe          BL       set_run_diagram_new_power_level
;;;589                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq2,4);
0003e6  eb0400c4          ADD      r0,r4,r4,LSL #3
0003ea  eb001004          ADD      r0,r0,r4,LSL #4
0003ee  4905              LDR      r1,|L1.1028|
0003f0  eb010180          ADD      r1,r1,r0,LSL #2
0003f4  480a              LDR      r0,|L1.1056|
0003f6  f8d1100f          LDR      r1,[r1,#0xf]
0003fa  e025              B        |L1.1096|
                  |L1.1020|
0003fc  e068              B        |L1.1232|
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      Monitor
                  |L1.1028|
                          DCD      Run_Diagram_buf
                  |L1.1032|
                          DCD      set_time
                  |L1.1036|
00040c  0d0a7468          DCB      "\r\nthe %d1 start\r\n",0
000410  65202564
000414  31207374
000418  6172740d
00041c  0a00    
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
                          DCD      Run_Diagram_data
                  |L1.1060|
000424  0d0a7468          DCB      "\r\nthe %d1 end\r\n",0
000428  65202564
00042c  3120656e
000430  640d0a00
                  |L1.1076|
000434  0d0a7468          DCB      "\r\nthe %d2 start\r\n",0
000438  65202564
00043c  32207374
000440  6172740d
000444  0a00    
000446  00                DCB      0
000447  00                DCB      0
                  |L1.1096|
000448  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
00044c  e040              B        |L1.1232|
                  |L1.1102|
;;;590                    }
;;;591                    else if(Monitor.usage_diagram_count==2)
00044e  48fe              LDR      r0,|L1.2120|
000450  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000454  2802              CMP      r0,#2
000456  d11b              BNE      |L1.1168|
;;;592                    {
;;;593                        Run_Diagram_data.mode='2';
000458  2032              MOVS     r0,#0x32
00045a  49fc              LDR      r1,|L1.2124|
00045c  7008              STRB     r0,[r1,#0]
;;;594                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power2[0]);
00045e  eb0402c4          ADD      r2,r4,r4,LSL #3
000462  eb021204          ADD      r2,r2,r4,LSL #4
000466  4bfa              LDR      r3,|L1.2128|
000468  eb030282          ADD      r2,r3,r2,LSL #2
00046c  7b91              LDRB     r1,[r2,#0xe]
00046e  4af7              LDR      r2,|L1.2124|
000470  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000472  f7fffffe          BL       set_run_diagram_new_power_level
;;;595                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq2,4);
000476  eb0400c4          ADD      r0,r4,r4,LSL #3
00047a  eb001004          ADD      r0,r0,r4,LSL #4
00047e  49f4              LDR      r1,|L1.2128|
000480  eb010180          ADD      r1,r1,r0,LSL #2
000484  48f1              LDR      r0,|L1.2124|
000486  f8d1100f          LDR      r1,[r1,#0xf]
00048a  f8c01005          STR      r1,[r0,#5]
00048e  e01f              B        |L1.1232|
                  |L1.1168|
;;;596                    }
;;;597                    else if(Monitor.usage_diagram_count==3)
000490  48ed              LDR      r0,|L1.2120|
000492  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000496  2803              CMP      r0,#3
000498  d11a              BNE      |L1.1232|
;;;598                    {
;;;599                        Run_Diagram_data.mode='3';
00049a  2033              MOVS     r0,#0x33
00049c  49eb              LDR      r1,|L1.2124|
00049e  7008              STRB     r0,[r1,#0]
;;;600                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power2[0]);
0004a0  eb0402c4          ADD      r2,r4,r4,LSL #3
0004a4  eb021204          ADD      r2,r2,r4,LSL #4
0004a8  4be9              LDR      r3,|L1.2128|
0004aa  eb030282          ADD      r2,r3,r2,LSL #2
0004ae  7b91              LDRB     r1,[r2,#0xe]
0004b0  4ae6              LDR      r2,|L1.2124|
0004b2  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0004b4  f7fffffe          BL       set_run_diagram_new_power_level
;;;601                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq2,4);
0004b8  eb0400c4          ADD      r0,r4,r4,LSL #3
0004bc  eb001004          ADD      r0,r0,r4,LSL #4
0004c0  49e3              LDR      r1,|L1.2128|
0004c2  eb010180          ADD      r1,r1,r0,LSL #2
0004c6  48e1              LDR      r0,|L1.2124|
0004c8  f8d1100f          LDR      r1,[r1,#0xf]
0004cc  f8c01009          STR      r1,[r0,#9]
                  |L1.1232|
;;;602                    }
;;;603                }
;;;604            }
;;;605    
;;;606            if(Monitor.end[i][1]!=1)	//结束
0004d0  eb040184          ADD      r1,r4,r4,LSL #2
0004d4  48dc              LDR      r0,|L1.2120|
0004d6  3064              ADDS     r0,r0,#0x64
0004d8  eb000041          ADD      r0,r0,r1,LSL #1
0004dc  7840              LDRB     r0,[r0,#1]
0004de  2801              CMP      r0,#1
0004e0  d07e              BEQ      |L1.1504|
;;;607            {
;;;608                if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time2[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time2[1]) ) ||
0004e2  48dc              LDR      r0,|L1.2132|
0004e4  6880              LDR      r0,[r0,#8]  ; set_time
0004e6  eb0401c4          ADD      r1,r4,r4,LSL #3
0004ea  eb011104          ADD      r1,r1,r4,LSL #4
0004ee  4ad8              LDR      r2,|L1.2128|
0004f0  eb020181          ADD      r1,r2,r1,LSL #2
0004f4  7b09              LDRB     r1,[r1,#0xc]
0004f6  4288              CMP      r0,r1
0004f8  d10a              BNE      |L1.1296|
0004fa  48d6              LDR      r0,|L1.2132|
0004fc  6841              LDR      r1,[r0,#4]  ; set_time
0004fe  eb0400c4          ADD      r0,r4,r4,LSL #3
000502  eb001004          ADD      r0,r0,r4,LSL #4
000506  eb020080          ADD      r0,r2,r0,LSL #2
00050a  7b40              LDRB     r0,[r0,#0xd]
00050c  4281              CMP      r1,r0
00050e  d011              BEQ      |L1.1332|
                  |L1.1296|
;;;609                        ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time2[0] == 24) ) )
000510  48d0              LDR      r0,|L1.2132|
000512  6880              LDR      r0,[r0,#8]  ; set_time
000514  2800              CMP      r0,#0
                  |L1.1302|
000516  d163              BNE      |L1.1504|
000518  48ce              LDR      r0,|L1.2132|
00051a  6840              LDR      r0,[r0,#4]  ; set_time
00051c  2800              CMP      r0,#0
00051e  d1fa              BNE      |L1.1302|
000520  eb0400c4          ADD      r0,r4,r4,LSL #3
000524  eb001004          ADD      r0,r0,r4,LSL #4
000528  49c9              LDR      r1,|L1.2128|
00052a  eb010080          ADD      r0,r1,r0,LSL #2
00052e  7b00              LDRB     r0,[r0,#0xc]
000530  2818              CMP      r0,#0x18
000532  d1f0              BNE      |L1.1302|
                  |L1.1332|
;;;610                {
;;;611                    App_printf("\r\nthe %d2 end\r\n", i);
000534  4621              MOV      r1,r4
000536  a0c8              ADR      r0,|L1.2136|
000538  f7fffffe          BL       App_printf
;;;612                    Monitor.usage_diagram_count--;
00053c  48c2              LDR      r0,|L1.2120|
00053e  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000542  1e40              SUBS     r0,r0,#1
000544  49c0              LDR      r1,|L1.2120|
000546  f88100c8          STRB     r0,[r1,#0xc8]
;;;613                    Monitor.end[i][1]=1;
00054a  2101              MOVS     r1,#1
00054c  eb040284          ADD      r2,r4,r4,LSL #2
000550  48bd              LDR      r0,|L1.2120|
000552  3064              ADDS     r0,r0,#0x64
000554  eb000042          ADD      r0,r0,r2,LSL #1
000558  7041              STRB     r1,[r0,#1]
;;;614                    Monitor.start[i][1]=0;
00055a  2000              MOVS     r0,#0
00055c  eb040184          ADD      r1,r4,r4,LSL #2
000560  4ab9              LDR      r2,|L1.2120|
000562  eb020141          ADD      r1,r2,r1,LSL #1
000566  7048              STRB     r0,[r1,#1]
;;;615                    if(Run_Diagram_data.mode=='1')
000568  48b8              LDR      r0,|L1.2124|
00056a  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
00056c  2831              CMP      r0,#0x31
00056e  d107              BNE      |L1.1408|
;;;616                    {
;;;617                        Run_Diagram_data.mode='0';
000570  2030              MOVS     r0,#0x30
000572  49b6              LDR      r1,|L1.2124|
000574  7008              STRB     r0,[r1,#0]
;;;618                        //固频时，时间到，停止即可
;;;619                        memset(Run_Diagram_data.Freq,0,12);//清零
000576  1c48              ADDS     r0,r1,#1
000578  2100              MOVS     r1,#0
00057a  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
00057c  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
00057e  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.1408|
;;;620                    }
;;;621                    if(Run_Diagram_data.mode=='2')
000580  48b2              LDR      r0,|L1.2124|
000582  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000584  2832              CMP      r0,#0x32
000586  d11a              BNE      |L1.1470|
;;;622                    {
;;;623                        Run_Diagram_data.mode='1';
000588  2031              MOVS     r0,#0x31
00058a  49b0              LDR      r1,|L1.2124|
00058c  7008              STRB     r0,[r1,#0]
;;;624                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq2,4)==0)   //踢出第一个
00058e  eb0400c4          ADD      r0,r4,r4,LSL #3
000592  eb001004          ADD      r0,r0,r4,LSL #4
000596  4aae              LDR      r2,|L1.2128|
000598  eb020080          ADD      r0,r2,r0,LSL #2
00059c  f100010f          ADD      r1,r0,#0xf
0005a0  2204              MOVS     r2,#4
0005a2  48aa              LDR      r0,|L1.2124|
0005a4  1c40              ADDS     r0,r0,#1
0005a6  f7fffffe          BL       memcmp
0005aa  b940              CBNZ     r0,|L1.1470|
;;;625                        {
;;;626                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
0005ac  48a7              LDR      r0,|L1.2124|
0005ae  7940              LDRB     r0,[r0,#5]
0005b0  49a6              LDR      r1,|L1.2124|
0005b2  7048              STRB     r0,[r1,#1]
;;;627                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
0005b4  4608              MOV      r0,r1
0005b6  7981              LDRB     r1,[r0,#6]
0005b8  7081              STRB     r1,[r0,#2]
;;;628                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
0005ba  79c1              LDRB     r1,[r0,#7]
0005bc  70c1              STRB     r1,[r0,#3]
                  |L1.1470|
;;;629                            //最后1byte都为0，所以不处理
;;;630                        }
;;;631                        //如果是踢出第二个，不需要做处理了
;;;632                    }
;;;633                    if(Run_Diagram_data.mode=='3')
0005be  48a3              LDR      r0,|L1.2124|
0005c0  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0005c2  2833              CMP      r0,#0x33
0005c4  d139              BNE      |L1.1594|
;;;634                    {
;;;635                        Run_Diagram_data.mode='2';
0005c6  2032              MOVS     r0,#0x32
0005c8  49a0              LDR      r1,|L1.2124|
0005ca  7008              STRB     r0,[r1,#0]
;;;636                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq2,4)==0)   //踢出第一个
0005cc  eb0400c4          ADD      r0,r4,r4,LSL #3
0005d0  eb001004          ADD      r0,r0,r4,LSL #4
0005d4  4a9e              LDR      r2,|L1.2128|
0005d6  eb020080          ADD      r0,r2,r0,LSL #2
0005da  f100010f          ADD      r1,r0,#0xf
0005de  e000              B        |L1.1506|
                  |L1.1504|
0005e0  e02b              B        |L1.1594|
                  |L1.1506|
0005e2  2204              MOVS     r2,#4
0005e4  4899              LDR      r0,|L1.2124|
0005e6  1c40              ADDS     r0,r0,#1
0005e8  f7fffffe          BL       memcmp
0005ec  b978              CBNZ     r0,|L1.1550|
;;;637                        {
;;;638                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
0005ee  4897              LDR      r0,|L1.2124|
0005f0  7940              LDRB     r0,[r0,#5]
0005f2  4996              LDR      r1,|L1.2124|
0005f4  7048              STRB     r0,[r1,#1]
;;;639                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
0005f6  4608              MOV      r0,r1
0005f8  7981              LDRB     r1,[r0,#6]
0005fa  7081              STRB     r1,[r0,#2]
;;;640                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
0005fc  79c1              LDRB     r1,[r0,#7]
0005fe  70c1              STRB     r1,[r0,#3]
;;;641                            //最后1byte都为0，所以不处理
;;;642                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000600  7a41              LDRB     r1,[r0,#9]
000602  7141              STRB     r1,[r0,#5]
;;;643                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000604  7a81              LDRB     r1,[r0,#0xa]
000606  7181              STRB     r1,[r0,#6]
;;;644                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
000608  7ac1              LDRB     r1,[r0,#0xb]
00060a  71c1              STRB     r1,[r0,#7]
00060c  e015              B        |L1.1594|
                  |L1.1550|
;;;645                        }
;;;646                        else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq2,4)==0)     //踢出第二个
00060e  eb0400c4          ADD      r0,r4,r4,LSL #3
000612  eb001004          ADD      r0,r0,r4,LSL #4
000616  4a8e              LDR      r2,|L1.2128|
000618  eb020080          ADD      r0,r2,r0,LSL #2
00061c  f100010f          ADD      r1,r0,#0xf
000620  2204              MOVS     r2,#4
000622  488a              LDR      r0,|L1.2124|
000624  1d40              ADDS     r0,r0,#5
000626  f7fffffe          BL       memcmp
00062a  b930              CBNZ     r0,|L1.1594|
;;;647                        {
;;;648                            //最后1byte都为0，所以不处理
;;;649                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
00062c  4887              LDR      r0,|L1.2124|
00062e  7a41              LDRB     r1,[r0,#9]
000630  7141              STRB     r1,[r0,#5]
;;;650                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000632  7a81              LDRB     r1,[r0,#0xa]
000634  7181              STRB     r1,[r0,#6]
;;;651                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
000636  7ac1              LDRB     r1,[r0,#0xb]
000638  71c1              STRB     r1,[r0,#7]
                  |L1.1594|
;;;652                        }
;;;653                        //如果是踢出第三个，不需要做处理了
;;;654                    }
;;;655                }
;;;656            }
;;;657    
;;;658            if(Monitor.start[i][2]!=1)	//第三个
00063a  eb040084          ADD      r0,r4,r4,LSL #2
00063e  4982              LDR      r1,|L1.2120|
000640  eb010040          ADD      r0,r1,r0,LSL #1
000644  7880              LDRB     r0,[r0,#2]
000646  2801              CMP      r0,#1
000648  d07d              BEQ      |L1.1862|
;;;659            {
;;;660                if(Run_Diagram_buf[i].Start_Time3[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time3[0]*60+Run_Diagram_buf[i].Start_Time3[1]))\
00064a  eb0400c4          ADD      r0,r4,r4,LSL #3
00064e  eb001004          ADD      r0,r0,r4,LSL #4
000652  497f              LDR      r1,|L1.2128|
000654  eb010080          ADD      r0,r1,r0,LSL #2
000658  7d00              LDRB     r0,[r0,#0x14]
00065a  28ff              CMP      r0,#0xff
00065c  d073              BEQ      |L1.1862|
00065e  487d              LDR      r0,|L1.2132|
000660  6840              LDR      r0,[r0,#4]  ; set_time
000662  497c              LDR      r1,|L1.2132|
000664  6889              LDR      r1,[r1,#8]  ; set_time
000666  ebc11101          RSB      r1,r1,r1,LSL #4
00066a  eb000181          ADD      r1,r0,r1,LSL #2
00066e  eb0400c4          ADD      r0,r4,r4,LSL #3
000672  eb001004          ADD      r0,r0,r4,LSL #4
000676  4a76              LDR      r2,|L1.2128|
000678  eb020080          ADD      r0,r2,r0,LSL #2
00067c  7d40              LDRB     r0,[r0,#0x15]
00067e  eb0402c4          ADD      r2,r4,r4,LSL #3
000682  eb021204          ADD      r2,r2,r4,LSL #4
000686  4b72              LDR      r3,|L1.2128|
000688  eb030282          ADD      r2,r3,r2,LSL #2
00068c  7d12              LDRB     r2,[r2,#0x14]
00068e  ebc21202          RSB      r2,r2,r2,LSL #4
000692  eb000082          ADD      r0,r0,r2,LSL #2
000696  4281              CMP      r1,r0
000698  db55              BLT      |L1.1862|
;;;661                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time3[0]*60+Run_Diagram_buf[i].End_Time3[1])))
00069a  486e              LDR      r0,|L1.2132|
00069c  6840              LDR      r0,[r0,#4]  ; set_time
00069e  496d              LDR      r1,|L1.2132|
0006a0  6889              LDR      r1,[r1,#8]  ; set_time
0006a2  ebc11101          RSB      r1,r1,r1,LSL #4
0006a6  eb000181          ADD      r1,r0,r1,LSL #2
0006aa  eb0400c4          ADD      r0,r4,r4,LSL #3
0006ae  eb001004          ADD      r0,r0,r4,LSL #4
0006b2  461a              MOV      r2,r3
0006b4  eb020080          ADD      r0,r2,r0,LSL #2
0006b8  7dc0              LDRB     r0,[r0,#0x17]
0006ba  eb0402c4          ADD      r2,r4,r4,LSL #3
0006be  eb021204          ADD      r2,r2,r4,LSL #4
0006c2  eb030282          ADD      r2,r3,r2,LSL #2
0006c6  7d92              LDRB     r2,[r2,#0x16]
0006c8  ebc21202          RSB      r2,r2,r2,LSL #4
0006cc  eb000082          ADD      r0,r0,r2,LSL #2
0006d0  4281              CMP      r1,r0
0006d2  da7d              BGE      |L1.2000|
;;;662                {
;;;663                    App_printf("\r\nthe %d3 start\r\n", i);
0006d4  4621              MOV      r1,r4
0006d6  a064              ADR      r0,|L1.2152|
0006d8  f7fffffe          BL       App_printf
;;;664                    Monitor.start[i][2]=1;
0006dc  2001              MOVS     r0,#1
0006de  eb040184          ADD      r1,r4,r4,LSL #2
0006e2  4a59              LDR      r2,|L1.2120|
0006e4  eb020141          ADD      r1,r2,r1,LSL #1
0006e8  7088              STRB     r0,[r1,#2]
;;;665                    Monitor.end[i][2]=0;
0006ea  2100              MOVS     r1,#0
0006ec  eb040284          ADD      r2,r4,r4,LSL #2
0006f0  4855              LDR      r0,|L1.2120|
0006f2  3064              ADDS     r0,r0,#0x64
0006f4  eb000042          ADD      r0,r0,r2,LSL #1
0006f8  7081              STRB     r1,[r0,#2]
;;;666                    Monitor.usage_diagram_count++;
0006fa  4853              LDR      r0,|L1.2120|
0006fc  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000700  1c40              ADDS     r0,r0,#1
000702  4951              LDR      r1,|L1.2120|
000704  f88100c8          STRB     r0,[r1,#0xc8]
;;;667                    if(Monitor.usage_diagram_count==1)
000708  4608              MOV      r0,r1
00070a  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
00070e  2801              CMP      r0,#1
000710  d11d              BNE      |L1.1870|
;;;668                    {
;;;669                        Run_Diagram_data.mode='1';
000712  2031              MOVS     r0,#0x31
000714  494d              LDR      r1,|L1.2124|
000716  7008              STRB     r0,[r1,#0]
;;;670                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power3[0]);
000718  eb0402c4          ADD      r2,r4,r4,LSL #3
00071c  eb021204          ADD      r2,r2,r4,LSL #4
000720  4b4b              LDR      r3,|L1.2128|
000722  eb030282          ADD      r2,r3,r2,LSL #2
000726  7e11              LDRB     r1,[r2,#0x18]
000728  4a48              LDR      r2,|L1.2124|
00072a  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
00072c  f7fffffe          BL       set_run_diagram_new_power_level
;;;671                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq3,4);
000730  eb0400c4          ADD      r0,r4,r4,LSL #3
000734  eb001004          ADD      r0,r0,r4,LSL #4
000738  4945              LDR      r1,|L1.2128|
00073a  eb010180          ADD      r1,r1,r0,LSL #2
00073e  4843              LDR      r0,|L1.2124|
000740  f8d11019          LDR      r1,[r1,#0x19]
000744  e000              B        |L1.1864|
                  |L1.1862|
000746  e043              B        |L1.2000|
                  |L1.1864|
000748  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
00074c  e040              B        |L1.2000|
                  |L1.1870|
;;;672                    }
;;;673                    else if(Monitor.usage_diagram_count==2)
00074e  483e              LDR      r0,|L1.2120|
000750  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000754  2802              CMP      r0,#2
000756  d11b              BNE      |L1.1936|
;;;674                    {
;;;675                        Run_Diagram_data.mode='2';
000758  2032              MOVS     r0,#0x32
00075a  493c              LDR      r1,|L1.2124|
00075c  7008              STRB     r0,[r1,#0]
;;;676                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power3[0]);
00075e  eb0402c4          ADD      r2,r4,r4,LSL #3
000762  eb021204          ADD      r2,r2,r4,LSL #4
000766  4b3a              LDR      r3,|L1.2128|
000768  eb030282          ADD      r2,r3,r2,LSL #2
00076c  7e11              LDRB     r1,[r2,#0x18]
00076e  4a37              LDR      r2,|L1.2124|
000770  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000772  f7fffffe          BL       set_run_diagram_new_power_level
;;;677                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq3,4);
000776  eb0400c4          ADD      r0,r4,r4,LSL #3
00077a  eb001004          ADD      r0,r0,r4,LSL #4
00077e  4934              LDR      r1,|L1.2128|
000780  eb010180          ADD      r1,r1,r0,LSL #2
000784  4831              LDR      r0,|L1.2124|
000786  f8d11019          LDR      r1,[r1,#0x19]
00078a  f8c01005          STR      r1,[r0,#5]
00078e  e01f              B        |L1.2000|
                  |L1.1936|
;;;678                    }
;;;679                    else if(Monitor.usage_diagram_count==3)
000790  482d              LDR      r0,|L1.2120|
000792  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000796  2803              CMP      r0,#3
000798  d11a              BNE      |L1.2000|
;;;680                    {
;;;681                        Run_Diagram_data.mode='3';
00079a  2033              MOVS     r0,#0x33
00079c  492b              LDR      r1,|L1.2124|
00079e  7008              STRB     r0,[r1,#0]
;;;682                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power3[0]);
0007a0  eb0402c4          ADD      r2,r4,r4,LSL #3
0007a4  eb021204          ADD      r2,r2,r4,LSL #4
0007a8  4b29              LDR      r3,|L1.2128|
0007aa  eb030282          ADD      r2,r3,r2,LSL #2
0007ae  7e11              LDRB     r1,[r2,#0x18]
0007b0  4a26              LDR      r2,|L1.2124|
0007b2  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0007b4  f7fffffe          BL       set_run_diagram_new_power_level
;;;683                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq3,4);
0007b8  eb0400c4          ADD      r0,r4,r4,LSL #3
0007bc  eb001004          ADD      r0,r0,r4,LSL #4
0007c0  4923              LDR      r1,|L1.2128|
0007c2  eb010180          ADD      r1,r1,r0,LSL #2
0007c6  4821              LDR      r0,|L1.2124|
0007c8  f8d11019          LDR      r1,[r1,#0x19]
0007cc  f8c01009          STR      r1,[r0,#9]
                  |L1.2000|
;;;684                    }
;;;685                }
;;;686            }
;;;687            if(Monitor.end[i][2]!=1)	//结束
0007d0  eb040184          ADD      r1,r4,r4,LSL #2
0007d4  481c              LDR      r0,|L1.2120|
0007d6  3064              ADDS     r0,r0,#0x64
0007d8  eb000041          ADD      r0,r0,r1,LSL #1
0007dc  7880              LDRB     r0,[r0,#2]
0007de  2801              CMP      r0,#1
0007e0  d07e              BEQ      |L1.2272|
;;;688            {
;;;689                if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time3[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time3[1]) ) ||
0007e2  481c              LDR      r0,|L1.2132|
0007e4  6880              LDR      r0,[r0,#8]  ; set_time
0007e6  eb0401c4          ADD      r1,r4,r4,LSL #3
0007ea  eb011104          ADD      r1,r1,r4,LSL #4
0007ee  4a18              LDR      r2,|L1.2128|
0007f0  eb020181          ADD      r1,r2,r1,LSL #2
0007f4  7d89              LDRB     r1,[r1,#0x16]
0007f6  4288              CMP      r0,r1
0007f8  d10a              BNE      |L1.2064|
0007fa  4816              LDR      r0,|L1.2132|
0007fc  6841              LDR      r1,[r0,#4]  ; set_time
0007fe  eb0400c4          ADD      r0,r4,r4,LSL #3
000802  eb001004          ADD      r0,r0,r4,LSL #4
000806  eb020080          ADD      r0,r2,r0,LSL #2
00080a  7dc0              LDRB     r0,[r0,#0x17]
00080c  4281              CMP      r1,r0
00080e  d011              BEQ      |L1.2100|
                  |L1.2064|
;;;690                        ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time3[0] == 24) ) )
000810  4810              LDR      r0,|L1.2132|
000812  6880              LDR      r0,[r0,#8]  ; set_time
000814  2800              CMP      r0,#0
000816  d163              BNE      |L1.2272|
000818  480e              LDR      r0,|L1.2132|
00081a  6840              LDR      r0,[r0,#4]  ; set_time
00081c  2800              CMP      r0,#0
00081e  d15f              BNE      |L1.2272|
000820  eb0400c4          ADD      r0,r4,r4,LSL #3
000824  eb001004          ADD      r0,r0,r4,LSL #4
000828  4909              LDR      r1,|L1.2128|
00082a  eb010080          ADD      r0,r1,r0,LSL #2
00082e  7d80              LDRB     r0,[r0,#0x16]
000830  2818              CMP      r0,#0x18
000832  d155              BNE      |L1.2272|
                  |L1.2100|
;;;691                {
;;;692                    App_printf("\r\nthe %d3 end\r\n", i);
000834  4621              MOV      r1,r4
000836  a011              ADR      r0,|L1.2172|
000838  f7fffffe          BL       App_printf
;;;693                    Monitor.usage_diagram_count--;
00083c  4802              LDR      r0,|L1.2120|
00083e  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000842  1e40              SUBS     r0,r0,#1
000844  4900              LDR      r1,|L1.2120|
000846  e021              B        |L1.2188|
                  |L1.2120|
                          DCD      Monitor
                  |L1.2124|
                          DCD      Run_Diagram_data
                  |L1.2128|
                          DCD      Run_Diagram_buf
                  |L1.2132|
                          DCD      set_time
                  |L1.2136|
000858  0d0a7468          DCB      "\r\nthe %d2 end\r\n",0
00085c  65202564
000860  3220656e
000864  640d0a00
                  |L1.2152|
000868  0d0a7468          DCB      "\r\nthe %d3 start\r\n",0
00086c  65202564
000870  33207374
000874  6172740d
000878  0a00    
00087a  00                DCB      0
00087b  00                DCB      0
                  |L1.2172|
00087c  0d0a7468          DCB      "\r\nthe %d3 end\r\n",0
000880  65202564
000884  3320656e
000888  640d0a00
                  |L1.2188|
00088c  f88100c8          STRB     r0,[r1,#0xc8]
;;;694                    Monitor.end[i][2]=1;
000890  2101              MOVS     r1,#1
000892  eb040284          ADD      r2,r4,r4,LSL #2
000896  48fe              LDR      r0,|L1.3216|
000898  eb000042          ADD      r0,r0,r2,LSL #1
00089c  7081              STRB     r1,[r0,#2]
;;;695                    Monitor.start[i][2]=0;
00089e  2000              MOVS     r0,#0
0008a0  eb040184          ADD      r1,r4,r4,LSL #2
0008a4  4afa              LDR      r2,|L1.3216|
0008a6  3a64              SUBS     r2,r2,#0x64
0008a8  eb020141          ADD      r1,r2,r1,LSL #1
0008ac  7088              STRB     r0,[r1,#2]
;;;696                    if(Run_Diagram_data.mode=='1')
0008ae  48f9              LDR      r0,|L1.3220|
0008b0  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0008b2  2831              CMP      r0,#0x31
0008b4  d107              BNE      |L1.2246|
;;;697                    {
;;;698                        Run_Diagram_data.mode='0';
0008b6  2030              MOVS     r0,#0x30
0008b8  49f6              LDR      r1,|L1.3220|
0008ba  7008              STRB     r0,[r1,#0]
;;;699                        //固频时，时间到，停止即可
;;;700                        memset(Run_Diagram_data.Freq,0,12);//清零
0008bc  1c48              ADDS     r0,r1,#1
0008be  2100              MOVS     r1,#0
0008c0  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
0008c2  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
0008c4  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.2246|
;;;701                    }
;;;702                    if(Run_Diagram_data.mode=='2')
0008c6  48f3              LDR      r0,|L1.3220|
0008c8  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0008ca  2832              CMP      r0,#0x32
0008cc  d11c              BNE      |L1.2312|
;;;703                    {
;;;704                        Run_Diagram_data.mode='1';
0008ce  2031              MOVS     r0,#0x31
0008d0  49f0              LDR      r1,|L1.3220|
0008d2  7008              STRB     r0,[r1,#0]
;;;705                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq3,4)==0)   //踢出第一个
0008d4  eb0400c4          ADD      r0,r4,r4,LSL #3
0008d8  eb001004          ADD      r0,r0,r4,LSL #4
0008dc  4aee              LDR      r2,|L1.3224|
0008de  e000              B        |L1.2274|
                  |L1.2272|
0008e0  e037              B        |L1.2386|
                  |L1.2274|
0008e2  eb020080          ADD      r0,r2,r0,LSL #2
0008e6  f1000119          ADD      r1,r0,#0x19
0008ea  2204              MOVS     r2,#4
0008ec  48e9              LDR      r0,|L1.3220|
0008ee  1c40              ADDS     r0,r0,#1
0008f0  f7fffffe          BL       memcmp
0008f4  b940              CBNZ     r0,|L1.2312|
;;;706                        {
;;;707                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
0008f6  48e7              LDR      r0,|L1.3220|
0008f8  7940              LDRB     r0,[r0,#5]
0008fa  49e6              LDR      r1,|L1.3220|
0008fc  7048              STRB     r0,[r1,#1]
;;;708                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
0008fe  4608              MOV      r0,r1
000900  7981              LDRB     r1,[r0,#6]
000902  7081              STRB     r1,[r0,#2]
;;;709                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000904  79c1              LDRB     r1,[r0,#7]
000906  70c1              STRB     r1,[r0,#3]
                  |L1.2312|
;;;710                            //最后1byte都为0，所以不处理
;;;711                        }
;;;712                        //如果是踢出第二个，不需要做处理了
;;;713                    }
;;;714                    if(Run_Diagram_data.mode=='3')
000908  48e2              LDR      r0,|L1.3220|
00090a  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
00090c  2833              CMP      r0,#0x33
00090e  d137              BNE      |L1.2432|
;;;715                    {
;;;716                        Run_Diagram_data.mode='2';
000910  2032              MOVS     r0,#0x32
000912  49e0              LDR      r1,|L1.3220|
000914  7008              STRB     r0,[r1,#0]
;;;717                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq3,4)==0)   //踢出第一个
000916  eb0400c4          ADD      r0,r4,r4,LSL #3
00091a  eb001004          ADD      r0,r0,r4,LSL #4
00091e  4ade              LDR      r2,|L1.3224|
000920  eb020080          ADD      r0,r2,r0,LSL #2
000924  f1000119          ADD      r1,r0,#0x19
000928  2204              MOVS     r2,#4
00092a  48da              LDR      r0,|L1.3220|
00092c  1c40              ADDS     r0,r0,#1
00092e  f7fffffe          BL       memcmp
000932  b978              CBNZ     r0,|L1.2388|
;;;718                        {
;;;719                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
000934  48d7              LDR      r0,|L1.3220|
000936  7940              LDRB     r0,[r0,#5]
000938  49d6              LDR      r1,|L1.3220|
00093a  7048              STRB     r0,[r1,#1]
;;;720                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
00093c  4608              MOV      r0,r1
00093e  7981              LDRB     r1,[r0,#6]
000940  7081              STRB     r1,[r0,#2]
;;;721                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000942  79c1              LDRB     r1,[r0,#7]
000944  70c1              STRB     r1,[r0,#3]
;;;722                            //最后1byte都为0，所以不处理
;;;723                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000946  7a41              LDRB     r1,[r0,#9]
000948  7141              STRB     r1,[r0,#5]
;;;724                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
00094a  7a81              LDRB     r1,[r0,#0xa]
00094c  7181              STRB     r1,[r0,#6]
;;;725                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
00094e  7ac1              LDRB     r1,[r0,#0xb]
000950  71c1              STRB     r1,[r0,#7]
                  |L1.2386|
000952  e015              B        |L1.2432|
                  |L1.2388|
;;;726                        }
;;;727                        else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq3,4)==0)     //踢出第二个
000954  eb0400c4          ADD      r0,r4,r4,LSL #3
000958  eb001004          ADD      r0,r0,r4,LSL #4
00095c  4ace              LDR      r2,|L1.3224|
00095e  eb020080          ADD      r0,r2,r0,LSL #2
000962  f1000119          ADD      r1,r0,#0x19
000966  2204              MOVS     r2,#4
000968  48ca              LDR      r0,|L1.3220|
00096a  1d40              ADDS     r0,r0,#5
00096c  f7fffffe          BL       memcmp
000970  b930              CBNZ     r0,|L1.2432|
;;;728                        {
;;;729                            //最后1byte都为0，所以不处理
;;;730                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000972  48c8              LDR      r0,|L1.3220|
000974  7a41              LDRB     r1,[r0,#9]
000976  7141              STRB     r1,[r0,#5]
;;;731                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000978  7a81              LDRB     r1,[r0,#0xa]
00097a  7181              STRB     r1,[r0,#6]
;;;732                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
00097c  7ac1              LDRB     r1,[r0,#0xb]
00097e  71c1              STRB     r1,[r0,#7]
                  |L1.2432|
;;;733                        }
;;;734                        //如果是踢出第三个，不需要做处理了
;;;735                    }
;;;736                }
;;;737            }
;;;738    
;;;739    
;;;740            if(Monitor.start[i][3]!=1)	//第四个
000980  eb040084          ADD      r0,r4,r4,LSL #2
000984  49c2              LDR      r1,|L1.3216|
000986  3964              SUBS     r1,r1,#0x64
000988  eb010040          ADD      r0,r1,r0,LSL #1
00098c  78c0              LDRB     r0,[r0,#3]
00098e  2801              CMP      r0,#1
000990  d07d              BEQ      |L1.2702|
;;;741            {
;;;742                if(Run_Diagram_buf[i].Start_Time4[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time4[0]*60+Run_Diagram_buf[i].Start_Time4[1]))\
000992  eb0400c4          ADD      r0,r4,r4,LSL #3
000996  eb001004          ADD      r0,r0,r4,LSL #4
00099a  49bf              LDR      r1,|L1.3224|
00099c  eb010080          ADD      r0,r1,r0,LSL #2
0009a0  7f80              LDRB     r0,[r0,#0x1e]
0009a2  28ff              CMP      r0,#0xff
0009a4  d073              BEQ      |L1.2702|
0009a6  48bd              LDR      r0,|L1.3228|
0009a8  6840              LDR      r0,[r0,#4]  ; set_time
0009aa  49bc              LDR      r1,|L1.3228|
0009ac  6889              LDR      r1,[r1,#8]  ; set_time
0009ae  ebc11101          RSB      r1,r1,r1,LSL #4
0009b2  eb000181          ADD      r1,r0,r1,LSL #2
0009b6  eb0400c4          ADD      r0,r4,r4,LSL #3
0009ba  eb001004          ADD      r0,r0,r4,LSL #4
0009be  4ab6              LDR      r2,|L1.3224|
0009c0  eb020080          ADD      r0,r2,r0,LSL #2
0009c4  7fc0              LDRB     r0,[r0,#0x1f]
0009c6  eb0402c4          ADD      r2,r4,r4,LSL #3
0009ca  eb021204          ADD      r2,r2,r4,LSL #4
0009ce  4bb2              LDR      r3,|L1.3224|
0009d0  eb030282          ADD      r2,r3,r2,LSL #2
0009d4  7f92              LDRB     r2,[r2,#0x1e]
0009d6  ebc21202          RSB      r2,r2,r2,LSL #4
0009da  eb000082          ADD      r0,r0,r2,LSL #2
0009de  4281              CMP      r1,r0
0009e0  db55              BLT      |L1.2702|
;;;743                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time4[0]*60+Run_Diagram_buf[i].End_Time4[1])))
0009e2  48ae              LDR      r0,|L1.3228|
0009e4  6840              LDR      r0,[r0,#4]  ; set_time
0009e6  49ad              LDR      r1,|L1.3228|
0009e8  6889              LDR      r1,[r1,#8]  ; set_time
0009ea  ebc11101          RSB      r1,r1,r1,LSL #4
0009ee  eb000181          ADD      r1,r0,r1,LSL #2
0009f2  eb0400c4          ADD      r0,r4,r4,LSL #3
0009f6  eb001004          ADD      r0,r0,r4,LSL #4
0009fa  461a              MOV      r2,r3
0009fc  eb020080          ADD      r0,r2,r0,LSL #2
000a00  f8900021          LDRB     r0,[r0,#0x21]
000a04  eb0402c4          ADD      r2,r4,r4,LSL #3
000a08  eb021204          ADD      r2,r2,r4,LSL #4
000a0c  eb030282          ADD      r2,r3,r2,LSL #2
000a10  f8922020          LDRB     r2,[r2,#0x20]
000a14  ebc21202          RSB      r2,r2,r2,LSL #4
000a18  eb000082          ADD      r0,r0,r2,LSL #2
000a1c  4281              CMP      r1,r0
000a1e  da36              BGE      |L1.2702|
;;;744                {
;;;745                    App_printf("\r\nthe %d4 start\r\n", i);
000a20  4621              MOV      r1,r4
000a22  a09f              ADR      r0,|L1.3232|
000a24  f7fffffe          BL       App_printf
;;;746                    Monitor.start[i][3]=1;
000a28  2001              MOVS     r0,#1
000a2a  eb040184          ADD      r1,r4,r4,LSL #2
000a2e  4a98              LDR      r2,|L1.3216|
000a30  3a64              SUBS     r2,r2,#0x64
000a32  eb020141          ADD      r1,r2,r1,LSL #1
000a36  70c8              STRB     r0,[r1,#3]
;;;747                    Monitor.end[i][3]=0;
000a38  2100              MOVS     r1,#0
000a3a  eb040284          ADD      r2,r4,r4,LSL #2
000a3e  4894              LDR      r0,|L1.3216|
000a40  eb000042          ADD      r0,r0,r2,LSL #1
000a44  70c1              STRB     r1,[r0,#3]
;;;748                    Monitor.usage_diagram_count++;
000a46  4892              LDR      r0,|L1.3216|
000a48  3864              SUBS     r0,r0,#0x64
000a4a  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000a4e  1c40              ADDS     r0,r0,#1
000a50  498f              LDR      r1,|L1.3216|
000a52  3964              SUBS     r1,r1,#0x64
000a54  f88100c8          STRB     r0,[r1,#0xc8]
;;;749                    if(Monitor.usage_diagram_count==1)
000a58  4608              MOV      r0,r1
000a5a  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000a5e  2801              CMP      r0,#1
000a60  d11e              BNE      |L1.2720|
;;;750                    {
;;;751                        Run_Diagram_data.mode='1';
000a62  2031              MOVS     r0,#0x31
000a64  498b              LDR      r1,|L1.3220|
000a66  7008              STRB     r0,[r1,#0]
;;;752                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power4[0]);
000a68  eb0402c4          ADD      r2,r4,r4,LSL #3
000a6c  eb021204          ADD      r2,r2,r4,LSL #4
000a70  4b89              LDR      r3,|L1.3224|
000a72  eb030282          ADD      r2,r3,r2,LSL #2
000a76  f8921022          LDRB     r1,[r2,#0x22]
000a7a  4a86              LDR      r2,|L1.3220|
000a7c  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000a7e  f7fffffe          BL       set_run_diagram_new_power_level
;;;753                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq4,4);
000a82  eb0400c4          ADD      r0,r4,r4,LSL #3
000a86  eb001004          ADD      r0,r0,r4,LSL #4
000a8a  4983              LDR      r1,|L1.3224|
000a8c  e000              B        |L1.2704|
                  |L1.2702|
000a8e  e04c              B        |L1.2858|
                  |L1.2704|
000a90  eb010180          ADD      r1,r1,r0,LSL #2
000a94  487f              LDR      r0,|L1.3220|
000a96  f8d11023          LDR      r1,[r1,#0x23]
000a9a  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
000a9e  e044              B        |L1.2858|
                  |L1.2720|
;;;754                    }
;;;755                    else if(Monitor.usage_diagram_count==2)
000aa0  487b              LDR      r0,|L1.3216|
000aa2  3864              SUBS     r0,r0,#0x64
000aa4  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000aa8  2802              CMP      r0,#2
000aaa  d11c              BNE      |L1.2790|
;;;756                    {
;;;757                        Run_Diagram_data.mode='2';
000aac  2032              MOVS     r0,#0x32
000aae  4979              LDR      r1,|L1.3220|
000ab0  7008              STRB     r0,[r1,#0]
;;;758                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power4[0]);
000ab2  eb0402c4          ADD      r2,r4,r4,LSL #3
000ab6  eb021204          ADD      r2,r2,r4,LSL #4
000aba  4b77              LDR      r3,|L1.3224|
000abc  eb030282          ADD      r2,r3,r2,LSL #2
000ac0  f8921022          LDRB     r1,[r2,#0x22]
000ac4  4a73              LDR      r2,|L1.3220|
000ac6  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000ac8  f7fffffe          BL       set_run_diagram_new_power_level
;;;759                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq4,4);
000acc  eb0400c4          ADD      r0,r4,r4,LSL #3
000ad0  eb001004          ADD      r0,r0,r4,LSL #4
000ad4  4970              LDR      r1,|L1.3224|
000ad6  eb010180          ADD      r1,r1,r0,LSL #2
000ada  486e              LDR      r0,|L1.3220|
000adc  f8d11023          LDR      r1,[r1,#0x23]
000ae0  f8c01005          STR      r1,[r0,#5]
000ae4  e021              B        |L1.2858|
                  |L1.2790|
;;;760                    }
;;;761                    else if(Monitor.usage_diagram_count==3)
000ae6  486a              LDR      r0,|L1.3216|
000ae8  3864              SUBS     r0,r0,#0x64
000aea  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000aee  2803              CMP      r0,#3
000af0  d11b              BNE      |L1.2858|
;;;762                    {
;;;763                        Run_Diagram_data.mode='3';
000af2  2033              MOVS     r0,#0x33
000af4  4967              LDR      r1,|L1.3220|
000af6  7008              STRB     r0,[r1,#0]
;;;764                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power4[0]);
000af8  eb0402c4          ADD      r2,r4,r4,LSL #3
000afc  eb021204          ADD      r2,r2,r4,LSL #4
000b00  4b65              LDR      r3,|L1.3224|
000b02  eb030282          ADD      r2,r3,r2,LSL #2
000b06  f8921022          LDRB     r1,[r2,#0x22]
000b0a  4a62              LDR      r2,|L1.3220|
000b0c  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000b0e  f7fffffe          BL       set_run_diagram_new_power_level
;;;765                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq4,4);
000b12  eb0400c4          ADD      r0,r4,r4,LSL #3
000b16  eb001004          ADD      r0,r0,r4,LSL #4
000b1a  495f              LDR      r1,|L1.3224|
000b1c  eb010180          ADD      r1,r1,r0,LSL #2
000b20  485c              LDR      r0,|L1.3220|
000b22  f8d11023          LDR      r1,[r1,#0x23]
000b26  f8c01009          STR      r1,[r0,#9]
                  |L1.2858|
;;;766                    }
;;;767                }
;;;768            }
;;;769    
;;;770            if(Monitor.end[i][3]!=1)	//结束
000b2a  eb040184          ADD      r1,r4,r4,LSL #2
000b2e  4858              LDR      r0,|L1.3216|
000b30  eb000041          ADD      r0,r0,r1,LSL #1
000b34  78c0              LDRB     r0,[r0,#3]
000b36  2801              CMP      r0,#1
000b38  d07e              BEQ      |L1.3128|
;;;771            {
;;;772                if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time4[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time4[1]) ) ||
000b3a  4858              LDR      r0,|L1.3228|
000b3c  6880              LDR      r0,[r0,#8]  ; set_time
000b3e  eb0401c4          ADD      r1,r4,r4,LSL #3
000b42  eb011104          ADD      r1,r1,r4,LSL #4
000b46  4a54              LDR      r2,|L1.3224|
000b48  eb020181          ADD      r1,r2,r1,LSL #2
000b4c  f8911020          LDRB     r1,[r1,#0x20]
000b50  4288              CMP      r0,r1
000b52  d10b              BNE      |L1.2924|
000b54  4851              LDR      r0,|L1.3228|
000b56  6841              LDR      r1,[r0,#4]  ; set_time
000b58  eb0400c4          ADD      r0,r4,r4,LSL #3
000b5c  eb001004          ADD      r0,r0,r4,LSL #4
000b60  eb020080          ADD      r0,r2,r0,LSL #2
000b64  f8900021          LDRB     r0,[r0,#0x21]
000b68  4281              CMP      r1,r0
000b6a  d012              BEQ      |L1.2962|
                  |L1.2924|
;;;773                        ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time4[0] == 24) ) )
000b6c  484b              LDR      r0,|L1.3228|
000b6e  6880              LDR      r0,[r0,#8]  ; set_time
000b70  2800              CMP      r0,#0
000b72  d161              BNE      |L1.3128|
000b74  4849              LDR      r0,|L1.3228|
000b76  6840              LDR      r0,[r0,#4]  ; set_time
000b78  2800              CMP      r0,#0
000b7a  d15d              BNE      |L1.3128|
000b7c  eb0400c4          ADD      r0,r4,r4,LSL #3
000b80  eb001004          ADD      r0,r0,r4,LSL #4
000b84  4944              LDR      r1,|L1.3224|
000b86  eb010080          ADD      r0,r1,r0,LSL #2
000b8a  f8900020          LDRB     r0,[r0,#0x20]
000b8e  2818              CMP      r0,#0x18
000b90  d152              BNE      |L1.3128|
                  |L1.2962|
;;;774                {
;;;775                    App_printf("\r\nthe %d4 end\r\n", i);
000b92  4621              MOV      r1,r4
000b94  a047              ADR      r0,|L1.3252|
000b96  f7fffffe          BL       App_printf
;;;776                    Monitor.usage_diagram_count--;
000b9a  483d              LDR      r0,|L1.3216|
000b9c  3864              SUBS     r0,r0,#0x64
000b9e  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000ba2  1e40              SUBS     r0,r0,#1
000ba4  493a              LDR      r1,|L1.3216|
000ba6  3964              SUBS     r1,r1,#0x64
000ba8  f88100c8          STRB     r0,[r1,#0xc8]
;;;777                    Monitor.end[i][3]=1;
000bac  2101              MOVS     r1,#1
000bae  eb040284          ADD      r2,r4,r4,LSL #2
000bb2  4837              LDR      r0,|L1.3216|
000bb4  eb000042          ADD      r0,r0,r2,LSL #1
000bb8  70c1              STRB     r1,[r0,#3]
;;;778                    Monitor.start[i][3]=0;
000bba  2000              MOVS     r0,#0
000bbc  eb040184          ADD      r1,r4,r4,LSL #2
000bc0  4a33              LDR      r2,|L1.3216|
000bc2  3a64              SUBS     r2,r2,#0x64
000bc4  eb020141          ADD      r1,r2,r1,LSL #1
000bc8  70c8              STRB     r0,[r1,#3]
;;;779                    if(Run_Diagram_data.mode=='1')
000bca  4832              LDR      r0,|L1.3220|
000bcc  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000bce  2831              CMP      r0,#0x31
000bd0  d107              BNE      |L1.3042|
;;;780                    {
;;;781                        Run_Diagram_data.mode='0';
000bd2  2030              MOVS     r0,#0x30
000bd4  492f              LDR      r1,|L1.3220|
000bd6  7008              STRB     r0,[r1,#0]
;;;782                        //固频时，时间到，停止即可
;;;783                        memset(Run_Diagram_data.Freq,0,12);//清零
000bd8  1c48              ADDS     r0,r1,#1
000bda  2100              MOVS     r1,#0
000bdc  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
000bde  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
000be0  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.3042|
;;;784                    }
;;;785                    if(Run_Diagram_data.mode=='2')
000be2  482c              LDR      r0,|L1.3220|
000be4  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000be6  2832              CMP      r0,#0x32
000be8  d11a              BNE      |L1.3104|
;;;786                    {
;;;787                        Run_Diagram_data.mode='1';
000bea  2031              MOVS     r0,#0x31
000bec  4929              LDR      r1,|L1.3220|
000bee  7008              STRB     r0,[r1,#0]
;;;788                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq4,4)==0)   //踢出第一个
000bf0  eb0400c4          ADD      r0,r4,r4,LSL #3
000bf4  eb001004          ADD      r0,r0,r4,LSL #4
000bf8  4a27              LDR      r2,|L1.3224|
000bfa  eb020080          ADD      r0,r2,r0,LSL #2
000bfe  f1000123          ADD      r1,r0,#0x23
000c02  2204              MOVS     r2,#4
000c04  4823              LDR      r0,|L1.3220|
000c06  1c40              ADDS     r0,r0,#1
000c08  f7fffffe          BL       memcmp
000c0c  b940              CBNZ     r0,|L1.3104|
;;;789                        {
;;;790                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
000c0e  4821              LDR      r0,|L1.3220|
000c10  7940              LDRB     r0,[r0,#5]
000c12  4920              LDR      r1,|L1.3220|
000c14  7048              STRB     r0,[r1,#1]
;;;791                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
000c16  4608              MOV      r0,r1
000c18  7981              LDRB     r1,[r0,#6]
000c1a  7081              STRB     r1,[r0,#2]
;;;792                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000c1c  79c1              LDRB     r1,[r0,#7]
000c1e  70c1              STRB     r1,[r0,#3]
                  |L1.3104|
;;;793                            //最后1byte都为0，所以不处理
;;;794                        }
;;;795                        //如果是踢出第二个，不需要做处理了
;;;796                    }
;;;797                    if(Run_Diagram_data.mode=='3')
000c20  481c              LDR      r0,|L1.3220|
000c22  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000c24  2833              CMP      r0,#0x33
000c26  d154              BNE      |L1.3282|
;;;798                    {
;;;799                        Run_Diagram_data.mode='2';
000c28  2032              MOVS     r0,#0x32
000c2a  491a              LDR      r1,|L1.3220|
000c2c  7008              STRB     r0,[r1,#0]
;;;800                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq4,4)==0)   //踢出第一个
000c2e  eb0400c4          ADD      r0,r4,r4,LSL #3
000c32  eb001004          ADD      r0,r0,r4,LSL #4
000c36  e000              B        |L1.3130|
                  |L1.3128|
000c38  e04b              B        |L1.3282|
                  |L1.3130|
000c3a  4a17              LDR      r2,|L1.3224|
000c3c  eb020080          ADD      r0,r2,r0,LSL #2
000c40  f1000123          ADD      r1,r0,#0x23
000c44  2204              MOVS     r2,#4
000c46  4813              LDR      r0,|L1.3220|
000c48  1c40              ADDS     r0,r0,#1
000c4a  f7fffffe          BL       memcmp
000c4e  b978              CBNZ     r0,|L1.3184|
;;;801                        {
;;;802                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
000c50  4810              LDR      r0,|L1.3220|
000c52  7940              LDRB     r0,[r0,#5]
000c54  490f              LDR      r1,|L1.3220|
000c56  7048              STRB     r0,[r1,#1]
;;;803                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
000c58  4608              MOV      r0,r1
000c5a  7981              LDRB     r1,[r0,#6]
000c5c  7081              STRB     r1,[r0,#2]
;;;804                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000c5e  79c1              LDRB     r1,[r0,#7]
000c60  70c1              STRB     r1,[r0,#3]
;;;805                            //最后1byte都为0，所以不处理
;;;806                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000c62  7a41              LDRB     r1,[r0,#9]
000c64  7141              STRB     r1,[r0,#5]
;;;807                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000c66  7a81              LDRB     r1,[r0,#0xa]
000c68  7181              STRB     r1,[r0,#6]
;;;808                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
000c6a  7ac1              LDRB     r1,[r0,#0xb]
000c6c  71c1              STRB     r1,[r0,#7]
000c6e  e030              B        |L1.3282|
                  |L1.3184|
;;;809                        }
;;;810                        else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq4,4)==0)     //踢出第二个
000c70  eb0400c4          ADD      r0,r4,r4,LSL #3
000c74  eb001004          ADD      r0,r0,r4,LSL #4
000c78  4a07              LDR      r2,|L1.3224|
000c7a  eb020080          ADD      r0,r2,r0,LSL #2
000c7e  f1000123          ADD      r1,r0,#0x23
000c82  2204              MOVS     r2,#4
000c84  4803              LDR      r0,|L1.3220|
000c86  1d40              ADDS     r0,r0,#5
000c88  f7fffffe          BL       memcmp
000c8c  bb08              CBNZ     r0,|L1.3282|
;;;811                        {
;;;812                            //最后1byte都为0，所以不处理
;;;813                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000c8e  e019              B        |L1.3268|
                  |L1.3216|
                          DCD      Monitor+0x64
                  |L1.3220|
                          DCD      Run_Diagram_data
                  |L1.3224|
                          DCD      Run_Diagram_buf
                  |L1.3228|
                          DCD      set_time
                  |L1.3232|
000ca0  0d0a7468          DCB      "\r\nthe %d4 start\r\n",0
000ca4  65202564
000ca8  34207374
000cac  6172740d
000cb0  0a00    
000cb2  00                DCB      0
000cb3  00                DCB      0
                  |L1.3252|
000cb4  0d0a7468          DCB      "\r\nthe %d4 end\r\n",0
000cb8  65202564
000cbc  3420656e
000cc0  640d0a00
                  |L1.3268|
000cc4  48fe              LDR      r0,|L1.4288|
000cc6  7a41              LDRB     r1,[r0,#9]
000cc8  7141              STRB     r1,[r0,#5]
;;;814                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000cca  7a81              LDRB     r1,[r0,#0xa]
000ccc  7181              STRB     r1,[r0,#6]
;;;815                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
000cce  7ac1              LDRB     r1,[r0,#0xb]
000cd0  71c1              STRB     r1,[r0,#7]
                  |L1.3282|
;;;816                        }
;;;817                        //如果是踢出第三个，不需要做处理了
;;;818                    }
;;;819                }
;;;820            }
;;;821    
;;;822            if(Monitor.start[i][4]!=1)	//第五个
000cd2  eb040084          ADD      r0,r4,r4,LSL #2
000cd6  49fb              LDR      r1,|L1.4292|
000cd8  eb010040          ADD      r0,r1,r0,LSL #1
000cdc  7900              LDRB     r0,[r0,#4]
000cde  2801              CMP      r0,#1
000ce0  d07e              BEQ      |L1.3552|
;;;823            {
;;;824                if(Run_Diagram_buf[i].Start_Time5[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time5[0]*60+Run_Diagram_buf[i].Start_Time5[1]))\
000ce2  eb0400c4          ADD      r0,r4,r4,LSL #3
000ce6  eb001004          ADD      r0,r0,r4,LSL #4
000cea  49f7              LDR      r1,|L1.4296|
000cec  eb010080          ADD      r0,r1,r0,LSL #2
000cf0  f8900028          LDRB     r0,[r0,#0x28]
000cf4  28ff              CMP      r0,#0xff
000cf6  d073              BEQ      |L1.3552|
000cf8  48f4              LDR      r0,|L1.4300|
000cfa  6840              LDR      r0,[r0,#4]  ; set_time
000cfc  49f3              LDR      r1,|L1.4300|
000cfe  6889              LDR      r1,[r1,#8]  ; set_time
000d00  ebc11101          RSB      r1,r1,r1,LSL #4
000d04  eb000181          ADD      r1,r0,r1,LSL #2
000d08  eb0400c4          ADD      r0,r4,r4,LSL #3
000d0c  eb001004          ADD      r0,r0,r4,LSL #4
000d10  4aed              LDR      r2,|L1.4296|
000d12  eb020080          ADD      r0,r2,r0,LSL #2
000d16  f8900029          LDRB     r0,[r0,#0x29]
000d1a  eb0402c4          ADD      r2,r4,r4,LSL #3
000d1e  eb021204          ADD      r2,r2,r4,LSL #4
000d22  4be9              LDR      r3,|L1.4296|
000d24  eb030282          ADD      r2,r3,r2,LSL #2
000d28  f8922028          LDRB     r2,[r2,#0x28]
000d2c  ebc21202          RSB      r2,r2,r2,LSL #4
000d30  eb000082          ADD      r0,r0,r2,LSL #2
000d34  4281              CMP      r1,r0
000d36  db53              BLT      |L1.3552|
;;;825                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time5[0]*60+Run_Diagram_buf[i].End_Time5[1])))
000d38  48e4              LDR      r0,|L1.4300|
000d3a  6840              LDR      r0,[r0,#4]  ; set_time
000d3c  49e3              LDR      r1,|L1.4300|
000d3e  6889              LDR      r1,[r1,#8]  ; set_time
000d40  ebc11101          RSB      r1,r1,r1,LSL #4
000d44  eb000181          ADD      r1,r0,r1,LSL #2
000d48  eb0400c4          ADD      r0,r4,r4,LSL #3
000d4c  eb001004          ADD      r0,r0,r4,LSL #4
000d50  461a              MOV      r2,r3
000d52  eb020080          ADD      r0,r2,r0,LSL #2
000d56  f890002b          LDRB     r0,[r0,#0x2b]
000d5a  eb0402c4          ADD      r2,r4,r4,LSL #3
000d5e  eb021204          ADD      r2,r2,r4,LSL #4
000d62  eb030282          ADD      r2,r3,r2,LSL #2
000d66  f892202a          LDRB     r2,[r2,#0x2a]
000d6a  ebc21202          RSB      r2,r2,r2,LSL #4
000d6e  eb000082          ADD      r0,r0,r2,LSL #2
000d72  4281              CMP      r1,r0
000d74  da34              BGE      |L1.3552|
;;;826                {
;;;827                    App_printf("\r\nthe %d5 start\r\n", i);
000d76  4621              MOV      r1,r4
000d78  a0d5              ADR      r0,|L1.4304|
000d7a  f7fffffe          BL       App_printf
;;;828                    Monitor.start[i][4]=1;
000d7e  2001              MOVS     r0,#1
000d80  eb040184          ADD      r1,r4,r4,LSL #2
000d84  4acf              LDR      r2,|L1.4292|
000d86  eb020141          ADD      r1,r2,r1,LSL #1
000d8a  7108              STRB     r0,[r1,#4]
;;;829                    Monitor.end[i][4]=0;
000d8c  2100              MOVS     r1,#0
000d8e  eb040284          ADD      r2,r4,r4,LSL #2
000d92  48cc              LDR      r0,|L1.4292|
000d94  3064              ADDS     r0,r0,#0x64
000d96  eb000042          ADD      r0,r0,r2,LSL #1
000d9a  7101              STRB     r1,[r0,#4]
;;;830                    Monitor.usage_diagram_count++;
000d9c  48c9              LDR      r0,|L1.4292|
000d9e  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000da2  1c40              ADDS     r0,r0,#1
000da4  49c7              LDR      r1,|L1.4292|
000da6  f88100c8          STRB     r0,[r1,#0xc8]
;;;831                    if(Monitor.usage_diagram_count==1)
000daa  4608              MOV      r0,r1
000dac  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000db0  2801              CMP      r0,#1
000db2  d11e              BNE      |L1.3570|
;;;832                    {
;;;833                        Run_Diagram_data.mode='1';
000db4  2031              MOVS     r0,#0x31
000db6  49c2              LDR      r1,|L1.4288|
000db8  7008              STRB     r0,[r1,#0]
;;;834                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power5[0]);
000dba  eb0402c4          ADD      r2,r4,r4,LSL #3
000dbe  eb021204          ADD      r2,r2,r4,LSL #4
000dc2  4bc1              LDR      r3,|L1.4296|
000dc4  eb030282          ADD      r2,r3,r2,LSL #2
000dc8  f892102c          LDRB     r1,[r2,#0x2c]
000dcc  4abc              LDR      r2,|L1.4288|
000dce  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000dd0  f7fffffe          BL       set_run_diagram_new_power_level
;;;835                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq5,4);
000dd4  eb0400c4          ADD      r0,r4,r4,LSL #3
000dd8  eb001004          ADD      r0,r0,r4,LSL #4
000ddc  49ba              LDR      r1,|L1.4296|
000dde  e000              B        |L1.3554|
                  |L1.3552|
000de0  e04a              B        |L1.3704|
                  |L1.3554|
000de2  eb010180          ADD      r1,r1,r0,LSL #2
000de6  48b6              LDR      r0,|L1.4288|
000de8  f8d1102d          LDR      r1,[r1,#0x2d]
000dec  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
000df0  e042              B        |L1.3704|
                  |L1.3570|
;;;836                    }
;;;837                    else if(Monitor.usage_diagram_count==2)
000df2  48b4              LDR      r0,|L1.4292|
000df4  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000df8  2802              CMP      r0,#2
000dfa  d11c              BNE      |L1.3638|
;;;838                    {
;;;839                        Run_Diagram_data.mode='2';
000dfc  2032              MOVS     r0,#0x32
000dfe  49b0              LDR      r1,|L1.4288|
000e00  7008              STRB     r0,[r1,#0]
;;;840                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power5[0]);
000e02  eb0402c4          ADD      r2,r4,r4,LSL #3
000e06  eb021204          ADD      r2,r2,r4,LSL #4
000e0a  4baf              LDR      r3,|L1.4296|
000e0c  eb030282          ADD      r2,r3,r2,LSL #2
000e10  f892102c          LDRB     r1,[r2,#0x2c]
000e14  4aaa              LDR      r2,|L1.4288|
000e16  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000e18  f7fffffe          BL       set_run_diagram_new_power_level
;;;841                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq5,4);
000e1c  eb0400c4          ADD      r0,r4,r4,LSL #3
000e20  eb001004          ADD      r0,r0,r4,LSL #4
000e24  49a8              LDR      r1,|L1.4296|
000e26  eb010180          ADD      r1,r1,r0,LSL #2
000e2a  48a5              LDR      r0,|L1.4288|
000e2c  f8d1102d          LDR      r1,[r1,#0x2d]
000e30  f8c01005          STR      r1,[r0,#5]
000e34  e020              B        |L1.3704|
                  |L1.3638|
;;;842                    }
;;;843                    else if(Monitor.usage_diagram_count==3)
000e36  48a3              LDR      r0,|L1.4292|
000e38  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000e3c  2803              CMP      r0,#3
000e3e  d11b              BNE      |L1.3704|
;;;844                    {
;;;845                        Run_Diagram_data.mode='3';
000e40  2033              MOVS     r0,#0x33
000e42  499f              LDR      r1,|L1.4288|
000e44  7008              STRB     r0,[r1,#0]
;;;846                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power5[0]);
000e46  eb0402c4          ADD      r2,r4,r4,LSL #3
000e4a  eb021204          ADD      r2,r2,r4,LSL #4
000e4e  4b9e              LDR      r3,|L1.4296|
000e50  eb030282          ADD      r2,r3,r2,LSL #2
000e54  f892102c          LDRB     r1,[r2,#0x2c]
000e58  4a99              LDR      r2,|L1.4288|
000e5a  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
000e5c  f7fffffe          BL       set_run_diagram_new_power_level
;;;847                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq5,4);
000e60  eb0400c4          ADD      r0,r4,r4,LSL #3
000e64  eb001004          ADD      r0,r0,r4,LSL #4
000e68  4997              LDR      r1,|L1.4296|
000e6a  eb010180          ADD      r1,r1,r0,LSL #2
000e6e  4894              LDR      r0,|L1.4288|
000e70  f8d1102d          LDR      r1,[r1,#0x2d]
000e74  f8c01009          STR      r1,[r0,#9]
                  |L1.3704|
;;;848                    }
;;;849                }
;;;850            }
;;;851    
;;;852            if(Monitor.end[i][4]!=1)	//结束
000e78  eb040184          ADD      r1,r4,r4,LSL #2
000e7c  4891              LDR      r0,|L1.4292|
000e7e  3064              ADDS     r0,r0,#0x64
000e80  eb000041          ADD      r0,r0,r1,LSL #1
000e84  7900              LDRB     r0,[r0,#4]
000e86  2801              CMP      r0,#1
000e88  d07d              BEQ      |L1.3974|
;;;853            {
;;;854                if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time5[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time5[1]) ) ||
000e8a  4890              LDR      r0,|L1.4300|
000e8c  6880              LDR      r0,[r0,#8]  ; set_time
000e8e  eb0401c4          ADD      r1,r4,r4,LSL #3
000e92  eb011104          ADD      r1,r1,r4,LSL #4
000e96  4a8c              LDR      r2,|L1.4296|
000e98  eb020181          ADD      r1,r2,r1,LSL #2
000e9c  f891102a          LDRB     r1,[r1,#0x2a]
000ea0  4288              CMP      r0,r1
000ea2  d10b              BNE      |L1.3772|
000ea4  4889              LDR      r0,|L1.4300|
000ea6  6841              LDR      r1,[r0,#4]  ; set_time
000ea8  eb0400c4          ADD      r0,r4,r4,LSL #3
000eac  eb001004          ADD      r0,r0,r4,LSL #4
000eb0  eb020080          ADD      r0,r2,r0,LSL #2
000eb4  f890002b          LDRB     r0,[r0,#0x2b]
000eb8  4281              CMP      r1,r0
000eba  d012              BEQ      |L1.3810|
                  |L1.3772|
;;;855                        ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time5[0] == 24) ) )
000ebc  4883              LDR      r0,|L1.4300|
000ebe  6880              LDR      r0,[r0,#8]  ; set_time
000ec0  2800              CMP      r0,#0
000ec2  d160              BNE      |L1.3974|
000ec4  4881              LDR      r0,|L1.4300|
000ec6  6840              LDR      r0,[r0,#4]  ; set_time
000ec8  2800              CMP      r0,#0
000eca  d15c              BNE      |L1.3974|
000ecc  eb0400c4          ADD      r0,r4,r4,LSL #3
000ed0  eb001004          ADD      r0,r0,r4,LSL #4
000ed4  497c              LDR      r1,|L1.4296|
000ed6  eb010080          ADD      r0,r1,r0,LSL #2
000eda  f890002a          LDRB     r0,[r0,#0x2a]
000ede  2818              CMP      r0,#0x18
000ee0  d151              BNE      |L1.3974|
                  |L1.3810|
;;;856                {
;;;857                    App_printf("\r\nthe %d5 end\r\n", i);
000ee2  4621              MOV      r1,r4
000ee4  a07f              ADR      r0,|L1.4324|
000ee6  f7fffffe          BL       App_printf
;;;858                    Monitor.usage_diagram_count--;
000eea  4876              LDR      r0,|L1.4292|
000eec  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
000ef0  1e40              SUBS     r0,r0,#1
000ef2  4974              LDR      r1,|L1.4292|
000ef4  f88100c8          STRB     r0,[r1,#0xc8]
;;;859                    Monitor.end[i][4]=1;
000ef8  2101              MOVS     r1,#1
000efa  eb040284          ADD      r2,r4,r4,LSL #2
000efe  4871              LDR      r0,|L1.4292|
000f00  3064              ADDS     r0,r0,#0x64
000f02  eb000042          ADD      r0,r0,r2,LSL #1
000f06  7101              STRB     r1,[r0,#4]
;;;860                    Monitor.start[i][4]=0;
000f08  2000              MOVS     r0,#0
000f0a  eb040184          ADD      r1,r4,r4,LSL #2
000f0e  4a6d              LDR      r2,|L1.4292|
000f10  eb020141          ADD      r1,r2,r1,LSL #1
000f14  7108              STRB     r0,[r1,#4]
;;;861                    if(Run_Diagram_data.mode=='1')
000f16  486a              LDR      r0,|L1.4288|
000f18  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000f1a  2831              CMP      r0,#0x31
000f1c  d107              BNE      |L1.3886|
;;;862                    {
;;;863                        Run_Diagram_data.mode='0';
000f1e  2030              MOVS     r0,#0x30
000f20  4967              LDR      r1,|L1.4288|
000f22  7008              STRB     r0,[r1,#0]
;;;864                        //固频时，时间到，停止即可
;;;865                        memset(Run_Diagram_data.Freq,0,12);//清零
000f24  1c48              ADDS     r0,r1,#1
000f26  2100              MOVS     r1,#0
000f28  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
000f2a  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
000f2c  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.3886|
;;;866                    }
;;;867                    if(Run_Diagram_data.mode=='2')
000f2e  4864              LDR      r0,|L1.4288|
000f30  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000f32  2832              CMP      r0,#0x32
000f34  d11a              BNE      |L1.3948|
;;;868                    {
;;;869                        Run_Diagram_data.mode='1';
000f36  2031              MOVS     r0,#0x31
000f38  4961              LDR      r1,|L1.4288|
000f3a  7008              STRB     r0,[r1,#0]
;;;870                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq5,4)==0)   //踢出第一个
000f3c  eb0400c4          ADD      r0,r4,r4,LSL #3
000f40  eb001004          ADD      r0,r0,r4,LSL #4
000f44  4a60              LDR      r2,|L1.4296|
000f46  eb020080          ADD      r0,r2,r0,LSL #2
000f4a  f100012d          ADD      r1,r0,#0x2d
000f4e  2204              MOVS     r2,#4
000f50  485b              LDR      r0,|L1.4288|
000f52  1c40              ADDS     r0,r0,#1
000f54  f7fffffe          BL       memcmp
000f58  b940              CBNZ     r0,|L1.3948|
;;;871                        {
;;;872                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
000f5a  4859              LDR      r0,|L1.4288|
000f5c  7940              LDRB     r0,[r0,#5]
000f5e  4958              LDR      r1,|L1.4288|
000f60  7048              STRB     r0,[r1,#1]
;;;873                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
000f62  4608              MOV      r0,r1
000f64  7981              LDRB     r1,[r0,#6]
000f66  7081              STRB     r1,[r0,#2]
;;;874                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000f68  79c1              LDRB     r1,[r0,#7]
000f6a  70c1              STRB     r1,[r0,#3]
                  |L1.3948|
;;;875                            //最后1byte都为0，所以不处理
;;;876                        }
;;;877                        //如果是踢出第二个，不需要做处理了
;;;878                    }
;;;879                    if(Run_Diagram_data.mode=='3')
000f6c  4854              LDR      r0,|L1.4288|
000f6e  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
000f70  2833              CMP      r0,#0x33
000f72  d139              BNE      |L1.4072|
;;;880                    {
;;;881                        Run_Diagram_data.mode='2';
000f74  2032              MOVS     r0,#0x32
000f76  4952              LDR      r1,|L1.4288|
000f78  7008              STRB     r0,[r1,#0]
;;;882                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq5,4)==0)   //踢出第一个
000f7a  eb0400c4          ADD      r0,r4,r4,LSL #3
000f7e  eb001004          ADD      r0,r0,r4,LSL #4
000f82  4a51              LDR      r2,|L1.4296|
000f84  e000              B        |L1.3976|
                  |L1.3974|
000f86  e02f              B        |L1.4072|
                  |L1.3976|
000f88  eb020080          ADD      r0,r2,r0,LSL #2
000f8c  f100012d          ADD      r1,r0,#0x2d
000f90  2204              MOVS     r2,#4
000f92  484b              LDR      r0,|L1.4288|
000f94  1c40              ADDS     r0,r0,#1
000f96  f7fffffe          BL       memcmp
000f9a  b978              CBNZ     r0,|L1.4028|
;;;883                        {
;;;884                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
000f9c  4848              LDR      r0,|L1.4288|
000f9e  7940              LDRB     r0,[r0,#5]
000fa0  4947              LDR      r1,|L1.4288|
000fa2  7048              STRB     r0,[r1,#1]
;;;885                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
000fa4  4608              MOV      r0,r1
000fa6  7981              LDRB     r1,[r0,#6]
000fa8  7081              STRB     r1,[r0,#2]
;;;886                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
000faa  79c1              LDRB     r1,[r0,#7]
000fac  70c1              STRB     r1,[r0,#3]
;;;887                            //最后1byte都为0，所以不处理
;;;888                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000fae  7a41              LDRB     r1,[r0,#9]
000fb0  7141              STRB     r1,[r0,#5]
;;;889                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000fb2  7a81              LDRB     r1,[r0,#0xa]
000fb4  7181              STRB     r1,[r0,#6]
;;;890                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
000fb6  7ac1              LDRB     r1,[r0,#0xb]
000fb8  71c1              STRB     r1,[r0,#7]
000fba  e015              B        |L1.4072|
                  |L1.4028|
;;;891                        }
;;;892                        else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq5,4)==0)     //踢出第二个
000fbc  eb0400c4          ADD      r0,r4,r4,LSL #3
000fc0  eb001004          ADD      r0,r0,r4,LSL #4
000fc4  4a40              LDR      r2,|L1.4296|
000fc6  eb020080          ADD      r0,r2,r0,LSL #2
000fca  f100012d          ADD      r1,r0,#0x2d
000fce  2204              MOVS     r2,#4
000fd0  483b              LDR      r0,|L1.4288|
000fd2  1d40              ADDS     r0,r0,#5
000fd4  f7fffffe          BL       memcmp
000fd8  b930              CBNZ     r0,|L1.4072|
;;;893                        {
;;;894                            //最后1byte都为0，所以不处理
;;;895                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
000fda  4839              LDR      r0,|L1.4288|
000fdc  7a41              LDRB     r1,[r0,#9]
000fde  7141              STRB     r1,[r0,#5]
;;;896                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
000fe0  7a81              LDRB     r1,[r0,#0xa]
000fe2  7181              STRB     r1,[r0,#6]
;;;897                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
000fe4  7ac1              LDRB     r1,[r0,#0xb]
000fe6  71c1              STRB     r1,[r0,#7]
                  |L1.4072|
;;;898                        }
;;;899                        //如果是踢出第三个，不需要做处理了
;;;900                    }
;;;901                }
;;;902            }
;;;903    
;;;904            if(Monitor.start[i][5]!=1)	//第六个
000fe8  eb040084          ADD      r0,r4,r4,LSL #2
000fec  4935              LDR      r1,|L1.4292|
000fee  eb010040          ADD      r0,r1,r0,LSL #1
000ff2  7940              LDRB     r0,[r0,#5]
000ff4  2801              CMP      r0,#1
000ff6  d061              BEQ      |L1.4284|
;;;905            {
;;;906                if(Run_Diagram_buf[i].Start_Time6[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time6[0]*60+Run_Diagram_buf[i].Start_Time6[1]))\
000ff8  eb0400c4          ADD      r0,r4,r4,LSL #3
000ffc  eb001004          ADD      r0,r0,r4,LSL #4
001000  4931              LDR      r1,|L1.4296|
001002  eb010080          ADD      r0,r1,r0,LSL #2
001006  f8900032          LDRB     r0,[r0,#0x32]
00100a  28ff              CMP      r0,#0xff
00100c  d056              BEQ      |L1.4284|
00100e  482f              LDR      r0,|L1.4300|
001010  6840              LDR      r0,[r0,#4]  ; set_time
001012  492e              LDR      r1,|L1.4300|
001014  6889              LDR      r1,[r1,#8]  ; set_time
001016  ebc11101          RSB      r1,r1,r1,LSL #4
00101a  eb000181          ADD      r1,r0,r1,LSL #2
00101e  eb0400c4          ADD      r0,r4,r4,LSL #3
001022  eb001004          ADD      r0,r0,r4,LSL #4
001026  4a28              LDR      r2,|L1.4296|
001028  eb020080          ADD      r0,r2,r0,LSL #2
00102c  f8900033          LDRB     r0,[r0,#0x33]
001030  eb0402c4          ADD      r2,r4,r4,LSL #3
001034  eb021204          ADD      r2,r2,r4,LSL #4
001038  4b23              LDR      r3,|L1.4296|
00103a  eb030282          ADD      r2,r3,r2,LSL #2
00103e  f8922032          LDRB     r2,[r2,#0x32]
001042  ebc21202          RSB      r2,r2,r2,LSL #4
001046  eb000082          ADD      r0,r0,r2,LSL #2
00104a  4281              CMP      r1,r0
00104c  db36              BLT      |L1.4284|
;;;907                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time6[0]*60+Run_Diagram_buf[i].End_Time6[1])))
00104e  481f              LDR      r0,|L1.4300|
001050  6840              LDR      r0,[r0,#4]  ; set_time
001052  491e              LDR      r1,|L1.4300|
001054  6889              LDR      r1,[r1,#8]  ; set_time
001056  ebc11101          RSB      r1,r1,r1,LSL #4
00105a  eb000181          ADD      r1,r0,r1,LSL #2
00105e  eb0400c4          ADD      r0,r4,r4,LSL #3
001062  eb001004          ADD      r0,r0,r4,LSL #4
001066  461a              MOV      r2,r3
001068  eb020080          ADD      r0,r2,r0,LSL #2
00106c  f8900035          LDRB     r0,[r0,#0x35]
001070  eb0402c4          ADD      r2,r4,r4,LSL #3
001074  eb021204          ADD      r2,r2,r4,LSL #4
001078  eb030282          ADD      r2,r3,r2,LSL #2
00107c  f8922034          LDRB     r2,[r2,#0x34]
001080  ebc21202          RSB      r2,r2,r2,LSL #4
001084  eb000082          ADD      r0,r0,r2,LSL #2
001088  4281              CMP      r1,r0
00108a  da17              BGE      |L1.4284|
;;;908                {
;;;909                    App_printf("\r\nthe %d6 start\r\n", i);
00108c  4621              MOV      r1,r4
00108e  a019              ADR      r0,|L1.4340|
001090  f7fffffe          BL       App_printf
;;;910                    Monitor.start[i][5]=1;
001094  2001              MOVS     r0,#1
001096  eb040184          ADD      r1,r4,r4,LSL #2
00109a  4a0a              LDR      r2,|L1.4292|
00109c  eb020141          ADD      r1,r2,r1,LSL #1
0010a0  7148              STRB     r0,[r1,#5]
;;;911                    Monitor.end[i][5]=0;
0010a2  2100              MOVS     r1,#0
0010a4  eb040284          ADD      r2,r4,r4,LSL #2
0010a8  4806              LDR      r0,|L1.4292|
0010aa  3064              ADDS     r0,r0,#0x64
0010ac  eb000042          ADD      r0,r0,r2,LSL #1
0010b0  7141              STRB     r1,[r0,#5]
;;;912                    Monitor.usage_diagram_count++;
0010b2  4804              LDR      r0,|L1.4292|
0010b4  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0010b8  1c40              ADDS     r0,r0,#1
0010ba  e025              B        |L1.4360|
                  |L1.4284|
0010bc  e08c              B        |L1.4568|
0010be  0000              DCW      0x0000
                  |L1.4288|
                          DCD      Run_Diagram_data
                  |L1.4292|
                          DCD      Monitor
                  |L1.4296|
                          DCD      Run_Diagram_buf
                  |L1.4300|
                          DCD      set_time
                  |L1.4304|
0010d0  0d0a7468          DCB      "\r\nthe %d5 start\r\n",0
0010d4  65202564
0010d8  35207374
0010dc  6172740d
0010e0  0a00    
0010e2  00                DCB      0
0010e3  00                DCB      0
                  |L1.4324|
0010e4  0d0a7468          DCB      "\r\nthe %d5 end\r\n",0
0010e8  65202564
0010ec  3520656e
0010f0  640d0a00
                  |L1.4340|
0010f4  0d0a7468          DCB      "\r\nthe %d6 start\r\n",0
0010f8  65202564
0010fc  36207374
001100  6172740d
001104  0a00    
001106  00                DCB      0
001107  00                DCB      0
                  |L1.4360|
001108  49fe              LDR      r1,|L1.5380|
00110a  f88100c8          STRB     r0,[r1,#0xc8]
;;;913                    if(Monitor.usage_diagram_count==1)
00110e  4608              MOV      r0,r1
001110  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001114  2801              CMP      r0,#1
001116  d11c              BNE      |L1.4434|
;;;914                    {
;;;915                        Run_Diagram_data.mode='1';
001118  2031              MOVS     r0,#0x31
00111a  49fb              LDR      r1,|L1.5384|
00111c  7008              STRB     r0,[r1,#0]
;;;916                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power6[0]);
00111e  eb0402c4          ADD      r2,r4,r4,LSL #3
001122  eb021204          ADD      r2,r2,r4,LSL #4
001126  4bf9              LDR      r3,|L1.5388|
001128  eb030282          ADD      r2,r3,r2,LSL #2
00112c  f8921036          LDRB     r1,[r2,#0x36]
001130  4af5              LDR      r2,|L1.5384|
001132  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001134  f7fffffe          BL       set_run_diagram_new_power_level
;;;917                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq6,4);
001138  eb0400c4          ADD      r0,r4,r4,LSL #3
00113c  eb001004          ADD      r0,r0,r4,LSL #4
001140  49f2              LDR      r1,|L1.5388|
001142  eb010180          ADD      r1,r1,r0,LSL #2
001146  48f0              LDR      r0,|L1.5384|
001148  f8d11037          LDR      r1,[r1,#0x37]
00114c  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
001150  e042              B        |L1.4568|
                  |L1.4434|
;;;918                    }
;;;919                    else if(Monitor.usage_diagram_count==2)
001152  48ec              LDR      r0,|L1.5380|
001154  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001158  2802              CMP      r0,#2
00115a  d11c              BNE      |L1.4502|
;;;920                    {
;;;921                        Run_Diagram_data.mode='2';
00115c  2032              MOVS     r0,#0x32
00115e  49ea              LDR      r1,|L1.5384|
001160  7008              STRB     r0,[r1,#0]
;;;922                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power6[0]);
001162  eb0402c4          ADD      r2,r4,r4,LSL #3
001166  eb021204          ADD      r2,r2,r4,LSL #4
00116a  4be8              LDR      r3,|L1.5388|
00116c  eb030282          ADD      r2,r3,r2,LSL #2
001170  f8921036          LDRB     r1,[r2,#0x36]
001174  4ae4              LDR      r2,|L1.5384|
001176  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001178  f7fffffe          BL       set_run_diagram_new_power_level
;;;923                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq6,4);
00117c  eb0400c4          ADD      r0,r4,r4,LSL #3
001180  eb001004          ADD      r0,r0,r4,LSL #4
001184  49e1              LDR      r1,|L1.5388|
001186  eb010180          ADD      r1,r1,r0,LSL #2
00118a  48df              LDR      r0,|L1.5384|
00118c  f8d11037          LDR      r1,[r1,#0x37]
001190  f8c01005          STR      r1,[r0,#5]
001194  e020              B        |L1.4568|
                  |L1.4502|
;;;924                    }
;;;925                    else if(Monitor.usage_diagram_count==3)
001196  48db              LDR      r0,|L1.5380|
001198  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
00119c  2803              CMP      r0,#3
00119e  d11b              BNE      |L1.4568|
;;;926                    {
;;;927                        Run_Diagram_data.mode='3';
0011a0  2033              MOVS     r0,#0x33
0011a2  49d9              LDR      r1,|L1.5384|
0011a4  7008              STRB     r0,[r1,#0]
;;;928                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power6[0]);
0011a6  eb0402c4          ADD      r2,r4,r4,LSL #3
0011aa  eb021204          ADD      r2,r2,r4,LSL #4
0011ae  4bd7              LDR      r3,|L1.5388|
0011b0  eb030282          ADD      r2,r3,r2,LSL #2
0011b4  f8921036          LDRB     r1,[r2,#0x36]
0011b8  4ad3              LDR      r2,|L1.5384|
0011ba  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0011bc  f7fffffe          BL       set_run_diagram_new_power_level
;;;929                        memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq6,4);
0011c0  eb0400c4          ADD      r0,r4,r4,LSL #3
0011c4  eb001004          ADD      r0,r0,r4,LSL #4
0011c8  49d0              LDR      r1,|L1.5388|
0011ca  eb010180          ADD      r1,r1,r0,LSL #2
0011ce  48ce              LDR      r0,|L1.5384|
0011d0  f8d11037          LDR      r1,[r1,#0x37]
0011d4  f8c01009          STR      r1,[r0,#9]
                  |L1.4568|
;;;930                    }
;;;931                }
;;;932            }
;;;933    
;;;934            if(Monitor.end[i][5]!=1)	//结束
0011d8  eb040184          ADD      r1,r4,r4,LSL #2
0011dc  48c9              LDR      r0,|L1.5380|
0011de  3064              ADDS     r0,r0,#0x64
0011e0  eb000041          ADD      r0,r0,r1,LSL #1
0011e4  7940              LDRB     r0,[r0,#5]
0011e6  2801              CMP      r0,#1
0011e8  d059              BEQ      |L1.4766|
;;;935            {
;;;936                if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time6[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time6[1]) ) ||
0011ea  48c9              LDR      r0,|L1.5392|
0011ec  6880              LDR      r0,[r0,#8]  ; set_time
0011ee  eb0401c4          ADD      r1,r4,r4,LSL #3
0011f2  eb011104          ADD      r1,r1,r4,LSL #4
0011f6  4ac5              LDR      r2,|L1.5388|
0011f8  eb020181          ADD      r1,r2,r1,LSL #2
0011fc  f8911034          LDRB     r1,[r1,#0x34]
001200  4288              CMP      r0,r1
001202  d10b              BNE      |L1.4636|
001204  48c2              LDR      r0,|L1.5392|
001206  6841              LDR      r1,[r0,#4]  ; set_time
001208  eb0400c4          ADD      r0,r4,r4,LSL #3
00120c  eb001004          ADD      r0,r0,r4,LSL #4
001210  eb020080          ADD      r0,r2,r0,LSL #2
001214  f8900035          LDRB     r0,[r0,#0x35]
001218  4281              CMP      r1,r0
00121a  d010              BEQ      |L1.4670|
                  |L1.4636|
;;;937                        ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time6[0] == 24) ) )
00121c  48bc              LDR      r0,|L1.5392|
00121e  6880              LDR      r0,[r0,#8]  ; set_time
001220  bbe8              CBNZ     r0,|L1.4766|
001222  48bb              LDR      r0,|L1.5392|
001224  6840              LDR      r0,[r0,#4]  ; set_time
001226  bbd0              CBNZ     r0,|L1.4766|
001228  eb0400c4          ADD      r0,r4,r4,LSL #3
00122c  eb001004          ADD      r0,r0,r4,LSL #4
001230  49b6              LDR      r1,|L1.5388|
001232  eb010080          ADD      r0,r1,r0,LSL #2
001236  f8900034          LDRB     r0,[r0,#0x34]
00123a  2818              CMP      r0,#0x18
00123c  d12f              BNE      |L1.4766|
                  |L1.4670|
;;;938                {
;;;939                    App_printf("\r\nthe %d6 end\r\n", i);
00123e  4621              MOV      r1,r4
001240  a0b4              ADR      r0,|L1.5396|
001242  f7fffffe          BL       App_printf
;;;940                    Monitor.usage_diagram_count--;
001246  48af              LDR      r0,|L1.5380|
001248  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
00124c  1e40              SUBS     r0,r0,#1
00124e  49ad              LDR      r1,|L1.5380|
001250  f88100c8          STRB     r0,[r1,#0xc8]
;;;941                    Monitor.end[i][5]=1;
001254  2101              MOVS     r1,#1
001256  eb040284          ADD      r2,r4,r4,LSL #2
00125a  48aa              LDR      r0,|L1.5380|
00125c  3064              ADDS     r0,r0,#0x64
00125e  eb000042          ADD      r0,r0,r2,LSL #1
001262  7141              STRB     r1,[r0,#5]
;;;942                    Monitor.start[i][5]=0;
001264  2000              MOVS     r0,#0
001266  eb040184          ADD      r1,r4,r4,LSL #2
00126a  4aa6              LDR      r2,|L1.5380|
00126c  eb020141          ADD      r1,r2,r1,LSL #1
001270  7148              STRB     r0,[r1,#5]
;;;943                    if(Run_Diagram_data.mode=='1')
001272  48a5              LDR      r0,|L1.5384|
001274  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001276  2831              CMP      r0,#0x31
001278  d107              BNE      |L1.4746|
;;;944                    {
;;;945                        Run_Diagram_data.mode='0';
00127a  2030              MOVS     r0,#0x30
00127c  49a2              LDR      r1,|L1.5384|
00127e  7008              STRB     r0,[r1,#0]
;;;946                        //固频时，时间到，停止即可
;;;947                        memset(Run_Diagram_data.Freq,0,12);//清零
001280  1c48              ADDS     r0,r1,#1
001282  2100              MOVS     r1,#0
001284  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
001286  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
001288  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.4746|
;;;948                    }
;;;949                    if(Run_Diagram_data.mode=='2')
00128a  489f              LDR      r0,|L1.5384|
00128c  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
00128e  2832              CMP      r0,#0x32
001290  d11c              BNE      |L1.4812|
;;;950                    {
;;;951                        Run_Diagram_data.mode='1';
001292  2031              MOVS     r0,#0x31
001294  499c              LDR      r1,|L1.5384|
001296  7008              STRB     r0,[r1,#0]
;;;952                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq6,4)==0)   //踢出第一个
001298  eb0400c4          ADD      r0,r4,r4,LSL #3
00129c  e000              B        |L1.4768|
                  |L1.4766|
00129e  e03a              B        |L1.4886|
                  |L1.4768|
0012a0  eb001004          ADD      r0,r0,r4,LSL #4
0012a4  4a99              LDR      r2,|L1.5388|
0012a6  eb020080          ADD      r0,r2,r0,LSL #2
0012aa  f1000137          ADD      r1,r0,#0x37
0012ae  2204              MOVS     r2,#4
0012b0  4895              LDR      r0,|L1.5384|
0012b2  1c40              ADDS     r0,r0,#1
0012b4  f7fffffe          BL       memcmp
0012b8  b940              CBNZ     r0,|L1.4812|
;;;953                        {
;;;954                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
0012ba  4893              LDR      r0,|L1.5384|
0012bc  7940              LDRB     r0,[r0,#5]
0012be  4992              LDR      r1,|L1.5384|
0012c0  7048              STRB     r0,[r1,#1]
;;;955                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
0012c2  4608              MOV      r0,r1
0012c4  7981              LDRB     r1,[r0,#6]
0012c6  7081              STRB     r1,[r0,#2]
;;;956                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
0012c8  79c1              LDRB     r1,[r0,#7]
0012ca  70c1              STRB     r1,[r0,#3]
                  |L1.4812|
;;;957                            //最后1byte都为0，所以不处理
;;;958                        }
;;;959                        //如果是踢出第二个，不需要做处理了
;;;960                    }
;;;961                    if(Run_Diagram_data.mode=='3')
0012cc  488e              LDR      r0,|L1.5384|
0012ce  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0012d0  2833              CMP      r0,#0x33
0012d2  d137              BNE      |L1.4932|
;;;962                    {
;;;963                        Run_Diagram_data.mode='2';
0012d4  2032              MOVS     r0,#0x32
0012d6  498c              LDR      r1,|L1.5384|
0012d8  7008              STRB     r0,[r1,#0]
;;;964                        if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq6,4)==0)   //踢出第一个
0012da  eb0400c4          ADD      r0,r4,r4,LSL #3
0012de  eb001004          ADD      r0,r0,r4,LSL #4
0012e2  4a8a              LDR      r2,|L1.5388|
0012e4  eb020080          ADD      r0,r2,r0,LSL #2
0012e8  f1000137          ADD      r1,r0,#0x37
0012ec  2204              MOVS     r2,#4
0012ee  4886              LDR      r0,|L1.5384|
0012f0  1c40              ADDS     r0,r0,#1
0012f2  f7fffffe          BL       memcmp
0012f6  b978              CBNZ     r0,|L1.4888|
;;;965                        {
;;;966                            Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
0012f8  4883              LDR      r0,|L1.5384|
0012fa  7940              LDRB     r0,[r0,#5]
0012fc  4982              LDR      r1,|L1.5384|
0012fe  7048              STRB     r0,[r1,#1]
;;;967                            Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
001300  4608              MOV      r0,r1
001302  7981              LDRB     r1,[r0,#6]
001304  7081              STRB     r1,[r0,#2]
;;;968                            Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001306  79c1              LDRB     r1,[r0,#7]
001308  70c1              STRB     r1,[r0,#3]
;;;969                            //最后1byte都为0，所以不处理
;;;970                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
00130a  7a41              LDRB     r1,[r0,#9]
00130c  7141              STRB     r1,[r0,#5]
;;;971                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
00130e  7a81              LDRB     r1,[r0,#0xa]
001310  7181              STRB     r1,[r0,#6]
;;;972                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
001312  7ac1              LDRB     r1,[r0,#0xb]
001314  71c1              STRB     r1,[r0,#7]
                  |L1.4886|
001316  e015              B        |L1.4932|
                  |L1.4888|
;;;973                        }
;;;974                        else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq6,4)==0)     //踢出第二个
001318  eb0400c4          ADD      r0,r4,r4,LSL #3
00131c  eb001004          ADD      r0,r0,r4,LSL #4
001320  4a7a              LDR      r2,|L1.5388|
001322  eb020080          ADD      r0,r2,r0,LSL #2
001326  f1000137          ADD      r1,r0,#0x37
00132a  2204              MOVS     r2,#4
00132c  4876              LDR      r0,|L1.5384|
00132e  1d40              ADDS     r0,r0,#5
001330  f7fffffe          BL       memcmp
001334  b930              CBNZ     r0,|L1.4932|
;;;975                        {
;;;976                            //最后1byte都为0，所以不处理
;;;977                            Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
001336  4874              LDR      r0,|L1.5384|
001338  7a41              LDRB     r1,[r0,#9]
00133a  7141              STRB     r1,[r0,#5]
;;;978                            Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
00133c  7a81              LDRB     r1,[r0,#0xa]
00133e  7181              STRB     r1,[r0,#6]
;;;979                            Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
001340  7ac1              LDRB     r1,[r0,#0xb]
001342  71c1              STRB     r1,[r0,#7]
                  |L1.4932|
;;;980                        }
;;;981                        //如果是踢出第三个，不需要做处理了
;;;982                    }
;;;983                }
;;;984            }
;;;985    
;;;986            if(Monitor.start[i][6]!=1)	//第七个
001344  eb040084          ADD      r0,r4,r4,LSL #2
001348  496e              LDR      r1,|L1.5380|
00134a  eb010040          ADD      r0,r1,r0,LSL #1
00134e  7980              LDRB     r0,[r0,#6]
001350  2801              CMP      r0,#1
001352  d07d              BEQ      |L1.5200|
;;;987            {
;;;988                if(Run_Diagram_buf[i].Start_Time7[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time7[0]*60+Run_Diagram_buf[i].Start_Time7[1]))\
001354  eb0400c4          ADD      r0,r4,r4,LSL #3
001358  eb001004          ADD      r0,r0,r4,LSL #4
00135c  496b              LDR      r1,|L1.5388|
00135e  eb010080          ADD      r0,r1,r0,LSL #2
001362  f890003c          LDRB     r0,[r0,#0x3c]
001366  28ff              CMP      r0,#0xff
001368  d072              BEQ      |L1.5200|
00136a  4869              LDR      r0,|L1.5392|
00136c  6840              LDR      r0,[r0,#4]  ; set_time
00136e  4968              LDR      r1,|L1.5392|
001370  6889              LDR      r1,[r1,#8]  ; set_time
001372  ebc11101          RSB      r1,r1,r1,LSL #4
001376  eb000181          ADD      r1,r0,r1,LSL #2
00137a  eb0400c4          ADD      r0,r4,r4,LSL #3
00137e  eb001004          ADD      r0,r0,r4,LSL #4
001382  4a62              LDR      r2,|L1.5388|
001384  eb020080          ADD      r0,r2,r0,LSL #2
001388  f890003d          LDRB     r0,[r0,#0x3d]
00138c  eb0402c4          ADD      r2,r4,r4,LSL #3
001390  eb021204          ADD      r2,r2,r4,LSL #4
001394  4b5d              LDR      r3,|L1.5388|
001396  eb030282          ADD      r2,r3,r2,LSL #2
00139a  f892203c          LDRB     r2,[r2,#0x3c]
00139e  ebc21202          RSB      r2,r2,r2,LSL #4
0013a2  eb000082          ADD      r0,r0,r2,LSL #2
0013a6  4281              CMP      r1,r0
0013a8  db52              BLT      |L1.5200|
;;;989                        &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time7[0]*60+Run_Diagram_buf[i].End_Time7[1])))
0013aa  4859              LDR      r0,|L1.5392|
0013ac  6840              LDR      r0,[r0,#4]  ; set_time
0013ae  4958              LDR      r1,|L1.5392|
0013b0  6889              LDR      r1,[r1,#8]  ; set_time
0013b2  ebc11101          RSB      r1,r1,r1,LSL #4
0013b6  eb000181          ADD      r1,r0,r1,LSL #2
0013ba  eb0400c4          ADD      r0,r4,r4,LSL #3
0013be  eb001004          ADD      r0,r0,r4,LSL #4
0013c2  461a              MOV      r2,r3
0013c4  eb020080          ADD      r0,r2,r0,LSL #2
0013c8  f890003f          LDRB     r0,[r0,#0x3f]
0013cc  eb0402c4          ADD      r2,r4,r4,LSL #3
0013d0  eb021204          ADD      r2,r2,r4,LSL #4
0013d4  eb030282          ADD      r2,r3,r2,LSL #2
0013d8  f892203e          LDRB     r2,[r2,#0x3e]
0013dc  ebc21202          RSB      r2,r2,r2,LSL #4
0013e0  eb000082          ADD      r0,r0,r2,LSL #2
0013e4  4281              CMP      r1,r0
0013e6  da33              BGE      |L1.5200|
;;;990                {
;;;991                    App_printf("\r\nthe %d7 start\r\n", i);
0013e8  4621              MOV      r1,r4
0013ea  a04e              ADR      r0,|L1.5412|
0013ec  f7fffffe          BL       App_printf
;;;992                    Monitor.start[i][6]=1;
0013f0  2001              MOVS     r0,#1
0013f2  eb040184          ADD      r1,r4,r4,LSL #2
0013f6  4a43              LDR      r2,|L1.5380|
0013f8  eb020141          ADD      r1,r2,r1,LSL #1
0013fc  7188              STRB     r0,[r1,#6]
;;;993                    Monitor.end[i][6]=0;
0013fe  2100              MOVS     r1,#0
001400  eb040284          ADD      r2,r4,r4,LSL #2
001404  483f              LDR      r0,|L1.5380|
001406  3064              ADDS     r0,r0,#0x64
001408  eb000042          ADD      r0,r0,r2,LSL #1
00140c  7181              STRB     r1,[r0,#6]
;;;994                    Monitor.usage_diagram_count++;
00140e  483d              LDR      r0,|L1.5380|
001410  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001414  1c40              ADDS     r0,r0,#1
001416  493b              LDR      r1,|L1.5380|
001418  f88100c8          STRB     r0,[r1,#0xc8]
;;;995                    if(Monitor.usage_diagram_count==1)
00141c  4608              MOV      r0,r1
00141e  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001422  2801              CMP      r0,#1
001424  d11e              BNE      |L1.5220|
;;;996                    {
;;;997                        Run_Diagram_data.mode='1';
001426  2031              MOVS     r0,#0x31
001428  4937              LDR      r1,|L1.5384|
00142a  7008              STRB     r0,[r1,#0]
;;;998                        set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power7[0]);
00142c  eb0402c4          ADD      r2,r4,r4,LSL #3
001430  eb021204          ADD      r2,r2,r4,LSL #4
001434  4b35              LDR      r3,|L1.5388|
001436  eb030282          ADD      r2,r3,r2,LSL #2
00143a  f8921040          LDRB     r1,[r2,#0x40]
00143e  4a32              LDR      r2,|L1.5384|
001440  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001442  f7fffffe          BL       set_run_diagram_new_power_level
;;;999                        memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq7,4);
001446  eb0400c4          ADD      r0,r4,r4,LSL #3
00144a  eb001004          ADD      r0,r0,r4,LSL #4
00144e  e000              B        |L1.5202|
                  |L1.5200|
001450  e04b              B        |L1.5354|
                  |L1.5202|
001452  492e              LDR      r1,|L1.5388|
001454  eb010180          ADD      r1,r1,r0,LSL #2
001458  482b              LDR      r0,|L1.5384|
00145a  f8d11041          LDR      r1,[r1,#0x41]
00145e  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
001462  e042              B        |L1.5354|
                  |L1.5220|
;;;1000                   }
;;;1001                   else if(Monitor.usage_diagram_count==2)
001464  4827              LDR      r0,|L1.5380|
001466  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
00146a  2802              CMP      r0,#2
00146c  d11c              BNE      |L1.5288|
;;;1002                   {
;;;1003                       Run_Diagram_data.mode='2';
00146e  2032              MOVS     r0,#0x32
001470  4925              LDR      r1,|L1.5384|
001472  7008              STRB     r0,[r1,#0]
;;;1004                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power7[0]);
001474  eb0402c4          ADD      r2,r4,r4,LSL #3
001478  eb021204          ADD      r2,r2,r4,LSL #4
00147c  4b23              LDR      r3,|L1.5388|
00147e  eb030282          ADD      r2,r3,r2,LSL #2
001482  f8921040          LDRB     r1,[r2,#0x40]
001486  4a20              LDR      r2,|L1.5384|
001488  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
00148a  f7fffffe          BL       set_run_diagram_new_power_level
;;;1005                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq7,4);
00148e  eb0400c4          ADD      r0,r4,r4,LSL #3
001492  eb001004          ADD      r0,r0,r4,LSL #4
001496  491d              LDR      r1,|L1.5388|
001498  eb010180          ADD      r1,r1,r0,LSL #2
00149c  481a              LDR      r0,|L1.5384|
00149e  f8d11041          LDR      r1,[r1,#0x41]
0014a2  f8c01005          STR      r1,[r0,#5]
0014a6  e020              B        |L1.5354|
                  |L1.5288|
;;;1006                   }
;;;1007                   else if(Monitor.usage_diagram_count==3)
0014a8  4816              LDR      r0,|L1.5380|
0014aa  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0014ae  2803              CMP      r0,#3
0014b0  d11b              BNE      |L1.5354|
;;;1008                   {
;;;1009                       Run_Diagram_data.mode='3';
0014b2  2033              MOVS     r0,#0x33
0014b4  4914              LDR      r1,|L1.5384|
0014b6  7008              STRB     r0,[r1,#0]
;;;1010                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power7[0]);
0014b8  eb0402c4          ADD      r2,r4,r4,LSL #3
0014bc  eb021204          ADD      r2,r2,r4,LSL #4
0014c0  4b12              LDR      r3,|L1.5388|
0014c2  eb030282          ADD      r2,r3,r2,LSL #2
0014c6  f8921040          LDRB     r1,[r2,#0x40]
0014ca  4a0f              LDR      r2,|L1.5384|
0014cc  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0014ce  f7fffffe          BL       set_run_diagram_new_power_level
;;;1011                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq7,4);
0014d2  eb0400c4          ADD      r0,r4,r4,LSL #3
0014d6  eb001004          ADD      r0,r0,r4,LSL #4
0014da  490c              LDR      r1,|L1.5388|
0014dc  eb010180          ADD      r1,r1,r0,LSL #2
0014e0  4809              LDR      r0,|L1.5384|
0014e2  f8d11041          LDR      r1,[r1,#0x41]
0014e6  f8c01009          STR      r1,[r0,#9]
                  |L1.5354|
;;;1012                   }
;;;1013               }
;;;1014           }
;;;1015           if(Monitor.end[i][6]!=1)	//结束
0014ea  eb040184          ADD      r1,r4,r4,LSL #2
0014ee  4805              LDR      r0,|L1.5380|
0014f0  3064              ADDS     r0,r0,#0x64
0014f2  eb000041          ADD      r0,r0,r1,LSL #1
0014f6  7980              LDRB     r0,[r0,#6]
0014f8  2801              CMP      r0,#1
0014fa  d075              BEQ      |L1.5608|
;;;1016           {
;;;1017               if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time7[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time7[1]) ) ||
0014fc  4804              LDR      r0,|L1.5392|
0014fe  6880              LDR      r0,[r0,#8]  ; set_time
001500  e01a              B        |L1.5432|
001502  0000              DCW      0x0000
                  |L1.5380|
                          DCD      Monitor
                  |L1.5384|
                          DCD      Run_Diagram_data
                  |L1.5388|
                          DCD      Run_Diagram_buf
                  |L1.5392|
                          DCD      set_time
                  |L1.5396|
001514  0d0a7468          DCB      "\r\nthe %d6 end\r\n",0
001518  65202564
00151c  3620656e
001520  640d0a00
                  |L1.5412|
001524  0d0a7468          DCB      "\r\nthe %d7 start\r\n",0
001528  65202564
00152c  37207374
001530  6172740d
001534  0a00    
001536  00                DCB      0
001537  00                DCB      0
                  |L1.5432|
001538  eb0401c4          ADD      r1,r4,r4,LSL #3
00153c  eb011104          ADD      r1,r1,r4,LSL #4
001540  4afe              LDR      r2,|L1.6460|
001542  eb020181          ADD      r1,r2,r1,LSL #2
001546  f891103e          LDRB     r1,[r1,#0x3e]
00154a  4288              CMP      r0,r1
00154c  d10b              BNE      |L1.5478|
00154e  48fc              LDR      r0,|L1.6464|
001550  6841              LDR      r1,[r0,#4]  ; set_time
001552  eb0400c4          ADD      r0,r4,r4,LSL #3
001556  eb001004          ADD      r0,r0,r4,LSL #4
00155a  eb020080          ADD      r0,r2,r0,LSL #2
00155e  f890003f          LDRB     r0,[r0,#0x3f]
001562  4281              CMP      r1,r0
001564  d010              BEQ      |L1.5512|
                  |L1.5478|
;;;1018                       ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time7[0] == 24) ) )
001566  48f6              LDR      r0,|L1.6464|
001568  6880              LDR      r0,[r0,#8]  ; set_time
00156a  bbe8              CBNZ     r0,|L1.5608|
00156c  48f4              LDR      r0,|L1.6464|
00156e  6840              LDR      r0,[r0,#4]  ; set_time
001570  bbd0              CBNZ     r0,|L1.5608|
001572  eb0400c4          ADD      r0,r4,r4,LSL #3
001576  eb001004          ADD      r0,r0,r4,LSL #4
00157a  49f0              LDR      r1,|L1.6460|
00157c  eb010080          ADD      r0,r1,r0,LSL #2
001580  f890003e          LDRB     r0,[r0,#0x3e]
001584  2818              CMP      r0,#0x18
001586  d12f              BNE      |L1.5608|
                  |L1.5512|
;;;1019               {
;;;1020                   App_printf("\r\nthe %d7 end\r\n", i);
001588  4621              MOV      r1,r4
00158a  a0ee              ADR      r0,|L1.6468|
00158c  f7fffffe          BL       App_printf
;;;1021                   Monitor.usage_diagram_count--;
001590  48f0              LDR      r0,|L1.6484|
001592  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001596  1e40              SUBS     r0,r0,#1
001598  49ee              LDR      r1,|L1.6484|
00159a  f88100c8          STRB     r0,[r1,#0xc8]
;;;1022                   Monitor.end[i][6]=1;
00159e  2101              MOVS     r1,#1
0015a0  eb040284          ADD      r2,r4,r4,LSL #2
0015a4  48eb              LDR      r0,|L1.6484|
0015a6  3064              ADDS     r0,r0,#0x64
0015a8  eb000042          ADD      r0,r0,r2,LSL #1
0015ac  7181              STRB     r1,[r0,#6]
;;;1023                   Monitor.start[i][6]=0;
0015ae  2000              MOVS     r0,#0
0015b0  eb040184          ADD      r1,r4,r4,LSL #2
0015b4  4ae7              LDR      r2,|L1.6484|
0015b6  eb020141          ADD      r1,r2,r1,LSL #1
0015ba  7188              STRB     r0,[r1,#6]
;;;1024                   if(Run_Diagram_data.mode=='1')
0015bc  48e6              LDR      r0,|L1.6488|
0015be  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0015c0  2831              CMP      r0,#0x31
0015c2  d107              BNE      |L1.5588|
;;;1025                   {
;;;1026                       Run_Diagram_data.mode='0';
0015c4  2030              MOVS     r0,#0x30
0015c6  49e4              LDR      r1,|L1.6488|
0015c8  7008              STRB     r0,[r1,#0]
;;;1027                       //固频时，时间到，停止即可
;;;1028                       memset(Run_Diagram_data.Freq,0,12);//清零
0015ca  1c48              ADDS     r0,r1,#1
0015cc  2100              MOVS     r1,#0
0015ce  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
0015d0  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
0015d2  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.5588|
;;;1029                   }
;;;1030                   if(Run_Diagram_data.mode=='2')
0015d4  48e0              LDR      r0,|L1.6488|
0015d6  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0015d8  2832              CMP      r0,#0x32
0015da  d11c              BNE      |L1.5654|
;;;1031                   {
;;;1032                       Run_Diagram_data.mode='1';
0015dc  2031              MOVS     r0,#0x31
0015de  49de              LDR      r1,|L1.6488|
0015e0  7008              STRB     r0,[r1,#0]
;;;1033                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq7,4)==0)   //踢出第一个
0015e2  eb0400c4          ADD      r0,r4,r4,LSL #3
0015e6  e000              B        |L1.5610|
                  |L1.5608|
0015e8  e03a              B        |L1.5728|
                  |L1.5610|
0015ea  eb001004          ADD      r0,r0,r4,LSL #4
0015ee  4ad3              LDR      r2,|L1.6460|
0015f0  eb020080          ADD      r0,r2,r0,LSL #2
0015f4  f1000141          ADD      r1,r0,#0x41
0015f8  2204              MOVS     r2,#4
0015fa  48d7              LDR      r0,|L1.6488|
0015fc  1c40              ADDS     r0,r0,#1
0015fe  f7fffffe          BL       memcmp
001602  b940              CBNZ     r0,|L1.5654|
;;;1034                       {
;;;1035                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001604  48d4              LDR      r0,|L1.6488|
001606  7940              LDRB     r0,[r0,#5]
001608  49d3              LDR      r1,|L1.6488|
00160a  7048              STRB     r0,[r1,#1]
;;;1036                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
00160c  4608              MOV      r0,r1
00160e  7981              LDRB     r1,[r0,#6]
001610  7081              STRB     r1,[r0,#2]
;;;1037                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001612  79c1              LDRB     r1,[r0,#7]
001614  70c1              STRB     r1,[r0,#3]
                  |L1.5654|
;;;1038                           //最后1byte都为0，所以不处理
;;;1039                       }
;;;1040                       //如果是踢出第二个，不需要做处理了
;;;1041                   }
;;;1042                   if(Run_Diagram_data.mode=='3')
001616  48d0              LDR      r0,|L1.6488|
001618  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
00161a  2833              CMP      r0,#0x33
00161c  d137              BNE      |L1.5774|
;;;1043                   {
;;;1044                       Run_Diagram_data.mode='2';
00161e  2032              MOVS     r0,#0x32
001620  49cd              LDR      r1,|L1.6488|
001622  7008              STRB     r0,[r1,#0]
;;;1045                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq7,4)==0)   //踢出第一个
001624  eb0400c4          ADD      r0,r4,r4,LSL #3
001628  eb001004          ADD      r0,r0,r4,LSL #4
00162c  4ac3              LDR      r2,|L1.6460|
00162e  eb020080          ADD      r0,r2,r0,LSL #2
001632  f1000141          ADD      r1,r0,#0x41
001636  2204              MOVS     r2,#4
001638  48c7              LDR      r0,|L1.6488|
00163a  1c40              ADDS     r0,r0,#1
00163c  f7fffffe          BL       memcmp
001640  b978              CBNZ     r0,|L1.5730|
;;;1046                       {
;;;1047                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001642  48c5              LDR      r0,|L1.6488|
001644  7940              LDRB     r0,[r0,#5]
001646  49c4              LDR      r1,|L1.6488|
001648  7048              STRB     r0,[r1,#1]
;;;1048                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
00164a  4608              MOV      r0,r1
00164c  7981              LDRB     r1,[r0,#6]
00164e  7081              STRB     r1,[r0,#2]
;;;1049                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001650  79c1              LDRB     r1,[r0,#7]
001652  70c1              STRB     r1,[r0,#3]
;;;1050                           //最后1byte都为0，所以不处理
;;;1051                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
001654  7a41              LDRB     r1,[r0,#9]
001656  7141              STRB     r1,[r0,#5]
;;;1052                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
001658  7a81              LDRB     r1,[r0,#0xa]
00165a  7181              STRB     r1,[r0,#6]
;;;1053                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
00165c  7ac1              LDRB     r1,[r0,#0xb]
00165e  71c1              STRB     r1,[r0,#7]
                  |L1.5728|
001660  e015              B        |L1.5774|
                  |L1.5730|
;;;1054                       }
;;;1055                       else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq7,4)==0)     //踢出第二个
001662  eb0400c4          ADD      r0,r4,r4,LSL #3
001666  eb001004          ADD      r0,r0,r4,LSL #4
00166a  4ab4              LDR      r2,|L1.6460|
00166c  eb020080          ADD      r0,r2,r0,LSL #2
001670  f1000141          ADD      r1,r0,#0x41
001674  2204              MOVS     r2,#4
001676  48b8              LDR      r0,|L1.6488|
001678  1d40              ADDS     r0,r0,#5
00167a  f7fffffe          BL       memcmp
00167e  b930              CBNZ     r0,|L1.5774|
;;;1056                       {
;;;1057                           //最后1byte都为0，所以不处理
;;;1058                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
001680  48b5              LDR      r0,|L1.6488|
001682  7a41              LDRB     r1,[r0,#9]
001684  7141              STRB     r1,[r0,#5]
;;;1059                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
001686  7a81              LDRB     r1,[r0,#0xa]
001688  7181              STRB     r1,[r0,#6]
;;;1060                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
00168a  7ac1              LDRB     r1,[r0,#0xb]
00168c  71c1              STRB     r1,[r0,#7]
                  |L1.5774|
;;;1061                       }
;;;1062                       //如果是踢出第三个，不需要做处理了
;;;1063                   }
;;;1064               }
;;;1065           }
;;;1066   
;;;1067           if(Monitor.start[i][7]!=1)	//第八个
00168e  eb040084          ADD      r0,r4,r4,LSL #2
001692  49b0              LDR      r1,|L1.6484|
001694  eb010040          ADD      r0,r1,r0,LSL #1
001698  79c0              LDRB     r0,[r0,#7]
00169a  2801              CMP      r0,#1
00169c  d07e              BEQ      |L1.6044|
;;;1068           {
;;;1069               if(Run_Diagram_buf[i].Start_Time8[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time8[0]*60+Run_Diagram_buf[i].Start_Time8[1]))\
00169e  eb0400c4          ADD      r0,r4,r4,LSL #3
0016a2  eb001004          ADD      r0,r0,r4,LSL #4
0016a6  49a5              LDR      r1,|L1.6460|
0016a8  eb010080          ADD      r0,r1,r0,LSL #2
0016ac  f8900046          LDRB     r0,[r0,#0x46]
0016b0  28ff              CMP      r0,#0xff
0016b2  d073              BEQ      |L1.6044|
0016b4  48a2              LDR      r0,|L1.6464|
0016b6  6840              LDR      r0,[r0,#4]  ; set_time
0016b8  49a1              LDR      r1,|L1.6464|
0016ba  6889              LDR      r1,[r1,#8]  ; set_time
0016bc  ebc11101          RSB      r1,r1,r1,LSL #4
0016c0  eb000181          ADD      r1,r0,r1,LSL #2
0016c4  eb0400c4          ADD      r0,r4,r4,LSL #3
0016c8  eb001004          ADD      r0,r0,r4,LSL #4
0016cc  4a9b              LDR      r2,|L1.6460|
0016ce  eb020080          ADD      r0,r2,r0,LSL #2
0016d2  f8900047          LDRB     r0,[r0,#0x47]
0016d6  eb0402c4          ADD      r2,r4,r4,LSL #3
0016da  eb021204          ADD      r2,r2,r4,LSL #4
0016de  4b97              LDR      r3,|L1.6460|
0016e0  eb030282          ADD      r2,r3,r2,LSL #2
0016e4  f8922046          LDRB     r2,[r2,#0x46]
0016e8  ebc21202          RSB      r2,r2,r2,LSL #4
0016ec  eb000082          ADD      r0,r0,r2,LSL #2
0016f0  4281              CMP      r1,r0
0016f2  db53              BLT      |L1.6044|
;;;1070                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time8[0]*60+Run_Diagram_buf[i].End_Time8[1])))
0016f4  4892              LDR      r0,|L1.6464|
0016f6  6840              LDR      r0,[r0,#4]  ; set_time
0016f8  4991              LDR      r1,|L1.6464|
0016fa  6889              LDR      r1,[r1,#8]  ; set_time
0016fc  ebc11101          RSB      r1,r1,r1,LSL #4
001700  eb000181          ADD      r1,r0,r1,LSL #2
001704  eb0400c4          ADD      r0,r4,r4,LSL #3
001708  eb001004          ADD      r0,r0,r4,LSL #4
00170c  461a              MOV      r2,r3
00170e  eb020080          ADD      r0,r2,r0,LSL #2
001712  f8900049          LDRB     r0,[r0,#0x49]
001716  eb0402c4          ADD      r2,r4,r4,LSL #3
00171a  eb021204          ADD      r2,r2,r4,LSL #4
00171e  eb030282          ADD      r2,r3,r2,LSL #2
001722  f8922048          LDRB     r2,[r2,#0x48]
001726  ebc21202          RSB      r2,r2,r2,LSL #4
00172a  eb000082          ADD      r0,r0,r2,LSL #2
00172e  4281              CMP      r1,r0
001730  da34              BGE      |L1.6044|
;;;1071               {
;;;1072                   App_printf("\r\nthe %d8 start\r\n", i);
001732  4621              MOV      r1,r4
001734  a089              ADR      r0,|L1.6492|
001736  f7fffffe          BL       App_printf
;;;1073                   Monitor.start[i][7]=1;
00173a  2001              MOVS     r0,#1
00173c  eb040184          ADD      r1,r4,r4,LSL #2
001740  4a84              LDR      r2,|L1.6484|
001742  eb020141          ADD      r1,r2,r1,LSL #1
001746  71c8              STRB     r0,[r1,#7]
;;;1074                   Monitor.end[i][7]=0;
001748  2100              MOVS     r1,#0
00174a  eb040284          ADD      r2,r4,r4,LSL #2
00174e  4881              LDR      r0,|L1.6484|
001750  3064              ADDS     r0,r0,#0x64
001752  eb000042          ADD      r0,r0,r2,LSL #1
001756  71c1              STRB     r1,[r0,#7]
;;;1075                   Monitor.usage_diagram_count++;
001758  487e              LDR      r0,|L1.6484|
00175a  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
00175e  1c40              ADDS     r0,r0,#1
001760  497c              LDR      r1,|L1.6484|
001762  f88100c8          STRB     r0,[r1,#0xc8]
;;;1076                   if(Monitor.usage_diagram_count==1)
001766  4608              MOV      r0,r1
001768  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
00176c  2801              CMP      r0,#1
00176e  d11e              BNE      |L1.6062|
;;;1077                   {
;;;1078                       Run_Diagram_data.mode='1';
001770  2031              MOVS     r0,#0x31
001772  4979              LDR      r1,|L1.6488|
001774  7008              STRB     r0,[r1,#0]
;;;1079                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power8[0]);
001776  eb0402c4          ADD      r2,r4,r4,LSL #3
00177a  eb021204          ADD      r2,r2,r4,LSL #4
00177e  4b6f              LDR      r3,|L1.6460|
001780  eb030282          ADD      r2,r3,r2,LSL #2
001784  f892104a          LDRB     r1,[r2,#0x4a]
001788  4a73              LDR      r2,|L1.6488|
00178a  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
00178c  f7fffffe          BL       set_run_diagram_new_power_level
;;;1080                       memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq8,4);
001790  eb0400c4          ADD      r0,r4,r4,LSL #3
001794  eb001004          ADD      r0,r0,r4,LSL #4
001798  4968              LDR      r1,|L1.6460|
00179a  e000              B        |L1.6046|
                  |L1.6044|
00179c  e04a              B        |L1.6196|
                  |L1.6046|
00179e  eb010180          ADD      r1,r1,r0,LSL #2
0017a2  486d              LDR      r0,|L1.6488|
0017a4  f8d1104b          LDR      r1,[r1,#0x4b]
0017a8  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
0017ac  e042              B        |L1.6196|
                  |L1.6062|
;;;1081                   }
;;;1082                   else if(Monitor.usage_diagram_count==2)
0017ae  4869              LDR      r0,|L1.6484|
0017b0  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0017b4  2802              CMP      r0,#2
0017b6  d11c              BNE      |L1.6130|
;;;1083                   {
;;;1084                       Run_Diagram_data.mode='2';
0017b8  2032              MOVS     r0,#0x32
0017ba  4967              LDR      r1,|L1.6488|
0017bc  7008              STRB     r0,[r1,#0]
;;;1085                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power8[0]);
0017be  eb0402c4          ADD      r2,r4,r4,LSL #3
0017c2  eb021204          ADD      r2,r2,r4,LSL #4
0017c6  4b5d              LDR      r3,|L1.6460|
0017c8  eb030282          ADD      r2,r3,r2,LSL #2
0017cc  f892104a          LDRB     r1,[r2,#0x4a]
0017d0  4a61              LDR      r2,|L1.6488|
0017d2  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
0017d4  f7fffffe          BL       set_run_diagram_new_power_level
;;;1086                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq8,4);
0017d8  eb0400c4          ADD      r0,r4,r4,LSL #3
0017dc  eb001004          ADD      r0,r0,r4,LSL #4
0017e0  4956              LDR      r1,|L1.6460|
0017e2  eb010180          ADD      r1,r1,r0,LSL #2
0017e6  485c              LDR      r0,|L1.6488|
0017e8  f8d1104b          LDR      r1,[r1,#0x4b]
0017ec  f8c01005          STR      r1,[r0,#5]
0017f0  e020              B        |L1.6196|
                  |L1.6130|
;;;1087                   }
;;;1088                   else if(Monitor.usage_diagram_count==3)
0017f2  4858              LDR      r0,|L1.6484|
0017f4  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0017f8  2803              CMP      r0,#3
0017fa  d11b              BNE      |L1.6196|
;;;1089                   {
;;;1090                       Run_Diagram_data.mode='3';
0017fc  2033              MOVS     r0,#0x33
0017fe  4956              LDR      r1,|L1.6488|
001800  7008              STRB     r0,[r1,#0]
;;;1091                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power8[0]);
001802  eb0402c4          ADD      r2,r4,r4,LSL #3
001806  eb021204          ADD      r2,r2,r4,LSL #4
00180a  4b4c              LDR      r3,|L1.6460|
00180c  eb030282          ADD      r2,r3,r2,LSL #2
001810  f892104a          LDRB     r1,[r2,#0x4a]
001814  4a50              LDR      r2,|L1.6488|
001816  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001818  f7fffffe          BL       set_run_diagram_new_power_level
;;;1092                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq8,4);
00181c  eb0400c4          ADD      r0,r4,r4,LSL #3
001820  eb001004          ADD      r0,r0,r4,LSL #4
001824  4945              LDR      r1,|L1.6460|
001826  eb010180          ADD      r1,r1,r0,LSL #2
00182a  484b              LDR      r0,|L1.6488|
00182c  f8d1104b          LDR      r1,[r1,#0x4b]
001830  f8c01009          STR      r1,[r0,#9]
                  |L1.6196|
;;;1093                   }
;;;1094               }
;;;1095           }
;;;1096           if(Monitor.end[i][7]!=1)	//结束
001834  eb040184          ADD      r1,r4,r4,LSL #2
001838  4846              LDR      r0,|L1.6484|
00183a  3064              ADDS     r0,r0,#0x64
00183c  eb000041          ADD      r0,r0,r1,LSL #1
001840  79c0              LDRB     r0,[r0,#7]
001842  2801              CMP      r0,#1
001844  d059              BEQ      |L1.6394|
;;;1097           {
;;;1098               if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time8[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time8[1]) ) ||
001846  483e              LDR      r0,|L1.6464|
001848  6880              LDR      r0,[r0,#8]  ; set_time
00184a  eb0401c4          ADD      r1,r4,r4,LSL #3
00184e  eb011104          ADD      r1,r1,r4,LSL #4
001852  4a3a              LDR      r2,|L1.6460|
001854  eb020181          ADD      r1,r2,r1,LSL #2
001858  f8911048          LDRB     r1,[r1,#0x48]
00185c  4288              CMP      r0,r1
00185e  d10b              BNE      |L1.6264|
001860  4837              LDR      r0,|L1.6464|
001862  6841              LDR      r1,[r0,#4]  ; set_time
001864  eb0400c4          ADD      r0,r4,r4,LSL #3
001868  eb001004          ADD      r0,r0,r4,LSL #4
00186c  eb020080          ADD      r0,r2,r0,LSL #2
001870  f8900049          LDRB     r0,[r0,#0x49]
001874  4281              CMP      r1,r0
001876  d010              BEQ      |L1.6298|
                  |L1.6264|
;;;1099                       ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time8[0] == 24) ) )
001878  4831              LDR      r0,|L1.6464|
00187a  6880              LDR      r0,[r0,#8]  ; set_time
00187c  bbe8              CBNZ     r0,|L1.6394|
00187e  4830              LDR      r0,|L1.6464|
001880  6840              LDR      r0,[r0,#4]  ; set_time
001882  bbd0              CBNZ     r0,|L1.6394|
001884  eb0400c4          ADD      r0,r4,r4,LSL #3
001888  eb001004          ADD      r0,r0,r4,LSL #4
00188c  492b              LDR      r1,|L1.6460|
00188e  eb010080          ADD      r0,r1,r0,LSL #2
001892  f8900048          LDRB     r0,[r0,#0x48]
001896  2818              CMP      r0,#0x18
001898  d12f              BNE      |L1.6394|
                  |L1.6298|
;;;1100               {
;;;1101                   App_printf("\r\nthe %d8 end\r\n", i);
00189a  4621              MOV      r1,r4
00189c  a034              ADR      r0,|L1.6512|
00189e  f7fffffe          BL       App_printf
;;;1102                   Monitor.usage_diagram_count--;
0018a2  482c              LDR      r0,|L1.6484|
0018a4  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
0018a8  1e40              SUBS     r0,r0,#1
0018aa  492a              LDR      r1,|L1.6484|
0018ac  f88100c8          STRB     r0,[r1,#0xc8]
;;;1103                   Monitor.end[i][7]=1;
0018b0  2101              MOVS     r1,#1
0018b2  eb040284          ADD      r2,r4,r4,LSL #2
0018b6  4827              LDR      r0,|L1.6484|
0018b8  3064              ADDS     r0,r0,#0x64
0018ba  eb000042          ADD      r0,r0,r2,LSL #1
0018be  71c1              STRB     r1,[r0,#7]
;;;1104                   Monitor.start[i][7]=0;
0018c0  2000              MOVS     r0,#0
0018c2  eb040184          ADD      r1,r4,r4,LSL #2
0018c6  4a23              LDR      r2,|L1.6484|
0018c8  eb020141          ADD      r1,r2,r1,LSL #1
0018cc  71c8              STRB     r0,[r1,#7]
;;;1105                   if(Run_Diagram_data.mode=='1')
0018ce  4822              LDR      r0,|L1.6488|
0018d0  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0018d2  2831              CMP      r0,#0x31
0018d4  d107              BNE      |L1.6374|
;;;1106                   {
;;;1107                       Run_Diagram_data.mode='0';
0018d6  2030              MOVS     r0,#0x30
0018d8  491f              LDR      r1,|L1.6488|
0018da  7008              STRB     r0,[r1,#0]
;;;1108                       //固频时，时间到，停止即可
;;;1109                       memset(Run_Diagram_data.Freq,0,12);//清零
0018dc  1c48              ADDS     r0,r1,#1
0018de  2100              MOVS     r1,#0
0018e0  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
0018e2  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
0018e4  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.6374|
;;;1110                   }
;;;1111                   if(Run_Diagram_data.mode=='2')
0018e6  481c              LDR      r0,|L1.6488|
0018e8  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
0018ea  2832              CMP      r0,#0x32
0018ec  d11c              BNE      |L1.6440|
;;;1112                   {
;;;1113                       Run_Diagram_data.mode='1';
0018ee  2031              MOVS     r0,#0x31
0018f0  4919              LDR      r1,|L1.6488|
0018f2  7008              STRB     r0,[r1,#0]
;;;1114                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq8,4)==0)   //踢出第一个
0018f4  eb0400c4          ADD      r0,r4,r4,LSL #3
0018f8  e000              B        |L1.6396|
                  |L1.6394|
0018fa  e05e              B        |L1.6586|
                  |L1.6396|
0018fc  eb001004          ADD      r0,r0,r4,LSL #4
001900  4a0e              LDR      r2,|L1.6460|
001902  eb020080          ADD      r0,r2,r0,LSL #2
001906  f100014b          ADD      r1,r0,#0x4b
00190a  2204              MOVS     r2,#4
00190c  4812              LDR      r0,|L1.6488|
00190e  1c40              ADDS     r0,r0,#1
001910  f7fffffe          BL       memcmp
001914  b940              CBNZ     r0,|L1.6440|
;;;1115                       {
;;;1116                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001916  4810              LDR      r0,|L1.6488|
001918  7940              LDRB     r0,[r0,#5]
00191a  490f              LDR      r1,|L1.6488|
00191c  7048              STRB     r0,[r1,#1]
;;;1117                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
00191e  4608              MOV      r0,r1
001920  7981              LDRB     r1,[r0,#6]
001922  7081              STRB     r1,[r0,#2]
;;;1118                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001924  79c1              LDRB     r1,[r0,#7]
001926  70c1              STRB     r1,[r0,#3]
                  |L1.6440|
;;;1119                           //最后1byte都为0，所以不处理
;;;1120                       }
;;;1121                       //如果是踢出第二个，不需要做处理了
;;;1122                   }
;;;1123                   if(Run_Diagram_data.mode=='3')
001928  480b              LDR      r0,|L1.6488|
00192a  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
00192c  2833              CMP      r0,#0x33
00192e  d15c              BNE      |L1.6634|
;;;1124                   {
;;;1125                       Run_Diagram_data.mode='2';
001930  2032              MOVS     r0,#0x32
001932  4909              LDR      r1,|L1.6488|
001934  7008              STRB     r0,[r1,#0]
;;;1126                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq8,4)==0)   //踢出第一个
001936  eb0400c4          ADD      r0,r4,r4,LSL #3
00193a  e021              B        |L1.6528|
                  |L1.6460|
                          DCD      Run_Diagram_buf
                  |L1.6464|
                          DCD      set_time
                  |L1.6468|
001944  0d0a7468          DCB      "\r\nthe %d7 end\r\n",0
001948  65202564
00194c  3720656e
001950  640d0a00
                  |L1.6484|
                          DCD      Monitor
                  |L1.6488|
                          DCD      Run_Diagram_data
                  |L1.6492|
00195c  0d0a7468          DCB      "\r\nthe %d8 start\r\n",0
001960  65202564
001964  38207374
001968  6172740d
00196c  0a00    
00196e  00                DCB      0
00196f  00                DCB      0
                  |L1.6512|
001970  0d0a7468          DCB      "\r\nthe %d8 end\r\n",0
001974  65202564
001978  3820656e
00197c  640d0a00
                  |L1.6528|
001980  eb001004          ADD      r0,r0,r4,LSL #4
001984  4afe              LDR      r2,|L1.7552|
001986  eb020080          ADD      r0,r2,r0,LSL #2
00198a  f100014b          ADD      r1,r0,#0x4b
00198e  2204              MOVS     r2,#4
001990  48fc              LDR      r0,|L1.7556|
001992  f7fffffe          BL       memcmp
001996  b988              CBNZ     r0,|L1.6588|
;;;1127                       {
;;;1128                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001998  48fa              LDR      r0,|L1.7556|
00199a  1e40              SUBS     r0,r0,#1
00199c  7940              LDRB     r0,[r0,#5]
00199e  49f9              LDR      r1,|L1.7556|
0019a0  1e49              SUBS     r1,r1,#1
0019a2  7048              STRB     r0,[r1,#1]
;;;1129                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
0019a4  4608              MOV      r0,r1
0019a6  7981              LDRB     r1,[r0,#6]
0019a8  7081              STRB     r1,[r0,#2]
;;;1130                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
0019aa  79c1              LDRB     r1,[r0,#7]
0019ac  70c1              STRB     r1,[r0,#3]
;;;1131                           //最后1byte都为0，所以不处理
;;;1132                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
0019ae  7a41              LDRB     r1,[r0,#9]
0019b0  7141              STRB     r1,[r0,#5]
;;;1133                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
0019b2  7a81              LDRB     r1,[r0,#0xa]
0019b4  7181              STRB     r1,[r0,#6]
;;;1134                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
0019b6  7ac1              LDRB     r1,[r0,#0xb]
0019b8  71c1              STRB     r1,[r0,#7]
                  |L1.6586|
0019ba  e016              B        |L1.6634|
                  |L1.6588|
;;;1135                       }
;;;1136                       else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq8,4)==0)     //踢出第二个
0019bc  eb0400c4          ADD      r0,r4,r4,LSL #3
0019c0  eb001004          ADD      r0,r0,r4,LSL #4
0019c4  4aee              LDR      r2,|L1.7552|
0019c6  eb020080          ADD      r0,r2,r0,LSL #2
0019ca  f100014b          ADD      r1,r0,#0x4b
0019ce  2204              MOVS     r2,#4
0019d0  48ec              LDR      r0,|L1.7556|
0019d2  1d00              ADDS     r0,r0,#4
0019d4  f7fffffe          BL       memcmp
0019d8  b938              CBNZ     r0,|L1.6634|
;;;1137                       {
;;;1138                           //最后1byte都为0，所以不处理
;;;1139                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
0019da  48ea              LDR      r0,|L1.7556|
0019dc  1e40              SUBS     r0,r0,#1
0019de  7a41              LDRB     r1,[r0,#9]
0019e0  7141              STRB     r1,[r0,#5]
;;;1140                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
0019e2  7a81              LDRB     r1,[r0,#0xa]
0019e4  7181              STRB     r1,[r0,#6]
;;;1141                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
0019e6  7ac1              LDRB     r1,[r0,#0xb]
0019e8  71c1              STRB     r1,[r0,#7]
                  |L1.6634|
;;;1142                       }
;;;1143                       //如果是踢出第三个，不需要做处理了
;;;1144                   }
;;;1145               }
;;;1146           }
;;;1147   
;;;1148   
;;;1149           if(Monitor.start[i][8]!=1)	//第九个
0019ea  eb040084          ADD      r0,r4,r4,LSL #2
0019ee  49e6              LDR      r1,|L1.7560|
0019f0  eb010040          ADD      r0,r1,r0,LSL #1
0019f4  7a00              LDRB     r0,[r0,#8]
0019f6  2801              CMP      r0,#1
0019f8  d07d              BEQ      |L1.6902|
;;;1150           {
;;;1151               if(Run_Diagram_buf[i].Start_Time9[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time9[0]*60+Run_Diagram_buf[i].Start_Time9[1]))\
0019fa  eb0400c4          ADD      r0,r4,r4,LSL #3
0019fe  eb001004          ADD      r0,r0,r4,LSL #4
001a02  49df              LDR      r1,|L1.7552|
001a04  eb010080          ADD      r0,r1,r0,LSL #2
001a08  f8900050          LDRB     r0,[r0,#0x50]
001a0c  28ff              CMP      r0,#0xff
001a0e  d072              BEQ      |L1.6902|
001a10  48de              LDR      r0,|L1.7564|
001a12  6840              LDR      r0,[r0,#4]  ; set_time
001a14  49dd              LDR      r1,|L1.7564|
001a16  6889              LDR      r1,[r1,#8]  ; set_time
001a18  ebc11101          RSB      r1,r1,r1,LSL #4
001a1c  eb000181          ADD      r1,r0,r1,LSL #2
001a20  eb0400c4          ADD      r0,r4,r4,LSL #3
001a24  eb001004          ADD      r0,r0,r4,LSL #4
001a28  4ad5              LDR      r2,|L1.7552|
001a2a  eb020080          ADD      r0,r2,r0,LSL #2
001a2e  f8900051          LDRB     r0,[r0,#0x51]
001a32  eb0402c4          ADD      r2,r4,r4,LSL #3
001a36  eb021204          ADD      r2,r2,r4,LSL #4
001a3a  4bd1              LDR      r3,|L1.7552|
001a3c  eb030282          ADD      r2,r3,r2,LSL #2
001a40  f8922050          LDRB     r2,[r2,#0x50]
001a44  ebc21202          RSB      r2,r2,r2,LSL #4
001a48  eb000082          ADD      r0,r0,r2,LSL #2
001a4c  4281              CMP      r1,r0
001a4e  db52              BLT      |L1.6902|
;;;1152                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time9[0]*60+Run_Diagram_buf[i].End_Time9[1])))
001a50  48ce              LDR      r0,|L1.7564|
001a52  6840              LDR      r0,[r0,#4]  ; set_time
001a54  49cd              LDR      r1,|L1.7564|
001a56  6889              LDR      r1,[r1,#8]  ; set_time
001a58  ebc11101          RSB      r1,r1,r1,LSL #4
001a5c  eb000181          ADD      r1,r0,r1,LSL #2
001a60  eb0400c4          ADD      r0,r4,r4,LSL #3
001a64  eb001004          ADD      r0,r0,r4,LSL #4
001a68  461a              MOV      r2,r3
001a6a  eb020080          ADD      r0,r2,r0,LSL #2
001a6e  f8900053          LDRB     r0,[r0,#0x53]
001a72  eb0402c4          ADD      r2,r4,r4,LSL #3
001a76  eb021204          ADD      r2,r2,r4,LSL #4
001a7a  eb030282          ADD      r2,r3,r2,LSL #2
001a7e  f8922052          LDRB     r2,[r2,#0x52]
001a82  ebc21202          RSB      r2,r2,r2,LSL #4
001a86  eb000082          ADD      r0,r0,r2,LSL #2
001a8a  4281              CMP      r1,r0
001a8c  da33              BGE      |L1.6902|
;;;1153               {
;;;1154                   App_printf("\r\nthe %d9 start\r\n", i);
001a8e  4621              MOV      r1,r4
001a90  a0bf              ADR      r0,|L1.7568|
001a92  f7fffffe          BL       App_printf
;;;1155                   Monitor.start[i][8]=1;
001a96  2001              MOVS     r0,#1
001a98  eb040184          ADD      r1,r4,r4,LSL #2
001a9c  4aba              LDR      r2,|L1.7560|
001a9e  eb020141          ADD      r1,r2,r1,LSL #1
001aa2  7208              STRB     r0,[r1,#8]
;;;1156                   Monitor.end[i][8]=0;
001aa4  2100              MOVS     r1,#0
001aa6  eb040284          ADD      r2,r4,r4,LSL #2
001aaa  48b7              LDR      r0,|L1.7560|
001aac  3064              ADDS     r0,r0,#0x64
001aae  eb000042          ADD      r0,r0,r2,LSL #1
001ab2  7201              STRB     r1,[r0,#8]
;;;1157                   Monitor.usage_diagram_count++;
001ab4  48b4              LDR      r0,|L1.7560|
001ab6  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001aba  1c40              ADDS     r0,r0,#1
001abc  49b2              LDR      r1,|L1.7560|
001abe  f88100c8          STRB     r0,[r1,#0xc8]
;;;1158                   if(Monitor.usage_diagram_count==1)
001ac2  4608              MOV      r0,r1
001ac4  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001ac8  2801              CMP      r0,#1
001aca  d121              BNE      |L1.6928|
;;;1159                   {
;;;1160                       Run_Diagram_data.mode='1';
001acc  2031              MOVS     r0,#0x31
001ace  49ad              LDR      r1,|L1.7556|
001ad0  1e49              SUBS     r1,r1,#1
001ad2  7008              STRB     r0,[r1,#0]
;;;1161                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power9[0]);
001ad4  eb0402c4          ADD      r2,r4,r4,LSL #3
001ad8  eb021204          ADD      r2,r2,r4,LSL #4
001adc  4ba8              LDR      r3,|L1.7552|
001ade  eb030282          ADD      r2,r3,r2,LSL #2
001ae2  f8921054          LDRB     r1,[r2,#0x54]
001ae6  4aa7              LDR      r2,|L1.7556|
001ae8  1e52              SUBS     r2,r2,#1
001aea  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001aec  f7fffffe          BL       set_run_diagram_new_power_level
;;;1162                       memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq9,4);
001af0  eb0400c4          ADD      r0,r4,r4,LSL #3
001af4  e000              B        |L1.6904|
                  |L1.6902|
001af6  e054              B        |L1.7074|
                  |L1.6904|
001af8  eb001004          ADD      r0,r0,r4,LSL #4
001afc  49a0              LDR      r1,|L1.7552|
001afe  eb010180          ADD      r1,r1,r0,LSL #2
001b02  48a0              LDR      r0,|L1.7556|
001b04  1e40              SUBS     r0,r0,#1
001b06  f8d11055          LDR      r1,[r1,#0x55]
001b0a  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
001b0e  e048              B        |L1.7074|
                  |L1.6928|
;;;1163                   }
;;;1164                   else if(Monitor.usage_diagram_count==2)
001b10  489d              LDR      r0,|L1.7560|
001b12  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001b16  2802              CMP      r0,#2
001b18  d11f              BNE      |L1.7002|
;;;1165                   {
;;;1166                       Run_Diagram_data.mode='2';
001b1a  2032              MOVS     r0,#0x32
001b1c  4999              LDR      r1,|L1.7556|
001b1e  1e49              SUBS     r1,r1,#1
001b20  7008              STRB     r0,[r1,#0]
;;;1167                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power9[0]);
001b22  eb0402c4          ADD      r2,r4,r4,LSL #3
001b26  eb021204          ADD      r2,r2,r4,LSL #4
001b2a  4b95              LDR      r3,|L1.7552|
001b2c  eb030282          ADD      r2,r3,r2,LSL #2
001b30  f8921054          LDRB     r1,[r2,#0x54]
001b34  4a93              LDR      r2,|L1.7556|
001b36  1e52              SUBS     r2,r2,#1
001b38  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001b3a  f7fffffe          BL       set_run_diagram_new_power_level
;;;1168                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq9,4);
001b3e  eb0400c4          ADD      r0,r4,r4,LSL #3
001b42  eb001004          ADD      r0,r0,r4,LSL #4
001b46  498e              LDR      r1,|L1.7552|
001b48  eb010180          ADD      r1,r1,r0,LSL #2
001b4c  488d              LDR      r0,|L1.7556|
001b4e  1e40              SUBS     r0,r0,#1
001b50  f8d11055          LDR      r1,[r1,#0x55]
001b54  f8c01005          STR      r1,[r0,#5]
001b58  e023              B        |L1.7074|
                  |L1.7002|
;;;1169                   }
;;;1170                   else if(Monitor.usage_diagram_count==3)
001b5a  488b              LDR      r0,|L1.7560|
001b5c  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001b60  2803              CMP      r0,#3
001b62  d11e              BNE      |L1.7074|
;;;1171                   {
;;;1172                       Run_Diagram_data.mode='3';
001b64  2033              MOVS     r0,#0x33
001b66  4987              LDR      r1,|L1.7556|
001b68  1e49              SUBS     r1,r1,#1
001b6a  7008              STRB     r0,[r1,#0]
;;;1173                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power9[0]);
001b6c  eb0402c4          ADD      r2,r4,r4,LSL #3
001b70  eb021204          ADD      r2,r2,r4,LSL #4
001b74  4b82              LDR      r3,|L1.7552|
001b76  eb030282          ADD      r2,r3,r2,LSL #2
001b7a  f8921054          LDRB     r1,[r2,#0x54]
001b7e  4a81              LDR      r2,|L1.7556|
001b80  1e52              SUBS     r2,r2,#1
001b82  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001b84  f7fffffe          BL       set_run_diagram_new_power_level
;;;1174                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq9,4);
001b88  eb0400c4          ADD      r0,r4,r4,LSL #3
001b8c  eb001004          ADD      r0,r0,r4,LSL #4
001b90  497b              LDR      r1,|L1.7552|
001b92  eb010180          ADD      r1,r1,r0,LSL #2
001b96  487b              LDR      r0,|L1.7556|
001b98  1e40              SUBS     r0,r0,#1
001b9a  f8d11055          LDR      r1,[r1,#0x55]
001b9e  f8c01009          STR      r1,[r0,#9]
                  |L1.7074|
;;;1175                   }
;;;1176               }
;;;1177           }
;;;1178   
;;;1179           if(Monitor.end[i][8]!=1)	//结束
001ba2  eb040184          ADD      r1,r4,r4,LSL #2
001ba6  4878              LDR      r0,|L1.7560|
001ba8  3064              ADDS     r0,r0,#0x64
001baa  eb000041          ADD      r0,r0,r1,LSL #1
001bae  7a00              LDRB     r0,[r0,#8]
001bb0  2801              CMP      r0,#1
001bb2  d059              BEQ      |L1.7272|
;;;1180           {
;;;1181               if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time9[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time9[1]) ) ||
001bb4  4875              LDR      r0,|L1.7564|
001bb6  6880              LDR      r0,[r0,#8]  ; set_time
001bb8  eb0401c4          ADD      r1,r4,r4,LSL #3
001bbc  eb011104          ADD      r1,r1,r4,LSL #4
001bc0  4a6f              LDR      r2,|L1.7552|
001bc2  eb020181          ADD      r1,r2,r1,LSL #2
001bc6  f8911052          LDRB     r1,[r1,#0x52]
001bca  4288              CMP      r0,r1
001bcc  d10b              BNE      |L1.7142|
001bce  486f              LDR      r0,|L1.7564|
001bd0  6841              LDR      r1,[r0,#4]  ; set_time
001bd2  eb0400c4          ADD      r0,r4,r4,LSL #3
001bd6  eb001004          ADD      r0,r0,r4,LSL #4
001bda  eb020080          ADD      r0,r2,r0,LSL #2
001bde  f8900053          LDRB     r0,[r0,#0x53]
001be2  4281              CMP      r1,r0
001be4  d010              BEQ      |L1.7176|
                  |L1.7142|
;;;1182                       ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time9[0] == 24) ) )
001be6  4869              LDR      r0,|L1.7564|
001be8  6880              LDR      r0,[r0,#8]  ; set_time
001bea  bbe8              CBNZ     r0,|L1.7272|
001bec  4867              LDR      r0,|L1.7564|
001bee  6840              LDR      r0,[r0,#4]  ; set_time
001bf0  bbd0              CBNZ     r0,|L1.7272|
001bf2  eb0400c4          ADD      r0,r4,r4,LSL #3
001bf6  eb001004          ADD      r0,r0,r4,LSL #4
001bfa  4961              LDR      r1,|L1.7552|
001bfc  eb010080          ADD      r0,r1,r0,LSL #2
001c00  f8900052          LDRB     r0,[r0,#0x52]
001c04  2818              CMP      r0,#0x18
001c06  d12f              BNE      |L1.7272|
                  |L1.7176|
;;;1183               {
;;;1184                   App_printf("\r\nthe %d9 end\r\n", i);
001c08  4621              MOV      r1,r4
001c0a  a066              ADR      r0,|L1.7588|
001c0c  f7fffffe          BL       App_printf
;;;1185                   Monitor.usage_diagram_count--;
001c10  485d              LDR      r0,|L1.7560|
001c12  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001c16  1e40              SUBS     r0,r0,#1
001c18  495b              LDR      r1,|L1.7560|
001c1a  f88100c8          STRB     r0,[r1,#0xc8]
;;;1186                   Monitor.end[i][8]=1;
001c1e  2101              MOVS     r1,#1
001c20  eb040284          ADD      r2,r4,r4,LSL #2
001c24  4858              LDR      r0,|L1.7560|
001c26  3064              ADDS     r0,r0,#0x64
001c28  eb000042          ADD      r0,r0,r2,LSL #1
001c2c  7201              STRB     r1,[r0,#8]
;;;1187                   Monitor.start[i][8]=0;
001c2e  2000              MOVS     r0,#0
001c30  eb040184          ADD      r1,r4,r4,LSL #2
001c34  4a54              LDR      r2,|L1.7560|
001c36  eb020141          ADD      r1,r2,r1,LSL #1
001c3a  7208              STRB     r0,[r1,#8]
;;;1188                   if(Run_Diagram_data.mode=='1')
001c3c  4851              LDR      r0,|L1.7556|
001c3e  1e40              SUBS     r0,r0,#1
001c40  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001c42  2831              CMP      r0,#0x31
001c44  d108              BNE      |L1.7256|
;;;1189                   {
;;;1190                       Run_Diagram_data.mode='0';
001c46  2030              MOVS     r0,#0x30
001c48  494e              LDR      r1,|L1.7556|
001c4a  1e49              SUBS     r1,r1,#1
001c4c  7008              STRB     r0,[r1,#0]
;;;1191                       //固频时，时间到，停止即可
;;;1192                       memset(Run_Diagram_data.Freq,0,12);//清零
001c4e  1c48              ADDS     r0,r1,#1
001c50  2100              MOVS     r1,#0
001c52  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
001c54  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
001c56  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.7256|
;;;1193                   }
;;;1194                   if(Run_Diagram_data.mode=='2')
001c58  484a              LDR      r0,|L1.7556|
001c5a  1e40              SUBS     r0,r0,#1
001c5c  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001c5e  2832              CMP      r0,#0x32
001c60  d11e              BNE      |L1.7328|
;;;1195                   {
;;;1196                       Run_Diagram_data.mode='1';
001c62  2031              MOVS     r0,#0x31
001c64  4947              LDR      r1,|L1.7556|
001c66  e000              B        |L1.7274|
                  |L1.7272|
001c68  e042              B        |L1.7408|
                  |L1.7274|
001c6a  1e49              SUBS     r1,r1,#1
001c6c  7008              STRB     r0,[r1,#0]
;;;1197                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq9,4)==0)   //踢出第一个
001c6e  eb0400c4          ADD      r0,r4,r4,LSL #3
001c72  eb001004          ADD      r0,r0,r4,LSL #4
001c76  4a42              LDR      r2,|L1.7552|
001c78  eb020080          ADD      r0,r2,r0,LSL #2
001c7c  f1000155          ADD      r1,r0,#0x55
001c80  2204              MOVS     r2,#4
001c82  4840              LDR      r0,|L1.7556|
001c84  f7fffffe          BL       memcmp
001c88  b950              CBNZ     r0,|L1.7328|
;;;1198                       {
;;;1199                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001c8a  483e              LDR      r0,|L1.7556|
001c8c  1e40              SUBS     r0,r0,#1
001c8e  7940              LDRB     r0,[r0,#5]
001c90  493c              LDR      r1,|L1.7556|
001c92  1e49              SUBS     r1,r1,#1
001c94  7048              STRB     r0,[r1,#1]
;;;1200                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
001c96  4608              MOV      r0,r1
001c98  7981              LDRB     r1,[r0,#6]
001c9a  7081              STRB     r1,[r0,#2]
;;;1201                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001c9c  79c1              LDRB     r1,[r0,#7]
001c9e  70c1              STRB     r1,[r0,#3]
                  |L1.7328|
;;;1202                           //最后1byte都为0，所以不处理
;;;1203                       }
;;;1204                       //如果是踢出第二个，不需要做处理了
;;;1205                   }
;;;1206                   if(Run_Diagram_data.mode=='3')
001ca0  4838              LDR      r0,|L1.7556|
001ca2  1e40              SUBS     r0,r0,#1
001ca4  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001ca6  2833              CMP      r0,#0x33
001ca8  d13a              BNE      |L1.7456|
;;;1207                   {
;;;1208                       Run_Diagram_data.mode='2';
001caa  2032              MOVS     r0,#0x32
001cac  4935              LDR      r1,|L1.7556|
001cae  1e49              SUBS     r1,r1,#1
001cb0  7008              STRB     r0,[r1,#0]
;;;1209                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq9,4)==0)   //踢出第一个
001cb2  eb0400c4          ADD      r0,r4,r4,LSL #3
001cb6  eb001004          ADD      r0,r0,r4,LSL #4
001cba  4a31              LDR      r2,|L1.7552|
001cbc  eb020080          ADD      r0,r2,r0,LSL #2
001cc0  f1000155          ADD      r1,r0,#0x55
001cc4  2204              MOVS     r2,#4
001cc6  482f              LDR      r0,|L1.7556|
001cc8  f7fffffe          BL       memcmp
001ccc  b988              CBNZ     r0,|L1.7410|
;;;1210                       {
;;;1211                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001cce  482d              LDR      r0,|L1.7556|
001cd0  1e40              SUBS     r0,r0,#1
001cd2  7940              LDRB     r0,[r0,#5]
001cd4  492b              LDR      r1,|L1.7556|
001cd6  1e49              SUBS     r1,r1,#1
001cd8  7048              STRB     r0,[r1,#1]
;;;1212                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
001cda  4608              MOV      r0,r1
001cdc  7981              LDRB     r1,[r0,#6]
001cde  7081              STRB     r1,[r0,#2]
;;;1213                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001ce0  79c1              LDRB     r1,[r0,#7]
001ce2  70c1              STRB     r1,[r0,#3]
;;;1214                           //最后1byte都为0，所以不处理
;;;1215                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
001ce4  7a41              LDRB     r1,[r0,#9]
001ce6  7141              STRB     r1,[r0,#5]
;;;1216                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
001ce8  7a81              LDRB     r1,[r0,#0xa]
001cea  7181              STRB     r1,[r0,#6]
;;;1217                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
001cec  7ac1              LDRB     r1,[r0,#0xb]
001cee  71c1              STRB     r1,[r0,#7]
                  |L1.7408|
001cf0  e016              B        |L1.7456|
                  |L1.7410|
;;;1218                       }
;;;1219                       else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq9,4)==0)     //踢出第二个
001cf2  eb0400c4          ADD      r0,r4,r4,LSL #3
001cf6  eb001004          ADD      r0,r0,r4,LSL #4
001cfa  4a21              LDR      r2,|L1.7552|
001cfc  eb020080          ADD      r0,r2,r0,LSL #2
001d00  f1000155          ADD      r1,r0,#0x55
001d04  2204              MOVS     r2,#4
001d06  481f              LDR      r0,|L1.7556|
001d08  1d00              ADDS     r0,r0,#4
001d0a  f7fffffe          BL       memcmp
001d0e  b938              CBNZ     r0,|L1.7456|
;;;1220                       {
;;;1221                           //最后1byte都为0，所以不处理
;;;1222                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
001d10  481c              LDR      r0,|L1.7556|
001d12  1e40              SUBS     r0,r0,#1
001d14  7a41              LDRB     r1,[r0,#9]
001d16  7141              STRB     r1,[r0,#5]
;;;1223                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
001d18  7a81              LDRB     r1,[r0,#0xa]
001d1a  7181              STRB     r1,[r0,#6]
;;;1224                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
001d1c  7ac1              LDRB     r1,[r0,#0xb]
001d1e  71c1              STRB     r1,[r0,#7]
                  |L1.7456|
;;;1225                       }
;;;1226                       //如果是踢出第三个，不需要做处理了
;;;1227                   }
;;;1228               }
;;;1229           }
;;;1230   
;;;1231   
;;;1232           if(Monitor.start[i][9]!=1)	//第十个
001d20  eb040084          ADD      r0,r4,r4,LSL #2
001d24  4918              LDR      r1,|L1.7560|
001d26  eb010040          ADD      r0,r1,r0,LSL #1
001d2a  7a40              LDRB     r0,[r0,#9]
001d2c  2801              CMP      r0,#1
001d2e  d07d              BEQ      |L1.7724|
;;;1233           {
;;;1234               if(Run_Diagram_buf[i].Start_Time10[0]!=0xFF&&((set_time.tm_hour*60+set_time.tm_min)>=(Run_Diagram_buf[i].Start_Time10[0]*60+Run_Diagram_buf[i].Start_Time10[1]))\
001d30  eb0400c4          ADD      r0,r4,r4,LSL #3
001d34  eb001004          ADD      r0,r0,r4,LSL #4
001d38  4911              LDR      r1,|L1.7552|
001d3a  eb010080          ADD      r0,r1,r0,LSL #2
001d3e  f890005a          LDRB     r0,[r0,#0x5a]
001d42  28ff              CMP      r0,#0xff
001d44  d072              BEQ      |L1.7724|
001d46  4811              LDR      r0,|L1.7564|
001d48  6840              LDR      r0,[r0,#4]  ; set_time
001d4a  4910              LDR      r1,|L1.7564|
001d4c  6889              LDR      r1,[r1,#8]  ; set_time
001d4e  ebc11101          RSB      r1,r1,r1,LSL #4
001d52  eb000181          ADD      r1,r0,r1,LSL #2
001d56  eb0400c4          ADD      r0,r4,r4,LSL #3
001d5a  eb001004          ADD      r0,r0,r4,LSL #4
001d5e  4a08              LDR      r2,|L1.7552|
001d60  eb020080          ADD      r0,r2,r0,LSL #2
001d64  f890005b          LDRB     r0,[r0,#0x5b]
001d68  eb0402c4          ADD      r2,r4,r4,LSL #3
001d6c  eb021204          ADD      r2,r2,r4,LSL #4
001d70  4b03              LDR      r3,|L1.7552|
001d72  eb030282          ADD      r2,r3,r2,LSL #2
001d76  f892205a          LDRB     r2,[r2,#0x5a]
001d7a  ebc21202          RSB      r2,r2,r2,LSL #4
001d7e  e019              B        |L1.7604|
                  |L1.7552|
                          DCD      Run_Diagram_buf
                  |L1.7556|
                          DCD      Run_Diagram_data+0x1
                  |L1.7560|
                          DCD      Monitor
                  |L1.7564|
                          DCD      set_time
                  |L1.7568|
001d90  0d0a7468          DCB      "\r\nthe %d9 start\r\n",0
001d94  65202564
001d98  39207374
001d9c  6172740d
001da0  0a00    
001da2  00                DCB      0
001da3  00                DCB      0
                  |L1.7588|
001da4  0d0a7468          DCB      "\r\nthe %d9 end\r\n",0
001da8  65202564
001dac  3920656e
001db0  640d0a00
                  |L1.7604|
001db4  eb000082          ADD      r0,r0,r2,LSL #2
001db8  4281              CMP      r1,r0
001dba  db37              BLT      |L1.7724|
;;;1235                       &&((set_time.tm_hour*60+set_time.tm_min)<(Run_Diagram_buf[i].End_Time10[0]*60+Run_Diagram_buf[i].End_Time10[1])))
001dbc  48ad              LDR      r0,|L1.8308|
001dbe  6840              LDR      r0,[r0,#4]  ; set_time
001dc0  49ac              LDR      r1,|L1.8308|
001dc2  6889              LDR      r1,[r1,#8]  ; set_time
001dc4  ebc11101          RSB      r1,r1,r1,LSL #4
001dc8  eb000181          ADD      r1,r0,r1,LSL #2
001dcc  eb0400c4          ADD      r0,r4,r4,LSL #3
001dd0  eb001004          ADD      r0,r0,r4,LSL #4
001dd4  461a              MOV      r2,r3
001dd6  eb020080          ADD      r0,r2,r0,LSL #2
001dda  f890005d          LDRB     r0,[r0,#0x5d]
001dde  eb0402c4          ADD      r2,r4,r4,LSL #3
001de2  eb021204          ADD      r2,r2,r4,LSL #4
001de6  eb030282          ADD      r2,r3,r2,LSL #2
001dea  f892205c          LDRB     r2,[r2,#0x5c]
001dee  ebc21202          RSB      r2,r2,r2,LSL #4
001df2  eb000082          ADD      r0,r0,r2,LSL #2
001df6  4281              CMP      r1,r0
001df8  da18              BGE      |L1.7724|
;;;1236               {
;;;1237                   App_printf("\r\nthe %d10 start\r\n", i);
001dfa  4621              MOV      r1,r4
001dfc  a09e              ADR      r0,|L1.8312|
001dfe  f7fffffe          BL       App_printf
;;;1238                   Monitor.start[i][9]=1;
001e02  2001              MOVS     r0,#1
001e04  eb040184          ADD      r1,r4,r4,LSL #2
001e08  4aa0              LDR      r2,|L1.8332|
001e0a  eb020141          ADD      r1,r2,r1,LSL #1
001e0e  7248              STRB     r0,[r1,#9]
;;;1239                   Monitor.end[i][9]=0;
001e10  2100              MOVS     r1,#0
001e12  eb040284          ADD      r2,r4,r4,LSL #2
001e16  489d              LDR      r0,|L1.8332|
001e18  3064              ADDS     r0,r0,#0x64
001e1a  eb000042          ADD      r0,r0,r2,LSL #1
001e1e  7241              STRB     r1,[r0,#9]
;;;1240                   Monitor.usage_diagram_count++;
001e20  489a              LDR      r0,|L1.8332|
001e22  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001e26  1c40              ADDS     r0,r0,#1
001e28  4998              LDR      r1,|L1.8332|
001e2a  e000              B        |L1.7726|
                  |L1.7724|
001e2c  e066              B        |L1.7932|
                  |L1.7726|
001e2e  f88100c8          STRB     r0,[r1,#0xc8]
;;;1241                   if(Monitor.usage_diagram_count==1)
001e32  4608              MOV      r0,r1
001e34  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001e38  2801              CMP      r0,#1
001e3a  d11c              BNE      |L1.7798|
;;;1242                   {
;;;1243                       Run_Diagram_data.mode='1';
001e3c  2031              MOVS     r0,#0x31
001e3e  4994              LDR      r1,|L1.8336|
001e40  7008              STRB     r0,[r1,#0]
;;;1244                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power10[0]);
001e42  eb0402c4          ADD      r2,r4,r4,LSL #3
001e46  eb021204          ADD      r2,r2,r4,LSL #4
001e4a  4b92              LDR      r3,|L1.8340|
001e4c  eb030282          ADD      r2,r3,r2,LSL #2
001e50  f892105e          LDRB     r1,[r2,#0x5e]
001e54  4a8e              LDR      r2,|L1.8336|
001e56  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001e58  f7fffffe          BL       set_run_diagram_new_power_level
;;;1245                       memcpy(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq10,4);
001e5c  eb0400c4          ADD      r0,r4,r4,LSL #3
001e60  eb001004          ADD      r0,r0,r4,LSL #4
001e64  498b              LDR      r1,|L1.8340|
001e66  eb010180          ADD      r1,r1,r0,LSL #2
001e6a  4889              LDR      r0,|L1.8336|
001e6c  f8d1105f          LDR      r1,[r1,#0x5f]
001e70  f8c01001          STR      r1,[r0,#1]  ; Run_Diagram_data
001e74  e042              B        |L1.7932|
                  |L1.7798|
;;;1246                   }
;;;1247                   else if(Monitor.usage_diagram_count==2)
001e76  4885              LDR      r0,|L1.8332|
001e78  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001e7c  2802              CMP      r0,#2
001e7e  d11c              BNE      |L1.7866|
;;;1248                   {
;;;1249                       Run_Diagram_data.mode='2';
001e80  2032              MOVS     r0,#0x32
001e82  4983              LDR      r1,|L1.8336|
001e84  7008              STRB     r0,[r1,#0]
;;;1250                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power10[0]);
001e86  eb0402c4          ADD      r2,r4,r4,LSL #3
001e8a  eb021204          ADD      r2,r2,r4,LSL #4
001e8e  4b81              LDR      r3,|L1.8340|
001e90  eb030282          ADD      r2,r3,r2,LSL #2
001e94  f892105e          LDRB     r1,[r2,#0x5e]
001e98  4a7d              LDR      r2,|L1.8336|
001e9a  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001e9c  f7fffffe          BL       set_run_diagram_new_power_level
;;;1251                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq10,4);
001ea0  eb0400c4          ADD      r0,r4,r4,LSL #3
001ea4  eb001004          ADD      r0,r0,r4,LSL #4
001ea8  497a              LDR      r1,|L1.8340|
001eaa  eb010180          ADD      r1,r1,r0,LSL #2
001eae  4878              LDR      r0,|L1.8336|
001eb0  f8d1105f          LDR      r1,[r1,#0x5f]
001eb4  f8c01005          STR      r1,[r0,#5]
001eb8  e020              B        |L1.7932|
                  |L1.7866|
;;;1252                   }
;;;1253                   else if(Monitor.usage_diagram_count==3)
001eba  4874              LDR      r0,|L1.8332|
001ebc  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001ec0  2803              CMP      r0,#3
001ec2  d11b              BNE      |L1.7932|
;;;1254                   {
;;;1255                       Run_Diagram_data.mode='3';
001ec4  2033              MOVS     r0,#0x33
001ec6  4972              LDR      r1,|L1.8336|
001ec8  7008              STRB     r0,[r1,#0]
;;;1256                       set_run_diagram_new_power_level(Run_Diagram_data.mode, Run_Diagram_buf[i].Power10[0]);
001eca  eb0402c4          ADD      r2,r4,r4,LSL #3
001ece  eb021204          ADD      r2,r2,r4,LSL #4
001ed2  4b70              LDR      r3,|L1.8340|
001ed4  eb030282          ADD      r2,r3,r2,LSL #2
001ed8  f892105e          LDRB     r1,[r2,#0x5e]
001edc  4a6c              LDR      r2,|L1.8336|
001ede  7810              LDRB     r0,[r2,#0]  ; Run_Diagram_data
001ee0  f7fffffe          BL       set_run_diagram_new_power_level
;;;1257                       memcpy((uint8_t *)(Run_Diagram_data.Freq)+8,Run_Diagram_buf[i].Frq10,4);
001ee4  eb0400c4          ADD      r0,r4,r4,LSL #3
001ee8  eb001004          ADD      r0,r0,r4,LSL #4
001eec  4969              LDR      r1,|L1.8340|
001eee  eb010180          ADD      r1,r1,r0,LSL #2
001ef2  4867              LDR      r0,|L1.8336|
001ef4  f8d1105f          LDR      r1,[r1,#0x5f]
001ef8  f8c01009          STR      r1,[r0,#9]
                  |L1.7932|
;;;1258                   }
;;;1259               }
;;;1260           }
;;;1261   
;;;1262           if(Monitor.end[i][9]!=1)	//结束
001efc  eb040184          ADD      r1,r4,r4,LSL #2
001f00  4862              LDR      r0,|L1.8332|
001f02  3064              ADDS     r0,r0,#0x64
001f04  eb000041          ADD      r0,r0,r1,LSL #1
001f08  7a40              LDRB     r0,[r0,#9]
001f0a  2801              CMP      r0,#1
001f0c  d059              BEQ      |L1.8130|
;;;1263           {
;;;1264               if( ( (set_time.tm_hour == Run_Diagram_buf[i].End_Time10[0]) && (set_time.tm_min == Run_Diagram_buf[i].End_Time10[1]) ) ||
001f0e  4859              LDR      r0,|L1.8308|
001f10  6880              LDR      r0,[r0,#8]  ; set_time
001f12  eb0401c4          ADD      r1,r4,r4,LSL #3
001f16  eb011104          ADD      r1,r1,r4,LSL #4
001f1a  4a5e              LDR      r2,|L1.8340|
001f1c  eb020181          ADD      r1,r2,r1,LSL #2
001f20  f891105c          LDRB     r1,[r1,#0x5c]
001f24  4288              CMP      r0,r1
001f26  d10b              BNE      |L1.8000|
001f28  4852              LDR      r0,|L1.8308|
001f2a  6841              LDR      r1,[r0,#4]  ; set_time
001f2c  eb0400c4          ADD      r0,r4,r4,LSL #3
001f30  eb001004          ADD      r0,r0,r4,LSL #4
001f34  eb020080          ADD      r0,r2,r0,LSL #2
001f38  f890005d          LDRB     r0,[r0,#0x5d]
001f3c  4281              CMP      r1,r0
001f3e  d010              BEQ      |L1.8034|
                  |L1.8000|
;;;1265                       ( (set_time.tm_hour == 0) && (set_time.tm_min == 0 ) && (Run_Diagram_buf[i].End_Time10[0] == 24) ) )
001f40  484c              LDR      r0,|L1.8308|
001f42  6880              LDR      r0,[r0,#8]  ; set_time
001f44  bbe8              CBNZ     r0,|L1.8130|
001f46  484b              LDR      r0,|L1.8308|
001f48  6840              LDR      r0,[r0,#4]  ; set_time
001f4a  bbd0              CBNZ     r0,|L1.8130|
001f4c  eb0400c4          ADD      r0,r4,r4,LSL #3
001f50  eb001004          ADD      r0,r0,r4,LSL #4
001f54  494f              LDR      r1,|L1.8340|
001f56  eb010080          ADD      r0,r1,r0,LSL #2
001f5a  f890005c          LDRB     r0,[r0,#0x5c]
001f5e  2818              CMP      r0,#0x18
001f60  d12f              BNE      |L1.8130|
                  |L1.8034|
;;;1266               {
;;;1267                   App_printf("\r\nthe %d10 end\r\n", i);
001f62  4621              MOV      r1,r4
001f64  a04c              ADR      r0,|L1.8344|
001f66  f7fffffe          BL       App_printf
;;;1268                   Monitor.usage_diagram_count--;
001f6a  4848              LDR      r0,|L1.8332|
001f6c  f89000c8          LDRB     r0,[r0,#0xc8]  ; Monitor
001f70  1e40              SUBS     r0,r0,#1
001f72  4946              LDR      r1,|L1.8332|
001f74  f88100c8          STRB     r0,[r1,#0xc8]
;;;1269                   Monitor.end[i][9]=1;
001f78  2101              MOVS     r1,#1
001f7a  eb040284          ADD      r2,r4,r4,LSL #2
001f7e  4843              LDR      r0,|L1.8332|
001f80  3064              ADDS     r0,r0,#0x64
001f82  eb000042          ADD      r0,r0,r2,LSL #1
001f86  7241              STRB     r1,[r0,#9]
;;;1270                   Monitor.start[i][9]=0;
001f88  2000              MOVS     r0,#0
001f8a  eb040184          ADD      r1,r4,r4,LSL #2
001f8e  4a3f              LDR      r2,|L1.8332|
001f90  eb020141          ADD      r1,r2,r1,LSL #1
001f94  7248              STRB     r0,[r1,#9]
;;;1271                   if(Run_Diagram_data.mode=='1')
001f96  483e              LDR      r0,|L1.8336|
001f98  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001f9a  2831              CMP      r0,#0x31
001f9c  d107              BNE      |L1.8110|
;;;1272                   {
;;;1273                       Run_Diagram_data.mode='0';
001f9e  2030              MOVS     r0,#0x30
001fa0  493b              LDR      r1,|L1.8336|
001fa2  7008              STRB     r0,[r1,#0]
;;;1274                       //固频时，时间到，停止即可
;;;1275                       memset(Run_Diagram_data.Freq,0,12);//清零
001fa4  1c48              ADDS     r0,r1,#1
001fa6  2100              MOVS     r1,#0
001fa8  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
001faa  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
001fac  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
                  |L1.8110|
;;;1276                   }
;;;1277                   if(Run_Diagram_data.mode=='2')
001fae  4838              LDR      r0,|L1.8336|
001fb0  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001fb2  2832              CMP      r0,#0x32
001fb4  d11c              BNE      |L1.8176|
;;;1278                   {
;;;1279                       Run_Diagram_data.mode='1';
001fb6  2031              MOVS     r0,#0x31
001fb8  4935              LDR      r1,|L1.8336|
001fba  7008              STRB     r0,[r1,#0]
;;;1280                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq10,4)==0)   //踢出第一个
001fbc  eb0400c4          ADD      r0,r4,r4,LSL #3
001fc0  e000              B        |L1.8132|
                  |L1.8130|
001fc2  e03a              B        |L1.8250|
                  |L1.8132|
001fc4  eb001004          ADD      r0,r0,r4,LSL #4
001fc8  4a32              LDR      r2,|L1.8340|
001fca  eb020080          ADD      r0,r2,r0,LSL #2
001fce  f100015f          ADD      r1,r0,#0x5f
001fd2  2204              MOVS     r2,#4
001fd4  482e              LDR      r0,|L1.8336|
001fd6  1c40              ADDS     r0,r0,#1
001fd8  f7fffffe          BL       memcmp
001fdc  b940              CBNZ     r0,|L1.8176|
;;;1281                       {
;;;1282                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
001fde  482c              LDR      r0,|L1.8336|
001fe0  7940              LDRB     r0,[r0,#5]
001fe2  492b              LDR      r1,|L1.8336|
001fe4  7048              STRB     r0,[r1,#1]
;;;1283                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
001fe6  4608              MOV      r0,r1
001fe8  7981              LDRB     r1,[r0,#6]
001fea  7081              STRB     r1,[r0,#2]
;;;1284                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
001fec  79c1              LDRB     r1,[r0,#7]
001fee  70c1              STRB     r1,[r0,#3]
                  |L1.8176|
;;;1285                           //最后1byte都为0，所以不处理
;;;1286                       }
;;;1287                       //如果是踢出第二个，不需要做处理了
;;;1288                   }
;;;1289                   if(Run_Diagram_data.mode=='3')
001ff0  4827              LDR      r0,|L1.8336|
001ff2  7800              LDRB     r0,[r0,#0]  ; Run_Diagram_data
001ff4  2833              CMP      r0,#0x33
001ff6  d137              BNE      |L1.8296|
;;;1290                   {
;;;1291                       Run_Diagram_data.mode='2';
001ff8  2032              MOVS     r0,#0x32
001ffa  4925              LDR      r1,|L1.8336|
001ffc  7008              STRB     r0,[r1,#0]
;;;1292                       if(memcmp(Run_Diagram_data.Freq,Run_Diagram_buf[i].Frq10,4)==0)   //踢出第一个
001ffe  eb0400c4          ADD      r0,r4,r4,LSL #3
002002  eb001004          ADD      r0,r0,r4,LSL #4
002006  4a23              LDR      r2,|L1.8340|
002008  eb020080          ADD      r0,r2,r0,LSL #2
00200c  f100015f          ADD      r1,r0,#0x5f
002010  2204              MOVS     r2,#4
002012  481f              LDR      r0,|L1.8336|
002014  1c40              ADDS     r0,r0,#1
002016  f7fffffe          BL       memcmp
00201a  b978              CBNZ     r0,|L1.8252|
;;;1293                       {
;;;1294                           Run_Diagram_data.Freq[0]=Run_Diagram_data.Freq[4];
00201c  481c              LDR      r0,|L1.8336|
00201e  7940              LDRB     r0,[r0,#5]
002020  491b              LDR      r1,|L1.8336|
002022  7048              STRB     r0,[r1,#1]
;;;1295                           Run_Diagram_data.Freq[1]=Run_Diagram_data.Freq[5];
002024  4608              MOV      r0,r1
002026  7981              LDRB     r1,[r0,#6]
002028  7081              STRB     r1,[r0,#2]
;;;1296                           Run_Diagram_data.Freq[2]=Run_Diagram_data.Freq[6];
00202a  79c1              LDRB     r1,[r0,#7]
00202c  70c1              STRB     r1,[r0,#3]
;;;1297                           //最后1byte都为0，所以不处理
;;;1298                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
00202e  7a41              LDRB     r1,[r0,#9]
002030  7141              STRB     r1,[r0,#5]
;;;1299                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
002032  7a81              LDRB     r1,[r0,#0xa]
002034  7181              STRB     r1,[r0,#6]
;;;1300                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
002036  7ac1              LDRB     r1,[r0,#0xb]
002038  71c1              STRB     r1,[r0,#7]
                  |L1.8250|
00203a  e015              B        |L1.8296|
                  |L1.8252|
;;;1301                       }
;;;1302                       else if(memcmp((uint8_t *)(Run_Diagram_data.Freq)+4,Run_Diagram_buf[i].Frq10,4)==0)     //踢出第二个
00203c  eb0400c4          ADD      r0,r4,r4,LSL #3
002040  eb001004          ADD      r0,r0,r4,LSL #4
002044  4a13              LDR      r2,|L1.8340|
002046  eb020080          ADD      r0,r2,r0,LSL #2
00204a  f100015f          ADD      r1,r0,#0x5f
00204e  2204              MOVS     r2,#4
002050  480f              LDR      r0,|L1.8336|
002052  1d40              ADDS     r0,r0,#5
002054  f7fffffe          BL       memcmp
002058  b930              CBNZ     r0,|L1.8296|
;;;1303                       {
;;;1304                           //最后1byte都为0，所以不处理
;;;1305                           Run_Diagram_data.Freq[4]=Run_Diagram_data.Freq[8];
00205a  480d              LDR      r0,|L1.8336|
00205c  7a41              LDRB     r1,[r0,#9]
00205e  7141              STRB     r1,[r0,#5]
;;;1306                           Run_Diagram_data.Freq[5]=Run_Diagram_data.Freq[9];
002060  7a81              LDRB     r1,[r0,#0xa]
002062  7181              STRB     r1,[r0,#6]
;;;1307                           Run_Diagram_data.Freq[6]=Run_Diagram_data.Freq[10];
002064  7ac1              LDRB     r1,[r0,#0xb]
002066  71c1              STRB     r1,[r0,#7]
                  |L1.8296|
002068  1c64              ADDS     r4,r4,#1              ;490
                  |L1.8298|
00206a  42ac              CMP      r4,r5                 ;490
00206c  f6fdafcd          BLT      |L1.10|
;;;1308                       }
;;;1309                       //如果是踢出第三个，不需要做处理了
;;;1310                   }
;;;1311               }
;;;1312           }
;;;1313       }
;;;1314   
;;;1315       return 0;
002070  2000              MOVS     r0,#0
;;;1316   }
002072  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.8308|
                          DCD      set_time
                  |L1.8312|
002078  0d0a7468          DCB      "\r\nthe %d10 start\r\n",0
00207c  65202564
002080  31302073
002084  74617274
002088  0d0a00  
00208b  00                DCB      0
                  |L1.8332|
                          DCD      Monitor
                  |L1.8336|
                          DCD      Run_Diagram_data
                  |L1.8340|
                          DCD      Run_Diagram_buf
                  |L1.8344|
002098  0d0a7468          DCB      "\r\nthe %d10 end\r\n",0
00209c  65202564
0020a0  31302065
0020a4  6e640d0a
0020a8  00      
0020a9  00                DCB      0
0020aa  00                DCB      0
0020ab  00                DCB      0

                          AREA ||i.juge_need_close||, CODE, READONLY, ALIGN=2

                  juge_need_close PROC
;;;255    /*判断是否需要关机*/
;;;256    void juge_need_close(uint8_t Save_count)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;257    {
000004  4680              MOV      r8,r0
;;;258        uint8_t i = 0;
000006  2500              MOVS     r5,#0
;;;259        uint8_t j = 0;
000008  2700              MOVS     r7,#0
;;;260        uint32_t min;					//实时时间
;;;261        uint32_t run_diagram_min_start;	//运行图开始时间
;;;262    	
;;;263        update_RTCtime( (RTC_GetCounter()+g_stamp_distance), &set_time );	//将时间戳转换为年月日set_time
00000a  f7fffffe          BL       RTC_GetCounter
00000e  49fe              LDR      r1,|L2.1032|
000010  6809              LDR      r1,[r1,#0]  ; g_stamp_distance
000012  eb000901          ADD      r9,r0,r1
000016  49fd              LDR      r1,|L2.1036|
000018  4648              MOV      r0,r9
00001a  f7fffffe          BL       update_RTCtime
;;;264        min=set_time.tm_hour*60+set_time.tm_min;
00001e  48fb              LDR      r0,|L2.1036|
000020  6840              LDR      r0,[r0,#4]  ; set_time
000022  49fa              LDR      r1,|L2.1036|
000024  6889              LDR      r1,[r1,#8]  ; set_time
000026  ebc11101          RSB      r1,r1,r1,LSL #4
00002a  eb000681          ADD      r6,r0,r1,LSL #2
;;;265    	if( min < BEFOREHAND_OPEN_TIME )
00002e  2e05              CMP      r6,#5
000030  d201              BCS      |L2.54|
;;;266    		min += 24*60;
000032  f50666b4          ADD      r6,r6,#0x5a0
                  |L2.54|
;;;267    	
;;;268        /*------------------------------------------是否需要中场休息--关机------------------------------------------*/
;;;269    	for(i=0; i<Save_count; i++)
000036  2500              MOVS     r5,#0
000038  e19a              B        |L2.880|
                  |L2.58|
;;;270    	{
;;;271    		for(j=0; j<10; j++)
00003a  2700              MOVS     r7,#0
00003c  e193              B        |L2.870|
                  |L2.62|
;;;272    		{
;;;273    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time1[0]*60+Run_Diagram_buf[i].Start_Time1[1];	//如果是无效数据，即0xFF，不可能会开机
00003e  eb0500c5          ADD      r0,r5,r5,LSL #3
000042  eb001005          ADD      r0,r0,r5,LSL #4
000046  49f2              LDR      r1,|L2.1040|
000048  eb010080          ADD      r0,r1,r0,LSL #2
00004c  7840              LDRB     r0,[r0,#1]
00004e  eb0501c5          ADD      r1,r5,r5,LSL #3
000052  eb011105          ADD      r1,r1,r5,LSL #4
000056  4aee              LDR      r2,|L2.1040|
000058  f8121021          LDRB     r1,[r2,r1,LSL #2]
00005c  ebc11101          RSB      r1,r1,r1,LSL #4
000060  eb000481          ADD      r4,r0,r1,LSL #2
;;;274    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
000064  2c05              CMP      r4,#5
000066  d201              BCS      |L2.108|
;;;275    				run_diagram_min_start += 24*60;
000068  f50464b4          ADD      r4,r4,#0x5a0
                  |L2.108|
;;;276    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
00006c  f24050a5          MOV      r0,#0x5a5
000070  4284              CMP      r4,r0
000072  d80b              BHI      |L2.140|
000074  1d70              ADDS     r0,r6,#5
000076  42a0              CMP      r0,r4
000078  d808              BHI      |L2.140|
;;;277    			{
;;;278    				Monitor.need_open=0;
00007a  2000              MOVS     r0,#0
00007c  49e5              LDR      r1,|L2.1044|
00007e  f88100cb          STRB     r0,[r1,#0xcb]
;;;279    				Monitor.need_close=1;	/*需要关机*/
000082  2001              MOVS     r0,#1
000084  f88100cc          STRB     r0,[r1,#0xcc]
                  |L2.136|
;;;280    				return;
;;;281    			}
;;;282    
;;;283    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time2[0]*60+Run_Diagram_buf[i].Start_Time2[1];
;;;284    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;285    				run_diagram_min_start += 24*60;
;;;286    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;287    			{
;;;288    				Monitor.need_open=0;
;;;289    				Monitor.need_close=1;	/*需要关机*/
;;;290    				return;
;;;291    			}
;;;292    
;;;293    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time3[0]*60+Run_Diagram_buf[i].Start_Time3[1];
;;;294    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;295    				run_diagram_min_start += 24*60;
;;;296    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;297    			{
;;;298    				Monitor.need_open=0;
;;;299    				Monitor.need_close=1;	/*需要关机*/
;;;300    				return;
;;;301    			}
;;;302    
;;;303    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time4[0]*60+Run_Diagram_buf[i].Start_Time4[1];
;;;304    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;305    				run_diagram_min_start += 24*60;
;;;306    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;307    			{
;;;308    				Monitor.need_open=0;
;;;309    				Monitor.need_close=1;	/*需要关机*/
;;;310    				return;
;;;311    			}
;;;312    
;;;313    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time5[0]*60+Run_Diagram_buf[i].Start_Time5[1];
;;;314    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;315    				run_diagram_min_start += 24*60;
;;;316    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;317    			{
;;;318    				Monitor.need_open=0;
;;;319    				Monitor.need_close=1;	/*需要关机*/
;;;320    				return;
;;;321    			}
;;;322    
;;;323    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time6[0]*60+Run_Diagram_buf[i].Start_Time6[1];
;;;324    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;325    				run_diagram_min_start += 24*60;
;;;326    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;327    			{
;;;328    				Monitor.need_open=0;
;;;329    				Monitor.need_close=1;	/*需要关机*/
;;;330    				return;
;;;331    			}
;;;332    
;;;333    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time7[0]*60+Run_Diagram_buf[i].Start_Time7[1];
;;;334    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;335    				run_diagram_min_start += 24*60;
;;;336    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;337    			{
;;;338    				Monitor.need_open=0;
;;;339    				Monitor.need_close=1;	/*需要关机*/
;;;340    				return;
;;;341    			}
;;;342    
;;;343    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time8[0]*60+Run_Diagram_buf[i].Start_Time8[1];
;;;344    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;345    				run_diagram_min_start += 24*60;
;;;346    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;347    			{
;;;348    				Monitor.need_open=0;
;;;349    				Monitor.need_close=1;	/*需要关机*/
;;;350    				return;
;;;351    			}
;;;352    
;;;353    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time9[0]*60+Run_Diagram_buf[i].Start_Time9[1];
;;;354    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;355    				run_diagram_min_start += 24*60;
;;;356    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;357    			{
;;;358    				Monitor.need_open=0;
;;;359    				Monitor.need_close=1;	/*需要关机*/
;;;360    				return;
;;;361    			}
;;;362    
;;;363    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time10[0]*60+Run_Diagram_buf[i].Start_Time10[1];
;;;364    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;365    				run_diagram_min_start += 24*60;
;;;366    			if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) && ( (min + BEFOREHAND_OPEN_TIME) <= run_diagram_min_start) )		//运行图开始时间小于提前开机时间+24*60，即有效数据，并且现在时间+提前开机时间小于运行图开始时间
;;;367    			{
;;;368    				Monitor.need_open=0;
;;;369    				Monitor.need_close=1;	/*需要关机*/
;;;370    				return;
;;;371    			}
;;;372    		}
;;;373    	}
;;;374    
;;;375        /*-------------------------------------------是否没有任务--关机---------------------------------------------*/
;;;376        if( Monitor.need_close == 0x00 )
;;;377        {
;;;378            for(i=0; i<Save_count; i++)
;;;379            {
;;;380                for(j=0; j<10; j++)
;;;381                {
;;;382                    run_diagram_min_start	= Run_Diagram_buf[i].Start_Time1[0]*60+Run_Diagram_buf[i].Start_Time1[1];	//如果是无效数据，即0xFF，不可能会开机
;;;383    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;384    					run_diagram_min_start += 24*60;
;;;385    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;386    				{
;;;387    					Monitor.need_open=0;
;;;388    					Monitor.need_close=1;	/*需要关机*/
;;;389    					return;
;;;390    				}
;;;391    
;;;392    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time2[0]*60+Run_Diagram_buf[i].Start_Time2[1];
;;;393    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;394    					run_diagram_min_start += 24*60;
;;;395    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;396    				{
;;;397    					Monitor.need_open=0;
;;;398    					Monitor.need_close=1;	/*需要关机*/
;;;399    					return;
;;;400    				}
;;;401    
;;;402    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time3[0]*60+Run_Diagram_buf[i].Start_Time3[1];
;;;403    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;404    					run_diagram_min_start += 24*60;
;;;405    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;406    				{
;;;407    					Monitor.need_open=0;
;;;408    					Monitor.need_close=1;	/*需要关机*/
;;;409    					return;
;;;410    				}
;;;411    
;;;412    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time4[0]*60+Run_Diagram_buf[i].Start_Time4[1];
;;;413    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;414    					run_diagram_min_start += 24*60;
;;;415    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;416    				{
;;;417    					Monitor.need_open=0;
;;;418    					Monitor.need_close=1;	/*需要关机*/
;;;419    					return;
;;;420    				}
;;;421    
;;;422    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time5[0]*60+Run_Diagram_buf[i].Start_Time5[1];
;;;423    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;424    					run_diagram_min_start += 24*60;
;;;425    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;426    				{
;;;427    					Monitor.need_open=0;
;;;428    					Monitor.need_close=1;	/*需要关机*/
;;;429    					return;
;;;430    				}
;;;431    
;;;432    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time6[0]*60+Run_Diagram_buf[i].Start_Time6[1];
;;;433    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;434    					run_diagram_min_start += 24*60;
;;;435    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;436    				{
;;;437    					Monitor.need_open=0;
;;;438    					Monitor.need_close=1;	/*需要关机*/
;;;439    					return;
;;;440    				}
;;;441    
;;;442    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time7[0]*60+Run_Diagram_buf[i].Start_Time7[1];
;;;443    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;444    					run_diagram_min_start += 24*60;
;;;445    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;446    				{
;;;447    					Monitor.need_open=0;
;;;448    					Monitor.need_close=1;	/*需要关机*/
;;;449    					return;
;;;450    				}
;;;451    
;;;452    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time8[0]*60+Run_Diagram_buf[i].Start_Time8[1];
;;;453    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;454    					run_diagram_min_start += 24*60;
;;;455    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;456    				{
;;;457    					Monitor.need_open=0;
;;;458    					Monitor.need_close=1;	/*需要关机*/
;;;459    					return;
;;;460    				}
;;;461    
;;;462    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time9[0]*60+Run_Diagram_buf[i].Start_Time9[1];
;;;463    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;464    					run_diagram_min_start += 24*60;
;;;465    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;466    				{
;;;467    					Monitor.need_open=0;
;;;468    					Monitor.need_close=1;	/*需要关机*/
;;;469    					return;
;;;470    				}
;;;471    
;;;472    				run_diagram_min_start	= Run_Diagram_buf[i].Start_Time10[0]*60+Run_Diagram_buf[i].Start_Time10[1];
;;;473    				if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;474    					run_diagram_min_start += 24*60;
;;;475    				if( (run_diagram_min_start <= BEFOREHAND_OPEN_TIME + 24*60) )										//无效数据
;;;476    				{
;;;477    					Monitor.need_open=0;
;;;478    					Monitor.need_close=1;	/*需要关机*/
;;;479    					return;
;;;480    				}
;;;481                }
;;;482            }
;;;483        }
;;;484    
;;;485    }
000088  e8bd87f0          POP      {r4-r10,pc}
                  |L2.140|
00008c  eb0500c5          ADD      r0,r5,r5,LSL #3       ;283
000090  eb001005          ADD      r0,r0,r5,LSL #4       ;283
000094  49de              LDR      r1,|L2.1040|
000096  eb010080          ADD      r0,r1,r0,LSL #2       ;283
00009a  7ac0              LDRB     r0,[r0,#0xb]          ;283
00009c  eb0501c5          ADD      r1,r5,r5,LSL #3       ;283
0000a0  eb011105          ADD      r1,r1,r5,LSL #4       ;283
0000a4  4ada              LDR      r2,|L2.1040|
0000a6  eb020181          ADD      r1,r2,r1,LSL #2       ;283
0000aa  7a89              LDRB     r1,[r1,#0xa]          ;283
0000ac  ebc11101          RSB      r1,r1,r1,LSL #4       ;283
0000b0  eb000481          ADD      r4,r0,r1,LSL #2       ;283
0000b4  2c05              CMP      r4,#5                 ;284
0000b6  d201              BCS      |L2.188|
0000b8  f50464b4          ADD      r4,r4,#0x5a0          ;285
                  |L2.188|
0000bc  f24050a5          MOV      r0,#0x5a5             ;286
0000c0  4284              CMP      r4,r0                 ;286
0000c2  d80a              BHI      |L2.218|
0000c4  1d70              ADDS     r0,r6,#5              ;286
0000c6  42a0              CMP      r0,r4                 ;286
0000c8  d807              BHI      |L2.218|
0000ca  2000              MOVS     r0,#0                 ;288
0000cc  49d1              LDR      r1,|L2.1044|
0000ce  f88100cb          STRB     r0,[r1,#0xcb]         ;288
0000d2  2001              MOVS     r0,#1                 ;289
0000d4  f88100cc          STRB     r0,[r1,#0xcc]         ;289
0000d8  e7d6              B        |L2.136|
                  |L2.218|
0000da  eb0500c5          ADD      r0,r5,r5,LSL #3       ;293
0000de  eb001005          ADD      r0,r0,r5,LSL #4       ;293
0000e2  49cb              LDR      r1,|L2.1040|
0000e4  eb010080          ADD      r0,r1,r0,LSL #2       ;293
0000e8  7d40              LDRB     r0,[r0,#0x15]         ;293
0000ea  eb0501c5          ADD      r1,r5,r5,LSL #3       ;293
0000ee  eb011105          ADD      r1,r1,r5,LSL #4       ;293
0000f2  4ac7              LDR      r2,|L2.1040|
0000f4  eb020181          ADD      r1,r2,r1,LSL #2       ;293
0000f8  7d09              LDRB     r1,[r1,#0x14]         ;293
0000fa  ebc11101          RSB      r1,r1,r1,LSL #4       ;293
0000fe  eb000481          ADD      r4,r0,r1,LSL #2       ;293
000102  2c05              CMP      r4,#5                 ;294
000104  d201              BCS      |L2.266|
000106  f50464b4          ADD      r4,r4,#0x5a0          ;295
                  |L2.266|
00010a  f24050a5          MOV      r0,#0x5a5             ;296
00010e  4284              CMP      r4,r0                 ;296
000110  d80a              BHI      |L2.296|
000112  1d70              ADDS     r0,r6,#5              ;296
000114  42a0              CMP      r0,r4                 ;296
000116  d807              BHI      |L2.296|
000118  2000              MOVS     r0,#0                 ;298
00011a  49be              LDR      r1,|L2.1044|
00011c  f88100cb          STRB     r0,[r1,#0xcb]         ;298
000120  2001              MOVS     r0,#1                 ;299
000122  f88100cc          STRB     r0,[r1,#0xcc]         ;299
000126  e7af              B        |L2.136|
                  |L2.296|
000128  eb0500c5          ADD      r0,r5,r5,LSL #3       ;303
00012c  eb001005          ADD      r0,r0,r5,LSL #4       ;303
000130  49b7              LDR      r1,|L2.1040|
000132  eb010080          ADD      r0,r1,r0,LSL #2       ;303
000136  7fc0              LDRB     r0,[r0,#0x1f]         ;303
000138  eb0501c5          ADD      r1,r5,r5,LSL #3       ;303
00013c  eb011105          ADD      r1,r1,r5,LSL #4       ;303
000140  4ab3              LDR      r2,|L2.1040|
000142  eb020181          ADD      r1,r2,r1,LSL #2       ;303
000146  7f89              LDRB     r1,[r1,#0x1e]         ;303
000148  ebc11101          RSB      r1,r1,r1,LSL #4       ;303
00014c  eb000481          ADD      r4,r0,r1,LSL #2       ;303
000150  2c05              CMP      r4,#5                 ;304
000152  d201              BCS      |L2.344|
000154  f50464b4          ADD      r4,r4,#0x5a0          ;305
                  |L2.344|
000158  f24050a5          MOV      r0,#0x5a5             ;306
00015c  4284              CMP      r4,r0                 ;306
00015e  d80a              BHI      |L2.374|
000160  1d70              ADDS     r0,r6,#5              ;306
000162  42a0              CMP      r0,r4                 ;306
000164  d807              BHI      |L2.374|
000166  2000              MOVS     r0,#0                 ;308
000168  49aa              LDR      r1,|L2.1044|
00016a  f88100cb          STRB     r0,[r1,#0xcb]         ;308
00016e  2001              MOVS     r0,#1                 ;309
000170  f88100cc          STRB     r0,[r1,#0xcc]         ;309
000174  e788              B        |L2.136|
                  |L2.374|
000176  eb0500c5          ADD      r0,r5,r5,LSL #3       ;313
00017a  eb001005          ADD      r0,r0,r5,LSL #4       ;313
00017e  49a4              LDR      r1,|L2.1040|
000180  eb010080          ADD      r0,r1,r0,LSL #2       ;313
000184  f8900029          LDRB     r0,[r0,#0x29]         ;313
000188  eb0501c5          ADD      r1,r5,r5,LSL #3       ;313
00018c  eb011105          ADD      r1,r1,r5,LSL #4       ;313
000190  4a9f              LDR      r2,|L2.1040|
000192  eb020181          ADD      r1,r2,r1,LSL #2       ;313
000196  f8911028          LDRB     r1,[r1,#0x28]         ;313
00019a  ebc11101          RSB      r1,r1,r1,LSL #4       ;313
00019e  eb000481          ADD      r4,r0,r1,LSL #2       ;313
0001a2  2c05              CMP      r4,#5                 ;314
0001a4  d201              BCS      |L2.426|
0001a6  f50464b4          ADD      r4,r4,#0x5a0          ;315
                  |L2.426|
0001aa  f24050a5          MOV      r0,#0x5a5             ;316
0001ae  4284              CMP      r4,r0                 ;316
0001b0  d80a              BHI      |L2.456|
0001b2  1d70              ADDS     r0,r6,#5              ;316
0001b4  42a0              CMP      r0,r4                 ;316
0001b6  d807              BHI      |L2.456|
0001b8  2000              MOVS     r0,#0                 ;318
0001ba  4996              LDR      r1,|L2.1044|
0001bc  f88100cb          STRB     r0,[r1,#0xcb]         ;318
0001c0  2001              MOVS     r0,#1                 ;319
0001c2  f88100cc          STRB     r0,[r1,#0xcc]         ;319
0001c6  e75f              B        |L2.136|
                  |L2.456|
0001c8  eb0500c5          ADD      r0,r5,r5,LSL #3       ;323
0001cc  eb001005          ADD      r0,r0,r5,LSL #4       ;323
0001d0  498f              LDR      r1,|L2.1040|
0001d2  eb010080          ADD      r0,r1,r0,LSL #2       ;323
0001d6  f8900033          LDRB     r0,[r0,#0x33]         ;323
0001da  eb0501c5          ADD      r1,r5,r5,LSL #3       ;323
0001de  eb011105          ADD      r1,r1,r5,LSL #4       ;323
0001e2  4a8b              LDR      r2,|L2.1040|
0001e4  eb020181          ADD      r1,r2,r1,LSL #2       ;323
0001e8  f8911032          LDRB     r1,[r1,#0x32]         ;323
0001ec  ebc11101          RSB      r1,r1,r1,LSL #4       ;323
0001f0  eb000481          ADD      r4,r0,r1,LSL #2       ;323
0001f4  2c05              CMP      r4,#5                 ;324
0001f6  d201              BCS      |L2.508|
0001f8  f50464b4          ADD      r4,r4,#0x5a0          ;325
                  |L2.508|
0001fc  f24050a5          MOV      r0,#0x5a5             ;326
000200  4284              CMP      r4,r0                 ;326
000202  d80a              BHI      |L2.538|
000204  1d70              ADDS     r0,r6,#5              ;326
000206  42a0              CMP      r0,r4                 ;326
000208  d807              BHI      |L2.538|
00020a  2000              MOVS     r0,#0                 ;328
00020c  4981              LDR      r1,|L2.1044|
00020e  f88100cb          STRB     r0,[r1,#0xcb]         ;328
000212  2001              MOVS     r0,#1                 ;329
000214  f88100cc          STRB     r0,[r1,#0xcc]         ;329
000218  e736              B        |L2.136|
                  |L2.538|
00021a  eb0500c5          ADD      r0,r5,r5,LSL #3       ;333
00021e  eb001005          ADD      r0,r0,r5,LSL #4       ;333
000222  497b              LDR      r1,|L2.1040|
000224  eb010080          ADD      r0,r1,r0,LSL #2       ;333
000228  f890003d          LDRB     r0,[r0,#0x3d]         ;333
00022c  eb0501c5          ADD      r1,r5,r5,LSL #3       ;333
000230  eb011105          ADD      r1,r1,r5,LSL #4       ;333
000234  4a76              LDR      r2,|L2.1040|
000236  eb020181          ADD      r1,r2,r1,LSL #2       ;333
00023a  f891103c          LDRB     r1,[r1,#0x3c]         ;333
00023e  ebc11101          RSB      r1,r1,r1,LSL #4       ;333
000242  eb000481          ADD      r4,r0,r1,LSL #2       ;333
000246  2c05              CMP      r4,#5                 ;334
000248  d201              BCS      |L2.590|
00024a  f50464b4          ADD      r4,r4,#0x5a0          ;335
                  |L2.590|
00024e  f24050a5          MOV      r0,#0x5a5             ;336
000252  4284              CMP      r4,r0                 ;336
000254  d80a              BHI      |L2.620|
000256  1d70              ADDS     r0,r6,#5              ;336
000258  42a0              CMP      r0,r4                 ;336
00025a  d807              BHI      |L2.620|
00025c  2000              MOVS     r0,#0                 ;338
00025e  496d              LDR      r1,|L2.1044|
000260  f88100cb          STRB     r0,[r1,#0xcb]         ;338
000264  2001              MOVS     r0,#1                 ;339
000266  f88100cc          STRB     r0,[r1,#0xcc]         ;339
00026a  e70d              B        |L2.136|
                  |L2.620|
00026c  eb0500c5          ADD      r0,r5,r5,LSL #3       ;343
000270  eb001005          ADD      r0,r0,r5,LSL #4       ;343
000274  4966              LDR      r1,|L2.1040|
000276  eb010080          ADD      r0,r1,r0,LSL #2       ;343
00027a  f8900047          LDRB     r0,[r0,#0x47]         ;343
00027e  eb0501c5          ADD      r1,r5,r5,LSL #3       ;343
000282  eb011105          ADD      r1,r1,r5,LSL #4       ;343
000286  4a62              LDR      r2,|L2.1040|
000288  eb020181          ADD      r1,r2,r1,LSL #2       ;343
00028c  f8911046          LDRB     r1,[r1,#0x46]         ;343
000290  ebc11101          RSB      r1,r1,r1,LSL #4       ;343
000294  eb000481          ADD      r4,r0,r1,LSL #2       ;343
000298  2c05              CMP      r4,#5                 ;344
00029a  d201              BCS      |L2.672|
00029c  f50464b4          ADD      r4,r4,#0x5a0          ;345
                  |L2.672|
0002a0  f24050a5          MOV      r0,#0x5a5             ;346
0002a4  4284              CMP      r4,r0                 ;346
0002a6  d80a              BHI      |L2.702|
0002a8  1d70              ADDS     r0,r6,#5              ;346
0002aa  42a0              CMP      r0,r4                 ;346
0002ac  d807              BHI      |L2.702|
0002ae  2000              MOVS     r0,#0                 ;348
0002b0  4958              LDR      r1,|L2.1044|
0002b2  f88100cb          STRB     r0,[r1,#0xcb]         ;348
0002b6  2001              MOVS     r0,#1                 ;349
0002b8  f88100cc          STRB     r0,[r1,#0xcc]         ;349
0002bc  e6e4              B        |L2.136|
                  |L2.702|
0002be  eb0500c5          ADD      r0,r5,r5,LSL #3       ;353
0002c2  eb001005          ADD      r0,r0,r5,LSL #4       ;353
0002c6  4952              LDR      r1,|L2.1040|
0002c8  eb010080          ADD      r0,r1,r0,LSL #2       ;353
0002cc  f8900051          LDRB     r0,[r0,#0x51]         ;353
0002d0  eb0501c5          ADD      r1,r5,r5,LSL #3       ;353
0002d4  eb011105          ADD      r1,r1,r5,LSL #4       ;353
0002d8  4a4d              LDR      r2,|L2.1040|
0002da  eb020181          ADD      r1,r2,r1,LSL #2       ;353
0002de  f8911050          LDRB     r1,[r1,#0x50]         ;353
0002e2  ebc11101          RSB      r1,r1,r1,LSL #4       ;353
0002e6  eb000481          ADD      r4,r0,r1,LSL #2       ;353
0002ea  2c05              CMP      r4,#5                 ;354
0002ec  d201              BCS      |L2.754|
0002ee  f50464b4          ADD      r4,r4,#0x5a0          ;355
                  |L2.754|
0002f2  f24050a5          MOV      r0,#0x5a5             ;356
0002f6  4284              CMP      r4,r0                 ;356
0002f8  d80a              BHI      |L2.784|
0002fa  1d70              ADDS     r0,r6,#5              ;356
0002fc  42a0              CMP      r0,r4                 ;356
0002fe  d807              BHI      |L2.784|
000300  2000              MOVS     r0,#0                 ;358
000302  4944              LDR      r1,|L2.1044|
000304  f88100cb          STRB     r0,[r1,#0xcb]         ;358
000308  2001              MOVS     r0,#1                 ;359
00030a  f88100cc          STRB     r0,[r1,#0xcc]         ;359
00030e  e6bb              B        |L2.136|
                  |L2.784|
000310  eb0500c5          ADD      r0,r5,r5,LSL #3       ;363
000314  eb001005          ADD      r0,r0,r5,LSL #4       ;363
000318  493d              LDR      r1,|L2.1040|
00031a  eb010080          ADD      r0,r1,r0,LSL #2       ;363
00031e  f890005b          LDRB     r0,[r0,#0x5b]         ;363
000322  eb0501c5          ADD      r1,r5,r5,LSL #3       ;363
000326  eb011105          ADD      r1,r1,r5,LSL #4       ;363
00032a  4a39              LDR      r2,|L2.1040|
00032c  eb020181          ADD      r1,r2,r1,LSL #2       ;363
000330  f891105a          LDRB     r1,[r1,#0x5a]         ;363
000334  ebc11101          RSB      r1,r1,r1,LSL #4       ;363
000338  eb000481          ADD      r4,r0,r1,LSL #2       ;363
00033c  2c05              CMP      r4,#5                 ;364
00033e  d201              BCS      |L2.836|
000340  f50464b4          ADD      r4,r4,#0x5a0          ;365
                  |L2.836|
000344  f24050a5          MOV      r0,#0x5a5             ;366
000348  4284              CMP      r4,r0                 ;366
00034a  d80a              BHI      |L2.866|
00034c  1d70              ADDS     r0,r6,#5              ;366
00034e  42a0              CMP      r0,r4                 ;366
000350  d807              BHI      |L2.866|
000352  2000              MOVS     r0,#0                 ;368
000354  492f              LDR      r1,|L2.1044|
000356  f88100cb          STRB     r0,[r1,#0xcb]         ;368
00035a  2001              MOVS     r0,#1                 ;369
00035c  f88100cc          STRB     r0,[r1,#0xcc]         ;369
000360  e692              B        |L2.136|
                  |L2.866|
000362  1c78              ADDS     r0,r7,#1              ;271
000364  b2c7              UXTB     r7,r0                 ;271
                  |L2.870|
000366  2f0a              CMP      r7,#0xa               ;271
000368  f6ffae69          BLT      |L2.62|
00036c  1c68              ADDS     r0,r5,#1              ;269
00036e  b2c5              UXTB     r5,r0                 ;269
                  |L2.880|
000370  4545              CMP      r5,r8                 ;269
000372  f6ffae62          BLT      |L2.58|
000376  4827              LDR      r0,|L2.1044|
000378  f89000cc          LDRB     r0,[r0,#0xcc]         ;376  ; Monitor
00037c  2800              CMP      r0,#0                 ;376
00037e  d177              BNE      |L2.1136|
000380  2500              MOVS     r5,#0                 ;378
000382  e185              B        |L2.1680|
                  |L2.900|
000384  2700              MOVS     r7,#0                 ;380
000386  e17e              B        |L2.1670|
                  |L2.904|
000388  eb0500c5          ADD      r0,r5,r5,LSL #3       ;382
00038c  eb001005          ADD      r0,r0,r5,LSL #4       ;382
000390  491f              LDR      r1,|L2.1040|
000392  eb010080          ADD      r0,r1,r0,LSL #2       ;382
000396  7840              LDRB     r0,[r0,#1]            ;382
000398  eb0501c5          ADD      r1,r5,r5,LSL #3       ;382
00039c  eb011105          ADD      r1,r1,r5,LSL #4       ;382
0003a0  4a1b              LDR      r2,|L2.1040|
0003a2  f8121021          LDRB     r1,[r2,r1,LSL #2]     ;382
0003a6  ebc11101          RSB      r1,r1,r1,LSL #4       ;382
0003aa  eb000481          ADD      r4,r0,r1,LSL #2       ;382
0003ae  2c05              CMP      r4,#5                 ;383
0003b0  d201              BCS      |L2.950|
0003b2  f50464b4          ADD      r4,r4,#0x5a0          ;384
                  |L2.950|
0003b6  f24050a5          MOV      r0,#0x5a5             ;385
0003ba  4284              CMP      r4,r0                 ;385
0003bc  d807              BHI      |L2.974|
0003be  2000              MOVS     r0,#0                 ;387
0003c0  4914              LDR      r1,|L2.1044|
0003c2  f88100cb          STRB     r0,[r1,#0xcb]         ;387
0003c6  2001              MOVS     r0,#1                 ;388
0003c8  f88100cc          STRB     r0,[r1,#0xcc]         ;388
0003cc  e65c              B        |L2.136|
                  |L2.974|
0003ce  eb0500c5          ADD      r0,r5,r5,LSL #3       ;392
0003d2  eb001005          ADD      r0,r0,r5,LSL #4       ;392
0003d6  490e              LDR      r1,|L2.1040|
0003d8  eb010080          ADD      r0,r1,r0,LSL #2       ;392
0003dc  7ac0              LDRB     r0,[r0,#0xb]          ;392
0003de  eb0501c5          ADD      r1,r5,r5,LSL #3       ;392
0003e2  eb011105          ADD      r1,r1,r5,LSL #4       ;392
0003e6  4a0a              LDR      r2,|L2.1040|
0003e8  eb020181          ADD      r1,r2,r1,LSL #2       ;392
0003ec  7a89              LDRB     r1,[r1,#0xa]          ;392
0003ee  ebc11101          RSB      r1,r1,r1,LSL #4       ;392
0003f2  eb000481          ADD      r4,r0,r1,LSL #2       ;392
0003f6  2c05              CMP      r4,#5                 ;393
0003f8  d201              BCS      |L2.1022|
0003fa  f50464b4          ADD      r4,r4,#0x5a0          ;394
                  |L2.1022|
0003fe  f24050a5          MOV      r0,#0x5a5             ;395
000402  4284              CMP      r4,r0                 ;395
000404  d810              BHI      |L2.1064|
000406  e007              B        |L2.1048|
                  |L2.1032|
                          DCD      g_stamp_distance
                  |L2.1036|
                          DCD      set_time
                  |L2.1040|
                          DCD      Run_Diagram_buf
                  |L2.1044|
                          DCD      Monitor
                  |L2.1048|
000418  2000              MOVS     r0,#0                 ;397
00041a  49a0              LDR      r1,|L2.1692|
00041c  f88100cb          STRB     r0,[r1,#0xcb]         ;397
000420  2001              MOVS     r0,#1                 ;398
000422  f88100cc          STRB     r0,[r1,#0xcc]         ;398
000426  e62f              B        |L2.136|
                  |L2.1064|
000428  eb0500c5          ADD      r0,r5,r5,LSL #3       ;402
00042c  eb001005          ADD      r0,r0,r5,LSL #4       ;402
000430  499b              LDR      r1,|L2.1696|
000432  eb010080          ADD      r0,r1,r0,LSL #2       ;402
000436  7d40              LDRB     r0,[r0,#0x15]         ;402
000438  eb0501c5          ADD      r1,r5,r5,LSL #3       ;402
00043c  eb011105          ADD      r1,r1,r5,LSL #4       ;402
000440  4a97              LDR      r2,|L2.1696|
000442  eb020181          ADD      r1,r2,r1,LSL #2       ;402
000446  7d09              LDRB     r1,[r1,#0x14]         ;402
000448  ebc11101          RSB      r1,r1,r1,LSL #4       ;402
00044c  eb000481          ADD      r4,r0,r1,LSL #2       ;402
000450  2c05              CMP      r4,#5                 ;403
000452  d201              BCS      |L2.1112|
000454  f50464b4          ADD      r4,r4,#0x5a0          ;404
                  |L2.1112|
000458  f24050a5          MOV      r0,#0x5a5             ;405
00045c  4284              CMP      r4,r0                 ;405
00045e  d808              BHI      |L2.1138|
000460  2000              MOVS     r0,#0                 ;407
000462  498e              LDR      r1,|L2.1692|
000464  f88100cb          STRB     r0,[r1,#0xcb]         ;407
000468  2001              MOVS     r0,#1                 ;408
00046a  f88100cc          STRB     r0,[r1,#0xcc]         ;408
00046e  e60b              B        |L2.136|
                  |L2.1136|
000470  e111              B        |L2.1686|
                  |L2.1138|
000472  eb0500c5          ADD      r0,r5,r5,LSL #3       ;412
000476  eb001005          ADD      r0,r0,r5,LSL #4       ;412
00047a  4989              LDR      r1,|L2.1696|
00047c  eb010080          ADD      r0,r1,r0,LSL #2       ;412
000480  7fc0              LDRB     r0,[r0,#0x1f]         ;412
000482  eb0501c5          ADD      r1,r5,r5,LSL #3       ;412
000486  eb011105          ADD      r1,r1,r5,LSL #4       ;412
00048a  4a85              LDR      r2,|L2.1696|
00048c  eb020181          ADD      r1,r2,r1,LSL #2       ;412
000490  7f89              LDRB     r1,[r1,#0x1e]         ;412
000492  ebc11101          RSB      r1,r1,r1,LSL #4       ;412
000496  eb000481          ADD      r4,r0,r1,LSL #2       ;412
00049a  2c05              CMP      r4,#5                 ;413
00049c  d201              BCS      |L2.1186|
00049e  f50464b4          ADD      r4,r4,#0x5a0          ;414
                  |L2.1186|
0004a2  f24050a5          MOV      r0,#0x5a5             ;415
0004a6  4284              CMP      r4,r0                 ;415
0004a8  d807              BHI      |L2.1210|
0004aa  2000              MOVS     r0,#0                 ;417
0004ac  497b              LDR      r1,|L2.1692|
0004ae  f88100cb          STRB     r0,[r1,#0xcb]         ;417
0004b2  2001              MOVS     r0,#1                 ;418
0004b4  f88100cc          STRB     r0,[r1,#0xcc]         ;418
0004b8  e5e6              B        |L2.136|
                  |L2.1210|
0004ba  eb0500c5          ADD      r0,r5,r5,LSL #3       ;422
0004be  eb001005          ADD      r0,r0,r5,LSL #4       ;422
0004c2  4977              LDR      r1,|L2.1696|
0004c4  eb010080          ADD      r0,r1,r0,LSL #2       ;422
0004c8  f8900029          LDRB     r0,[r0,#0x29]         ;422
0004cc  eb0501c5          ADD      r1,r5,r5,LSL #3       ;422
0004d0  eb011105          ADD      r1,r1,r5,LSL #4       ;422
0004d4  4a72              LDR      r2,|L2.1696|
0004d6  eb020181          ADD      r1,r2,r1,LSL #2       ;422
0004da  f8911028          LDRB     r1,[r1,#0x28]         ;422
0004de  ebc11101          RSB      r1,r1,r1,LSL #4       ;422
0004e2  eb000481          ADD      r4,r0,r1,LSL #2       ;422
0004e6  2c05              CMP      r4,#5                 ;423
0004e8  d201              BCS      |L2.1262|
0004ea  f50464b4          ADD      r4,r4,#0x5a0          ;424
                  |L2.1262|
0004ee  f24050a5          MOV      r0,#0x5a5             ;425
0004f2  4284              CMP      r4,r0                 ;425
0004f4  d807              BHI      |L2.1286|
0004f6  2000              MOVS     r0,#0                 ;427
0004f8  4968              LDR      r1,|L2.1692|
0004fa  f88100cb          STRB     r0,[r1,#0xcb]         ;427
0004fe  2001              MOVS     r0,#1                 ;428
000500  f88100cc          STRB     r0,[r1,#0xcc]         ;428
000504  e5c0              B        |L2.136|
                  |L2.1286|
000506  eb0500c5          ADD      r0,r5,r5,LSL #3       ;432
00050a  eb001005          ADD      r0,r0,r5,LSL #4       ;432
00050e  4964              LDR      r1,|L2.1696|
000510  eb010080          ADD      r0,r1,r0,LSL #2       ;432
000514  f8900033          LDRB     r0,[r0,#0x33]         ;432
000518  eb0501c5          ADD      r1,r5,r5,LSL #3       ;432
00051c  eb011105          ADD      r1,r1,r5,LSL #4       ;432
000520  4a5f              LDR      r2,|L2.1696|
000522  eb020181          ADD      r1,r2,r1,LSL #2       ;432
000526  f8911032          LDRB     r1,[r1,#0x32]         ;432
00052a  ebc11101          RSB      r1,r1,r1,LSL #4       ;432
00052e  eb000481          ADD      r4,r0,r1,LSL #2       ;432
000532  2c05              CMP      r4,#5                 ;433
000534  d201              BCS      |L2.1338|
000536  f50464b4          ADD      r4,r4,#0x5a0          ;434
                  |L2.1338|
00053a  f24050a5          MOV      r0,#0x5a5             ;435
00053e  4284              CMP      r4,r0                 ;435
000540  d807              BHI      |L2.1362|
000542  2000              MOVS     r0,#0                 ;437
000544  4955              LDR      r1,|L2.1692|
000546  f88100cb          STRB     r0,[r1,#0xcb]         ;437
00054a  2001              MOVS     r0,#1                 ;438
00054c  f88100cc          STRB     r0,[r1,#0xcc]         ;438
000550  e59a              B        |L2.136|
                  |L2.1362|
000552  eb0500c5          ADD      r0,r5,r5,LSL #3       ;442
000556  eb001005          ADD      r0,r0,r5,LSL #4       ;442
00055a  4951              LDR      r1,|L2.1696|
00055c  eb010080          ADD      r0,r1,r0,LSL #2       ;442
000560  f890003d          LDRB     r0,[r0,#0x3d]         ;442
000564  eb0501c5          ADD      r1,r5,r5,LSL #3       ;442
000568  eb011105          ADD      r1,r1,r5,LSL #4       ;442
00056c  4a4c              LDR      r2,|L2.1696|
00056e  eb020181          ADD      r1,r2,r1,LSL #2       ;442
000572  f891103c          LDRB     r1,[r1,#0x3c]         ;442
000576  ebc11101          RSB      r1,r1,r1,LSL #4       ;442
00057a  eb000481          ADD      r4,r0,r1,LSL #2       ;442
00057e  2c05              CMP      r4,#5                 ;443
000580  d201              BCS      |L2.1414|
000582  f50464b4          ADD      r4,r4,#0x5a0          ;444
                  |L2.1414|
000586  f24050a5          MOV      r0,#0x5a5             ;445
00058a  4284              CMP      r4,r0                 ;445
00058c  d807              BHI      |L2.1438|
00058e  2000              MOVS     r0,#0                 ;447
000590  4942              LDR      r1,|L2.1692|
000592  f88100cb          STRB     r0,[r1,#0xcb]         ;447
000596  2001              MOVS     r0,#1                 ;448
000598  f88100cc          STRB     r0,[r1,#0xcc]         ;448
00059c  e574              B        |L2.136|
                  |L2.1438|
00059e  eb0500c5          ADD      r0,r5,r5,LSL #3       ;452
0005a2  eb001005          ADD      r0,r0,r5,LSL #4       ;452
0005a6  493e              LDR      r1,|L2.1696|
0005a8  eb010080          ADD      r0,r1,r0,LSL #2       ;452
0005ac  f8900047          LDRB     r0,[r0,#0x47]         ;452
0005b0  eb0501c5          ADD      r1,r5,r5,LSL #3       ;452
0005b4  eb011105          ADD      r1,r1,r5,LSL #4       ;452
0005b8  4a39              LDR      r2,|L2.1696|
0005ba  eb020181          ADD      r1,r2,r1,LSL #2       ;452
0005be  f8911046          LDRB     r1,[r1,#0x46]         ;452
0005c2  ebc11101          RSB      r1,r1,r1,LSL #4       ;452
0005c6  eb000481          ADD      r4,r0,r1,LSL #2       ;452
0005ca  2c05              CMP      r4,#5                 ;453
0005cc  d201              BCS      |L2.1490|
0005ce  f50464b4          ADD      r4,r4,#0x5a0          ;454
                  |L2.1490|
0005d2  f24050a5          MOV      r0,#0x5a5             ;455
0005d6  4284              CMP      r4,r0                 ;455
0005d8  d807              BHI      |L2.1514|
0005da  2000              MOVS     r0,#0                 ;457
0005dc  492f              LDR      r1,|L2.1692|
0005de  f88100cb          STRB     r0,[r1,#0xcb]         ;457
0005e2  2001              MOVS     r0,#1                 ;458
0005e4  f88100cc          STRB     r0,[r1,#0xcc]         ;458
0005e8  e54e              B        |L2.136|
                  |L2.1514|
0005ea  eb0500c5          ADD      r0,r5,r5,LSL #3       ;462
0005ee  eb001005          ADD      r0,r0,r5,LSL #4       ;462
0005f2  492b              LDR      r1,|L2.1696|
0005f4  eb010080          ADD      r0,r1,r0,LSL #2       ;462
0005f8  f8900051          LDRB     r0,[r0,#0x51]         ;462
0005fc  eb0501c5          ADD      r1,r5,r5,LSL #3       ;462
000600  eb011105          ADD      r1,r1,r5,LSL #4       ;462
000604  4a26              LDR      r2,|L2.1696|
000606  eb020181          ADD      r1,r2,r1,LSL #2       ;462
00060a  f8911050          LDRB     r1,[r1,#0x50]         ;462
00060e  ebc11101          RSB      r1,r1,r1,LSL #4       ;462
000612  eb000481          ADD      r4,r0,r1,LSL #2       ;462
000616  2c05              CMP      r4,#5                 ;463
000618  d201              BCS      |L2.1566|
00061a  f50464b4          ADD      r4,r4,#0x5a0          ;464
                  |L2.1566|
00061e  f24050a5          MOV      r0,#0x5a5             ;465
000622  4284              CMP      r4,r0                 ;465
000624  d807              BHI      |L2.1590|
000626  2000              MOVS     r0,#0                 ;467
000628  491c              LDR      r1,|L2.1692|
00062a  f88100cb          STRB     r0,[r1,#0xcb]         ;467
00062e  2001              MOVS     r0,#1                 ;468
000630  f88100cc          STRB     r0,[r1,#0xcc]         ;468
000634  e528              B        |L2.136|
                  |L2.1590|
000636  eb0500c5          ADD      r0,r5,r5,LSL #3       ;472
00063a  eb001005          ADD      r0,r0,r5,LSL #4       ;472
00063e  4918              LDR      r1,|L2.1696|
000640  eb010080          ADD      r0,r1,r0,LSL #2       ;472
000644  f890005b          LDRB     r0,[r0,#0x5b]         ;472
000648  eb0501c5          ADD      r1,r5,r5,LSL #3       ;472
00064c  eb011105          ADD      r1,r1,r5,LSL #4       ;472
000650  4a13              LDR      r2,|L2.1696|
000652  eb020181          ADD      r1,r2,r1,LSL #2       ;472
000656  f891105a          LDRB     r1,[r1,#0x5a]         ;472
00065a  ebc11101          RSB      r1,r1,r1,LSL #4       ;472
00065e  eb000481          ADD      r4,r0,r1,LSL #2       ;472
000662  2c05              CMP      r4,#5                 ;473
000664  d201              BCS      |L2.1642|
000666  f50464b4          ADD      r4,r4,#0x5a0          ;474
                  |L2.1642|
00066a  f24050a5          MOV      r0,#0x5a5             ;475
00066e  4284              CMP      r4,r0                 ;475
000670  d807              BHI      |L2.1666|
000672  2000              MOVS     r0,#0                 ;477
000674  4909              LDR      r1,|L2.1692|
000676  f88100cb          STRB     r0,[r1,#0xcb]         ;477
00067a  2001              MOVS     r0,#1                 ;478
00067c  f88100cc          STRB     r0,[r1,#0xcc]         ;478
000680  e502              B        |L2.136|
                  |L2.1666|
000682  1c78              ADDS     r0,r7,#1              ;380
000684  b2c7              UXTB     r7,r0                 ;380
                  |L2.1670|
000686  2f0a              CMP      r7,#0xa               ;380
000688  f6ffae7e          BLT      |L2.904|
00068c  1c68              ADDS     r0,r5,#1              ;378
00068e  b2c5              UXTB     r5,r0                 ;378
                  |L2.1680|
000690  4545              CMP      r5,r8                 ;378
000692  f6ffae77          BLT      |L2.900|
                  |L2.1686|
000696  bf00              NOP      
000698  e4f6              B        |L2.136|
;;;486    
                          ENDP

00069a  0000              DCW      0x0000
                  |L2.1692|
                          DCD      Monitor
                  |L2.1696|
                          DCD      Run_Diagram_buf

                          AREA ||i.juge_need_open||, CODE, READONLY, ALIGN=2

                  juge_need_open PROC
;;;43     /*判断是否需要开机*/
;;;44     void juge_need_open(uint8_t Save_count)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;45     {
000004  4680              MOV      r8,r0
;;;46     	uint8_t i = 0;
000006  2500              MOVS     r5,#0
;;;47         uint8_t j = 0;
000008  46a9              MOV      r9,r5
;;;48         uint32_t min;					//实时时间
;;;49         uint32_t run_diagram_min_start;	//运行图开始时间
;;;50     	uint32_t run_diagram_min_end;	//运行图结束时间
;;;51     	
;;;52         update_RTCtime( (RTC_GetCounter()+g_stamp_distance), &set_time );	//将时间戳转换为年月日set_time
00000a  f7fffffe          BL       RTC_GetCounter
00000e  49fe              LDR      r1,|L3.1032|
000010  6809              LDR      r1,[r1,#0]  ; g_stamp_distance
000012  eb000a01          ADD      r10,r0,r1
000016  49fd              LDR      r1,|L3.1036|
000018  4650              MOV      r0,r10
00001a  f7fffffe          BL       update_RTCtime
;;;53         min=set_time.tm_hour*60+set_time.tm_min;
00001e  48fb              LDR      r0,|L3.1036|
000020  6840              LDR      r0,[r0,#4]  ; set_time
000022  49fa              LDR      r1,|L3.1036|
000024  6889              LDR      r1,[r1,#8]  ; set_time
000026  ebc11101          RSB      r1,r1,r1,LSL #4
00002a  eb000681          ADD      r6,r0,r1,LSL #2
;;;54     	if( min < BEFOREHAND_OPEN_TIME )
00002e  2e05              CMP      r6,#5
000030  d201              BCS      |L3.54|
;;;55     		min += 24*60;
000032  f50666b4          ADD      r6,r6,#0x5a0
                  |L3.54|
;;;56     	
;;;57         /*------------------------------------------开机(已考虑24点前后)------------------------------------------*/
;;;58     	for(i=0; i<Save_count; i++)
000036  2500              MOVS     r5,#0
000038  e2ff              B        |L3.1594|
                  |L3.58|
;;;59     	{
;;;60     		for(j=0; j<10; j++)
00003a  f04f0900          MOV      r9,#0
00003e  e2f6              B        |L3.1582|
                  |L3.64|
;;;61     		{
;;;62     			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time1[0]*60+Run_Diagram_buf[i].Start_Time1[1];	//如果是无效数据，即0xFF，不可能会开机
000040  eb0500c5          ADD      r0,r5,r5,LSL #3
000044  eb001005          ADD      r0,r0,r5,LSL #4
000048  49f1              LDR      r1,|L3.1040|
00004a  eb010080          ADD      r0,r1,r0,LSL #2
00004e  7840              LDRB     r0,[r0,#1]
000050  eb0501c5          ADD      r1,r5,r5,LSL #3
000054  eb011105          ADD      r1,r1,r5,LSL #4
000058  4aed              LDR      r2,|L3.1040|
00005a  f8121021          LDRB     r1,[r2,r1,LSL #2]
00005e  ebc11101          RSB      r1,r1,r1,LSL #4
000062  eb000481          ADD      r4,r0,r1,LSL #2
;;;63     			run_diagram_min_end		= Run_Diagram_buf[i].End_Time1[0]*60+Run_Diagram_buf[i].End_Time1[1];		//00:00，会变成24:00
000066  eb0500c5          ADD      r0,r5,r5,LSL #3
00006a  eb001005          ADD      r0,r0,r5,LSL #4
00006e  4611              MOV      r1,r2
000070  eb010080          ADD      r0,r1,r0,LSL #2
000074  78c0              LDRB     r0,[r0,#3]
000076  eb0501c5          ADD      r1,r5,r5,LSL #3
00007a  eb011105          ADD      r1,r1,r5,LSL #4
00007e  eb020181          ADD      r1,r2,r1,LSL #2
000082  7889              LDRB     r1,[r1,#2]
000084  ebc11101          RSB      r1,r1,r1,LSL #4
000088  eb000781          ADD      r7,r0,r1,LSL #2
;;;64     			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
00008c  2c05              CMP      r4,#5
00008e  d201              BCS      |L3.148|
;;;65     				run_diagram_min_start += 24*60;
000090  f50464b4          ADD      r4,r4,#0x5a0
                  |L3.148|
;;;66     			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
000094  2f05              CMP      r7,#5
000096  d201              BCS      |L3.156|
;;;67     				run_diagram_min_end += 24*60;
000098  f50767b4          ADD      r7,r7,#0x5a0
                  |L3.156|
;;;68     			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
00009c  42a6              CMP      r6,r4
00009e  d20b              BCS      |L3.184|
0000a0  1d70              ADDS     r0,r6,#5
0000a2  42a0              CMP      r0,r4
0000a4  d308              BCC      |L3.184|
;;;69     			{
;;;70     				Monitor.need_open=1;	/*需要开机*/
0000a6  2001              MOVS     r0,#1
0000a8  49da              LDR      r1,|L3.1044|
0000aa  f88100cb          STRB     r0,[r1,#0xcb]
;;;71     				Monitor.need_close=0;	/*不能关机*/
0000ae  2000              MOVS     r0,#0
0000b0  f88100cc          STRB     r0,[r1,#0xcc]
                  |L3.180|
;;;72     				return;
;;;73     			}
;;;74     			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;75     			{
;;;76     				Monitor.need_open=1;	/*需要开机*/
;;;77     				Monitor.need_close=0;	/*不能关机*/
;;;78     				return;
;;;79     			}
;;;80     
;;;81     			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time2[0]*60+Run_Diagram_buf[i].Start_Time2[1];
;;;82     			run_diagram_min_end		= Run_Diagram_buf[i].End_Time2[0]*60+Run_Diagram_buf[i].End_Time2[1];
;;;83     			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;84     				run_diagram_min_start += 24*60;
;;;85     			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;86     				run_diagram_min_end += 24*60;
;;;87     			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;88     			{
;;;89     				Monitor.need_open=1;	/*需要开机*/
;;;90     				Monitor.need_close=0;	/*不能关机*/
;;;91     				return;
;;;92     			}
;;;93     			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;94     			{
;;;95     				Monitor.need_open=1;	/*需要开机*/
;;;96     				Monitor.need_close=0;	/*不能关机*/
;;;97     				return;
;;;98     			}
;;;99     
;;;100    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time3[0]*60+Run_Diagram_buf[i].Start_Time3[1];
;;;101    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time3[0]*60+Run_Diagram_buf[i].End_Time3[1];
;;;102    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;103    				run_diagram_min_start += 24*60;
;;;104    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;105    				run_diagram_min_end += 24*60;
;;;106    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;107    			{
;;;108    				Monitor.need_open=1;	/*需要开机*/
;;;109    				Monitor.need_close=0;	/*不能关机*/
;;;110    				return;
;;;111    			}
;;;112    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;113    			{
;;;114    				Monitor.need_open=1;	/*需要开机*/
;;;115    				Monitor.need_close=0;	/*不能关机*/
;;;116    				return;
;;;117    			}
;;;118    
;;;119    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time4[0]*60+Run_Diagram_buf[i].Start_Time4[1];
;;;120    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time4[0]*60+Run_Diagram_buf[i].End_Time4[1];
;;;121    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;122    				run_diagram_min_start += 24*60;
;;;123    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;124    				run_diagram_min_end += 24*60;
;;;125    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;126    			{
;;;127    				Monitor.need_open=1;	/*需要开机*/
;;;128    				Monitor.need_close=0;	/*不能关机*/
;;;129    				return;
;;;130    			}
;;;131    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;132    			{
;;;133    				Monitor.need_open=1;	/*需要开机*/
;;;134    				Monitor.need_close=0;	/*不能关机*/
;;;135    				return;
;;;136    			}
;;;137    
;;;138    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time5[0]*60+Run_Diagram_buf[i].Start_Time5[1];
;;;139    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time5[0]*60+Run_Diagram_buf[i].End_Time5[1];
;;;140    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;141    				run_diagram_min_start += 24*60;
;;;142    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;143    				run_diagram_min_end += 24*60;
;;;144    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;145    			{
;;;146    				Monitor.need_open=1;	/*需要开机*/
;;;147    				Monitor.need_close=0;	/*不能关机*/
;;;148    				return;
;;;149    			}
;;;150    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;151    			{
;;;152    				Monitor.need_open=1;	/*需要开机*/
;;;153    				Monitor.need_close=0;	/*不能关机*/
;;;154    				return;
;;;155    			}
;;;156    
;;;157    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time6[0]*60+Run_Diagram_buf[i].Start_Time6[1];
;;;158    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time6[0]*60+Run_Diagram_buf[i].End_Time6[1];
;;;159    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;160    				run_diagram_min_start += 24*60;
;;;161    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;162    				run_diagram_min_end += 24*60;
;;;163    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;164    			{
;;;165    				Monitor.need_open=1;	/*需要开机*/
;;;166    				Monitor.need_close=0;	/*不能关机*/
;;;167    				return;
;;;168    			}
;;;169    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;170    			{
;;;171    				Monitor.need_open=1;	/*需要开机*/
;;;172    				Monitor.need_close=0;	/*不能关机*/
;;;173    				return;
;;;174    			}
;;;175    
;;;176    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time7[0]*60+Run_Diagram_buf[i].Start_Time7[1];
;;;177    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time7[0]*60+Run_Diagram_buf[i].End_Time7[1];
;;;178    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;179    				run_diagram_min_start += 24*60;
;;;180    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;181    				run_diagram_min_end += 24*60;
;;;182    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;183    			{
;;;184    				Monitor.need_open=1;	/*需要开机*/
;;;185    				Monitor.need_close=0;	/*不能关机*/
;;;186    				return;
;;;187    			}
;;;188    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;189    			{
;;;190    				Monitor.need_open=1;	/*需要开机*/
;;;191    				Monitor.need_close=0;	/*不能关机*/
;;;192    				return;
;;;193    			}
;;;194    
;;;195    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time8[0]*60+Run_Diagram_buf[i].Start_Time8[1];
;;;196    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time8[0]*60+Run_Diagram_buf[i].End_Time8[1];
;;;197    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;198    				run_diagram_min_start += 24*60;
;;;199    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;200    				run_diagram_min_end += 24*60;
;;;201    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;202    			{
;;;203    				Monitor.need_open=1;	/*需要开机*/
;;;204    				Monitor.need_close=0;	/*不能关机*/
;;;205    				return;
;;;206    			}
;;;207    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;208    			{
;;;209    				Monitor.need_open=1;	/*需要开机*/
;;;210    				Monitor.need_close=0;	/*不能关机*/
;;;211    				return;
;;;212    			}
;;;213    
;;;214    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time9[0]*60+Run_Diagram_buf[i].Start_Time9[1];
;;;215    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time9[0]*60+Run_Diagram_buf[i].End_Time9[1];
;;;216    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;217    				run_diagram_min_start += 24*60;
;;;218    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;219    				run_diagram_min_end += 24*60;
;;;220    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;221    			{
;;;222    				Monitor.need_open=1;	/*需要开机*/
;;;223    				Monitor.need_close=0;	/*不能关机*/
;;;224    				return;
;;;225    			}
;;;226    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;227    			{
;;;228    				Monitor.need_open=1;	/*需要开机*/
;;;229    				Monitor.need_close=0;	/*不能关机*/
;;;230    				return;
;;;231    			}
;;;232    
;;;233    			run_diagram_min_start	= Run_Diagram_buf[i].Start_Time10[0]*60+Run_Diagram_buf[i].Start_Time10[1];
;;;234    			run_diagram_min_end		= Run_Diagram_buf[i].End_Time10[0]*60+Run_Diagram_buf[i].End_Time10[1];
;;;235    			if( run_diagram_min_start < BEFOREHAND_OPEN_TIME )
;;;236    				run_diagram_min_start += 24*60;
;;;237    			if( run_diagram_min_end < BEFOREHAND_OPEN_TIME )
;;;238    				run_diagram_min_end += 24*60;
;;;239    			if( (min < run_diagram_min_start) && ( (min + BEFOREHAND_OPEN_TIME) >= run_diagram_min_start) )		//现在时间小于运行图开始时间，并且现在时间+提前开机时间大于运行图开始时间
;;;240    			{
;;;241    				Monitor.need_open=1;	/*需要开机*/
;;;242    				Monitor.need_close=0;	/*不能关机*/
;;;243    				return;
;;;244    			}
;;;245    			else	if( (run_diagram_min_start <= min) && (min < run_diagram_min_end) )							//任务未结束
;;;246    			{
;;;247    				Monitor.need_open=1;	/*需要开机*/
;;;248    				Monitor.need_close=0;	/*不能关机*/
;;;249    				return;
;;;250    			}
;;;251    		}
;;;252    	}
;;;253    }
0000b4  e8bd87f0          POP      {r4-r10,pc}
                  |L3.184|
0000b8  42b4              CMP      r4,r6                 ;74
0000ba  d809              BHI      |L3.208|
0000bc  42be              CMP      r6,r7                 ;74
0000be  d207              BCS      |L3.208|
0000c0  2001              MOVS     r0,#1                 ;76
0000c2  49d4              LDR      r1,|L3.1044|
0000c4  f88100cb          STRB     r0,[r1,#0xcb]         ;76
0000c8  2000              MOVS     r0,#0                 ;77
0000ca  f88100cc          STRB     r0,[r1,#0xcc]         ;77
0000ce  e7f1              B        |L3.180|
                  |L3.208|
0000d0  eb0500c5          ADD      r0,r5,r5,LSL #3       ;81
0000d4  eb001005          ADD      r0,r0,r5,LSL #4       ;81
0000d8  49cd              LDR      r1,|L3.1040|
0000da  eb010080          ADD      r0,r1,r0,LSL #2       ;81
0000de  7ac0              LDRB     r0,[r0,#0xb]          ;81
0000e0  eb0501c5          ADD      r1,r5,r5,LSL #3       ;81
0000e4  eb011105          ADD      r1,r1,r5,LSL #4       ;81
0000e8  4ac9              LDR      r2,|L3.1040|
0000ea  eb020181          ADD      r1,r2,r1,LSL #2       ;81
0000ee  7a89              LDRB     r1,[r1,#0xa]          ;81
0000f0  ebc11101          RSB      r1,r1,r1,LSL #4       ;81
0000f4  eb000481          ADD      r4,r0,r1,LSL #2       ;81
0000f8  eb0500c5          ADD      r0,r5,r5,LSL #3       ;82
0000fc  eb001005          ADD      r0,r0,r5,LSL #4       ;82
000100  4611              MOV      r1,r2                 ;82
000102  eb010080          ADD      r0,r1,r0,LSL #2       ;82
000106  7b40              LDRB     r0,[r0,#0xd]          ;82
000108  eb0501c5          ADD      r1,r5,r5,LSL #3       ;82
00010c  eb011105          ADD      r1,r1,r5,LSL #4       ;82
000110  eb020181          ADD      r1,r2,r1,LSL #2       ;82
000114  7b09              LDRB     r1,[r1,#0xc]          ;82
000116  ebc11101          RSB      r1,r1,r1,LSL #4       ;82
00011a  eb000781          ADD      r7,r0,r1,LSL #2       ;82
00011e  2c05              CMP      r4,#5                 ;83
000120  d201              BCS      |L3.294|
000122  f50464b4          ADD      r4,r4,#0x5a0          ;84
                  |L3.294|
000126  2f05              CMP      r7,#5                 ;85
000128  d201              BCS      |L3.302|
00012a  f50767b4          ADD      r7,r7,#0x5a0          ;86
                  |L3.302|
00012e  42a6              CMP      r6,r4                 ;87
000130  d20a              BCS      |L3.328|
000132  1d70              ADDS     r0,r6,#5              ;87
000134  42a0              CMP      r0,r4                 ;87
000136  d307              BCC      |L3.328|
000138  2001              MOVS     r0,#1                 ;89
00013a  49b6              LDR      r1,|L3.1044|
00013c  f88100cb          STRB     r0,[r1,#0xcb]         ;89
000140  2000              MOVS     r0,#0                 ;90
000142  f88100cc          STRB     r0,[r1,#0xcc]         ;90
000146  e7b5              B        |L3.180|
                  |L3.328|
000148  42b4              CMP      r4,r6                 ;93
00014a  d809              BHI      |L3.352|
00014c  42be              CMP      r6,r7                 ;93
00014e  d207              BCS      |L3.352|
000150  2001              MOVS     r0,#1                 ;95
000152  49b0              LDR      r1,|L3.1044|
000154  f88100cb          STRB     r0,[r1,#0xcb]         ;95
000158  2000              MOVS     r0,#0                 ;96
00015a  f88100cc          STRB     r0,[r1,#0xcc]         ;96
00015e  e7a9              B        |L3.180|
                  |L3.352|
000160  eb0500c5          ADD      r0,r5,r5,LSL #3       ;100
000164  eb001005          ADD      r0,r0,r5,LSL #4       ;100
000168  49a9              LDR      r1,|L3.1040|
00016a  eb010080          ADD      r0,r1,r0,LSL #2       ;100
00016e  7d40              LDRB     r0,[r0,#0x15]         ;100
000170  eb0501c5          ADD      r1,r5,r5,LSL #3       ;100
000174  eb011105          ADD      r1,r1,r5,LSL #4       ;100
000178  4aa5              LDR      r2,|L3.1040|
00017a  eb020181          ADD      r1,r2,r1,LSL #2       ;100
00017e  7d09              LDRB     r1,[r1,#0x14]         ;100
000180  ebc11101          RSB      r1,r1,r1,LSL #4       ;100
000184  eb000481          ADD      r4,r0,r1,LSL #2       ;100
000188  eb0500c5          ADD      r0,r5,r5,LSL #3       ;101
00018c  eb001005          ADD      r0,r0,r5,LSL #4       ;101
000190  4611              MOV      r1,r2                 ;101
000192  eb010080          ADD      r0,r1,r0,LSL #2       ;101
000196  7dc0              LDRB     r0,[r0,#0x17]         ;101
000198  eb0501c5          ADD      r1,r5,r5,LSL #3       ;101
00019c  eb011105          ADD      r1,r1,r5,LSL #4       ;101
0001a0  eb020181          ADD      r1,r2,r1,LSL #2       ;101
0001a4  7d89              LDRB     r1,[r1,#0x16]         ;101
0001a6  ebc11101          RSB      r1,r1,r1,LSL #4       ;101
0001aa  eb000781          ADD      r7,r0,r1,LSL #2       ;101
0001ae  2c05              CMP      r4,#5                 ;102
0001b0  d201              BCS      |L3.438|
0001b2  f50464b4          ADD      r4,r4,#0x5a0          ;103
                  |L3.438|
0001b6  2f05              CMP      r7,#5                 ;104
0001b8  d201              BCS      |L3.446|
0001ba  f50767b4          ADD      r7,r7,#0x5a0          ;105
                  |L3.446|
0001be  42a6              CMP      r6,r4                 ;106
0001c0  d20a              BCS      |L3.472|
0001c2  1d70              ADDS     r0,r6,#5              ;106
0001c4  42a0              CMP      r0,r4                 ;106
0001c6  d307              BCC      |L3.472|
0001c8  2001              MOVS     r0,#1                 ;108
0001ca  4992              LDR      r1,|L3.1044|
0001cc  f88100cb          STRB     r0,[r1,#0xcb]         ;108
0001d0  2000              MOVS     r0,#0                 ;109
0001d2  f88100cc          STRB     r0,[r1,#0xcc]         ;109
0001d6  e76d              B        |L3.180|
                  |L3.472|
0001d8  42b4              CMP      r4,r6                 ;112
0001da  d809              BHI      |L3.496|
0001dc  42be              CMP      r6,r7                 ;112
0001de  d207              BCS      |L3.496|
0001e0  2001              MOVS     r0,#1                 ;114
0001e2  498c              LDR      r1,|L3.1044|
0001e4  f88100cb          STRB     r0,[r1,#0xcb]         ;114
0001e8  2000              MOVS     r0,#0                 ;115
0001ea  f88100cc          STRB     r0,[r1,#0xcc]         ;115
0001ee  e761              B        |L3.180|
                  |L3.496|
0001f0  eb0500c5          ADD      r0,r5,r5,LSL #3       ;119
0001f4  eb001005          ADD      r0,r0,r5,LSL #4       ;119
0001f8  4985              LDR      r1,|L3.1040|
0001fa  eb010080          ADD      r0,r1,r0,LSL #2       ;119
0001fe  7fc0              LDRB     r0,[r0,#0x1f]         ;119
000200  eb0501c5          ADD      r1,r5,r5,LSL #3       ;119
000204  eb011105          ADD      r1,r1,r5,LSL #4       ;119
000208  4a81              LDR      r2,|L3.1040|
00020a  eb020181          ADD      r1,r2,r1,LSL #2       ;119
00020e  7f89              LDRB     r1,[r1,#0x1e]         ;119
000210  ebc11101          RSB      r1,r1,r1,LSL #4       ;119
000214  eb000481          ADD      r4,r0,r1,LSL #2       ;119
000218  eb0500c5          ADD      r0,r5,r5,LSL #3       ;120
00021c  eb001005          ADD      r0,r0,r5,LSL #4       ;120
000220  4611              MOV      r1,r2                 ;120
000222  eb010080          ADD      r0,r1,r0,LSL #2       ;120
000226  f8900021          LDRB     r0,[r0,#0x21]         ;120
00022a  eb0501c5          ADD      r1,r5,r5,LSL #3       ;120
00022e  eb011105          ADD      r1,r1,r5,LSL #4       ;120
000232  eb020181          ADD      r1,r2,r1,LSL #2       ;120
000236  f8911020          LDRB     r1,[r1,#0x20]         ;120
00023a  ebc11101          RSB      r1,r1,r1,LSL #4       ;120
00023e  eb000781          ADD      r7,r0,r1,LSL #2       ;120
000242  2c05              CMP      r4,#5                 ;121
000244  d201              BCS      |L3.586|
000246  f50464b4          ADD      r4,r4,#0x5a0          ;122
                  |L3.586|
00024a  2f05              CMP      r7,#5                 ;123
00024c  d201              BCS      |L3.594|
00024e  f50767b4          ADD      r7,r7,#0x5a0          ;124
                  |L3.594|
000252  42a6              CMP      r6,r4                 ;125
000254  d20a              BCS      |L3.620|
000256  1d70              ADDS     r0,r6,#5              ;125
000258  42a0              CMP      r0,r4                 ;125
00025a  d307              BCC      |L3.620|
00025c  2001              MOVS     r0,#1                 ;127
00025e  496d              LDR      r1,|L3.1044|
000260  f88100cb          STRB     r0,[r1,#0xcb]         ;127
000264  2000              MOVS     r0,#0                 ;128
000266  f88100cc          STRB     r0,[r1,#0xcc]         ;128
00026a  e723              B        |L3.180|
                  |L3.620|
00026c  42b4              CMP      r4,r6                 ;131
00026e  d809              BHI      |L3.644|
000270  42be              CMP      r6,r7                 ;131
000272  d207              BCS      |L3.644|
000274  2001              MOVS     r0,#1                 ;133
000276  4967              LDR      r1,|L3.1044|
000278  f88100cb          STRB     r0,[r1,#0xcb]         ;133
00027c  2000              MOVS     r0,#0                 ;134
00027e  f88100cc          STRB     r0,[r1,#0xcc]         ;134
000282  e717              B        |L3.180|
                  |L3.644|
000284  eb0500c5          ADD      r0,r5,r5,LSL #3       ;138
000288  eb001005          ADD      r0,r0,r5,LSL #4       ;138
00028c  4960              LDR      r1,|L3.1040|
00028e  eb010080          ADD      r0,r1,r0,LSL #2       ;138
000292  f8900029          LDRB     r0,[r0,#0x29]         ;138
000296  eb0501c5          ADD      r1,r5,r5,LSL #3       ;138
00029a  eb011105          ADD      r1,r1,r5,LSL #4       ;138
00029e  4a5c              LDR      r2,|L3.1040|
0002a0  eb020181          ADD      r1,r2,r1,LSL #2       ;138
0002a4  f8911028          LDRB     r1,[r1,#0x28]         ;138
0002a8  ebc11101          RSB      r1,r1,r1,LSL #4       ;138
0002ac  eb000481          ADD      r4,r0,r1,LSL #2       ;138
0002b0  eb0500c5          ADD      r0,r5,r5,LSL #3       ;139
0002b4  eb001005          ADD      r0,r0,r5,LSL #4       ;139
0002b8  4611              MOV      r1,r2                 ;139
0002ba  eb010080          ADD      r0,r1,r0,LSL #2       ;139
0002be  f890002b          LDRB     r0,[r0,#0x2b]         ;139
0002c2  eb0501c5          ADD      r1,r5,r5,LSL #3       ;139
0002c6  eb011105          ADD      r1,r1,r5,LSL #4       ;139
0002ca  eb020181          ADD      r1,r2,r1,LSL #2       ;139
0002ce  f891102a          LDRB     r1,[r1,#0x2a]         ;139
0002d2  ebc11101          RSB      r1,r1,r1,LSL #4       ;139
0002d6  eb000781          ADD      r7,r0,r1,LSL #2       ;139
0002da  2c05              CMP      r4,#5                 ;140
0002dc  d201              BCS      |L3.738|
0002de  f50464b4          ADD      r4,r4,#0x5a0          ;141
                  |L3.738|
0002e2  2f05              CMP      r7,#5                 ;142
0002e4  d201              BCS      |L3.746|
0002e6  f50767b4          ADD      r7,r7,#0x5a0          ;143
                  |L3.746|
0002ea  42a6              CMP      r6,r4                 ;144
0002ec  d20a              BCS      |L3.772|
0002ee  1d70              ADDS     r0,r6,#5              ;144
0002f0  42a0              CMP      r0,r4                 ;144
0002f2  d307              BCC      |L3.772|
0002f4  2001              MOVS     r0,#1                 ;146
0002f6  4947              LDR      r1,|L3.1044|
0002f8  f88100cb          STRB     r0,[r1,#0xcb]         ;146
0002fc  2000              MOVS     r0,#0                 ;147
0002fe  f88100cc          STRB     r0,[r1,#0xcc]         ;147
000302  e6d7              B        |L3.180|
                  |L3.772|
000304  42b4              CMP      r4,r6                 ;150
000306  d809              BHI      |L3.796|
000308  42be              CMP      r6,r7                 ;150
00030a  d207              BCS      |L3.796|
00030c  2001              MOVS     r0,#1                 ;152
00030e  4941              LDR      r1,|L3.1044|
000310  f88100cb          STRB     r0,[r1,#0xcb]         ;152
000314  2000              MOVS     r0,#0                 ;153
000316  f88100cc          STRB     r0,[r1,#0xcc]         ;153
00031a  e6cb              B        |L3.180|
                  |L3.796|
00031c  eb0500c5          ADD      r0,r5,r5,LSL #3       ;157
000320  eb001005          ADD      r0,r0,r5,LSL #4       ;157
000324  493a              LDR      r1,|L3.1040|
000326  eb010080          ADD      r0,r1,r0,LSL #2       ;157
00032a  f8900033          LDRB     r0,[r0,#0x33]         ;157
00032e  eb0501c5          ADD      r1,r5,r5,LSL #3       ;157
000332  eb011105          ADD      r1,r1,r5,LSL #4       ;157
000336  4a36              LDR      r2,|L3.1040|
000338  eb020181          ADD      r1,r2,r1,LSL #2       ;157
00033c  f8911032          LDRB     r1,[r1,#0x32]         ;157
000340  ebc11101          RSB      r1,r1,r1,LSL #4       ;157
000344  eb000481          ADD      r4,r0,r1,LSL #2       ;157
000348  eb0500c5          ADD      r0,r5,r5,LSL #3       ;158
00034c  eb001005          ADD      r0,r0,r5,LSL #4       ;158
000350  4611              MOV      r1,r2                 ;158
000352  eb010080          ADD      r0,r1,r0,LSL #2       ;158
000356  f8900035          LDRB     r0,[r0,#0x35]         ;158
00035a  eb0501c5          ADD      r1,r5,r5,LSL #3       ;158
00035e  eb011105          ADD      r1,r1,r5,LSL #4       ;158
000362  eb020181          ADD      r1,r2,r1,LSL #2       ;158
000366  f8911034          LDRB     r1,[r1,#0x34]         ;158
00036a  ebc11101          RSB      r1,r1,r1,LSL #4       ;158
00036e  eb000781          ADD      r7,r0,r1,LSL #2       ;158
000372  2c05              CMP      r4,#5                 ;159
000374  d201              BCS      |L3.890|
000376  f50464b4          ADD      r4,r4,#0x5a0          ;160
                  |L3.890|
00037a  2f05              CMP      r7,#5                 ;161
00037c  d201              BCS      |L3.898|
00037e  f50767b4          ADD      r7,r7,#0x5a0          ;162
                  |L3.898|
000382  42a6              CMP      r6,r4                 ;163
000384  d20a              BCS      |L3.924|
000386  1d70              ADDS     r0,r6,#5              ;163
000388  42a0              CMP      r0,r4                 ;163
00038a  d307              BCC      |L3.924|
00038c  2001              MOVS     r0,#1                 ;165
00038e  4921              LDR      r1,|L3.1044|
000390  f88100cb          STRB     r0,[r1,#0xcb]         ;165
000394  2000              MOVS     r0,#0                 ;166
000396  f88100cc          STRB     r0,[r1,#0xcc]         ;166
00039a  e68b              B        |L3.180|
                  |L3.924|
00039c  42b4              CMP      r4,r6                 ;169
00039e  d809              BHI      |L3.948|
0003a0  42be              CMP      r6,r7                 ;169
0003a2  d207              BCS      |L3.948|
0003a4  2001              MOVS     r0,#1                 ;171
0003a6  491b              LDR      r1,|L3.1044|
0003a8  f88100cb          STRB     r0,[r1,#0xcb]         ;171
0003ac  2000              MOVS     r0,#0                 ;172
0003ae  f88100cc          STRB     r0,[r1,#0xcc]         ;172
0003b2  e67f              B        |L3.180|
                  |L3.948|
0003b4  eb0500c5          ADD      r0,r5,r5,LSL #3       ;176
0003b8  eb001005          ADD      r0,r0,r5,LSL #4       ;176
0003bc  4914              LDR      r1,|L3.1040|
0003be  eb010080          ADD      r0,r1,r0,LSL #2       ;176
0003c2  f890003d          LDRB     r0,[r0,#0x3d]         ;176
0003c6  eb0501c5          ADD      r1,r5,r5,LSL #3       ;176
0003ca  eb011105          ADD      r1,r1,r5,LSL #4       ;176
0003ce  4a10              LDR      r2,|L3.1040|
0003d0  eb020181          ADD      r1,r2,r1,LSL #2       ;176
0003d4  f891103c          LDRB     r1,[r1,#0x3c]         ;176
0003d8  ebc11101          RSB      r1,r1,r1,LSL #4       ;176
0003dc  eb000481          ADD      r4,r0,r1,LSL #2       ;176
0003e0  eb0500c5          ADD      r0,r5,r5,LSL #3       ;177
0003e4  eb001005          ADD      r0,r0,r5,LSL #4       ;177
0003e8  4611              MOV      r1,r2                 ;177
0003ea  eb010080          ADD      r0,r1,r0,LSL #2       ;177
0003ee  f890003f          LDRB     r0,[r0,#0x3f]         ;177
0003f2  eb0501c5          ADD      r1,r5,r5,LSL #3       ;177
0003f6  eb011105          ADD      r1,r1,r5,LSL #4       ;177
0003fa  eb020181          ADD      r1,r2,r1,LSL #2       ;177
0003fe  f891103e          LDRB     r1,[r1,#0x3e]         ;177
000402  ebc11101          RSB      r1,r1,r1,LSL #4       ;177
000406  e007              B        |L3.1048|
                  |L3.1032|
                          DCD      g_stamp_distance
                  |L3.1036|
                          DCD      set_time
                  |L3.1040|
                          DCD      Run_Diagram_buf
                  |L3.1044|
                          DCD      Monitor
                  |L3.1048|
000418  eb000781          ADD      r7,r0,r1,LSL #2       ;177
00041c  2c05              CMP      r4,#5                 ;178
00041e  d201              BCS      |L3.1060|
000420  f50464b4          ADD      r4,r4,#0x5a0          ;179
                  |L3.1060|
000424  2f05              CMP      r7,#5                 ;180
000426  d201              BCS      |L3.1068|
000428  f50767b4          ADD      r7,r7,#0x5a0          ;181
                  |L3.1068|
00042c  42a6              CMP      r6,r4                 ;182
00042e  d20a              BCS      |L3.1094|
000430  1d70              ADDS     r0,r6,#5              ;182
000432  42a0              CMP      r0,r4                 ;182
000434  d307              BCC      |L3.1094|
000436  2001              MOVS     r0,#1                 ;184
000438  4982              LDR      r1,|L3.1604|
00043a  f88100cb          STRB     r0,[r1,#0xcb]         ;184
00043e  2000              MOVS     r0,#0                 ;185
000440  f88100cc          STRB     r0,[r1,#0xcc]         ;185
000444  e636              B        |L3.180|
                  |L3.1094|
000446  42b4              CMP      r4,r6                 ;188
000448  d809              BHI      |L3.1118|
00044a  42be              CMP      r6,r7                 ;188
00044c  d207              BCS      |L3.1118|
00044e  2001              MOVS     r0,#1                 ;190
000450  497c              LDR      r1,|L3.1604|
000452  f88100cb          STRB     r0,[r1,#0xcb]         ;190
000456  2000              MOVS     r0,#0                 ;191
000458  f88100cc          STRB     r0,[r1,#0xcc]         ;191
00045c  e62a              B        |L3.180|
                  |L3.1118|
00045e  eb0500c5          ADD      r0,r5,r5,LSL #3       ;195
000462  eb001005          ADD      r0,r0,r5,LSL #4       ;195
000466  4978              LDR      r1,|L3.1608|
000468  eb010080          ADD      r0,r1,r0,LSL #2       ;195
00046c  f8900047          LDRB     r0,[r0,#0x47]         ;195
000470  eb0501c5          ADD      r1,r5,r5,LSL #3       ;195
000474  eb011105          ADD      r1,r1,r5,LSL #4       ;195
000478  4a73              LDR      r2,|L3.1608|
00047a  eb020181          ADD      r1,r2,r1,LSL #2       ;195
00047e  f8911046          LDRB     r1,[r1,#0x46]         ;195
000482  ebc11101          RSB      r1,r1,r1,LSL #4       ;195
000486  eb000481          ADD      r4,r0,r1,LSL #2       ;195
00048a  eb0500c5          ADD      r0,r5,r5,LSL #3       ;196
00048e  eb001005          ADD      r0,r0,r5,LSL #4       ;196
000492  4611              MOV      r1,r2                 ;196
000494  eb010080          ADD      r0,r1,r0,LSL #2       ;196
000498  f8900049          LDRB     r0,[r0,#0x49]         ;196
00049c  eb0501c5          ADD      r1,r5,r5,LSL #3       ;196
0004a0  eb011105          ADD      r1,r1,r5,LSL #4       ;196
0004a4  eb020181          ADD      r1,r2,r1,LSL #2       ;196
0004a8  f8911048          LDRB     r1,[r1,#0x48]         ;196
0004ac  ebc11101          RSB      r1,r1,r1,LSL #4       ;196
0004b0  eb000781          ADD      r7,r0,r1,LSL #2       ;196
0004b4  2c05              CMP      r4,#5                 ;197
0004b6  d201              BCS      |L3.1212|
0004b8  f50464b4          ADD      r4,r4,#0x5a0          ;198
                  |L3.1212|
0004bc  2f05              CMP      r7,#5                 ;199
0004be  d201              BCS      |L3.1220|
0004c0  f50767b4          ADD      r7,r7,#0x5a0          ;200
                  |L3.1220|
0004c4  42a6              CMP      r6,r4                 ;201
0004c6  d20a              BCS      |L3.1246|
0004c8  1d70              ADDS     r0,r6,#5              ;201
0004ca  42a0              CMP      r0,r4                 ;201
0004cc  d307              BCC      |L3.1246|
0004ce  2001              MOVS     r0,#1                 ;203
0004d0  495c              LDR      r1,|L3.1604|
0004d2  f88100cb          STRB     r0,[r1,#0xcb]         ;203
0004d6  2000              MOVS     r0,#0                 ;204
0004d8  f88100cc          STRB     r0,[r1,#0xcc]         ;204
0004dc  e5ea              B        |L3.180|
                  |L3.1246|
0004de  42b4              CMP      r4,r6                 ;207
0004e0  d809              BHI      |L3.1270|
0004e2  42be              CMP      r6,r7                 ;207
0004e4  d207              BCS      |L3.1270|
0004e6  2001              MOVS     r0,#1                 ;209
0004e8  4956              LDR      r1,|L3.1604|
0004ea  f88100cb          STRB     r0,[r1,#0xcb]         ;209
0004ee  2000              MOVS     r0,#0                 ;210
0004f0  f88100cc          STRB     r0,[r1,#0xcc]         ;210
0004f4  e5de              B        |L3.180|
                  |L3.1270|
0004f6  eb0500c5          ADD      r0,r5,r5,LSL #3       ;214
0004fa  eb001005          ADD      r0,r0,r5,LSL #4       ;214
0004fe  4952              LDR      r1,|L3.1608|
000500  eb010080          ADD      r0,r1,r0,LSL #2       ;214
000504  f8900051          LDRB     r0,[r0,#0x51]         ;214
000508  eb0501c5          ADD      r1,r5,r5,LSL #3       ;214
00050c  eb011105          ADD      r1,r1,r5,LSL #4       ;214
000510  4a4d              LDR      r2,|L3.1608|
000512  eb020181          ADD      r1,r2,r1,LSL #2       ;214
000516  f8911050          LDRB     r1,[r1,#0x50]         ;214
00051a  ebc11101          RSB      r1,r1,r1,LSL #4       ;214
00051e  eb000481          ADD      r4,r0,r1,LSL #2       ;214
000522  eb0500c5          ADD      r0,r5,r5,LSL #3       ;215
000526  eb001005          ADD      r0,r0,r5,LSL #4       ;215
00052a  4611              MOV      r1,r2                 ;215
00052c  eb010080          ADD      r0,r1,r0,LSL #2       ;215
000530  f8900053          LDRB     r0,[r0,#0x53]         ;215
000534  eb0501c5          ADD      r1,r5,r5,LSL #3       ;215
000538  eb011105          ADD      r1,r1,r5,LSL #4       ;215
00053c  eb020181          ADD      r1,r2,r1,LSL #2       ;215
000540  f8911052          LDRB     r1,[r1,#0x52]         ;215
000544  ebc11101          RSB      r1,r1,r1,LSL #4       ;215
000548  eb000781          ADD      r7,r0,r1,LSL #2       ;215
00054c  2c05              CMP      r4,#5                 ;216
00054e  d201              BCS      |L3.1364|
000550  f50464b4          ADD      r4,r4,#0x5a0          ;217
                  |L3.1364|
000554  2f05              CMP      r7,#5                 ;218
000556  d201              BCS      |L3.1372|
000558  f50767b4          ADD      r7,r7,#0x5a0          ;219
                  |L3.1372|
00055c  42a6              CMP      r6,r4                 ;220
00055e  d20a              BCS      |L3.1398|
000560  1d70              ADDS     r0,r6,#5              ;220
000562  42a0              CMP      r0,r4                 ;220
000564  d307              BCC      |L3.1398|
000566  2001              MOVS     r0,#1                 ;222
000568  4936              LDR      r1,|L3.1604|
00056a  f88100cb          STRB     r0,[r1,#0xcb]         ;222
00056e  2000              MOVS     r0,#0                 ;223
000570  f88100cc          STRB     r0,[r1,#0xcc]         ;223
000574  e59e              B        |L3.180|
                  |L3.1398|
000576  42b4              CMP      r4,r6                 ;226
000578  d809              BHI      |L3.1422|
00057a  42be              CMP      r6,r7                 ;226
00057c  d207              BCS      |L3.1422|
00057e  2001              MOVS     r0,#1                 ;228
000580  4930              LDR      r1,|L3.1604|
000582  f88100cb          STRB     r0,[r1,#0xcb]         ;228
000586  2000              MOVS     r0,#0                 ;229
000588  f88100cc          STRB     r0,[r1,#0xcc]         ;229
00058c  e592              B        |L3.180|
                  |L3.1422|
00058e  eb0500c5          ADD      r0,r5,r5,LSL #3       ;233
000592  eb001005          ADD      r0,r0,r5,LSL #4       ;233
000596  492c              LDR      r1,|L3.1608|
000598  eb010080          ADD      r0,r1,r0,LSL #2       ;233
00059c  f890005b          LDRB     r0,[r0,#0x5b]         ;233
0005a0  eb0501c5          ADD      r1,r5,r5,LSL #3       ;233
0005a4  eb011105          ADD      r1,r1,r5,LSL #4       ;233
0005a8  4a27              LDR      r2,|L3.1608|
0005aa  eb020181          ADD      r1,r2,r1,LSL #2       ;233
0005ae  f891105a          LDRB     r1,[r1,#0x5a]         ;233
0005b2  ebc11101          RSB      r1,r1,r1,LSL #4       ;233
0005b6  eb000481          ADD      r4,r0,r1,LSL #2       ;233
0005ba  eb0500c5          ADD      r0,r5,r5,LSL #3       ;234
0005be  eb001005          ADD      r0,r0,r5,LSL #4       ;234
0005c2  4611              MOV      r1,r2                 ;234
0005c4  eb010080          ADD      r0,r1,r0,LSL #2       ;234
0005c8  f890005d          LDRB     r0,[r0,#0x5d]         ;234
0005cc  eb0501c5          ADD      r1,r5,r5,LSL #3       ;234
0005d0  eb011105          ADD      r1,r1,r5,LSL #4       ;234
0005d4  eb020181          ADD      r1,r2,r1,LSL #2       ;234
0005d8  f891105c          LDRB     r1,[r1,#0x5c]         ;234
0005dc  ebc11101          RSB      r1,r1,r1,LSL #4       ;234
0005e0  eb000781          ADD      r7,r0,r1,LSL #2       ;234
0005e4  2c05              CMP      r4,#5                 ;235
0005e6  d201              BCS      |L3.1516|
0005e8  f50464b4          ADD      r4,r4,#0x5a0          ;236
                  |L3.1516|
0005ec  2f05              CMP      r7,#5                 ;237
0005ee  d201              BCS      |L3.1524|
0005f0  f50767b4          ADD      r7,r7,#0x5a0          ;238
                  |L3.1524|
0005f4  42a6              CMP      r6,r4                 ;239
0005f6  d20a              BCS      |L3.1550|
0005f8  1d70              ADDS     r0,r6,#5              ;239
0005fa  42a0              CMP      r0,r4                 ;239
0005fc  d307              BCC      |L3.1550|
0005fe  2001              MOVS     r0,#1                 ;241
000600  4910              LDR      r1,|L3.1604|
000602  f88100cb          STRB     r0,[r1,#0xcb]         ;241
000606  2000              MOVS     r0,#0                 ;242
000608  f88100cc          STRB     r0,[r1,#0xcc]         ;242
00060c  e552              B        |L3.180|
                  |L3.1550|
00060e  42b4              CMP      r4,r6                 ;245
000610  d809              BHI      |L3.1574|
000612  42be              CMP      r6,r7                 ;245
000614  d207              BCS      |L3.1574|
000616  2001              MOVS     r0,#1                 ;247
000618  490a              LDR      r1,|L3.1604|
00061a  f88100cb          STRB     r0,[r1,#0xcb]         ;247
00061e  2000              MOVS     r0,#0                 ;248
000620  f88100cc          STRB     r0,[r1,#0xcc]         ;248
000624  e546              B        |L3.180|
                  |L3.1574|
000626  f1090001          ADD      r0,r9,#1              ;60
00062a  f00009ff          AND      r9,r0,#0xff           ;60
                  |L3.1582|
00062e  f1b90f0a          CMP      r9,#0xa               ;60
000632  f6ffad05          BLT      |L3.64|
000636  1c68              ADDS     r0,r5,#1              ;58
000638  b2c5              UXTB     r5,r0                 ;58
                  |L3.1594|
00063a  4545              CMP      r5,r8                 ;58
00063c  f6ffacfd          BLT      |L3.58|
000640  bf00              NOP      
000642  e537              B        |L3.180|
;;;254    
                          ENDP

                  |L3.1604|
                          DCD      Monitor
                  |L3.1608|
                          DCD      Run_Diagram_buf

                          AREA ||i.juge_need_open_close||, CODE, READONLY, ALIGN=2

                  juge_need_open_close PROC
;;;6      
;;;7      void juge_need_open_close(uint8_t Save_count)
000000  b510              PUSH     {r4,lr}
;;;8      {
000002  4604              MOV      r4,r0
;;;9      	if( System.emission == 0x01 )		//正在发射，肯定已经开机，不需要开机，不能关机
000004  481c              LDR      r0,|L4.120|
000006  7d80              LDRB     r0,[r0,#0x16]  ; System
000008  2801              CMP      r0,#1
00000a  d106              BNE      |L4.26|
;;;10         {
;;;11             Monitor.need_open=0;
00000c  2000              MOVS     r0,#0
00000e  491b              LDR      r1,|L4.124|
000010  f88100cb          STRB     r0,[r1,#0xcb]
;;;12     		    Monitor.need_close=0;
000014  f88100cc          STRB     r0,[r1,#0xcc]
                  |L4.24|
;;;13             return ;
;;;14         }
;;;15     	else	if( System.open == 0x01 )	//正在开机
;;;16     	{
;;;17     		return;
;;;18     	}
;;;19     	else	if( Save_count == 0x00 )	//没任务时，关机
;;;20     	{
;;;21     		Monitor.need_open = 0x00;
;;;22     		Monitor.need_close = 0x01;
;;;23     		return;
;;;24     	}
;;;25     
;;;26     	juge_need_open(Save_count);
;;;27     	
;;;28     	if( (Monitor.need_open==0) && (Monitor.need_close==0) )
;;;29     	{
;;;30     		juge_need_close(Save_count);
;;;31     	}
;;;32     	
;;;33     	if( System.open == 0x00 )			//已经关机
;;;34     	{
;;;35     		Monitor.need_close=0;			//不需要关机
;;;36     	}
;;;37     	else	if( System.open == 0x02 )	//已经开机
;;;38     	{
;;;39     		Monitor.need_open=0;			//不需要开机
;;;40     	}
;;;41     }
000018  bd10              POP      {r4,pc}
                  |L4.26|
00001a  4817              LDR      r0,|L4.120|
00001c  7b00              LDRB     r0,[r0,#0xc]          ;15  ; System
00001e  2801              CMP      r0,#1                 ;15
000020  d100              BNE      |L4.36|
000022  e7f9              B        |L4.24|
                  |L4.36|
000024  b93c              CBNZ     r4,|L4.54|
000026  2000              MOVS     r0,#0                 ;21
000028  4914              LDR      r1,|L4.124|
00002a  f88100cb          STRB     r0,[r1,#0xcb]         ;21
00002e  2001              MOVS     r0,#1                 ;22
000030  f88100cc          STRB     r0,[r1,#0xcc]         ;22
000034  e7f0              B        |L4.24|
                  |L4.54|
000036  4620              MOV      r0,r4                 ;26
000038  f7fffffe          BL       juge_need_open
00003c  480f              LDR      r0,|L4.124|
00003e  f89000cb          LDRB     r0,[r0,#0xcb]         ;28  ; Monitor
000042  b930              CBNZ     r0,|L4.82|
000044  480d              LDR      r0,|L4.124|
000046  f89000cc          LDRB     r0,[r0,#0xcc]         ;28  ; Monitor
00004a  b910              CBNZ     r0,|L4.82|
00004c  4620              MOV      r0,r4                 ;30
00004e  f7fffffe          BL       juge_need_close
                  |L4.82|
000052  4809              LDR      r0,|L4.120|
000054  7b00              LDRB     r0,[r0,#0xc]          ;33  ; System
000056  b920              CBNZ     r0,|L4.98|
000058  2000              MOVS     r0,#0                 ;35
00005a  4908              LDR      r1,|L4.124|
00005c  f88100cc          STRB     r0,[r1,#0xcc]         ;35
000060  e007              B        |L4.114|
                  |L4.98|
000062  4805              LDR      r0,|L4.120|
000064  7b00              LDRB     r0,[r0,#0xc]          ;37  ; System
000066  2802              CMP      r0,#2                 ;37
000068  d103              BNE      |L4.114|
00006a  2000              MOVS     r0,#0                 ;39
00006c  4903              LDR      r1,|L4.124|
00006e  f88100cb          STRB     r0,[r1,#0xcb]         ;39
                  |L4.114|
000072  bf00              NOP      
000074  e7d0              B        |L4.24|
;;;42     
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      System
                  |L4.124|
                          DCD      Monitor

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\hard_control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_hard_control_c_39565374____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_hard_control_c_39565374____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_hard_control_c_39565374____REVSH|
#line 128
|__asm___14_hard_control_c_39565374____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
