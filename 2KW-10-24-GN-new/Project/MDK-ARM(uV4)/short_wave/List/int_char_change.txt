; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\int_char_change.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\int_char_change.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\int_char_change.crf ..\..\User\int_char_change.c]
                          THUMB

                          AREA ||i.AP_ICC||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  AP_ICC PROC
;;;56     /*IP号u8数组转换为字符串,数组长度只有4*/
;;;57     char *AP_ICC(uint8_t *Array)
000000  b57c              PUSH     {r2-r6,lr}
;;;58     {
000002  4604              MOV      r4,r0
;;;59     		char *ipstr=NULL; 
000004  2500              MOVS     r5,#0
;;;60      
;;;61         if ((ipstr=(char *)malloc(17*sizeof(char)))==NULL)  
000006  2011              MOVS     r0,#0x11
000008  f7fffffe          BL       malloc
00000c  1e05              SUBS     r5,r0,#0
00000e  d100              BNE      |L1.18|
                  |L1.16|
;;;62         {  
;;;63             return 0;  
;;;64         }  
;;;65           
;;;66         sprintf(ipstr,"%d.%d.%d.%d",Array[0],Array[1],Array[2],Array[3]);  
;;;67       
;;;68         return ipstr;  
;;;69     
;;;70     }
000010  bd7c              POP      {r2-r6,pc}
                  |L1.18|
000012  78e0              LDRB     r0,[r4,#3]            ;66
000014  78a1              LDRB     r1,[r4,#2]            ;66
000016  e9cd1000          STRD     r1,r0,[sp,#0]         ;66
00001a  7863              LDRB     r3,[r4,#1]            ;66
00001c  7822              LDRB     r2,[r4,#0]            ;66
00001e  a103              ADR      r1,|L1.44|
000020  4628              MOV      r0,r5                 ;66
000022  f7fffffe          BL       __2sprintf
000026  4628              MOV      r0,r5                 ;68
000028  e7f2              B        |L1.16|
;;;71     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
00002c  25642e25          DCB      "%d.%d.%d.%d",0
000030  642e2564
000034  2e256400

                          AREA ||i.Array_ch||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Array_ch PROC
;;;88     /*数组转化为字符串*/
;;;89     char *Array_ch(uint8_t *Array,uint8_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;91     		char *ipstr=NULL; 
000008  f04f0800          MOV      r8,#0
;;;92     		char *str=NULL;
00000c  2700              MOVS     r7,#0
;;;93         if ((ipstr=(char *)malloc(30*sizeof(char)))==NULL||(str=(char *)malloc(17*sizeof(char)))==NULL)  
00000e  201e              MOVS     r0,#0x1e
000010  f7fffffe          BL       malloc
000014  f1b00800          SUBS     r8,r0,#0
000018  d004              BEQ      |L2.36|
00001a  2011              MOVS     r0,#0x11
00001c  f7fffffe          BL       malloc
000020  1e07              SUBS     r7,r0,#0
000022  d102              BNE      |L2.42|
                  |L2.36|
;;;94         {  
;;;95             return 0;  
000024  2000              MOVS     r0,#0
                  |L2.38|
;;;96         }  
;;;97     		
;;;98     		for(uint8_t i=0;i<len;i++)
;;;99     		{
;;;100    			sprintf(str,"%d",Array[i]);
;;;101    			strcat(ipstr,str);
;;;102    		}
;;;103        return ipstr;  
;;;104    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L2.42|
00002a  2400              MOVS     r4,#0                 ;98
00002c  e00a              B        |L2.68|
                  |L2.46|
00002e  5d2a              LDRB     r2,[r5,r4]            ;100
000030  a106              ADR      r1,|L2.76|
000032  4638              MOV      r0,r7                 ;100
000034  f7fffffe          BL       __2sprintf
000038  4639              MOV      r1,r7                 ;101
00003a  4640              MOV      r0,r8                 ;101
00003c  f7fffffe          BL       strcat
000040  1c60              ADDS     r0,r4,#1              ;98
000042  b2c4              UXTB     r4,r0                 ;98
                  |L2.68|
000044  42b4              CMP      r4,r6                 ;98
000046  dbf2              BLT      |L2.46|
000048  4640              MOV      r0,r8                 ;103
00004a  e7ec              B        |L2.38|
;;;105    
                          ENDP

                  |L2.76|
00004c  256400            DCB      "%d",0
00004f  00                DCB      0

                          AREA ||i.IP_CCI||, CODE, READONLY, ALIGN=2

                  IP_CCI PROC
;;;3      /*函数作用：IP号的char-int*/
;;;4      uint32_t IP_CCI(char *ch)  
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;5      {  
;;;6          const char *ip ="192.168.34.232";   
000004  a620              ADR      r6,|L3.136|
;;;7          char str_ip_index[4]={'\0'};  
000006  2000              MOVS     r0,#0
000008  9002              STR      r0,[sp,#8]
;;;8          uint32_t ip_int,ip_add=0;  
00000a  4681              MOV      r9,r0
;;;9          uint8_t j =0,a=3;     
00000c  4682              MOV      r10,r0
00000e  f04f0b03          MOV      r11,#3
;;;10         for(uint16_t i =0;i<=strlen(ip);i++)//要用到'\0'  
000012  2500              MOVS     r5,#0
000014  e031              B        |L3.122|
                  |L3.22|
;;;11         {  
;;;12             if (ip[i]=='\0'||ip[i]=='.')  
000016  5d70              LDRB     r0,[r6,r5]
000018  b110              CBZ      r0,|L3.32|
00001a  5d70              LDRB     r0,[r6,r5]
00001c  282e              CMP      r0,#0x2e
00001e  d121              BNE      |L3.100|
                  |L3.32|
;;;13             {             
;;;14                 ip_int =atoi(str_ip_index);   
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       atoi
000026  4604              MOV      r4,r0
;;;15                 if (ip_int==0||ip_int>255)  
000028  b10c              CBZ      r4,|L3.46|
00002a  2cff              CMP      r4,#0xff
00002c  d902              BLS      |L3.52|
                  |L3.46|
;;;16                 {  
;;;17                     return 0;                 
00002e  2000              MOVS     r0,#0
                  |L3.48|
;;;18                 }  
;;;19       
;;;20                 ip_add+=(ip_int*((unsigned int)pow(256.0,a)));            
;;;21                 a--;  
;;;22                 memset(str_ip_index,0,sizeof(str_ip_index));  
;;;23       
;;;24                 j=0;  
;;;25                 continue;  
;;;26             }  
;;;27       
;;;28             str_ip_index[j]=ip[i];  
;;;29             j++;  
;;;30         }     
;;;31         
;;;32     			return ip_add; 
;;;33     }  
000030  e8bd8ffe          POP      {r1-r11,pc}
                  |L3.52|
000034  4658              MOV      r0,r11                ;20
000036  f7fffffe          BL       __aeabi_ui2d
00003a  4607              MOV      r7,r0                 ;20
00003c  463a              MOV      r2,r7                 ;20
00003e  460b              MOV      r3,r1                 ;20
000040  2000              MOVS     r0,#0                 ;20
000042  4915              LDR      r1,|L3.152|
000044  f7fffffe          BL       pow
000048  e9cd0100          STRD     r0,r1,[sp,#0]         ;20
00004c  f7fffffe          BL       __aeabi_d2uiz
000050  fb049900          MLA      r9,r4,r0,r9           ;20
000054  f1ab0001          SUB      r0,r11,#1             ;21
000058  f0000bff          AND      r11,r0,#0xff          ;21
00005c  2000              MOVS     r0,#0                 ;22
00005e  9002              STR      r0,[sp,#8]            ;22
000060  4682              MOV      r10,r0                ;24
000062  e008              B        |L3.118|
                  |L3.100|
000064  5d70              LDRB     r0,[r6,r5]            ;28
000066  a902              ADD      r1,sp,#8              ;28
000068  f801000a          STRB     r0,[r1,r10]           ;28
00006c  f10a0001          ADD      r0,r10,#1             ;29
000070  f0000aff          AND      r10,r0,#0xff          ;29
000074  bf00              NOP                            ;25
                  |L3.118|
000076  1c68              ADDS     r0,r5,#1              ;10
000078  b285              UXTH     r5,r0                 ;10
                  |L3.122|
00007a  4630              MOV      r0,r6                 ;10
00007c  f7fffffe          BL       strlen
000080  42a8              CMP      r0,r5                 ;10
000082  d2c8              BCS      |L3.22|
000084  4648              MOV      r0,r9                 ;32
000086  e7d3              B        |L3.48|
;;;34     
                          ENDP

                  |L3.136|
000088  3139322e          DCB      "192.168.34.232",0
00008c  3136382e
000090  33342e32
000094  333200  
000097  00                DCB      0
                  |L3.152|
                          DCD      0x40700000

                          AREA ||i.IP_ICC||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  IP_ICC PROC
;;;35     /*IP号的整数转字符串*/
;;;36     char *IP_ICC(int num)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;38     	  char *ipstr=NULL; 
000006  2600              MOVS     r6,#0
;;;39     		uint32_t ip_int_index[4],ip_temp_numbr=24;
000008  2518              MOVS     r5,#0x18
;;;40         for(uint16_t j=0;j<4;j++)  
00000a  2000              MOVS     r0,#0
00000c  e008              B        |L4.32|
                  |L4.14|
;;;41         {  
;;;42             ip_int_index[j]=(num>>ip_temp_numbr)&0xFF;  
00000e  fa44f105          ASR      r1,r4,r5
000012  b2c9              UXTB     r1,r1
000014  aa02              ADD      r2,sp,#8
000016  f8421020          STR      r1,[r2,r0,LSL #2]
;;;43             ip_temp_numbr-=8;  
00001a  3d08              SUBS     r5,r5,#8
00001c  1c41              ADDS     r1,r0,#1              ;40
00001e  b288              UXTH     r0,r1                 ;40
                  |L4.32|
000020  2804              CMP      r0,#4                 ;40
000022  dbf4              BLT      |L4.14|
;;;44         }  
;;;45       
;;;46         if ((ipstr=(char *)malloc(17*sizeof(char)))==NULL)  
000024  2011              MOVS     r0,#0x11
000026  f7fffffe          BL       malloc
00002a  1e06              SUBS     r6,r0,#0
00002c  d101              BNE      |L4.50|
                  |L4.46|
;;;47         {  
;;;48             return 0;  
;;;49         }  
;;;50           
;;;51         sprintf(ipstr,"%d.%d.%d.%d",ip_int_index[0],ip_int_index[1],ip_int_index[2],ip_int_index[3]);  
;;;52       
;;;53         return ipstr;  
;;;54     }	
00002e  b006              ADD      sp,sp,#0x18
000030  bd70              POP      {r4-r6,pc}
                  |L4.50|
000032  e9dd0104          LDRD     r0,r1,[sp,#0x10]      ;51
000036  e9cd0100          STRD     r0,r1,[sp,#0]         ;51
00003a  a104              ADR      r1,|L4.76|
00003c  4630              MOV      r0,r6                 ;51
00003e  e9dd2302          LDRD     r2,r3,[sp,#8]         ;51
000042  f7fffffe          BL       __2sprintf
000046  4630              MOV      r0,r6                 ;53
000048  e7f1              B        |L4.46|
;;;55     
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
00004c  25642e25          DCB      "%d.%d.%d.%d",0
000050  642e2564
000054  2e256400

                          AREA ||i.P_ICC||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  P_ICC PROC
;;;72     /*端口数组转字符串*/
;;;73     char *P_ICC(uint8_t *Array)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
000002  4604              MOV      r4,r0
;;;75     		char *ipstr=NULL; 
000004  2500              MOVS     r5,#0
;;;76     
;;;77     		uint16_t num;
;;;78     	  num=Array[0]<<8|Array[1];
000006  7860              LDRB     r0,[r4,#1]
000008  7821              LDRB     r1,[r4,#0]
00000a  ea402601          ORR      r6,r0,r1,LSL #8
;;;79         if ((ipstr=(char *)malloc(17*sizeof(char)))==NULL)  
00000e  2011              MOVS     r0,#0x11
000010  f7fffffe          BL       malloc
000014  1e05              SUBS     r5,r0,#0
000016  d100              BNE      |L5.26|
                  |L5.24|
;;;80         {  
;;;81             return 0;  
;;;82         }  
;;;83           
;;;84         sprintf(ipstr,"%d",num);  
;;;85       
;;;86         return ipstr;  
;;;87     }
000018  bd70              POP      {r4-r6,pc}
                  |L5.26|
00001a  4632              MOV      r2,r6                 ;84
00001c  a102              ADR      r1,|L5.40|
00001e  4628              MOV      r0,r5                 ;84
000020  f7fffffe          BL       __2sprintf
000024  4628              MOV      r0,r5                 ;86
000026  e7f7              B        |L5.24|
;;;88     /*数组转化为字符串*/
                          ENDP

                  |L5.40|
000028  256400            DCB      "%d",0
00002b  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\int_char_change.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_int_char_change_c_IP_CCI____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_int_char_change_c_IP_CCI____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_int_char_change_c_IP_CCI____REVSH|
#line 128
|__asm___17_int_char_change_c_IP_CCI____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
