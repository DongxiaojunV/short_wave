; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\main.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;265    
;;;266    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;267    {
;;;268        xMutex = xSemaphoreCreateMutex();   //创建互斥信号量
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4903              LDR      r1,|L1.24|
00000a  6008              STR      r0,[r1,#0]  ; xMutex
;;;269    
;;;270        if(xMutex == NULL)
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]  ; xMutex
000010  b908              CBNZ     r0,|L1.22|
;;;271        {
;;;272    		#if	PRINTF_EN
;;;273    //        printf("xSemaphoreCreateMutex failure!\r\n");
;;;274    		#endif
;;;275    		
;;;276            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;277            for(;;)
000012  bf00              NOP      
                  |L1.20|
000014  e7fe              B        |L1.20|
                  |L1.22|
;;;278            {
;;;279    
;;;280            }
;;;281        }
;;;282    
;;;283    }
000016  bd10              POP      {r4,pc}
;;;284    /*
                          ENDP

                  |L1.24|
                          DCD      xMutex

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;647    */
;;;648    static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;649    {
;;;650    	xTaskCreate( W5500_APP, 						/* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a30              LDR      r2,|L2.200|
000006  2306              MOVS     r3,#6
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7280          MOV      r2,#0x100
000016  a12d              ADR      r1,|L2.204|
000018  482f              LDR      r0,|L2.216|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;651    								 "W5500_APP",   					/* 任务名    */
;;;652    								 256,            					/* 任务栈大小，单位word，也就是4字节 */
;;;653    								 NULL,           					/* 任务参数  */
;;;654    								 6,              					/* 任务优先级*/
;;;655    								 &xW5500Task_APP );					/* 任务句柄  */
;;;656    	
;;;657    	xTaskCreate( Task_App,				  			/* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a2e              LDR      r2,|L2.220|
000022  2307              MOVS     r3,#7
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f62c0          MOV      r2,#0x600
000032  a12b              ADR      r1,|L2.224|
000034  482d              LDR      r0,|L2.236|
000036  f7fffffe          BL       xTaskGenericCreate
;;;658                     "Task_App",   						/* 任务名    */
;;;659                     1536,            					/* 任务栈大小，单位word，也就是4字节 */
;;;660                     NULL,           					/* 任务参数  */
;;;661                     7,              					/* 任务优先级*/
;;;662                     &xHandleTask_App );				/* 任务句柄  */
;;;663    	
;;;664        xTaskCreate( Task_Upper_Computer,  				/* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a2c              LDR      r2,|L2.240|
00003e  2305              MOVS     r3,#5
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  f44f7220          MOV      r2,#0x280
00004e  a129              ADR      r1,|L2.244|
000050  482d              LDR      r0,|L2.264|
000052  f7fffffe          BL       xTaskGenericCreate
;;;665                     "Task_Upper_Computer",   			/* 任务名    */
;;;666                     640,            					/* 任务栈大小，单位word，也就是4字节 */
;;;667                     NULL,           					/* 任务参数  */
;;;668                     5,              					/* 任务优先级*/
;;;669                     &xHandleTask_Upper_Computer );		/* 任务句柄  */
;;;670    
;;;671        xTaskCreate( Task_Hardware_Monitor,				/* 任务函数  */
000056  2000              MOVS     r0,#0
000058  4a2c              LDR      r2,|L2.268|
00005a  2304              MOVS     r3,#4
00005c  e9cd2001          STRD     r2,r0,[sp,#4]
000060  9300              STR      r3,[sp,#0]
000062  9003              STR      r0,[sp,#0xc]
000064  4603              MOV      r3,r0
000066  f44f7220          MOV      r2,#0x280
00006a  a129              ADR      r1,|L2.272|
00006c  482e              LDR      r0,|L2.296|
00006e  f7fffffe          BL       xTaskGenericCreate
;;;672                     "Task_Hardware_Monitor",   		/* 任务名    */
;;;673                     640,            					/* 任务栈大小，单位word，也就是4字节 */
;;;674                     NULL,           					/* 任务参数  */
;;;675                     4,              					/* 任务优先级*/
;;;676                     &xHandleTask_Hardware_Monitor );	/* 任务句柄  */
;;;677    
;;;678        xTaskCreate( Task_MT2000,  						/* 任务函数  */
000072  2000              MOVS     r0,#0
000074  4a2d              LDR      r2,|L2.300|
000076  2303              MOVS     r3,#3
000078  e9cd2001          STRD     r2,r0,[sp,#4]
00007c  9300              STR      r3,[sp,#0]
00007e  9003              STR      r0,[sp,#0xc]
000080  4603              MOV      r3,r0
000082  f44f7220          MOV      r2,#0x280
000086  a12a              ADR      r1,|L2.304|
000088  482c              LDR      r0,|L2.316|
00008a  f7fffffe          BL       xTaskGenericCreate
;;;679                     "Task_MT2000",   					/* 任务名    */
;;;680                     640,            					/* 任务栈大小，单位word，也就是4字节 */
;;;681                     NULL,           					/* 任务参数  */
;;;682                     3,              					/* 任务优先级*/
;;;683                     &xHandleTask_MT2000 );				/* 任务句柄  */
;;;684    
;;;685        xTaskCreate( Task_TH,  							/* 任务函数  */
00008e  2000              MOVS     r0,#0
000090  4a2b              LDR      r2,|L2.320|
000092  2302              MOVS     r3,#2
000094  e9cd2001          STRD     r2,r0,[sp,#4]
000098  9300              STR      r3,[sp,#0]
00009a  9003              STR      r0,[sp,#0xc]
00009c  4603              MOV      r3,r0
00009e  f44f7280          MOV      r2,#0x100
0000a2  a128              ADR      r1,|L2.324|
0000a4  4829              LDR      r0,|L2.332|
0000a6  f7fffffe          BL       xTaskGenericCreate
;;;686                     "Task_TH",   						/* 任务名    */
;;;687                     256,            					/* 任务栈大小，单位word，也就是4字节 */
;;;688                     NULL,           					/* 任务参数  */
;;;689                     2,              					/* 任务优先级*/
;;;690                     &xHandleTask_TH );					/* 任务句柄  */
;;;691    
;;;692        xTaskCreate( Task_Alarm, 						/* 任务函数  */
0000aa  2000              MOVS     r0,#0
0000ac  4a28              LDR      r2,|L2.336|
0000ae  2301              MOVS     r3,#1
0000b0  e9cd2001          STRD     r2,r0,[sp,#4]
0000b4  9300              STR      r3,[sp,#0]
0000b6  9003              STR      r0,[sp,#0xc]
0000b8  4603              MOV      r3,r0
0000ba  f44f7280          MOV      r2,#0x100
0000be  a125              ADR      r1,|L2.340|
0000c0  4827              LDR      r0,|L2.352|
0000c2  f7fffffe          BL       xTaskGenericCreate
;;;693                     "Task_Alarm",   					/* 任务名    */
;;;694                     256,            					/* 任务栈大小，单位word，也就是4字节 */
;;;695                     NULL,           					/* 任务参数  */
;;;696                     1,              					/* 任务优先级*/
;;;697                     &xHandleTask_Alarm );				/* 任务句柄  */
;;;698    				 
;;;699    	}
0000c6  bd1f              POP      {r0-r4,pc}
;;;700    
                          ENDP

                  |L2.200|
                          DCD      xW5500Task_APP
                  |L2.204|
0000cc  57353530          DCB      "W5500_APP",0
0000d0  305f4150
0000d4  5000    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L2.216|
                          DCD      W5500_APP
                  |L2.220|
                          DCD      xHandleTask_App
                  |L2.224|
0000e0  5461736b          DCB      "Task_App",0
0000e4  5f417070
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L2.236|
                          DCD      Task_App
                  |L2.240|
                          DCD      xHandleTask_Upper_Computer
                  |L2.244|
0000f4  5461736b          DCB      "Task_Upper_Computer",0
0000f8  5f557070
0000fc  65725f43
000100  6f6d7075
000104  74657200
                  |L2.264|
                          DCD      Task_Upper_Computer
                  |L2.268|
                          DCD      xHandleTask_Hardware_Monitor
                  |L2.272|
000110  5461736b          DCB      "Task_Hardware_Monitor",0
000114  5f486172
000118  64776172
00011c  655f4d6f
000120  6e69746f
000124  7200    
000126  00                DCB      0
000127  00                DCB      0
                  |L2.296|
                          DCD      Task_Hardware_Monitor
                  |L2.300|
                          DCD      xHandleTask_MT2000
                  |L2.304|
000130  5461736b          DCB      "Task_MT2000",0
000134  5f4d5432
000138  30303000
                  |L2.316|
                          DCD      Task_MT2000
                  |L2.320|
                          DCD      xHandleTask_TH
                  |L2.324|
000144  5461736b          DCB      "Task_TH",0
000148  5f544800
                  |L2.332|
                          DCD      Task_TH
                  |L2.336|
                          DCD      xHandleTask_Alarm
                  |L2.340|
000154  5461736b          DCB      "Task_Alarm",0
000158  5f416c61
00015c  726d00  
00015f  00                DCB      0
                  |L2.352|
                          DCD      Task_Alarm

                          AREA ||i.System_Status_Clean||, CODE, READONLY, ALIGN=2

                  System_Status_Clean PROC
;;;155    
;;;156    void System_Status_Clean(void)
000000  b510              PUSH     {r4,lr}
;;;157    {
;;;158        System.emission = 0x00;
000002  2000              MOVS     r0,#0
000004  4911              LDR      r1,|L3.76|
000006  7588              STRB     r0,[r1,#0x16]
;;;159        System.mode = 0;
000008  75c8              STRB     r0,[r1,#0x17]
;;;160        System.method = 0;
00000a  7648              STRB     r0,[r1,#0x19]
;;;161        System.channel = 0;
00000c  7688              STRB     r0,[r1,#0x1a]
;;;162    
;;;163        System.power[0] = 0;
00000e  76c8              STRB     r0,[r1,#0x1b]
;;;164        System.power[1] = 0;
000010  2100              MOVS     r1,#0
000012  480e              LDR      r0,|L3.76|
000014  7701              STRB     r1,[r0,#0x1c]
;;;165        System.power[2] = 0;
000016  7741              STRB     r1,[r0,#0x1d]
;;;166    
;;;167        memset(System.freq1, 0, 10);
000018  301e              ADDS     r0,r0,#0x1e
00001a  6001              STR      r1,[r0,#0]  ; System
00001c  6041              STR      r1,[r0,#4]  ; System
00001e  8101              STRH     r1,[r0,#8]
;;;168        memset(System.freq2, 0, 10);
000020  210a              MOVS     r1,#0xa
000022  300a              ADDS     r0,r0,#0xa
000024  f7fffffe          BL       __aeabi_memclr4
;;;169        memset(System.freq3, 0, 10);
000028  4808              LDR      r0,|L3.76|
00002a  3032              ADDS     r0,r0,#0x32
00002c  2100              MOVS     r1,#0
00002e  6001              STR      r1,[r0,#0]  ; System
000030  6041              STR      r1,[r0,#4]  ; System
000032  8101              STRH     r1,[r0,#8]
;;;170    
;;;171        memset(System.forward, 0, 4);
000034  3832              SUBS     r0,r0,#0x32
000036  63c1              STR      r1,[r0,#0x3c]  ; System
;;;172        memset(System.reverse, 0, 4);
000038  f8c01042          STR      r1,[r0,#0x42]  ; System
;;;173        memset(System.swr, 0, 2);
00003c  f8a01048          STRH     r1,[r0,#0x48]
;;;174    
;;;175    
;;;176        System.Forward_Power = 0;
000040  2000              MOVS     r0,#0
000042  4902              LDR      r1,|L3.76|
000044  66c8              STR      r0,[r1,#0x6c]  ; System
;;;177        System.Reverse_Power = 0;
000046  6708              STR      r0,[r1,#0x70]  ; System
;;;178        System.Standing_wave_ratio = 0;
000048  67c8              STR      r0,[r1,#0x7c]  ; System
;;;179    
;;;180    //		System.Voltage = 0.0;
;;;181    //		System.Electricity = 0.0;		
;;;182    }
00004a  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  |L3.76|
                          DCD      System

                          AREA ||i.System_Status_Init||, CODE, READONLY, ALIGN=2

                  System_Status_Init PROC
;;;129    uint8_t Status_OPENING_Count=0;
;;;130    void System_Status_Init(void)	//详见main.h
000000  b510              PUSH     {r4,lr}
;;;131    {
;;;132        /* 系统状态 */
;;;133        System.already_init = 0;
000002  2000              MOVS     r0,#0
000004  490c              LDR      r1,|L4.56|
000006  7088              STRB     r0,[r1,#2]
;;;134        System.already_swept = 0;
000008  70c8              STRB     r0,[r1,#3]
;;;135    
;;;136        /* 标志位 */
;;;137        System.open = 0;					//开机	0:关机状态	1:正在开机(保留)	2:已经开机
00000a  7308              STRB     r0,[r1,#0xc]
;;;138        System.close = 0;					//关机	1:正在关机，会开机失败
00000c  7348              STRB     r0,[r1,#0xd]
;;;139        System.sweep = 0;					//扫频	1:正在扫频	2:完成扫频，需写入到flash
00000e  7388              STRB     r0,[r1,#0xe]
;;;140        System.cancel_sweeping = 0;			//取消扫频
000010  73c8              STRB     r0,[r1,#0xf]
;;;141        System.Scan_Freq_flag = 0;			//扫频频段
000012  7408              STRB     r0,[r1,#0x10]
;;;142        System.achieve_add_sub = 0;			//增加/减小功率状态	1:正在调节功率
000014  7448              STRB     r0,[r1,#0x11]
;;;143        System.modify_power = 0;			//修改功率
000016  7488              STRB     r0,[r1,#0x12]
;;;144        System.cancel_add_sub = 0;			//取消功率增减
000018  74c8              STRB     r0,[r1,#0x13]
;;;145        System.stop = 0;					//紧急停止
00001a  7548              STRB     r0,[r1,#0x15]
;;;146    		System.time_update_flag = 0x00;	//是否更新了系统时间
00001c  7288              STRB     r0,[r1,#0xa]
;;;147    		System.Power_Adjustment=0;		//增减功率执行标记
00001e  f88100a8          STRB     r0,[r1,#0xa8]
;;;148        /* 系统状态--MT2000_Rx更新 */
;;;149        System.status = SYSTEM_SHUTDOWN;
000022  2004              MOVS     r0,#4
000024  72c8              STRB     r0,[r1,#0xb]
;;;150        System.Voltage = 0.0;
000026  2000              MOVS     r0,#0
000028  6748              STR      r0,[r1,#0x74]  ; System
;;;151        System.Electricity = 0.0;
00002a  6788              STR      r0,[r1,#0x78]  ; System
;;;152    		System.Model[0]=Device_Version;
00002c  20b1              MOVS     r0,#0xb1
00002e  7048              STRB     r0,[r1,#1]
;;;153        System_Status_Clean();
000030  f7fffffe          BL       System_Status_Clean
;;;154    }
000034  bd10              POP      {r4,pc}
;;;155    
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      System

                          AREA ||i.System_Status_Update||, CODE, READONLY, ALIGN=2

                  System_Status_Update PROC
;;;183    
;;;184    void System_Status_Update(void)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186        /*-----------------------系统状态更新----------------------------*/
;;;187    //    uint8_t freq1_len=0, freq2_len=0, freq3_len=0;
;;;188    	
;;;189        System.mode = GT2000_Rx.Gt2000_mode;   //系统工作模式是//1固频、2双频、3三频、4AM 
000002  4852              LDR      r0,|L5.332|
000004  7940              LDRB     r0,[r0,#5]  ; GT2000_Rx
000006  4952              LDR      r1,|L5.336|
000008  75c8              STRB     r0,[r1,#0x17]
;;;190        System.method = 0;				//暂时没用//工作方式，FM
00000a  2000              MOVS     r0,#0
00000c  7648              STRB     r0,[r1,#0x19]
;;;191        System.channel = 1;
00000e  2001              MOVS     r0,#1
000010  7688              STRB     r0,[r1,#0x1a]
;;;192    	
;;;193        if( System.sweep == 0x01 )
000012  4608              MOV      r0,r1
000014  7b80              LDRB     r0,[r0,#0xe]  ; System
000016  2801              CMP      r0,#1
000018  d106              BNE      |L5.40|
;;;194        {
;;;195    			System.power[0] = 180;		//扫频时，只开一个频率，幅度值为8
00001a  20b4              MOVS     r0,#0xb4
00001c  76c8              STRB     r0,[r1,#0x1b]
;;;196    			System.power[1] = 0;
00001e  2100              MOVS     r1,#0
000020  484b              LDR      r0,|L5.336|
000022  7701              STRB     r1,[r0,#0x1c]
;;;197    			System.power[2] = 0;
000024  7741              STRB     r1,[r0,#0x1d]
000026  e01b              B        |L5.96|
                  |L5.40|
;;;198        }
;;;199        else	if( Monitor.hard_control == 0x00 )		//不是硬件接管，直接覆盖为PC下发的功率等级
000028  484a              LDR      r0,|L5.340|
00002a  f89000ca          LDRB     r0,[r0,#0xca]  ; Monitor
00002e  b960              CBNZ     r0,|L5.74|
;;;200        {
;;;201            System.power[0] = PC_Cmd.power[0];
000030  4849              LDR      r0,|L5.344|
000032  7880              LDRB     r0,[r0,#2]  ; PC_Cmd
000034  4946              LDR      r1,|L5.336|
000036  76c8              STRB     r0,[r1,#0x1b]
;;;202            System.power[1] = PC_Cmd.power[1];
000038  4847              LDR      r0,|L5.344|
00003a  78c1              LDRB     r1,[r0,#3]
00003c  4844              LDR      r0,|L5.336|
00003e  7701              STRB     r1,[r0,#0x1c]
;;;203            System.power[2] = PC_Cmd.power[2];
000040  4845              LDR      r0,|L5.344|
000042  7901              LDRB     r1,[r0,#4]
000044  4842              LDR      r0,|L5.336|
000046  7741              STRB     r1,[r0,#0x1d]
000048  e00a              B        |L5.96|
                  |L5.74|
;;;204        }
;;;205    		else if(Monitor.hard_control == 1)		//硬件接管时，取激励器的返回值
00004a  4842              LDR      r0,|L5.340|
00004c  f89000ca          LDRB     r0,[r0,#0xca]  ; Monitor
000050  2801              CMP      r0,#1
000052  d105              BNE      |L5.96|
;;;206    		{
;;;207    			Range_Power(&GT2000_Rx);  /* 功率转化为系统幅度值,保存在System.power[0] */
000054  483d              LDR      r0,|L5.332|
000056  f7fffffe          BL       Range_Power
;;;208    			memset(System.power+1,0,2);	  //因为GT2000新机器只设置一个功率，只显示一个功率，默认清零power[1]、power[2]。
00005a  483d              LDR      r0,|L5.336|
00005c  2100              MOVS     r1,#0
00005e  8381              STRH     r1,[r0,#0x1c]
                  |L5.96|
;;;209    		}
;;;210    
;;;211        memset(System.freq1, 0, 10); //清零System.freq1[10]
000060  483b              LDR      r0,|L5.336|
000062  301e              ADDS     r0,r0,#0x1e
000064  2100              MOVS     r1,#0
000066  6001              STR      r1,[r0,#0]  ; System
000068  6041              STR      r1,[r0,#4]  ; System
00006a  8101              STRH     r1,[r0,#8]
;;;212        memset(System.freq2, 0, 10);
00006c  210a              MOVS     r1,#0xa
00006e  300a              ADDS     r0,r0,#0xa
000070  f7fffffe          BL       __aeabi_memclr4
;;;213        memset(System.freq3, 0, 10);
000074  4836              LDR      r0,|L5.336|
000076  3032              ADDS     r0,r0,#0x32
000078  2100              MOVS     r1,#0
00007a  6001              STR      r1,[r0,#0]  ; System
00007c  6041              STR      r1,[r0,#4]  ; System
00007e  8101              STRH     r1,[r0,#8]
;;;214    
;;;215    //    freq1_len = strlen((const char*)GT2000_Rx.Gt2000_freq1);
;;;216    //    freq2_len = strlen((const char*)GT2000_Rx.Gt2000_freq2);
;;;217    //    freq3_len = strlen((const char*)GT2000_Rx.Gt2000_freq3);
;;;218        memcpy(System.freq1, GT2000_Rx.Gt2000_freq1, 2); //赋值查询到的发射机频率给上位机
000080  3832              SUBS     r0,r0,#0x32
000082  4932              LDR      r1,|L5.332|
000084  8c89              LDRH     r1,[r1,#0x24]  ; GT2000_Rx
000086  83c1              STRH     r1,[r0,#0x1e]
;;;219    		Trans_printf("main--GT2000_Rx.Gt2000_freq1= %x %x \n",GT2000_Rx.Gt2000_freq1[0],\
000088  4830              LDR      r0,|L5.332|
00008a  f8902025          LDRB     r2,[r0,#0x25]
00008e  f8901024          LDRB     r1,[r0,#0x24]  ; GT2000_Rx
000092  a032              ADR      r0,|L5.348|
000094  f7fffffe          BL       Trans_printf
;;;220    		GT2000_Rx.Gt2000_freq1[1]);
;;;221    
;;;222        if( System.mode == 2 )
000098  482d              LDR      r0,|L5.336|
00009a  7dc0              LDRB     r0,[r0,#0x17]  ; System
00009c  2802              CMP      r0,#2
00009e  d10c              BNE      |L5.186|
;;;223        {
;;;224            memcpy(System.freq2, GT2000_Rx.Gt2000_freq2, 2);
0000a0  482b              LDR      r0,|L5.336|
0000a2  492a              LDR      r1,|L5.332|
0000a4  8dc9              LDRH     r1,[r1,#0x2e]  ; GT2000_Rx
0000a6  8501              STRH     r1,[r0,#0x28]
;;;225    			 Trans_printf("main--GT2000_Rx.Gt2000_freq2= %x %x  \n",GT2000_Rx.Gt2000_freq2[0],\
0000a8  4828              LDR      r0,|L5.332|
0000aa  f890202f          LDRB     r2,[r0,#0x2f]
0000ae  f890102e          LDRB     r1,[r0,#0x2e]  ; GT2000_Rx
0000b2  a034              ADR      r0,|L5.388|
0000b4  f7fffffe          BL       Trans_printf
0000b8  e00a              B        |L5.208|
                  |L5.186|
;;;226    	   	GT2000_Rx.Gt2000_freq2[1]);
;;;227        }
;;;228        else	if( System.mode == 3 )
0000ba  4825              LDR      r0,|L5.336|
0000bc  7dc0              LDRB     r0,[r0,#0x17]  ; System
0000be  2803              CMP      r0,#3
0000c0  d106              BNE      |L5.208|
;;;229        {
;;;230            memcpy(System.freq2, GT2000_Rx.Gt2000_freq2, 2);
0000c2  4823              LDR      r0,|L5.336|
0000c4  4921              LDR      r1,|L5.332|
0000c6  8dc9              LDRH     r1,[r1,#0x2e]  ; GT2000_Rx
0000c8  8501              STRH     r1,[r0,#0x28]
;;;231            memcpy(System.freq3, GT2000_Rx.Gt2000_freq3, 2);
0000ca  4920              LDR      r1,|L5.332|
0000cc  8f09              LDRH     r1,[r1,#0x38]  ; GT2000_Rx
0000ce  8641              STRH     r1,[r0,#0x32]
                  |L5.208|
;;;232    //			Trans_printf("main--GT2000_Rx.Gt2000_freq2_3= %x %x %x %x  \n",GT2000_Rx.Gt2000_freq2[0],\
;;;233    //	   	GT2000_Rx.Gt2000_freq2[1],GT2000_Rx.Gt2000_freq3[0],GT2000_Rx.Gt2000_freq3[1]);
;;;234        }
;;;235    
;;;236    
;;;237        if( GT2000_Rx.sys_emit_open == 1 )			//发射状态  //在MT2000_protocol.c中赋值
0000d0  481e              LDR      r0,|L5.332|
0000d2  f8900022          LDRB     r0,[r0,#0x22]  ; GT2000_Rx
0000d6  2801              CMP      r0,#1
0000d8  d102              BNE      |L5.224|
;;;238            System.emission = 0x01;
0000da  491d              LDR      r1,|L5.336|
0000dc  7588              STRB     r0,[r1,#0x16]
0000de  e006              B        |L5.238|
                  |L5.224|
;;;239        else	if( GT2000_Rx.sys_emit_open == 0 )	//停止状态
0000e0  481a              LDR      r0,|L5.332|
0000e2  f8900022          LDRB     r0,[r0,#0x22]  ; GT2000_Rx
0000e6  b910              CBNZ     r0,|L5.238|
;;;240            System.emission = 0x00;
0000e8  2000              MOVS     r0,#0
0000ea  4919              LDR      r1,|L5.336|
0000ec  7588              STRB     r0,[r1,#0x16]
                  |L5.238|
;;;241    //    Trans_printf(" sys_emit_open_To_System.emission = %02x GT2000_Rx.sys_emit_open =%02x\n",System.emission,GT2000_Rx.sys_emit_open );  //打印
;;;242    		
;;;243        memcpy(System.forward, GT2000_Rx.forward_power, 4);
0000ee  4818              LDR      r0,|L5.336|
0000f0  4916              LDR      r1,|L5.332|
0000f2  f8d1100a          LDR      r1,[r1,#0xa]  ; GT2000_Rx
0000f6  63c1              STR      r1,[r0,#0x3c]  ; System
;;;244        memcpy(System.reverse, GT2000_Rx.reverse_power, 4);
0000f8  4914              LDR      r1,|L5.332|
0000fa  6909              LDR      r1,[r1,#0x10]  ; GT2000_Rx
0000fc  f8c01042          STR      r1,[r0,#0x42]  ; System
;;;245    //    memcpy(System.swr, GT2000_Rx.swr, 4);
;;;246    		//		Trans_printf(" 发射机驻波比直接读取数字不对。 ");
;;;247    
;;;248    		
;;;249    		if(System.Launch_Switch_state==1)			//从发射机查询到的发射状态,待测试
000100  f8900058          LDRB     r0,[r0,#0x58]  ; System
000104  2801              CMP      r0,#1
000106  d10c              BNE      |L5.290|
;;;250    		{
;;;251    			if(System.status!=SYSTEM_SCAN&&System.status!=SYSTEM_ALARM)
000108  4811              LDR      r0,|L5.336|
00010a  7ac0              LDRB     r0,[r0,#0xb]  ; System
00010c  2805              CMP      r0,#5
00010e  d00b              BEQ      |L5.296|
000110  480f              LDR      r0,|L5.336|
000112  7ac0              LDRB     r0,[r0,#0xb]  ; System
000114  2811              CMP      r0,#0x11
000116  d007              BEQ      |L5.296|
;;;252    			{
;;;253    				System.status=SYSTEM_EMISSING;
000118  2001              MOVS     r0,#1
00011a  490d              LDR      r1,|L5.336|
00011c  72c8              STRB     r0,[r1,#0xb]
;;;254    				System.emission=1;	
00011e  7588              STRB     r0,[r1,#0x16]
000120  e002              B        |L5.296|
                  |L5.290|
;;;255    			}				
;;;256    		}
;;;257    		else
;;;258    		{
;;;259    			System.emission=0;
000122  2000              MOVS     r0,#0
000124  490a              LDR      r1,|L5.336|
000126  7588              STRB     r0,[r1,#0x16]
                  |L5.296|
;;;260    		}
;;;261        
;;;262    		System.Standing_wave_ratio = get_Standing_wave_ratio(System.Forward_Power, System.Reverse_Power);		//计算驻波比
000128  4a09              LDR      r2,|L5.336|
00012a  6f11              LDR      r1,[r2,#0x70]  ; System
00012c  6ed0              LDR      r0,[r2,#0x6c]  ; System
00012e  f7fffffe          BL       get_Standing_wave_ratio
000132  4907              LDR      r1,|L5.336|
000134  67c8              STR      r0,[r1,#0x7c]  ; System
;;;263        Trans_printf(" 1System.Standing_wave_ratio== %f \n",System.Standing_wave_ratio);
000136  6fc8              LDR      r0,[r1,#0x7c]  ; System
000138  f7fffffe          BL       __aeabi_f2d
00013c  4604              MOV      r4,r0
00013e  4622              MOV      r2,r4
000140  460b              MOV      r3,r1
000142  a01a              ADR      r0,|L5.428|
000144  f7fffffe          BL       Trans_printf
;;;264    }
000148  bd70              POP      {r4-r6,pc}
;;;265    
                          ENDP

00014a  0000              DCW      0x0000
                  |L5.332|
                          DCD      GT2000_Rx
                  |L5.336|
                          DCD      System
                  |L5.340|
                          DCD      Monitor
                  |L5.344|
                          DCD      PC_Cmd
                  |L5.348|
00015c  6d61696e          DCB      "main--GT2000_Rx.Gt2000_freq1= %x %x \n",0
000160  2d2d4754
000164  32303030
000168  5f52782e
00016c  47743230
000170  30305f66
000174  72657131
000178  3d202578
00017c  20257820
000180  0a00    
000182  00                DCB      0
000183  00                DCB      0
                  |L5.388|
000184  6d61696e          DCB      "main--GT2000_Rx.Gt2000_freq2= %x %x  \n",0
000188  2d2d4754
00018c  32303030
000190  5f52782e
000194  47743230
000198  30305f66
00019c  72657132
0001a0  3d202578
0001a4  20257820
0001a8  200a00  
0001ab  00                DCB      0
                  |L5.428|
0001ac  20315379          DCB      " 1System.Standing_wave_ratio== %f \n",0
0001b0  7374656d
0001b4  2e537461
0001b8  6e64696e
0001bc  675f7761
0001c0  76655f72
0001c4  6174696f
0001c8  3d3d2025
0001cc  66200a00

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;291    */
;;;292    int main(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;293    {
;;;294    	
;;;295    #if	FIRMWARE_UPDATE_EN
;;;296    		Set_Vector_Table();		
000002  f7fffffe          BL       Set_Vector_Table
;;;297    #endif
;;;298    	__enable_irq();			//开启所有中断
000006  b662              CPSIE    i
;;;299    	/*W5500初始化最好放在这里，不然容易卡程序*/	
;;;300    #if	STM32_W5500_EN
;;;301    	System_Initialization();	//W5500驱动相关初始化
000008  f7fffffe          BL       System_Initialization
;;;302    	Load_Net_Parameters();		//装载网络参数	
00000c  f7fffffe          BL       Load_Net_Parameters
;;;303    	W5500_Hardware_Reset();		//硬件复位W5500
000010  f7fffffe          BL       W5500_Hardware_Reset
;;;304    	W5500_Initialization();		//W5500初始化配置
000014  f7fffffe          BL       W5500_Initialization
;;;305    #endif
;;;306    
;;;307        bsp_Init();
000018  f7fffffe          BL       bsp_Init
;;;308        AppObjCreate();   //创建互斥信号量
00001c  f7fffffe          BL       AppObjCreate
;;;309        System_Status_Init();		//系统状态初始化
000020  f7fffffe          BL       System_Status_Init
;;;310        clean_all_alarm_flags();	//清除报警标志位
000024  f7fffffe          BL       clean_all_alarm_flags
;;;311        GT2000_Init();				//MT2000_Tx初始化
000028  f7fffffe          BL       GT2000_Init
;;;312    
;;;313    #if	FIRMWARE_UPDATE_EN
;;;314    	uint32_t	app_version_1, app_version_2;
;;;315    	uint8_t 	version[4];
;;;316    
;;;317    	APP_Version_Read(APPLICATION_VERSION_ADDRESS, APP_Version_1, APP_Version_2);
00002c  4a8e              LDR      r2,|L6.616|
00002e  498f              LDR      r1,|L6.620|
000030  488f              LDR      r0,|L6.624|
000032  f7fffffe          BL       APP_Version_Read
;;;318    	app_version_1 = (APP_Version_1[0]<<24) + (APP_Version_1[1]<<16) + (APP_Version_1[2]<<8) + (APP_Version_1[3]<<0);
000036  488d              LDR      r0,|L6.620|
000038  7800              LDRB     r0,[r0,#0]  ; APP_Version_1
00003a  0600              LSLS     r0,r0,#24
00003c  498b              LDR      r1,|L6.620|
00003e  7849              LDRB     r1,[r1,#1]  ; APP_Version_1
000040  eb004001          ADD      r0,r0,r1,LSL #16
000044  4989              LDR      r1,|L6.620|
000046  7889              LDRB     r1,[r1,#2]  ; APP_Version_1
000048  eb002001          ADD      r0,r0,r1,LSL #8
00004c  4987              LDR      r1,|L6.620|
00004e  78c9              LDRB     r1,[r1,#3]  ; APP_Version_1
000050  1844              ADDS     r4,r0,r1
;;;319    	app_version_2 = (APP_Version_2[0]<<24) + (APP_Version_2[1]<<16) + (APP_Version_2[2]<<8) + (APP_Version_2[3]<<0);
000052  4885              LDR      r0,|L6.616|
000054  7800              LDRB     r0,[r0,#0]  ; APP_Version_2
000056  0600              LSLS     r0,r0,#24
000058  4983              LDR      r1,|L6.616|
00005a  7849              LDRB     r1,[r1,#1]  ; APP_Version_2
00005c  eb004001          ADD      r0,r0,r1,LSL #16
000060  4981              LDR      r1,|L6.616|
000062  7889              LDRB     r1,[r1,#2]  ; APP_Version_2
000064  eb002001          ADD      r0,r0,r1,LSL #8
000068  497f              LDR      r1,|L6.616|
00006a  78c9              LDRB     r1,[r1,#3]  ; APP_Version_2
00006c  1845              ADDS     r5,r0,r1
;;;320    		
;;;321    	if( (app_version_1 == 0xFFFFFFFF) && (app_version_2 == 0xFFFFFFFF) )
00006e  1c60              ADDS     r0,r4,#1
000070  b910              CBNZ     r0,|L6.120|
000072  1c68              ADDS     r0,r5,#1
000074  2800              CMP      r0,#0
000076  d056              BEQ      |L6.294|
                  |L6.120|
;;;322    	{
;;;323    		//版本无效
;;;324    	}
;;;325    	else	if( Get_APP_Version() == 0x01 )
000078  f7fffffe          BL       Get_APP_Version
00007c  2801              CMP      r0,#1
00007e  d12a              BNE      |L6.214|
;;;326    	{
;;;327    		if( app_version_2 == 0xFFFFFFFF )
000080  1c68              ADDS     r0,r5,#1
000082  b998              CBNZ     r0,|L6.172|
;;;328    		{
;;;329    			//版本无效
;;;330    			APP_Version_2[0] = (APP_VERSION>>0) & 0xFF;
000084  2024              MOVS     r0,#0x24
000086  4978              LDR      r1,|L6.616|
000088  7008              STRB     r0,[r1,#0]
;;;331    			APP_Version_2[1] = (APP_VERSION>>8) & 0xFF;
00008a  2010              MOVS     r0,#0x10
00008c  7048              STRB     r0,[r1,#1]
;;;332    			APP_Version_2[2] = (APP_VERSION>>16) & 0xFF;
00008e  2021              MOVS     r0,#0x21
000090  7088              STRB     r0,[r1,#2]
;;;333    			APP_Version_2[3] = (APP_VERSION>>24) & 0xFF;
000092  2020              MOVS     r0,#0x20
000094  70c8              STRB     r0,[r1,#3]
;;;334    			APP_Version_Write(APPLICATION_VERSION_ADDRESS, APP_Version_1, APP_Version_2);
000096  460a              MOV      r2,r1
000098  4974              LDR      r1,|L6.620|
00009a  4875              LDR      r0,|L6.624|
00009c  f7fffffe          BL       APP_Version_Write
;;;335    			APP_Version_Read(APPLICATION_VERSION_ADDRESS, APP_Version_1, APP_Version_2);
0000a0  4a71              LDR      r2,|L6.616|
0000a2  4972              LDR      r1,|L6.620|
0000a4  4872              LDR      r0,|L6.624|
0000a6  f7fffffe          BL       APP_Version_Read
0000aa  e03c              B        |L6.294|
                  |L6.172|
;;;336    		}
;;;337    		else	if( (app_version_1 != 0xFFFFFFFF) && (app_version_1 > APP_VERSION) )	//现在是旧版本
0000ac  1c60              ADDS     r0,r4,#1
0000ae  2800              CMP      r0,#0
0000b0  d039              BEQ      |L6.294|
0000b2  4870              LDR      r0,|L6.628|
0000b4  4284              CMP      r4,r0
0000b6  d936              BLS      |L6.294|
;;;338    		{
;;;339    			version[0] = 0xFF;
0000b8  20ff              MOVS     r0,#0xff
0000ba  f88d0004          STRB     r0,[sp,#4]
;;;340    			version[1] = 0xFF;
0000be  f88d0005          STRB     r0,[sp,#5]
;;;341    			version[2] = 0xFF;
0000c2  f88d0006          STRB     r0,[sp,#6]
;;;342    			version[3] = 0xFF;
0000c6  f88d0007          STRB     r0,[sp,#7]
;;;343    			
;;;344    			APP_Version_Write(APPLICATION_VERSION_ADDRESS, version, APP_Version_2);
0000ca  4a67              LDR      r2,|L6.616|
0000cc  a901              ADD      r1,sp,#4
0000ce  4868              LDR      r0,|L6.624|
0000d0  f7fffffe          BL       APP_Version_Write
0000d4  e027              B        |L6.294|
                  |L6.214|
;;;345    		}
;;;346    	}
;;;347    	else
;;;348    	{
;;;349    		if( app_version_1 == 0xFFFFFFFF )
0000d6  1c60              ADDS     r0,r4,#1
0000d8  b990              CBNZ     r0,|L6.256|
;;;350    		{
;;;351    			//版本无效
;;;352    			APP_Version_1[0] = (APP_VERSION>>0) & 0xFF;
0000da  2024              MOVS     r0,#0x24
0000dc  4963              LDR      r1,|L6.620|
0000de  7008              STRB     r0,[r1,#0]
;;;353    			APP_Version_1[1] = (APP_VERSION>>8) & 0xFF;
0000e0  2010              MOVS     r0,#0x10
0000e2  7048              STRB     r0,[r1,#1]
;;;354    			APP_Version_1[2] = (APP_VERSION>>16) & 0xFF;
0000e4  2021              MOVS     r0,#0x21
0000e6  7088              STRB     r0,[r1,#2]
;;;355    			APP_Version_1[3] = (APP_VERSION>>24) & 0xFF;
0000e8  2020              MOVS     r0,#0x20
0000ea  70c8              STRB     r0,[r1,#3]
;;;356    			APP_Version_Write(APPLICATION_VERSION_ADDRESS, APP_Version_1, APP_Version_2);
0000ec  4a5e              LDR      r2,|L6.616|
0000ee  4860              LDR      r0,|L6.624|
0000f0  f7fffffe          BL       APP_Version_Write
;;;357    			APP_Version_Read(APPLICATION_VERSION_ADDRESS, APP_Version_1, APP_Version_2);
0000f4  4a5c              LDR      r2,|L6.616|
0000f6  495d              LDR      r1,|L6.620|
0000f8  485d              LDR      r0,|L6.624|
0000fa  f7fffffe          BL       APP_Version_Read
0000fe  e012              B        |L6.294|
                  |L6.256|
;;;358    		}
;;;359    		else	if( (app_version_2 != 0xFFFFFFFF) && (app_version_2 > APP_VERSION) )	//现在是旧版本
000100  1c68              ADDS     r0,r5,#1
000102  b180              CBZ      r0,|L6.294|
000104  485b              LDR      r0,|L6.628|
000106  4285              CMP      r5,r0
000108  d90d              BLS      |L6.294|
;;;360    		{
;;;361    			version[0] = 0xFF;
00010a  20ff              MOVS     r0,#0xff
00010c  f88d0004          STRB     r0,[sp,#4]
;;;362    			version[1] = 0xFF;
000110  f88d0005          STRB     r0,[sp,#5]
;;;363    			version[2] = 0xFF;
000114  f88d0006          STRB     r0,[sp,#6]
;;;364    			version[3] = 0xFF;
000118  f88d0007          STRB     r0,[sp,#7]
;;;365    			
;;;366    			APP_Version_Write(APPLICATION_VERSION_ADDRESS, APP_Version_1, version);
00011c  aa01              ADD      r2,sp,#4
00011e  4953              LDR      r1,|L6.620|
000120  4853              LDR      r0,|L6.624|
000122  f7fffffe          BL       APP_Version_Write
                  |L6.294|
;;;367    		}
;;;368    	}
;;;369    
;;;370    #endif
;;;371      	set_time.tm_year=systmtime.tm_year;
000126  4854              LDR      r0,|L6.632|
000128  6940              LDR      r0,[r0,#0x14]  ; systmtime
00012a  4954              LDR      r1,|L6.636|
00012c  6148              STR      r0,[r1,#0x14]  ; set_time
;;;372        set_time.tm_mon=systmtime.tm_mon;
00012e  4852              LDR      r0,|L6.632|
000130  6900              LDR      r0,[r0,#0x10]  ; systmtime
000132  6108              STR      r0,[r1,#0x10]  ; set_time
;;;373        set_time.tm_mday=systmtime.tm_mday;
000134  4850              LDR      r0,|L6.632|
000136  68c0              LDR      r0,[r0,#0xc]  ; systmtime
000138  60c8              STR      r0,[r1,#0xc]  ; set_time
;;;374        set_time.tm_hour=systmtime.tm_hour;
00013a  484f              LDR      r0,|L6.632|
00013c  6880              LDR      r0,[r0,#8]  ; systmtime
00013e  6088              STR      r0,[r1,#8]  ; set_time
;;;375        set_time.tm_min=systmtime.tm_min;
000140  484d              LDR      r0,|L6.632|
000142  6840              LDR      r0,[r0,#4]  ; systmtime
000144  6048              STR      r0,[r1,#4]  ; set_time
;;;376        set_time.tm_sec=systmtime.tm_sec;
000146  484c              LDR      r0,|L6.632|
000148  6800              LDR      r0,[r0,#0]  ; systmtime
00014a  6008              STR      r0,[r1,#0]  ; set_time
;;;377    		RTC_CheckAndConfig(&set_time);
00014c  4608              MOV      r0,r1
00014e  f7fffffe          BL       RTC_CheckAndConfig
;;;378    		update_RTCtime(RTC_GetCounter(), &set_time);
000152  f7fffffe          BL       RTC_GetCounter
000156  4606              MOV      r6,r0
000158  4948              LDR      r1,|L6.636|
00015a  f7fffffe          BL       update_RTCtime
;;;379    
;;;380    #if	IWDOG_EN			//晶振不起振，会一直复位，等待起振之后再开启看门狗
;;;381    	IWDG_Config(IWDG_Prescaler_64 ,625);	//IWDG 1s 超时溢出
00015e  f2402171          MOV      r1,#0x271
000162  2004              MOVS     r0,#4
000164  f7fffffe          BL       IWDG_Config
;;;382    #endif
;;;383    	
;;;384        /*---------------------------------------------------------------------------------------------------*/
;;;385    
;;;386        Flash_to_AcceptAPP();		//读取报警参数，并置位 System.already_init = 1;
000168  f7fffffe          BL       Flash_to_AcceptAPP
;;;387        Flash2_to_AcceptAPP();		//读取正向功率和驻波比
00016c  f7fffffe          BL       Flash2_to_AcceptAPP
;;;388        Flash3_to_AcceptAPP();		//读取运行图的数量
000170  f7fffffe          BL       Flash3_to_AcceptAPP
;;;389    
;;;390        /*---------------------------------------------------------------------------------------------------*/
;;;391    
;;;392        if( System.already_init == 1 )	//已经完成初始化，打印初始化数据
000174  4842              LDR      r0,|L6.640|
000176  7880              LDRB     r0,[r0,#2]  ; System
000178  2801              CMP      r0,#1
00017a  d002              BEQ      |L6.386|
;;;393        {
;;;394            
;;;395        }
;;;396        else	//未初始化，将接收查询包的CAN_ID作为System.CAN_ID(CAN_ID已经决定了该发射机只能接收到该ID的数据)
;;;397        {
;;;398            System.status = SYSTEM_UNINITIALIZE;		//未初始化状态
00017c  2010              MOVS     r0,#0x10
00017e  4940              LDR      r1,|L6.640|
000180  72c8              STRB     r0,[r1,#0xb]
                  |L6.386|
;;;399    
;;;400            //会在查询后，自适应CAN_ID，否则会一直显示CAN_ID不匹配，一直掉线
;;;401        }
;;;402    
;;;403        if(flash_3_once_flag==1)
000182  4840              LDR      r0,|L6.644|
000184  6800              LDR      r0,[r0,#0]  ; flash_3_once_flag
000186  2801              CMP      r0,#1
000188  d10f              BNE      |L6.426|
;;;404        {
;;;405            if(flash3_Save<=10&&flash3_Save>0)
00018a  483f              LDR      r0,|L6.648|
00018c  7800              LDRB     r0,[r0,#0]  ; flash3_Save
00018e  280a              CMP      r0,#0xa
000190  dc08              BGT      |L6.420|
000192  483d              LDR      r0,|L6.648|
000194  7800              LDRB     r0,[r0,#0]  ; flash3_Save
000196  2800              CMP      r0,#0
000198  dd04              BLE      |L6.420|
;;;406            {
;;;407                judg_read_flash(flash3_Save);
00019a  483b              LDR      r0,|L6.648|
00019c  7800              LDRB     r0,[r0,#0]  ; flash3_Save
00019e  f7fffffe          BL       judg_read_flash
0001a2  e002              B        |L6.426|
                  |L6.420|
;;;408            }
;;;409            else
;;;410            {
;;;411                flash_3_once_flag=0;		//这样不进入定时器的周期性轮询，因为flash3_Save必须小于等于10而大于0
0001a4  2000              MOVS     r0,#0
0001a6  4937              LDR      r1,|L6.644|
0001a8  6008              STR      r0,[r1,#0]  ; flash_3_once_flag
                  |L6.426|
;;;412            }
;;;413        }
;;;414    
;;;415    
;;;416        xTimers= xTimerCreate("Timer",			/* 定时器名字 */
0001aa  4838              LDR      r0,|L6.652|
0001ac  2300              MOVS     r3,#0
0001ae  2201              MOVS     r2,#1
0001b0  f2413188          MOV      r1,#0x1388
0001b4  9000              STR      r0,[sp,#0]
0001b6  a036              ADR      r0,|L6.656|
0001b8  f7fffffe          BL       xTimerCreate
0001bc  4936              LDR      r1,|L6.664|
0001be  6008              STR      r0,[r1,#0]  ; xTimers
;;;417                              5000,				/* 定时器周期,单位时钟节拍 */
;;;418                              pdTRUE,			/* 周期性 */
;;;419                              (void *) 0,		/* 定时器ID */
;;;420                              vTimerCallback);	/* 定时器回调函数 */
;;;421    
;;;422        if(xTimers== NULL)
0001c0  4608              MOV      r0,r1
0001c2  6800              LDR      r0,[r0,#0]  ; xTimers
0001c4  b178              CBZ      r0,|L6.486|
;;;423        {
;;;424    			
;;;425        }
;;;426        else
;;;427        {
;;;428            /* 启动定时器，系统启动后才开始工作 */
;;;429            if(xTimerStart(xTimers, 100) != pdPASS)
0001c6  f7fffffe          BL       xTaskGetTickCount
0001ca  4606              MOV      r6,r0
0001cc  2064              MOVS     r0,#0x64
0001ce  2300              MOVS     r3,#0
0001d0  4632              MOV      r2,r6
0001d2  2101              MOVS     r1,#1
0001d4  9000              STR      r0,[sp,#0]
0001d6  4830              LDR      r0,|L6.664|
0001d8  6800              LDR      r0,[r0,#0]  ; xTimers
0001da  f7fffffe          BL       xTimerGenericCommand
0001de  2801              CMP      r0,#1
0001e0  d001              BEQ      |L6.486|
;;;430            {
;;;431    			#if	PRINTF_EN
;;;432    //            printf("timer created failure!\r\n");
;;;433    			#endif
;;;434    			
;;;435                for(;;)
0001e2  bf00              NOP      
                  |L6.484|
0001e4  e7fe              B        |L6.484|
                  |L6.486|
;;;436                {
;;;437                }
;;;438            }
;;;439        }
;;;440    
;;;441        xTimers2= xTimerCreate("Timer2",			/* 定时器名字 */
0001e6  482d              LDR      r0,|L6.668|
0001e8  2301              MOVS     r3,#1
0001ea  461a              MOV      r2,r3
0001ec  f44f717a          MOV      r1,#0x3e8
0001f0  9000              STR      r0,[sp,#0]
0001f2  a02b              ADR      r0,|L6.672|
0001f4  f7fffffe          BL       xTimerCreate
0001f8  492b              LDR      r1,|L6.680|
0001fa  6008              STR      r0,[r1,#0]  ; xTimers2
;;;442                               1000,				/* 定时器周期,单位时钟节拍 */
;;;443                               pdTRUE,				/* 周期性 */
;;;444                               (void *) 1,			/* 定时器ID */
;;;445                               vTimerCallback2);	/* 定时器回调函数 */
;;;446    
;;;447        if(xTimers2== NULL)
0001fc  4608              MOV      r0,r1
0001fe  6800              LDR      r0,[r0,#0]  ; xTimers2
000200  b178              CBZ      r0,|L6.546|
;;;448        {
;;;449    		#if	PRINTF_EN
;;;450    //        printf("timer2 created failure!\r\n");//串口都还没有初始化，不可调用printf
;;;451    		#endif
;;;452        }
;;;453        else
;;;454        {
;;;455            /* 启动定时器，系统启动后才开始工作 */
;;;456            if(xTimerStart(xTimers2, 100) != pdPASS)
000202  f7fffffe          BL       xTaskGetTickCount
000206  4606              MOV      r6,r0
000208  2064              MOVS     r0,#0x64
00020a  2300              MOVS     r3,#0
00020c  4632              MOV      r2,r6
00020e  2101              MOVS     r1,#1
000210  9000              STR      r0,[sp,#0]
000212  4825              LDR      r0,|L6.680|
000214  6800              LDR      r0,[r0,#0]  ; xTimers2
000216  f7fffffe          BL       xTimerGenericCommand
00021a  2801              CMP      r0,#1
00021c  d001              BEQ      |L6.546|
;;;457            {
;;;458    			#if	PRINTF_EN
;;;459    //            printf("timer2 created failure!\r\n");
;;;460    			#endif
;;;461    			
;;;462                for(;;)
00021e  bf00              NOP      
                  |L6.544|
000220  e7fe              B        |L6.544|
                  |L6.546|
;;;463                {
;;;464                }
;;;465            }
;;;466        }
;;;467    
;;;468        xTimers3= xTimerCreate("Timer3",			/* 定时器名字 */
000222  4822              LDR      r0,|L6.684|
000224  2302              MOVS     r3,#2
000226  2201              MOVS     r2,#1
000228  2132              MOVS     r1,#0x32
00022a  9000              STR      r0,[sp,#0]
00022c  a020              ADR      r0,|L6.688|
00022e  f7fffffe          BL       xTimerCreate
000232  4921              LDR      r1,|L6.696|
000234  6008              STR      r0,[r1,#0]  ; xTimers3
;;;469                               50,					/* 定时器周期,单位时钟节拍 */
;;;470                               pdTRUE,				/* 周期性 */
;;;471                               (void *) 2,			/* 定时器ID */
;;;472                               vTimerCallback3);	/* 定时器回调函数 */
;;;473    
;;;474        if(xTimers3== NULL)
000236  4608              MOV      r0,r1
000238  6800              LDR      r0,[r0,#0]  ; xTimers3
00023a  b178              CBZ      r0,|L6.604|
;;;475        {
;;;476    		#if	PRINTF_EN
;;;477    //        printf("timer3 created failure!\r\n");//串口都还没有初始化，不可调用printf
;;;478    		#endif
;;;479        }
;;;480        else
;;;481        {
;;;482            /* 启动定时器，系统启动后才开始工作 */
;;;483            if(xTimerStart(xTimers3, 100) != pdPASS)
00023c  f7fffffe          BL       xTaskGetTickCount
000240  4606              MOV      r6,r0
000242  2064              MOVS     r0,#0x64
000244  2300              MOVS     r3,#0
000246  4632              MOV      r2,r6
000248  2101              MOVS     r1,#1
00024a  9000              STR      r0,[sp,#0]
00024c  481a              LDR      r0,|L6.696|
00024e  6800              LDR      r0,[r0,#0]  ; xTimers3
000250  f7fffffe          BL       xTimerGenericCommand
000254  2801              CMP      r0,#1
000256  d001              BEQ      |L6.604|
;;;484            {
;;;485    			#if	PRINTF_EN
;;;486    //            printf("timer3 created failure!\r\n");
;;;487    			#endif
;;;488    			
;;;489                for(;;)
000258  bf00              NOP      
                  |L6.602|
00025a  e7fe              B        |L6.602|
                  |L6.604|
;;;490                {
;;;491                }
;;;492            }
;;;493        }
;;;494    
;;;495        /* 创建任务 */
;;;496        AppTaskCreate();
00025c  f7fffffe          BL       AppTaskCreate
;;;497    
;;;498        /* 启动调度，开始执行任务 */
;;;499        vTaskStartScheduler();
000260  f7fffffe          BL       vTaskStartScheduler
;;;500    
;;;501        /*
;;;502          如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;503          heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;504          #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 20 * 1024 ) )
;;;505        */
;;;506        while(1)
000264  bf00              NOP      
                  |L6.614|
000266  e7fe              B        |L6.614|
;;;507    	{
;;;508    		
;;;509    	}
;;;510    		
;;;511    }
;;;512    
                          ENDP

                  |L6.616|
                          DCD      APP_Version_2
                  |L6.620|
                          DCD      APP_Version_1
                  |L6.624|
                          DCD      0x08038800
                  |L6.628|
                          DCD      0x20211024
                  |L6.632|
                          DCD      systmtime
                  |L6.636|
                          DCD      set_time
                  |L6.640|
                          DCD      System
                  |L6.644|
                          DCD      flash_3_once_flag
                  |L6.648|
                          DCD      flash3_Save
                  |L6.652|
                          DCD      vTimerCallback
                  |L6.656|
000290  54696d65          DCB      "Timer",0
000294  7200    
000296  00                DCB      0
000297  00                DCB      0
                  |L6.664|
                          DCD      xTimers
                  |L6.668|
                          DCD      vTimerCallback2
                  |L6.672|
0002a0  54696d65          DCB      "Timer2",0
0002a4  723200  
0002a7  00                DCB      0
                  |L6.680|
                          DCD      xTimers2
                  |L6.684|
                          DCD      vTimerCallback3
                  |L6.688|
0002b0  54696d65          DCB      "Timer3",0
0002b4  723300  
0002b7  00                DCB      0
                  |L6.696|
                          DCD      xTimers3

                          AREA ||i.vTimerCallback||, CODE, READONLY, ALIGN=2

                  vTimerCallback PROC
;;;529    //uint8_t T_H_cmd[8]= {0x15,0x03,0x00,0x00,0x00,0x02,0xC7,0x1F};		//新温湿度传感器	地址0x15
;;;530    static void vTimerCallback(xTimerHandle pxTimer)	/* 5s */
000000  b510              PUSH     {r4,lr}
;;;531    {
000002  4604              MOV      r4,r0
;;;532        comSendBuf(COM2, T_H_cmd, 8);
000004  2208              MOVS     r2,#8
000006  490a              LDR      r1,|L7.48|
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       comSendBuf
;;;533    
;;;534        if( Alarm.alarm_history == 1 )
00000e  4809              LDR      r0,|L7.52|
000010  7800              LDRB     r0,[r0,#0]  ; Alarm
000012  2801              CMP      r0,#1
000014  d101              BNE      |L7.26|
;;;535        {
;;;536            alarm_printf();
000016  f7fffffe          BL       alarm_printf
                  |L7.26|
;;;537        }
;;;538    	if(Hardware_Time_Count<=Hardware_Time)	//避免溢出
00001a  4807              LDR      r0,|L7.56|
00001c  7800              LDRB     r0,[r0,#0]  ; Hardware_Time_Count
00001e  280c              CMP      r0,#0xc
000020  dc04              BGT      |L7.44|
;;;539    	{
;;;540    		Hardware_Time_Count++;		//硬件接管授时定时计数
000022  4805              LDR      r0,|L7.56|
000024  7800              LDRB     r0,[r0,#0]  ; Hardware_Time_Count
000026  1c40              ADDS     r0,r0,#1
000028  4903              LDR      r1,|L7.56|
00002a  7008              STRB     r0,[r1,#0]
                  |L7.44|
;;;541    	}
;;;542    }
00002c  bd10              POP      {r4,pc}
;;;543    
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      T_H_cmd
                  |L7.52|
                          DCD      Alarm
                  |L7.56|
                          DCD      Hardware_Time_Count

                          AREA ||i.vTimerCallback2||, CODE, READONLY, ALIGN=2

                  vTimerCallback2 PROC
;;;546     */
;;;547    static void vTimerCallback2(xTimerHandle pxTimer)	/* 1s */
000000  b510              PUSH     {r4,lr}
;;;548    {
000002  4604              MOV      r4,r0
;;;549        Monitor.no_respond_count++;
000004  482e              LDR      r0,|L8.192|
000006  f89000c9          LDRB     r0,[r0,#0xc9]  ; Monitor
00000a  1c40              ADDS     r0,r0,#1
00000c  492c              LDR      r1,|L8.192|
00000e  f88100c9          STRB     r0,[r1,#0xc9]
;;;550    		
;;;551    		if(System.status==SYSTEM_OPENING)		//检测该状态持续时间
000012  482c              LDR      r0,|L8.196|
000014  7ac0              LDRB     r0,[r0,#0xb]  ; System
000016  2806              CMP      r0,#6
000018  d10e              BNE      |L8.56|
;;;552    		{
;;;553    			Status_OPENING_Count++;
00001a  482b              LDR      r0,|L8.200|
00001c  7800              LDRB     r0,[r0,#0]  ; Status_OPENING_Count
00001e  1c40              ADDS     r0,r0,#1
000020  4929              LDR      r1,|L8.200|
000022  7008              STRB     r0,[r1,#0]
;;;554    			if(Status_OPENING_Count>=30)
000024  4608              MOV      r0,r1
000026  7800              LDRB     r0,[r0,#0]  ; Status_OPENING_Count
000028  281e              CMP      r0,#0x1e
00002a  db08              BLT      |L8.62|
;;;555    			{
;;;556    				Status_OPENING_Count=0;
00002c  2000              MOVS     r0,#0
00002e  7008              STRB     r0,[r1,#0]
;;;557    				System.status=SYSTEM_SHUTDOWN;
000030  2004              MOVS     r0,#4
000032  4924              LDR      r1,|L8.196|
000034  72c8              STRB     r0,[r1,#0xb]
000036  e002              B        |L8.62|
                  |L8.56|
;;;558    			}
;;;559    		}
;;;560    		else
;;;561    		{
;;;562    			Status_OPENING_Count=0;
000038  2000              MOVS     r0,#0
00003a  4923              LDR      r1,|L8.200|
00003c  7008              STRB     r0,[r1,#0]
                  |L8.62|
;;;563    		}
;;;564        if( System.time_update_flag == 0x00 )		//未更新时间，不进入硬件接管
00003e  4821              LDR      r0,|L8.196|
000040  7a80              LDRB     r0,[r0,#0xa]  ; System
000042  b9c8              CBNZ     r0,|L8.120|
;;;565        {
;;;566            Monitor.no_respond_count=0;
000044  2000              MOVS     r0,#0
000046  491e              LDR      r1,|L8.192|
000048  f88100c9          STRB     r0,[r1,#0xc9]
;;;567            Monitor.hard_control=0;
00004c  f88100ca          STRB     r0,[r1,#0xca]
;;;568            Monitor.need_emit = 0;
000050  f88100cd          STRB     r0,[r1,#0xcd]
;;;569            Monitor.need_open = 0;
000054  f88100cb          STRB     r0,[r1,#0xcb]
;;;570            Monitor.need_close = 0;
000058  f88100cc          STRB     r0,[r1,#0xcc]
;;;571    
;;;572            Run_Diagram_data.mode = '0';	
00005c  2030              MOVS     r0,#0x30
00005e  491b              LDR      r1,|L8.204|
000060  7008              STRB     r0,[r1,#0]
;;;573            Run_Diagram_data.power[0] = '0';
000062  7348              STRB     r0,[r1,#0xd]
;;;574            Run_Diagram_data.power[1] = '0';
000064  2130              MOVS     r1,#0x30
000066  4819              LDR      r0,|L8.204|
000068  7381              STRB     r1,[r0,#0xe]
;;;575            Run_Diagram_data.power[2] = '0';
00006a  73c1              STRB     r1,[r0,#0xf]
;;;576            memset(Run_Diagram_data.Freq, 0, sizeof(Run_Diagram_data.Freq));
00006c  1c40              ADDS     r0,r0,#1
00006e  2100              MOVS     r1,#0
000070  6001              STR      r1,[r0,#0]  ; Run_Diagram_data
000072  6041              STR      r1,[r0,#4]  ; Run_Diagram_data
000074  6081              STR      r1,[r0,#8]  ; Run_Diagram_data
000076  e010              B        |L8.154|
                  |L8.120|
;;;577        }
;;;578        else	if( Monitor.no_respond_count >= 60 )   //60
000078  4811              LDR      r0,|L8.192|
00007a  f89000c9          LDRB     r0,[r0,#0xc9]  ; Monitor
00007e  283c              CMP      r0,#0x3c
000080  db07              BLT      |L8.146|
;;;579        {
;;;580            Monitor.no_respond_count = 60;
000082  203c              MOVS     r0,#0x3c
000084  490e              LDR      r1,|L8.192|
000086  f88100c9          STRB     r0,[r1,#0xc9]
;;;581            Monitor.hard_control = 1;
00008a  2001              MOVS     r0,#1
00008c  f88100ca          STRB     r0,[r1,#0xca]
000090  e003              B        |L8.154|
                  |L8.146|
;;;582        }
;;;583        else
;;;584        {
;;;585            Monitor.hard_control=0;
000092  2000              MOVS     r0,#0
000094  490a              LDR      r1,|L8.192|
000096  f88100ca          STRB     r0,[r1,#0xca]
                  |L8.154|
;;;586        }
;;;587    
;;;588        if( (Monitor.hard_control==0x01) && (flash_3_once_flag==1) )
00009a  4809              LDR      r0,|L8.192|
00009c  f89000ca          LDRB     r0,[r0,#0xca]  ; Monitor
0000a0  2801              CMP      r0,#1
0000a2  d10b              BNE      |L8.188|
0000a4  480a              LDR      r0,|L8.208|
0000a6  6800              LDR      r0,[r0,#0]  ; flash_3_once_flag
0000a8  2801              CMP      r0,#1
0000aa  d107              BNE      |L8.188|
;;;589        {
;;;590    		    juge_need_open_close(flash3_Save);
0000ac  4809              LDR      r0,|L8.212|
0000ae  7800              LDRB     r0,[r0,#0]  ; flash3_Save
0000b0  f7fffffe          BL       juge_need_open_close
;;;591            find_hard_control(flash3_Save);
0000b4  4807              LDR      r0,|L8.212|
0000b6  7800              LDRB     r0,[r0,#0]  ; flash3_Save
0000b8  f7fffffe          BL       find_hard_control
                  |L8.188|
;;;592        }
;;;593    }
0000bc  bd10              POP      {r4,pc}
;;;594    
                          ENDP

0000be  0000              DCW      0x0000
                  |L8.192|
                          DCD      Monitor
                  |L8.196|
                          DCD      System
                  |L8.200|
                          DCD      Status_OPENING_Count
                  |L8.204|
                          DCD      Run_Diagram_data
                  |L8.208|
                          DCD      flash_3_once_flag
                  |L8.212|
                          DCD      flash3_Save

                          AREA ||i.vTimerCallback3||, CODE, READONLY, ALIGN=2

                  vTimerCallback3 PROC
;;;597     */
;;;598    static void vTimerCallback3(xTimerHandle pxTimer)	/* 50ms */
000000  b510              PUSH     {r4,lr}
;;;599    {
000002  4604              MOV      r4,r0
;;;600        static uint8_t led1_counter = 0;
;;;601        static uint8_t led2_counter = 0;
;;;602    	
;;;603    #if	IWDOG_EN
;;;604            IWDG_Feed();		//喂狗
000004  f7fffffe          BL       IWDG_Feed
;;;605    #endif
;;;606    	
;;;607        if( System.emission == 1 )			//运行指示灯
000008  481d              LDR      r0,|L9.128|
00000a  7d80              LDRB     r0,[r0,#0x16]  ; System
00000c  2801              CMP      r0,#1
00000e  d103              BNE      |L9.24|
;;;608        {
;;;609            LED1_ON;						//黄灯
000010  2008              MOVS     r0,#8
000012  491c              LDR      r1,|L9.132|
000014  6008              STR      r0,[r1,#0]
000016  e012              B        |L9.62|
                  |L9.24|
;;;610        }
;;;611        else
;;;612        {
;;;613            led1_counter++;
000018  481b              LDR      r0,|L9.136|
00001a  7800              LDRB     r0,[r0,#0]  ; led1_counter
00001c  1c40              ADDS     r0,r0,#1
00001e  491a              LDR      r1,|L9.136|
000020  7008              STRB     r0,[r1,#0]
;;;614    
;;;615            if( led1_counter >= 4 )
000022  4608              MOV      r0,r1
000024  7800              LDRB     r0,[r0,#0]  ; led1_counter
000026  2804              CMP      r0,#4
000028  db09              BLT      |L9.62|
;;;616            {
;;;617                led1_counter = 0;
00002a  2000              MOVS     r0,#0
00002c  7008              STRB     r0,[r1,#0]
;;;618                LED1_TOGGLE;
00002e  4815              LDR      r0,|L9.132|
000030  3808              SUBS     r0,r0,#8
000032  6800              LDR      r0,[r0,#0]
000034  f0800008          EOR      r0,r0,#8
000038  4912              LDR      r1,|L9.132|
00003a  3908              SUBS     r1,r1,#8
00003c  6008              STR      r0,[r1,#0]
                  |L9.62|
;;;619            }
;;;620        }
;;;621    
;;;622        if( Alarm.alarm_history == 1)		//报警指示灯
00003e  4813              LDR      r0,|L9.140|
000040  7800              LDRB     r0,[r0,#0]  ; Alarm
000042  2801              CMP      r0,#1
000044  d113              BNE      |L9.110|
;;;623        {
;;;624            led2_counter++;
000046  4812              LDR      r0,|L9.144|
000048  7800              LDRB     r0,[r0,#0]  ; led2_counter
00004a  1c40              ADDS     r0,r0,#1
00004c  4910              LDR      r1,|L9.144|
00004e  7008              STRB     r0,[r1,#0]
;;;625            if( led2_counter >= 4 )
000050  4608              MOV      r0,r1
000052  7800              LDRB     r0,[r0,#0]  ; led2_counter
000054  2804              CMP      r0,#4
000056  db11              BLT      |L9.124|
;;;626            {
;;;627                led2_counter = 0;
000058  2000              MOVS     r0,#0
00005a  7008              STRB     r0,[r1,#0]
;;;628                LED2_TOGGLE;				//红灯
00005c  4809              LDR      r0,|L9.132|
00005e  3808              SUBS     r0,r0,#8
000060  6800              LDR      r0,[r0,#0]
000062  f0800010          EOR      r0,r0,#0x10
000066  4907              LDR      r1,|L9.132|
000068  3908              SUBS     r1,r1,#8
00006a  6008              STR      r0,[r1,#0]
00006c  e006              B        |L9.124|
                  |L9.110|
;;;629            }
;;;630        }
;;;631    	
;;;632        else
;;;633        {
;;;634            led2_counter = 0;
00006e  2000              MOVS     r0,#0
000070  4907              LDR      r1,|L9.144|
000072  7008              STRB     r0,[r1,#0]
;;;635            LED2_OFF;
000074  2010              MOVS     r0,#0x10
000076  4903              LDR      r1,|L9.132|
000078  1f09              SUBS     r1,r1,#4
00007a  6008              STR      r0,[r1,#0]
                  |L9.124|
;;;636        }
;;;637    	
;;;638    }
00007c  bd10              POP      {r4,pc}
;;;639    
                          ENDP

00007e  0000              DCW      0x0000
                  |L9.128|
                          DCD      System
                  |L9.132|
                          DCD      0x40010c14
                  |L9.136|
                          DCD      led1_counter
                  |L9.140|
                          DCD      Alarm
                  |L9.144|
                          DCD      led2_counter

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  System
                          %        169
                  Monitor
                          %        206
                  Run_Diagram_data
                          %        16
                  Alarm
                          %        22
                  Alarm_threshold
                          %        39
                  PC_Cmd
                          %        26
                  Disalarm
                          %        9
                  Scan_Frq
                          %        10
                  Run_Diagram
                          %        104
                  Run_Diagram_buf
                          %        1000
                  Work_paraBack
                          %        116
                  Alarm_historyBack
                          %        123
                  Scan_FrqBack
                          %        110
                  Scan_FrqBack1
                          %        110
                  Scan_FrqBack2
                          %        110
                  Scan_FrqBack3
                          %        110
                  Scan_FrqBack4
                          %        110
                  Scan_FrqBack5
                          %        110
                  Scan_FrqBack6
                          %        110
                  Scan_FrqBack7
                          %        110
                  Scan_FrqBack8
                          %        110
                  Scan_FrqBack9
                          %        110
                  Scan_FrqBack10
                          %        110
                  Scan_FrqBack11
                          %        110
                  Scan_FrqBack12
                          %        112
                  ADC_ConvertedValueLocal
                          %        16
                  set_time
                          %        28
                  ADC0_buff
                          %        200
                  ADC1_buff
                          %        200
                  ADC2_buff
                          %        200
                  ADC3_buff
                          %        200
                  SWR_array
                          %        1024
                  Forward_Power_array
                          %        1024
                  Reverse_Power_array
                          %        1024
                  freq_band_time_stamp
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  g_fuc_cod
000000  0000              DCB      0x00,0x00
                  g_fuc_codToPC
000002  0000              DCB      0x00,0x00
                  g_inquire_stamp
                          DCD      0x00000000
                  g_stamp_distance
                          DCD      0x00000000
                  Sacn_stop
00000c  0000              DCB      0x00,0x00
                  Add_Power
00000e  0000              DCB      0x00,0x00
000010  00                DCB      0x00
                  Sub_Power
000011  000000            DCB      0x00,0x00,0x00
                  Alarm_backPC
000014  000000            DCB      0x00,0x00,0x00
                  Trans_openBack
000017  00                DCB      0x00
000018  0000              DCB      0x00,0x00
                  Trans_stopBack
00001a  0000              DCB      0x00,0x00
                  DisalarmBack
                          DCD      0x00000000
000020  00                DCB      0x00
                  Power_onBack
000021  0000              DCB      0x00,0x00
                  Power_offBack
000023  00                DCB      0x00
000024  00                DCB      0x00
                  Sacn_stopBack
000025  0000              DCB      0x00,0x00
                  Add_PowerBack
000027  00                DCB      0x00
000028  00                DCB      0x00
                  Sub_PowerBack
000029  0000              DCB      0x00,0x00
                  Run_DiagramBack
00002b  00                DCB      0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                  xMutex
                          DCD      0x00000000
                  xTimers
                          DCD      0x00000000
                  xTimers2
                          DCD      0x00000000
                  xTimers3
                          DCD      0x00000000
                  systmtime
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000009
                          DCD      0x00000001
                          DCD      0x00000005
                          DCD      0x000007e5
                          DCD      0x00000000
                  adc1_zero_count
00005c  00                DCB      0x00
                  adc3_zero_count
00005d  00                DCB      0x00
                  Hardware_Time_Count
00005e  0c                DCB      0x0c
                  Status_OPENING_Count
00005f  00                DCB      0x00
                  T_H_cmd
000060  01030000          DCB      0x01,0x03,0x00,0x00
000064  0002c40b          DCB      0x00,0x02,0xc4,0x0b
                  led1_counter
000068  00                DCB      0x00
                  led2_counter
000069  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b1358a5d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_b1358a5d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b1358a5d____REVSH|
#line 128
|__asm___6_main_c_b1358a5d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
