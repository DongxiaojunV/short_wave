; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\mt2000_protocol.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\mt2000_protocol.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\mt2000_protocol.crf ..\..\User\MT2000_protocol.c]
                          THUMB

                          AREA ||i.BCC_Check_Sum||, CODE, READONLY, ALIGN=1

                  BCC_Check_Sum PROC
;;;505    /* 异或和 */
;;;506    uint8_t BCC_Check_Sum(uint8_t *pdata, uint8_t len)
000000  b510              PUSH     {r4,lr}
;;;507    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;508        uint8_t i = 0;
000006  2100              MOVS     r1,#0
;;;509        uint8_t bcc_result = 0;
000008  2000              MOVS     r0,#0
;;;510    
;;;511        bcc_result = *pdata;
00000a  7810              LDRB     r0,[r2,#0]
;;;512        for(i=1; i<len; i++)
00000c  2101              MOVS     r1,#1
00000e  e003              B        |L1.24|
                  |L1.16|
;;;513            bcc_result ^= *(pdata+i);
000010  5c54              LDRB     r4,[r2,r1]
000012  4060              EORS     r0,r0,r4
000014  1c4c              ADDS     r4,r1,#1              ;512
000016  b2e1              UXTB     r1,r4                 ;512
                  |L1.24|
000018  4299              CMP      r1,r3                 ;512
00001a  dbf9              BLT      |L1.16|
;;;514    
;;;515        return bcc_result;
;;;516    }
00001c  bd10              POP      {r4,pc}
;;;517    
                          ENDP


                          AREA ||i.Bj_BCC_Check_Sum||, CODE, READONLY, ALIGN=1

                  Bj_BCC_Check_Sum PROC
;;;1219   /* 异或和 */
;;;1220   uint8_t Bj_BCC_Check_Sum(uint8_t *pdata, uint8_t len)
000000  b510              PUSH     {r4,lr}
;;;1221   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1222       uint8_t i = 0;
000006  2100              MOVS     r1,#0
;;;1223       uint8_t bcc_result = 0;
000008  2000              MOVS     r0,#0
;;;1224   
;;;1225       bcc_result = pdata[1];
00000a  7850              LDRB     r0,[r2,#1]
;;;1226       for(i=1; i<len-1; i++)
00000c  2101              MOVS     r1,#1
00000e  e004              B        |L2.26|
                  |L2.16|
;;;1227           bcc_result ^= pdata[i+1];
000010  1c4c              ADDS     r4,r1,#1
000012  5d14              LDRB     r4,[r2,r4]
000014  4060              EORS     r0,r0,r4
000016  1c4c              ADDS     r4,r1,#1              ;1226
000018  b2e1              UXTB     r1,r4                 ;1226
                  |L2.26|
00001a  1e5c              SUBS     r4,r3,#1              ;1226
00001c  428c              CMP      r4,r1                 ;1226
00001e  dcf7              BGT      |L2.16|
;;;1228   
;;;1229       return bcc_result;
;;;1230   }
000020  bd10              POP      {r4,pc}
;;;1231   
                          ENDP


                          AREA ||i.GT2000_Alarm_Stop||, CODE, READONLY, ALIGN=2

                  GT2000_Alarm_Stop PROC
;;;475    
;;;476    void GT2000_Alarm_Stop(void)
000000  b510              PUSH     {r4,lr}
;;;477    {
;;;478    	Trans_printf(" 触发GT2000_Alarm_Stop,先关发射，5S后再关机，置位Alarm.emission=1 ");
000002  4810              LDR      r0,|L3.68|
000004  f7fffffe          BL       Trans_printf
;;;479    				Gt_RF_Close();		//先关发射
000008  f7fffffe          BL       Gt_RF_Close
;;;480    				vTaskDelay(5000); //等五秒
00000c  f2413088          MOV      r0,#0x1388
000010  f7fffffe          BL       vTaskDelay
;;;481    				Gt2000_Close();   //再关机,无返回数据
000014  f7fffffe          BL       Gt2000_Close
;;;482    			vTaskDelay(50);
000018  2032              MOVS     r0,#0x32
00001a  f7fffffe          BL       vTaskDelay
;;;483    
;;;484    			System.status = SYSTEM_ALARM;
00001e  2011              MOVS     r0,#0x11
000020  4909              LDR      r1,|L3.72|
000022  72c8              STRB     r0,[r1,#0xb]
;;;485    	
;;;486    			Alarm.emission=1;		//激励器报警	
000024  2001              MOVS     r0,#1
000026  4909              LDR      r1,|L3.76|
000028  7048              STRB     r0,[r1,#1]
;;;487    			System.sweep = 0;
00002a  2000              MOVS     r0,#0
00002c  4906              LDR      r1,|L3.72|
00002e  7388              STRB     r0,[r1,#0xe]
;;;488    			System.stop = 0;
000030  7548              STRB     r0,[r1,#0x15]
;;;489    			System.achieve_add_sub = 0;
000032  7448              STRB     r0,[r1,#0x11]
;;;490    			System.modify_power = 0;
000034  7488              STRB     r0,[r1,#0x12]
;;;491    			System.cancel_add_sub = 0;
000036  74c8              STRB     r0,[r1,#0x13]
;;;492    			System_Status_Clean();
000038  f7fffffe          BL       System_Status_Clean
;;;493    			Trans_stopBack.Trans_state[0]=0xFE;		//停止成功
00003c  20fe              MOVS     r0,#0xfe
00003e  4904              LDR      r1,|L3.80|
000040  7048              STRB     r0,[r1,#1]
;;;494    	
;;;495    }
000042  bd10              POP      {r4,pc}
;;;496    
                          ENDP

                  |L3.68|
                          DCD      ||.conststring||
                  |L3.72|
                          DCD      System
                  |L3.76|
                          DCD      Alarm
                  |L3.80|
                          DCD      Trans_stopBack

                          AREA ||i.GT2000_Buffer_Clean||, CODE, READONLY, ALIGN=1

                  GT2000_Buffer_Clean PROC
;;;496    
;;;497    void GT2000_Buffer_Clean(void)  //清零串口fifo队列
000000  b510              PUSH     {r4,lr}
;;;498    {
;;;499        comClearRxFifo(COM4);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       comClearRxFifo
;;;500    	  comClearRxFifo(COM1);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comClearRxFifo
;;;501    }
00000e  bd10              POP      {r4,pc}
;;;502    
                          ENDP


                          AREA ||i.GT2000_Close||, CODE, READONLY, ALIGN=2

                  GT2000_Close PROC
;;;115    
;;;116    void GT2000_Close(void)
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118        int ret;
;;;119    
;;;120    		Gt_RF_Close();		//先关发射
000002  f7fffffe          BL       Gt_RF_Close
;;;121    		vTaskDelay(50);
000006  2032              MOVS     r0,#0x32
000008  f7fffffe          BL       vTaskDelay
;;;122    		Gt2000_Close();   //关机
00000c  f7fffffe          BL       Gt2000_Close
;;;123    		vTaskDelay(50);
000010  2032              MOVS     r0,#0x32
000012  f7fffffe          BL       vTaskDelay
;;;124    		ret=MT2000_ACK_OK;		//默认成功
000016  2401              MOVS     r4,#1
;;;125    
;;;126        if( ret == MT2000_ACK_OK )
000018  b18c              CBZ      r4,|L5.62|
;;;127        {
;;;128            Power_offBack.results[0]= 0xFE;	//关机成功
00001a  20fe              MOVS     r0,#0xfe
00001c  490b              LDR      r1,|L5.76|
00001e  7048              STRB     r0,[r1,#1]
;;;129            Power_onBack.results[0]	= 0xFD;	//开机失败#endif
000020  20fd              MOVS     r0,#0xfd
000022  490b              LDR      r1,|L5.80|
000024  7048              STRB     r0,[r1,#1]
;;;130    
;;;131            if( get_history_alarm() == 0x01 )
000026  f7fffffe          BL       get_history_alarm
00002a  2801              CMP      r0,#1
00002c  d103              BNE      |L5.54|
;;;132            {
;;;133                System.status = SYSTEM_ALARM;
00002e  2011              MOVS     r0,#0x11
000030  4908              LDR      r1,|L5.84|
000032  72c8              STRB     r0,[r1,#0xb]
000034  e009              B        |L5.74|
                  |L5.54|
;;;134            }
;;;135            else
;;;136            {
;;;137                System.status = SYSTEM_SHUTDOWN;
000036  2004              MOVS     r0,#4
000038  4906              LDR      r1,|L5.84|
00003a  72c8              STRB     r0,[r1,#0xb]
00003c  e005              B        |L5.74|
                  |L5.62|
;;;138            }
;;;139        }
;;;140        else
;;;141        {
;;;142            Power_offBack.results[0]=0xFD;	//关机失败
00003e  20fd              MOVS     r0,#0xfd
000040  4902              LDR      r1,|L5.76|
000042  7048              STRB     r0,[r1,#1]
;;;143    //        Trans_printf("N02:system close fail!\n");
;;;144    
;;;145            Alarm.no_respond_locate = 7;
000044  2007              MOVS     r0,#7
000046  4904              LDR      r1,|L5.88|
000048  7188              STRB     r0,[r1,#6]
                  |L5.74|
;;;146    //        Trans_printf("GT2000_Close 7 no respond.\r\n");
;;;147        }
;;;148    }
00004a  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  |L5.76|
                          DCD      Power_offBack
                  |L5.80|
                          DCD      Power_onBack
                  |L5.84|
                          DCD      System
                  |L5.88|
                          DCD      Alarm

                          AREA ||i.GT2000_Cmd_Analyze||, CODE, READONLY, ALIGN=2

                  GT2000_Cmd_Analyze PROC
;;;1077   	
;;;1078   int GT2000_Cmd_Analyze(uint8_t *msg, uint8_t cmd)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1079   {
000004  b093              SUB      sp,sp,#0x4c
000006  4604              MOV      r4,r0
000008  468b              MOV      r11,r1
;;;1080   	uint16_t Electricity_1[4],Electricity_2[4],Electricity_3[4],Electricity_4[4];		//存储功放一~四的电流数据
;;;1081   		float Average_E[4];   //用于存放电流平均值
;;;1082   		float Electricity_Add_1=0,Electricity_Add_2=0,Electricity_Add_3=0,Electricity_Add_4=0;
00000a  2500              MOVS     r5,#0
00000c  2600              MOVS     r6,#0
00000e  46a9              MOV      r9,r5
000010  46aa              MOV      r10,r5
;;;1083   	
;;;1084   		/*接收电流数据*/
;;;1085     	Electricity_1[0]=msg[41];   //以太网转232传输，低位在前
000012  f8140f29          LDRB     r0,[r4,#0x29]!
000016  f8ad0040          STRH     r0,[sp,#0x40]
;;;1086   		Electricity_1[1]=msg[42];
00001a  7860              LDRB     r0,[r4,#1]
00001c  f8ad0042          STRH     r0,[sp,#0x42]
;;;1087   		Electricity_1[2]=msg[43];
000020  78a0              LDRB     r0,[r4,#2]
000022  f8ad0044          STRH     r0,[sp,#0x44]
;;;1088   		Electricity_1[3]=msg[44];
000026  78e0              LDRB     r0,[r4,#3]
000028  f8ad0046          STRH     r0,[sp,#0x46]
;;;1089   		Electricity_2[0]=msg[49];
00002c  7a20              LDRB     r0,[r4,#8]
00002e  f8ad0038          STRH     r0,[sp,#0x38]
;;;1090   		Electricity_2[1]=msg[50];
000032  7a60              LDRB     r0,[r4,#9]
000034  f8ad003a          STRH     r0,[sp,#0x3a]
;;;1091   		Electricity_2[2]=msg[51];
000038  7aa0              LDRB     r0,[r4,#0xa]
00003a  f8ad003c          STRH     r0,[sp,#0x3c]
;;;1092   		Electricity_2[3]=msg[52];
00003e  7ae0              LDRB     r0,[r4,#0xb]
000040  f8ad003e          STRH     r0,[sp,#0x3e]
;;;1093   	  Electricity_3[0]=msg[57];
000044  7c20              LDRB     r0,[r4,#0x10]
000046  f8ad0030          STRH     r0,[sp,#0x30]
;;;1094   		Electricity_3[1]=msg[58];
00004a  7c60              LDRB     r0,[r4,#0x11]
00004c  f8ad0032          STRH     r0,[sp,#0x32]
;;;1095   		Electricity_3[2]=msg[59];
000050  7ca0              LDRB     r0,[r4,#0x12]
000052  f8ad0034          STRH     r0,[sp,#0x34]
;;;1096   		Electricity_3[3]=msg[60];
000056  7ce0              LDRB     r0,[r4,#0x13]
000058  f8ad0036          STRH     r0,[sp,#0x36]
;;;1097   		Electricity_4[0]=msg[65];
00005c  7e20              LDRB     r0,[r4,#0x18]
00005e  f8ad0028          STRH     r0,[sp,#0x28]
;;;1098   		Electricity_4[1]=msg[66];
000062  7e60              LDRB     r0,[r4,#0x19]
000064  f8ad002a          STRH     r0,[sp,#0x2a]
;;;1099   		Electricity_4[2]=msg[67];
000068  7ea0              LDRB     r0,[r4,#0x1a]
00006a  f8ad002c          STRH     r0,[sp,#0x2c]
;;;1100   		Electricity_4[3]=msg[68];    //以太网转232传输，低位在前
00006e  7ee0              LDRB     r0,[r4,#0x1b]
000070  3c29              SUBS     r4,r4,#0x29
000072  f8ad002e          STRH     r0,[sp,#0x2e]
;;;1101   		
;;;1102   //		Trans_printf("Electricity_电流== %d %d %d %d ",Electricity_1[0],\
;;;1103   //		Electricity_1[1],Electricity_1[2],Electricity_1[3]);  //打印2KW调试信息
;;;1104   		/*将电流数据放于系统信息结构体中*/
;;;1105   		for(uint8_t i=0;i<4;i++)
000076  2000              MOVS     r0,#0
000078  e038              B        |L6.236|
                  |L6.122|
;;;1106   		{ 
;;;1107   			//延用之前的系统信息结构体，名字暂时未改。
;;;1108   			System.Bj_Electricity_1[i]=Electricity_1[i]*10;  //电流信息扩大10倍
00007a  a910              ADD      r1,sp,#0x40
00007c  f8311010          LDRH     r1,[r1,r0,LSL #1]
000080  eb010181          ADD      r1,r1,r1,LSL #2
000084  f64f72ff          MOV      r2,#0xffff
000088  ea020241          AND      r2,r2,r1,LSL #1
00008c  49f5              LDR      r1,|L6.1124|
00008e  eb010140          ADD      r1,r1,r0,LSL #1
000092  800a              STRH     r2,[r1,#0]
;;;1109   			System.Bj_Electricity_2[i]=Electricity_2[i]*10;
000094  a90e              ADD      r1,sp,#0x38
000096  f8311010          LDRH     r1,[r1,r0,LSL #1]
00009a  eb010181          ADD      r1,r1,r1,LSL #2
00009e  f64f72ff          MOV      r2,#0xffff
0000a2  ea020241          AND      r2,r2,r1,LSL #1
0000a6  49ef              LDR      r1,|L6.1124|
0000a8  3108              ADDS     r1,r1,#8
0000aa  eb010140          ADD      r1,r1,r0,LSL #1
0000ae  800a              STRH     r2,[r1,#0]
;;;1110   			System.Bj_Electricity_3[i]=Electricity_3[i]*10;
0000b0  a90c              ADD      r1,sp,#0x30
0000b2  f8311010          LDRH     r1,[r1,r0,LSL #1]
0000b6  eb010181          ADD      r1,r1,r1,LSL #2
0000ba  f64f72ff          MOV      r2,#0xffff
0000be  ea020241          AND      r2,r2,r1,LSL #1
0000c2  49e8              LDR      r1,|L6.1124|
0000c4  3110              ADDS     r1,r1,#0x10
0000c6  eb010140          ADD      r1,r1,r0,LSL #1
0000ca  800a              STRH     r2,[r1,#0]
;;;1111   			System.Bj_Electricity_4[i]=Electricity_4[i]*10;
0000cc  a90a              ADD      r1,sp,#0x28
0000ce  f8311010          LDRH     r1,[r1,r0,LSL #1]
0000d2  eb010181          ADD      r1,r1,r1,LSL #2
0000d6  f64f72ff          MOV      r2,#0xffff
0000da  ea020241          AND      r2,r2,r1,LSL #1
0000de  49e1              LDR      r1,|L6.1124|
0000e0  3118              ADDS     r1,r1,#0x18
0000e2  eb010140          ADD      r1,r1,r0,LSL #1
0000e6  800a              STRH     r2,[r1,#0]
0000e8  1c41              ADDS     r1,r0,#1              ;1105
0000ea  b2c8              UXTB     r0,r1                 ;1105
                  |L6.236|
0000ec  2804              CMP      r0,#4                 ;1105
0000ee  dbc4              BLT      |L6.122|
;;;1112   		}
;;;1113   		
;;;1114   		
;;;1115   		/*取故障情况，这些报警均属于激励器报警！*/	//bit0为低位
;;;1116   		Alarm_historyBack.Alarm_Abnormal_Output[0]=((msg[20]&0x01));             //bit0输出异常 0正常  1故障
0000f0  7d20              LDRB     r0,[r4,#0x14]
0000f2  f0000001          AND      r0,r0,#1
0000f6  49dc              LDR      r1,|L6.1128|
0000f8  f8810072          STRB     r0,[r1,#0x72]
;;;1117   		Alarm_historyBack.Alarm_Reverse[0]=((msg[20]&0x02)>>1);                     //bit1反射过大
0000fc  7d20              LDRB     r0,[r4,#0x14]
0000fe  f3c00040          UBFX     r0,r0,#1,#1
000102  f8810077          STRB     r0,[r1,#0x77]
;;;1118   		Alarm_historyBack.Alarm_Module_Electricity[0]=((msg[20]&0x08)>>3);          //bit3模块电流报警 
000106  7d20              LDRB     r0,[r4,#0x14]
000108  f3c000c0          UBFX     r0,r0,#3,#1
00010c  f8810073          STRB     r0,[r1,#0x73]
;;;1119       Alarm_historyBack.Alarm_Absorber_State_1[0]=((msg[20]&0x40)>>6);          //bit6滤波器报警
000110  7d20              LDRB     r0,[r4,#0x14]
000112  f3c01080          UBFX     r0,r0,#6,#1
000116  f8810076          STRB     r0,[r1,#0x76]
;;;1120       Alarm_historyBack.Alarm_Switch_Power[0]=((msg[20]&0x80)>>7);                 //bit7开关电源报警	
00011a  7d20              LDRB     r0,[r4,#0x14]
00011c  09c0              LSRS     r0,r0,#7
00011e  f8810071          STRB     r0,[r1,#0x71]
;;;1121   		Trans_printf("Alarm_status1_msg[20]== %x ",msg[20]);  //打印2KW调试信息
000122  7d21              LDRB     r1,[r4,#0x14]
000124  a0d1              ADR      r0,|L6.1132|
000126  f7fffffe          BL       Trans_printf
;;;1122   		
;;;1123   		
;;;1124   		
;;;1125       GT2000_Rx.system_status1=(msg[20]&0xff);      //判断故障情况，0为正常，1为故障
00012a  7d20              LDRB     r0,[r4,#0x14]
00012c  49d6              LDR      r1,|L6.1160|
00012e  f8810020          STRB     r0,[r1,#0x20]
;;;1126   //		Trans_printf("GT2000_Rx.system_status1= %x \n",GT2000_Rx.system_status1);
;;;1127   		
;;;1128   		/*其他值*/  //以太网通讯低位在前
;;;1129     	System.Attenuation=msg[14];     //衰减值  //0或3 
000132  7ba0              LDRB     r0,[r4,#0xe]
000134  49cb              LDR      r1,|L6.1124|
000136  3980              SUBS     r1,r1,#0x80
000138  f8810059          STRB     r0,[r1,#0x59]
;;;1130       GT2000_Rx.swr[0]=msg[13];       //驻波比  //10~13
00013c  7b60              LDRB     r0,[r4,#0xd]
00013e  49d2              LDR      r1,|L6.1160|
000140  7588              STRB     r0,[r1,#0x16]
;;;1131   		GT2000_Rx.swr[1]=msg[12];
000142  7b21              LDRB     r1,[r4,#0xc]
000144  48d0              LDR      r0,|L6.1160|
000146  75c1              STRB     r1,[r0,#0x17]
;;;1132   		GT2000_Rx.swr[2]=msg[11];
000148  7ae1              LDRB     r1,[r4,#0xb]
00014a  7601              STRB     r1,[r0,#0x18]
;;;1133   		GT2000_Rx.swr[3]=msg[10];
00014c  7aa1              LDRB     r1,[r4,#0xa]
00014e  7641              STRB     r1,[r0,#0x19]
;;;1134   		GT2000_Rx.sys_open=((msg[21]&0x01));            //bit0发射机开关机状态 0关机  1开机
000150  7d60              LDRB     r0,[r4,#0x15]
000152  f0000001          AND      r0,r0,#1
000156  49cc              LDR      r1,|L6.1160|
000158  f8810021          STRB     r0,[r1,#0x21]
;;;1135   		GT2000_Rx.sys_emit_open=((msg[21]&0x02)>>1);    //bit1发射机发射状态  0关发射  1开发射
00015c  7d60              LDRB     r0,[r4,#0x15]
00015e  f3c00040          UBFX     r0,r0,#1,#1
000162  f8810022          STRB     r0,[r1,#0x22]
;;;1136   
;;;1137   		if(((msg[21]&0x04)>>2)==0)
000166  7d60              LDRB     r0,[r4,#0x15]
000168  f3c00080          UBFX     r0,r0,#2,#1
00016c  b958              CBNZ     r0,|L6.390|
;;;1138   		{
;;;1139   			System.Control_Model=1;   //bit2发射机控制模式  1遥控   0本控  System.Control_Model  0自动/1手动
00016e  2001              MOVS     r0,#1
000170  49bc              LDR      r1,|L6.1124|
000172  3980              SUBS     r1,r1,#0x80
000174  f881004c          STRB     r0,[r1,#0x4c]
;;;1140   			Trans_printf("msg[21]Bit2== %x ",((msg[21]&0x04)>>2));
000178  7d60              LDRB     r0,[r4,#0x15]
00017a  f3c00180          UBFX     r1,r0,#2,#1
00017e  a0c3              ADR      r0,|L6.1164|
000180  f7fffffe          BL       Trans_printf
000184  e008              B        |L6.408|
                  |L6.390|
;;;1141   		}
;;;1142   		else if(((msg[21]&0x04)>>2)==1)
000186  7d60              LDRB     r0,[r4,#0x15]
000188  f3c00080          UBFX     r0,r0,#2,#1
00018c  b120              CBZ      r0,|L6.408|
;;;1143   		{
;;;1144   			System.Control_Model=0;   //bit2发射机控制模式  1遥控   0本控
00018e  2000              MOVS     r0,#0
000190  49b4              LDR      r1,|L6.1124|
000192  3980              SUBS     r1,r1,#0x80
000194  f881004c          STRB     r0,[r1,#0x4c]
                  |L6.408|
;;;1145   //			Trans_printf("msg[21]== %x ",((msg[21]&0x04)>>2));
;;;1146   		}
;;;1147   		
;;;1148   		GT2000_Rx.Gt2000_mode=msg[30];   //1固频、2双频、3三频、4AM 
000198  7fa0              LDRB     r0,[r4,#0x1e]
00019a  49bb              LDR      r1,|L6.1160|
00019c  7148              STRB     r0,[r1,#5]
;;;1149   		GT2000_Rx.Gt2000_freq1[0]=msg[23];  //当前频率1  //22~23
00019e  7de0              LDRB     r0,[r4,#0x17]
0001a0  f8810024          STRB     r0,[r1,#0x24]
;;;1150   		GT2000_Rx.Gt2000_freq1[1]=msg[22];  //当前频率1  //22~23
0001a4  7da1              LDRB     r1,[r4,#0x16]
0001a6  48b8              LDR      r0,|L6.1160|
0001a8  f8801025          STRB     r1,[r0,#0x25]
;;;1151   		memset(GT2000_Rx.Gt2000_freq1+2,0x00,2);
0001ac  2100              MOVS     r1,#0
0001ae  84c1              STRH     r1,[r0,#0x26]
;;;1152   		GT2000_Rx.Gt2000_freq2[0]=msg[25];  //当前频率2  //24~25
0001b0  7e60              LDRB     r0,[r4,#0x19]
0001b2  49b5              LDR      r1,|L6.1160|
0001b4  f881002e          STRB     r0,[r1,#0x2e]
;;;1153   		GT2000_Rx.Gt2000_freq2[1]=msg[24];  //当前频率2  //24~25
0001b8  7e21              LDRB     r1,[r4,#0x18]
0001ba  48b3              LDR      r0,|L6.1160|
0001bc  f880102f          STRB     r1,[r0,#0x2f]
;;;1154   		memset(GT2000_Rx.Gt2000_freq2+2,0x00,2);
0001c0  2100              MOVS     r1,#0
0001c2  8601              STRH     r1,[r0,#0x30]
;;;1155   		GT2000_Rx.Gt2000_freq3[0]=msg[27];  //当前频率3  //26~27
0001c4  7ee0              LDRB     r0,[r4,#0x1b]
0001c6  49b0              LDR      r1,|L6.1160|
0001c8  f8810038          STRB     r0,[r1,#0x38]
;;;1156   		GT2000_Rx.Gt2000_freq3[1]=msg[26];  //当前频率3  //26~27
0001cc  7ea1              LDRB     r1,[r4,#0x1a]
0001ce  48ae              LDR      r0,|L6.1160|
0001d0  f8801039          STRB     r1,[r0,#0x39]
;;;1157   		memset(GT2000_Rx.Gt2000_freq3+2,0x00,2);
0001d4  2100              MOVS     r1,#0
0001d6  8741              STRH     r1,[r0,#0x3a]
;;;1158   		Trans_printf(" GT2000_Rx.Gt2000_freq1[0]== %x ",GT2000_Rx.Gt2000_freq1[0],GT2000_Rx.Gt2000_freq1[1]);
0001d8  f8902025          LDRB     r2,[r0,#0x25]
0001dc  f8901024          LDRB     r1,[r0,#0x24]  ; GT2000_Rx
0001e0  a0af              ADR      r0,|L6.1184|
0001e2  f7fffffe          BL       Trans_printf
;;;1159   		
;;;1160   		/* 取发射机当前功率值 */
;;;1161   		GT2000_Rx.Frequency_power[0]=msg[29];
0001e6  7f60              LDRB     r0,[r4,#0x1d]
0001e8  49a7              LDR      r1,|L6.1160|
0001ea  f8810042          STRB     r0,[r1,#0x42]
;;;1162   		GT2000_Rx.Frequency_power[1]=msg[28];
0001ee  7f21              LDRB     r1,[r4,#0x1c]
0001f0  48a5              LDR      r0,|L6.1160|
0001f2  f8801043          STRB     r1,[r0,#0x43]
;;;1163   		GT2000_Rx.Now_all_power=((msg[29]<<8)|msg[28]);
0001f6  7f20              LDRB     r0,[r4,#0x1c]
0001f8  7f61              LDRB     r1,[r4,#0x1d]
0001fa  ea402001          ORR      r0,r0,r1,LSL #8
0001fe  49a2              LDR      r1,|L6.1160|
000200  f8a10044          STRH     r0,[r1,#0x44]
;;;1164   		/*取工作模式*/
;;;1165   		System.INQUIRE_Mode=msg[30];   //1固频、2双频、3三频、4AM 
000204  7fa0              LDRB     r0,[r4,#0x1e]
000206  4997              LDR      r1,|L6.1124|
000208  3980              SUBS     r1,r1,#0x80
00020a  7608              STRB     r0,[r1,#0x18]
;;;1166   				  
;;;1167   		GT2000_Rx.Working_current=(float)(((msg[19]<<24)+(msg[18]<<16)+(msg[17]<<8)+(msg[16]))/4.0); //工作电流  //16~19
00020c  7ce1              LDRB     r1,[r4,#0x13]
00020e  0609              LSLS     r1,r1,#24
000210  7ca2              LDRB     r2,[r4,#0x12]
000212  eb014102          ADD      r1,r1,r2,LSL #16
000216  7c62              LDRB     r2,[r4,#0x11]
000218  eb012102          ADD      r1,r1,r2,LSL #8
00021c  7c22              LDRB     r2,[r4,#0x10]
00021e  1888              ADDS     r0,r1,r2
000220  f7fffffe          BL       __aeabi_i2d
000224  2200              MOVS     r2,#0
000226  4ba7              LDR      r3,|L6.1220|
000228  e9cd0104          STRD     r0,r1,[sp,#0x10]
00022c  f7fffffe          BL       __aeabi_ddiv
000230  4607              MOV      r7,r0
000232  f7fffffe          BL       __aeabi_d2f
000236  4994              LDR      r1,|L6.1160|
000238  61c8              STR      r0,[r1,#0x1c]  ; GT2000_Rx
;;;1168   		GT2000_Rx.forward_power[0]=msg[7];GT2000_Rx.forward_power[1]=msg[6];  //发射机入射功率   //6~7
00023a  79e0              LDRB     r0,[r4,#7]
00023c  7288              STRB     r0,[r1,#0xa]
00023e  79a1              LDRB     r1,[r4,#6]
000240  4891              LDR      r0,|L6.1160|
000242  72c1              STRB     r1,[r0,#0xb]
;;;1169   		GT2000_Rx.reverse_power[0]=msg[9];GT2000_Rx.forward_power[1]=msg[8];  //发射机反射功率   //8~9 
000244  7a60              LDRB     r0,[r4,#9]
000246  4990              LDR      r1,|L6.1160|
000248  7408              STRB     r0,[r1,#0x10]
00024a  7a21              LDRB     r1,[r4,#8]
00024c  488e              LDR      r0,|L6.1160|
00024e  72c1              STRB     r1,[r0,#0xb]
;;;1170   		
;;;1171   		  if(System.Launch_Switch_state==1)
000250  4884              LDR      r0,|L6.1124|
000252  3880              SUBS     r0,r0,#0x80
000254  f8900058          LDRB     r0,[r0,#0x58]  ; System
000258  2801              CMP      r0,#1
00025a  d103              BNE      |L6.612|
;;;1172   				{
;;;1173   					GT2000_Rx.sys_emit_open = 1;	//发射/停止状态
00025c  498a              LDR      r1,|L6.1160|
00025e  f8810022          STRB     r0,[r1,#0x22]
000262  e003              B        |L6.620|
                  |L6.612|
;;;1174   				}
;;;1175   				else
;;;1176   				{
;;;1177   					GT2000_Rx.sys_emit_open = 0;	//发射/停止状态
000264  2000              MOVS     r0,#0
000266  4988              LDR      r1,|L6.1160|
000268  f8810022          STRB     r0,[r1,#0x22]
                  |L6.620|
;;;1178   				}
;;;1179   		
;;;1180   		System.Amplifier_Temperature[0]=(((((msg[48])+(msg[47]))/8.0)-8))*100;//模块1温度  //45~48
00026c  3429              ADDS     r4,r4,#0x29
00026e  79e1              LDRB     r1,[r4,#7]
000270  79a2              LDRB     r2,[r4,#6]
000272  1888              ADDS     r0,r1,r2
000274  f7fffffe          BL       __aeabi_i2d
000278  2200              MOVS     r2,#0
00027a  4b93              LDR      r3,|L6.1224|
00027c  e9cd0100          STRD     r0,r1,[sp,#0]
000280  f7fffffe          BL       __aeabi_ddiv
000284  2200              MOVS     r2,#0
000286  4b90              LDR      r3,|L6.1224|
000288  e9cd0102          STRD     r0,r1,[sp,#8]
00028c  f7fffffe          BL       __aeabi_dsub
000290  4607              MOV      r7,r0
000292  2200              MOVS     r2,#0
000294  4b8d              LDR      r3,|L6.1228|
000296  f7fffffe          BL       __aeabi_dmul
00029a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00029e  f7fffffe          BL       __aeabi_d2uiz
0002a2  4970              LDR      r1,|L6.1124|
0002a4  3980              SUBS     r1,r1,#0x80
0002a6  f8a10050          STRH     r0,[r1,#0x50]
;;;1181   		System.Amplifier_Temperature[1]=(((((msg[56])+(msg[55]))/8.0)-8))*100;//模块2温度  //56~53
0002aa  7be1              LDRB     r1,[r4,#0xf]
0002ac  7ba2              LDRB     r2,[r4,#0xe]
0002ae  1888              ADDS     r0,r1,r2
0002b0  f7fffffe          BL       __aeabi_i2d
0002b4  4607              MOV      r7,r0
0002b6  2200              MOVS     r2,#0
0002b8  4b83              LDR      r3,|L6.1224|
0002ba  f7fffffe          BL       __aeabi_ddiv
0002be  2200              MOVS     r2,#0
0002c0  4b81              LDR      r3,|L6.1224|
0002c2  e9cd0100          STRD     r0,r1,[sp,#0]
0002c6  f7fffffe          BL       __aeabi_dsub
0002ca  2200              MOVS     r2,#0
0002cc  4b7f              LDR      r3,|L6.1228|
0002ce  e9cd0102          STRD     r0,r1,[sp,#8]
0002d2  f7fffffe          BL       __aeabi_dmul
0002d6  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002da  f7fffffe          BL       __aeabi_d2uiz
0002de  b281              UXTH     r1,r0
0002e0  4860              LDR      r0,|L6.1124|
0002e2  3880              SUBS     r0,r0,#0x80
0002e4  f8a01052          STRH     r1,[r0,#0x52]
;;;1182   		System.Amplifier_Temperature[2]=(((((msg[64])+(msg[63]))/8.0)-8))*100;//模块3温度  //64~61
0002e8  7de1              LDRB     r1,[r4,#0x17]
0002ea  7da2              LDRB     r2,[r4,#0x16]
0002ec  1888              ADDS     r0,r1,r2
0002ee  f7fffffe          BL       __aeabi_i2d
0002f2  4607              MOV      r7,r0
0002f4  2200              MOVS     r2,#0
0002f6  4b74              LDR      r3,|L6.1224|
0002f8  f7fffffe          BL       __aeabi_ddiv
0002fc  2200              MOVS     r2,#0
0002fe  4b72              LDR      r3,|L6.1224|
000300  e9cd0100          STRD     r0,r1,[sp,#0]
000304  f7fffffe          BL       __aeabi_dsub
000308  2200              MOVS     r2,#0
00030a  4b70              LDR      r3,|L6.1228|
00030c  e9cd0102          STRD     r0,r1,[sp,#8]
000310  f7fffffe          BL       __aeabi_dmul
000314  e9cd0104          STRD     r0,r1,[sp,#0x10]
000318  f7fffffe          BL       __aeabi_d2uiz
00031c  b281              UXTH     r1,r0
00031e  4851              LDR      r0,|L6.1124|
000320  3880              SUBS     r0,r0,#0x80
000322  f8a01054          STRH     r1,[r0,#0x54]
;;;1183   		System.Amplifier_Temperature[3]=(((((msg[72])+(msg[71]))/8.0)-8))*100;//模块4温度  //72~69
000326  7fe1              LDRB     r1,[r4,#0x1f]
000328  7fa2              LDRB     r2,[r4,#0x1e]
00032a  1888              ADDS     r0,r1,r2
00032c  f7fffffe          BL       __aeabi_i2d
000330  2200              MOVS     r2,#0
000332  4b65              LDR      r3,|L6.1224|
000334  e9cd0100          STRD     r0,r1,[sp,#0]
000338  f7fffffe          BL       __aeabi_ddiv
00033c  2200              MOVS     r2,#0
00033e  4b62              LDR      r3,|L6.1224|
000340  e9cd0102          STRD     r0,r1,[sp,#8]
000344  f7fffffe          BL       __aeabi_dsub
000348  4607              MOV      r7,r0
00034a  2200              MOVS     r2,#0
00034c  4b5f              LDR      r3,|L6.1228|
00034e  f7fffffe          BL       __aeabi_dmul
000352  e9cd0104          STRD     r0,r1,[sp,#0x10]
000356  f7fffffe          BL       __aeabi_d2uiz
00035a  b281              UXTH     r1,r0
00035c  4841              LDR      r0,|L6.1124|
00035e  3880              SUBS     r0,r0,#0x80
000360  f8a01056          STRH     r1,[r0,#0x56]
;;;1184       
;;;1185   //		Trans_printf(" 模块温度：%x %x %x %x \n",System.Amplifier_Temperature[0],System.Amplifier_Temperature[0],\
;;;1186   //		System.Amplifier_Temperature[1],System.Amplifier_Temperature[2],System.Amplifier_Temperature[3]);
;;;1187   		
;;;1188   		System.Frequency_band_value=msg[31];   //频段值
000364  f8140c0a          LDRB     r0,[r4,#-0xa]
000368  493e              LDR      r1,|L6.1124|
00036a  3980              SUBS     r1,r1,#0x80
00036c  f881005a          STRB     r0,[r1,#0x5a]
;;;1189   //		Trans_printf("band_value= %d ",System.Frequency_band_value);
;;;1190   		
;;;1191   		System.Launch_Switch_state=((msg[21]&0x02)>>1);    //bit1发射机返回的发射状态 0关发射  1开发射
000370  f8140c14          LDRB     r0,[r4,#-0x14]
000374  3c29              SUBS     r4,r4,#0x29
000376  f3c00040          UBFX     r0,r0,#1,#1
00037a  f8810058          STRB     r0,[r1,#0x58]
;;;1192   		
;;;1193   		for(uint8_t i=0;i<4;i++)
00037e  2700              MOVS     r7,#0
000380  e029              B        |L6.982|
                  |L6.898|
;;;1194   		{
;;;1195   			Electricity_Add_1 += Electricity_1[i];  //电流数据为平均值
000382  a910              ADD      r1,sp,#0x40
000384  f8310017          LDRH     r0,[r1,r7,LSL #1]
000388  f7fffffe          BL       __aeabi_ui2f
00038c  4680              MOV      r8,r0
00038e  4629              MOV      r1,r5
000390  f7fffffe          BL       __aeabi_fadd
000394  4605              MOV      r5,r0
;;;1196   			Electricity_Add_2 += Electricity_2[i];
000396  a90e              ADD      r1,sp,#0x38
000398  f8310017          LDRH     r0,[r1,r7,LSL #1]
00039c  f7fffffe          BL       __aeabi_ui2f
0003a0  4680              MOV      r8,r0
0003a2  4631              MOV      r1,r6
0003a4  f7fffffe          BL       __aeabi_fadd
0003a8  4606              MOV      r6,r0
;;;1197   			Electricity_Add_3 += Electricity_3[i];
0003aa  a90c              ADD      r1,sp,#0x30
0003ac  f8310017          LDRH     r0,[r1,r7,LSL #1]
0003b0  f7fffffe          BL       __aeabi_ui2f
0003b4  4680              MOV      r8,r0
0003b6  4649              MOV      r1,r9
0003b8  f7fffffe          BL       __aeabi_fadd
0003bc  4681              MOV      r9,r0
;;;1198   			Electricity_Add_4 += Electricity_4[i];
0003be  a90a              ADD      r1,sp,#0x28
0003c0  f8310017          LDRH     r0,[r1,r7,LSL #1]
0003c4  f7fffffe          BL       __aeabi_ui2f
0003c8  4680              MOV      r8,r0
0003ca  4651              MOV      r1,r10
0003cc  f7fffffe          BL       __aeabi_fadd
0003d0  4682              MOV      r10,r0
0003d2  1c78              ADDS     r0,r7,#1              ;1193
0003d4  b2c7              UXTB     r7,r0                 ;1193
                  |L6.982|
0003d6  2f04              CMP      r7,#4                 ;1193
0003d8  dbd3              BLT      |L6.898|
;;;1199   		}
;;;1200   		
;;;1201   		Average_E[0]=Electricity_Add_1/4.0;  //功放1电流
0003da  4628              MOV      r0,r5
0003dc  f7fffffe          BL       __aeabi_f2d
0003e0  2200              MOVS     r2,#0
0003e2  4b38              LDR      r3,|L6.1220|
0003e4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003e8  f7fffffe          BL       __aeabi_ddiv
0003ec  4607              MOV      r7,r0
0003ee  f7fffffe          BL       __aeabi_d2f
0003f2  9006              STR      r0,[sp,#0x18]
;;;1202   		Average_E[1]=Electricity_Add_2/4.0;  //功放2电流
0003f4  4630              MOV      r0,r6
0003f6  f7fffffe          BL       __aeabi_f2d
0003fa  4607              MOV      r7,r0
0003fc  2200              MOVS     r2,#0
0003fe  4b31              LDR      r3,|L6.1220|
000400  f7fffffe          BL       __aeabi_ddiv
000404  e9cd0104          STRD     r0,r1,[sp,#0x10]
000408  f7fffffe          BL       __aeabi_d2f
00040c  9007              STR      r0,[sp,#0x1c]
;;;1203   		Average_E[2]=Electricity_Add_3/4.0;  //功放3电流
00040e  4648              MOV      r0,r9
000410  f7fffffe          BL       __aeabi_f2d
000414  2200              MOVS     r2,#0
000416  4b2b              LDR      r3,|L6.1220|
000418  e9cd0104          STRD     r0,r1,[sp,#0x10]
00041c  f7fffffe          BL       __aeabi_ddiv
000420  4607              MOV      r7,r0
000422  f7fffffe          BL       __aeabi_d2f
000426  9008              STR      r0,[sp,#0x20]
;;;1204   		Average_E[3]=Electricity_Add_4/4.0;  //功放4电流
000428  4650              MOV      r0,r10
00042a  f7fffffe          BL       __aeabi_f2d
00042e  4607              MOV      r7,r0
000430  2200              MOVS     r2,#0
000432  4b24              LDR      r3,|L6.1220|
000434  f7fffffe          BL       __aeabi_ddiv
000438  e9cd0104          STRD     r0,r1,[sp,#0x10]
00043c  f7fffffe          BL       __aeabi_d2f
000440  9009              STR      r0,[sp,#0x24]
;;;1205   //		Trans_printf(" 电流：%f %f %f %f \n",Average_E[0],Average_E[1],Average_E[2],Average_E[3]);    
;;;1206   		
;;;1207   			if ((GT2000_Rx.sys_open==1)&&(GT2000_Rx.system_status1!=0))		/*详细报警暂不列入监控范围，暂只监控开机时各个模块的报警*/
000442  4811              LDR      r0,|L6.1160|
000444  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
000448  2801              CMP      r0,#1
00044a  d108              BNE      |L6.1118|
00044c  480e              LDR      r0,|L6.1160|
00044e  f8900020          LDRB     r0,[r0,#0x20]  ; GT2000_Rx
000452  b120              CBZ      r0,|L6.1118|
;;;1208   			  {  
;;;1209   				   //这里不操作防止误判
;;;1210   					return MT2000_ACK_ALARM;
000454  f06f0001          MVN      r0,#1
                  |L6.1112|
;;;1211           }
;;;1212   			else   //若无故障则进入此结构
;;;1213   			{					
;;;1214   					return MT2000_ACK_OK;
;;;1215   		  }
;;;1216   }
000458  b013              ADD      sp,sp,#0x4c
00045a  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.1118|
00045e  2001              MOVS     r0,#1                 ;1214
000460  e7fa              B        |L6.1112|
;;;1217   
                          ENDP

000462  0000              DCW      0x0000
                  |L6.1124|
                          DCD      System+0x80
                  |L6.1128|
                          DCD      Alarm_historyBack
                  |L6.1132|
00046c  416c6172          DCB      "Alarm_status1_msg[20]== %x ",0
000470  6d5f7374
000474  61747573
000478  315f6d73
00047c  675b3230
000480  5d3d3d20
000484  25782000
                  |L6.1160|
                          DCD      GT2000_Rx
                  |L6.1164|
00048c  6d73675b          DCB      "msg[21]Bit2== %x ",0
000490  32315d42
000494  6974323d
000498  3d202578
00049c  2000    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L6.1184|
0004a0  20475432          DCB      " GT2000_Rx.Gt2000_freq1[0]== %x ",0
0004a4  3030305f
0004a8  52782e47
0004ac  74323030
0004b0  305f6672
0004b4  6571315b
0004b8  305d3d3d
0004bc  20257820
0004c0  00      
0004c1  00                DCB      0
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L6.1220|
                          DCD      0x40100000
                  |L6.1224|
                          DCD      0x40200000
                  |L6.1228|
                          DCD      0x40590000

                          AREA ||i.GT2000_Emit||, CODE, READONLY, ALIGN=2

                  GT2000_Emit PROC
;;;149    
;;;150    int GT2000_Emit(void)  //开发射
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;151    {
000004  b0b2              SUB      sp,sp,#0xc8
;;;152        uint8_t i = 0;
000006  2500              MOVS     r5,#0
;;;153        uint8_t repeat_send_counter = 0;  //重复发送计数器
000008  2600              MOVS     r6,#0
;;;154        int ret=0;
00000a  2400              MOVS     r4,#0
;;;155    
;;;156    	  System.protect_adjust = 0x00;//1:正在进行保护调节		0:不需要调节或调节结束(完成或失败)		(电流/驻波比 > 80%报警阈值)
00000c  2000              MOVS     r0,#0
00000e  49c7              LDR      r1,|L7.812|
000010  7508              STRB     r0,[r1,#0x14]
;;;157    
;;;158        if( System.sweep == 0x01 )  //正在扫频
000012  4608              MOV      r0,r1
000014  7b80              LDRB     r0,[r0,#0xe]  ; System
000016  2801              CMP      r0,#1
000018  d101              BNE      |L7.30|
;;;159    		{
;;;160          System.status = SYSTEM_SCAN;   //扫频状态
00001a  2005              MOVS     r0,#5
00001c  72c8              STRB     r0,[r1,#0xb]
                  |L7.30|
;;;161    		}
;;;162    
;;;163        GT2000_Buffer_Clean();  //清除串口缓存
00001e  f7fffffe          BL       GT2000_Buffer_Clean
;;;164    		
;;;165    	  Trans_printf(" 1由此进入设置工作模式和频率GT2000_Tx.Gt2000_mode== %d \n" ,GT2000_Tx.Gt2000_mode);	
000022  48c3              LDR      r0,|L7.816|
000024  7941              LDRB     r1,[r0,#5]  ; GT2000_Tx
000026  a0c3              ADR      r0,|L7.820|
000028  f7fffffe          BL       Trans_printf
;;;166            for(i=0;i<3;i++)	
00002c  2500              MOVS     r5,#0
00002e  e037              B        |L7.160|
                  |L7.48|
;;;167           {		
;;;168    		    GT_Set_Value(GT2000_Tx);	 /* 设置工作模式和频率,GT2000_Tx在Task_Upper_Computer.c中赋值 */
000030  225b              MOVS     r2,#0x5b
000032  49bf              LDR      r1,|L7.816|
000034  3110              ADDS     r1,r1,#0x10
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       __aeabi_memcpy
00003c  226b              MOVS     r2,#0x6b
00003e  49bc              LDR      r1,|L7.816|
000040  a817              ADD      r0,sp,#0x5c
000042  f7fffffe          BL       __aeabi_memcpy
000046  a817              ADD      r0,sp,#0x5c
000048  c80f              LDM      r0,{r0-r3}
00004a  f7fffffe          BL       GT_Set_Value
;;;169    			  vTaskDelay(50);   //等待
00004e  2032              MOVS     r0,#0x32
000050  f7fffffe          BL       vTaskDelay
;;;170    				Gt_Inquire_All();		//查询一次
000054  f7fffffe          BL       Gt_Inquire_All
;;;171    				 vTaskDelay(50);   //等待
000058  2032              MOVS     r0,#0x32
00005a  f7fffffe          BL       vTaskDelay
;;;172    			  ret=GT2000_Wait_Ack(MT2000_CMD_CHANNEL);  
00005e  2043              MOVS     r0,#0x43
000060  f7fffffe          BL       GT2000_Wait_Ack
000064  4604              MOV      r4,r0
;;;173    			  GT2000_Buffer_Clean();
000066  f7fffffe          BL       GT2000_Buffer_Clean
;;;174    					if( ret == MT2000_ACK_OK )
00006a  2c01              CMP      r4,#1
00006c  d116              BNE      |L7.156|
;;;175    					{
;;;176    						if((GT2000_Tx.Gt2000_freq1[0]==GT2000_Rx.Gt2000_freq1[1])||(GT2000_Tx.Gt2000_freq1[1]==GT2000_Rx.Gt2000_freq1[0]))
00006e  48b0              LDR      r0,|L7.816|
000070  f8901024          LDRB     r1,[r0,#0x24]  ; GT2000_Tx
000074  48be              LDR      r0,|L7.880|
000076  f8900025          LDRB     r0,[r0,#0x25]
00007a  4281              CMP      r1,r0
00007c  d007              BEQ      |L7.142|
00007e  48ac              LDR      r0,|L7.816|
000080  f8900025          LDRB     r0,[r0,#0x25]
000084  49ba              LDR      r1,|L7.880|
000086  f8911024          LDRB     r1,[r1,#0x24]  ; GT2000_Rx
00008a  4288              CMP      r0,r1
00008c  d102              BNE      |L7.148|
                  |L7.142|
;;;177    						{
;;;178    							GT2000_Buffer_Clean();
00008e  f7fffffe          BL       GT2000_Buffer_Clean
;;;179    							break;
000092  e007              B        |L7.164|
                  |L7.148|
;;;180    						}
;;;181    						else
;;;182    						{
;;;183    							Trans_printf(" 第 %d 次发射参数设置失败 \n",i);
000094  4629              MOV      r1,r5
000096  a0b7              ADR      r0,|L7.884|
000098  f7fffffe          BL       Trans_printf
                  |L7.156|
00009c  1c68              ADDS     r0,r5,#1              ;166
00009e  b2c5              UXTB     r5,r0                 ;166
                  |L7.160|
0000a0  2d03              CMP      r5,#3                 ;166
0000a2  dbc5              BLT      |L7.48|
                  |L7.164|
0000a4  bf00              NOP                            ;179
;;;184    						}
;;;185    					}				 
;;;186           }
;;;187    			
;;;188    
;;;189    		Trans_printf("  设置完工作参数后等待10s! \n");
0000a6  a0ba              ADR      r0,|L7.912|
0000a8  f7fffffe          BL       Trans_printf
;;;190    		vTaskDelay(10000);   //等待10s
0000ac  f2427010          MOV      r0,#0x2710
0000b0  f7fffffe          BL       vTaskDelay
;;;191    
;;;192        for(repeat_send_counter=0; repeat_send_counter<3; repeat_send_counter++)
0000b4  2600              MOVS     r6,#0
0000b6  e01a              B        |L7.238|
                  |L7.184|
;;;193        {		
;;;194    			Gt_Inquire_All();		//查询一次
0000b8  f7fffffe          BL       Gt_Inquire_All
;;;195    			ret=GT2000_Wait_Ack(MT2000_CMD_CHANNEL);  
0000bc  2043              MOVS     r0,#0x43
0000be  f7fffffe          BL       GT2000_Wait_Ack
0000c2  4604              MOV      r4,r0
;;;196    
;;;197    			if( ret == MT2000_ACK_ALARM )
0000c4  1ca0              ADDS     r0,r4,#2
0000c6  b940              CBNZ     r0,|L7.218|
;;;198    			{
;;;199     					Trans_printf("  触发GT2000_Alarm_Stop! \n");
0000c8  a0b9              ADR      r0,|L7.944|
0000ca  f7fffffe          BL       Trans_printf
;;;200    				  GT2000_Alarm_Stop();				//return为直接退出这个函数。
0000ce  f7fffffe          BL       GT2000_Alarm_Stop
;;;201    					return ret;
0000d2  4620              MOV      r0,r4
                  |L7.212|
;;;202    			}
;;;203    			else	if( ret == MT2000_ACK_OK )
;;;204    			{
;;;205    					GT2000_Buffer_Clean();
;;;206    					break;
;;;207    			}
;;;208    			vTaskDelay(50);
;;;209        }
;;;210    
;;;211        if( ret == MT2000_ACK_OK )
;;;212        {      
;;;213            freq_range_judge(GT2000_Tx.Gt2000_freq1);  //核对频段值			
;;;214    				if( System.stop == 0x01 )
;;;215    				{
;;;216    						System.stop = 0x00;
;;;217    						System.cancel_sweeping = 0x00;
;;;218    
;;;219    						System.open = 0x02;
;;;220    						System.achieve_add_sub = 0;
;;;221    						System.modify_power = 0;
;;;222    						System.cancel_add_sub = 0;
;;;223    						System_Status_Clean();
;;;224    
;;;225    					  Trans_printf(" 开发射判断是否有历史报警 ！ \n");
;;;226    						if( get_history_alarm() == 0x01 )
;;;227    						{
;;;228    								System.status = SYSTEM_ALARM;
;;;229    						}
;;;230    						else
;;;231    						{
;;;232    								System.status = SYSTEM_STANDBY;
;;;233    						}
;;;234    						return 0;
;;;235    				}
;;;236    				else	if( (Alarm.emission==0x01) || (Alarm.no_respond==0x01) )
;;;237    				{
;;;238    									System.status = SYSTEM_ALARM;
;;;239    									System.stop = 0x00;
;;;240    									System.cancel_sweeping = 0x00;
;;;241    
;;;242    									System.open = 0x02;
;;;243    									System.achieve_add_sub = 0;
;;;244    									System.modify_power = 0;
;;;245    									System.cancel_add_sub = 0;
;;;246    									System_Status_Clean();
;;;247    					return 0;
;;;248    				}
;;;249    				
;;;250    				if(System.fbv_c==System.Frequency_band_value)  //检验发射的频段是否在频段内
;;;251    				{
;;;252    					Gt_RF_Open();   //开发射
;;;253    					vTaskDelay(100);
;;;254    					Trans_printf(" 频段一致！开发射 \n ");
;;;255    					if(System.status!=SYSTEM_SCAN)		//如果不是扫频，直接更新状态
;;;256    					{
;;;257    						System.status=SYSTEM_EMISSING;
;;;258    					}
;;;259    				}
;;;260    				else
;;;261    				{
;;;262    					Gt2000_Close(); //关机
;;;263    					Trans_printf(" 频段不一致！关机System.fbv_c== %d  System.Frequency_band_value== %d \n ",System.fbv_c,System.Frequency_band_value);
;;;264    					return 0;
;;;265    				}
;;;266    
;;;267    					if( ret != MT2000_ACK_OK)	
;;;268    					{
;;;269    							System.stop = 0x00;
;;;270    
;;;271    							System.open = 0x02;
;;;272    							System.achieve_add_sub = 0;
;;;273    							System.modify_power = 0;
;;;274    							System.cancel_add_sub = 0;
;;;275    							System_Status_Clean();
;;;276    
;;;277    							Alarm.no_respond_locate = 10;
;;;278    						Trans_printf(" Alarm.no_respond_locate = 10  \n");
;;;279    							return 0;
;;;280    					}
;;;281    
;;;282    					//发射成功之后，System.emission=0x01; 有些标志位未置位，导致Task_Hardware_Monitor()会再次判断为需要发射，出现警告
;;;283    
;;;284    					/* 发射成功之后，不会马上更新数据，在这里等待数据更新(功率会更新的比较慢) */
;;;285    					for(i=0; i<50; i++)
;;;286    					{
;;;287    						Gt_Inquire_All();
;;;288    						vTaskDelay(50);
;;;289    						ret=GT2000_Wait_Ack(MT2000_CMD_INQUIRE);
;;;290    						if( ret == MT2000_ACK_ALARM )
;;;291    						{
;;;292    								GT2000_Alarm_Stop();
;;;293    								return ret;
;;;294    						}
;;;295    						if( System.Forward_Power >= 150.0 )
;;;296    						{
;;;297    								System.emission = 0x01;
;;;298    								break;
;;;299    						}
;;;300    						else
;;;301    						{
;;;302    								System.emission = 0x00;		//等待返回的功率不为零，否则清零
;;;303    						}
;;;304    
;;;305    							vTaskDelay(200);
;;;306    					}
;;;307    
;;;308    					if( ret != MT2000_ACK_OK )
;;;309    					{
;;;310    							Alarm.no_respond_locate = 12;
;;;311    						Trans_printf(" Alarm.no_respond_locate = 12  \n");
;;;312    							return 0;
;;;313    					}
;;;314    					
;;;315    					if( (System.Forward_Power <= 10.0) && (System.Electricity > 10.0) )	//无功率报警
;;;316    					{
;;;317    					
;;;318    							if( Alarm.no_power == 0 )
;;;319    							{
;;;320    								if( System.time_update_flag == 0x01 )
;;;321    								{
;;;322    									Alarm.no_power_time_flag = 0x01;
;;;323    									Time_Printf( (RTC_GetCounter()+g_stamp_distance), &set_time );
;;;324    									Alarm_historyBack.no_power_time[0]=set_time.tm_year-2000;
;;;325    									Alarm_historyBack.no_power_time[1]=set_time.tm_mon;
;;;326    									Alarm_historyBack.no_power_time[2]=set_time.tm_mday;
;;;327    									Alarm_historyBack.no_power_time[3]=set_time.tm_hour;
;;;328    									Alarm_historyBack.no_power_time[4]=set_time.tm_min;
;;;329    									Alarm_historyBack.no_power_time[5]=set_time.tm_sec;
;;;330    								}
;;;331    
;;;332    								Alarm.alarm_history = 1;
;;;333    								Alarm.no_power = 1;
;;;334    								Trans_printf(" 开发射后检测到无功率报警1！ \n");
;;;335    							}
;;;336    					}
;;;337    		      //发射成功，检查报警
;;;338    					swr_power_alarm_check();	//驻波比检测
;;;339    					Trans_printf(" 运行到这里表示发射成功，进行驻波比检测  \n");
;;;340    
;;;341    					if( Alarm.emission == 0x01 )	//激励器自身报警，立即停止
;;;342    					{
;;;343    							GT2000_Alarm_Stop();
;;;344    							return 0;
;;;345    					}
;;;346                  
;;;347        }
;;;348        else
;;;349        {
;;;350            Trans_printf("Emis//Channel fail\r\n");
;;;351            System.stop = 0x00;
;;;352    
;;;353            System.open = 0x02;
;;;354            System.achieve_add_sub = 0;
;;;355            System.modify_power = 0;
;;;356            System.cancel_add_sub = 0;
;;;357            System_Status_Clean();
;;;358    
;;;359            Trans_printf("发射失败\r\n");
;;;360    
;;;361            Alarm.no_respond_locate = 8;
;;;362            Trans_printf("BJ2000_Emit Channel 8 no respond.\r\n");
;;;363            return 0;
;;;364        }
;;;365    
;;;366    return 0;
;;;367    }
0000d4  b032              ADD      sp,sp,#0xc8
0000d6  e8bd81f0          POP      {r4-r8,pc}
                  |L7.218|
0000da  2c01              CMP      r4,#1                 ;203
0000dc  d102              BNE      |L7.228|
0000de  f7fffffe          BL       GT2000_Buffer_Clean
0000e2  e006              B        |L7.242|
                  |L7.228|
0000e4  2032              MOVS     r0,#0x32              ;208
0000e6  f7fffffe          BL       vTaskDelay
0000ea  1c70              ADDS     r0,r6,#1              ;192
0000ec  b2c6              UXTB     r6,r0                 ;192
                  |L7.238|
0000ee  2e03              CMP      r6,#3                 ;192
0000f0  dbe2              BLT      |L7.184|
                  |L7.242|
0000f2  bf00              NOP                            ;206
0000f4  2c01              CMP      r4,#1                 ;211
0000f6  d174              BNE      |L7.482|
0000f8  488d              LDR      r0,|L7.816|
0000fa  3024              ADDS     r0,r0,#0x24           ;213
0000fc  f7fffffe          BL       freq_range_judge
000100  488a              LDR      r0,|L7.812|
000102  7d40              LDRB     r0,[r0,#0x15]         ;214  ; System
000104  2801              CMP      r0,#1                 ;214
000106  d11b              BNE      |L7.320|
000108  2000              MOVS     r0,#0                 ;216
00010a  4988              LDR      r1,|L7.812|
00010c  7548              STRB     r0,[r1,#0x15]         ;216
00010e  73c8              STRB     r0,[r1,#0xf]          ;217
000110  2002              MOVS     r0,#2                 ;219
000112  7308              STRB     r0,[r1,#0xc]          ;219
000114  2000              MOVS     r0,#0                 ;220
000116  7448              STRB     r0,[r1,#0x11]         ;220
000118  7488              STRB     r0,[r1,#0x12]         ;221
00011a  74c8              STRB     r0,[r1,#0x13]         ;222
00011c  f7fffffe          BL       System_Status_Clean
000120  a0aa              ADR      r0,|L7.972|
000122  f7fffffe          BL       Trans_printf
000126  f7fffffe          BL       get_history_alarm
00012a  2801              CMP      r0,#1                 ;226
00012c  d103              BNE      |L7.310|
00012e  2011              MOVS     r0,#0x11              ;228
000130  497e              LDR      r1,|L7.812|
000132  72c8              STRB     r0,[r1,#0xb]          ;228
000134  e002              B        |L7.316|
                  |L7.310|
000136  2002              MOVS     r0,#2                 ;232
000138  497c              LDR      r1,|L7.812|
00013a  72c8              STRB     r0,[r1,#0xb]          ;232
                  |L7.316|
00013c  2000              MOVS     r0,#0                 ;234
00013e  e7c9              B        |L7.212|
                  |L7.320|
000140  48aa              LDR      r0,|L7.1004|
000142  7840              LDRB     r0,[r0,#1]            ;236  ; Alarm
000144  2801              CMP      r0,#1                 ;236
000146  d003              BEQ      |L7.336|
000148  48a8              LDR      r0,|L7.1004|
00014a  78c0              LDRB     r0,[r0,#3]            ;236  ; Alarm
00014c  2801              CMP      r0,#1                 ;236
00014e  d10f              BNE      |L7.368|
                  |L7.336|
000150  2011              MOVS     r0,#0x11              ;238
000152  4976              LDR      r1,|L7.812|
000154  72c8              STRB     r0,[r1,#0xb]          ;238
000156  2000              MOVS     r0,#0                 ;239
000158  7548              STRB     r0,[r1,#0x15]         ;239
00015a  73c8              STRB     r0,[r1,#0xf]          ;240
00015c  2002              MOVS     r0,#2                 ;242
00015e  7308              STRB     r0,[r1,#0xc]          ;242
000160  2000              MOVS     r0,#0                 ;243
000162  7448              STRB     r0,[r1,#0x11]         ;243
000164  7488              STRB     r0,[r1,#0x12]         ;244
000166  74c8              STRB     r0,[r1,#0x13]         ;245
000168  f7fffffe          BL       System_Status_Clean
00016c  2000              MOVS     r0,#0                 ;247
00016e  e7b1              B        |L7.212|
                  |L7.368|
000170  486e              LDR      r0,|L7.812|
000172  f890005b          LDRB     r0,[r0,#0x5b]         ;250  ; System
000176  496d              LDR      r1,|L7.812|
000178  f891105a          LDRB     r1,[r1,#0x5a]         ;250  ; System
00017c  4288              CMP      r0,r1                 ;250
00017e  d10f              BNE      |L7.416|
000180  f7fffffe          BL       Gt_RF_Open
000184  2064              MOVS     r0,#0x64              ;253
000186  f7fffffe          BL       vTaskDelay
00018a  a099              ADR      r0,|L7.1008|
00018c  f7fffffe          BL       Trans_printf
000190  4866              LDR      r0,|L7.812|
000192  7ac0              LDRB     r0,[r0,#0xb]          ;255  ; System
000194  2805              CMP      r0,#5                 ;255
000196  d00f              BEQ      |L7.440|
000198  2001              MOVS     r0,#1                 ;257
00019a  4964              LDR      r1,|L7.812|
00019c  72c8              STRB     r0,[r1,#0xb]          ;257
00019e  e00b              B        |L7.440|
                  |L7.416|
0001a0  f7fffffe          BL       Gt2000_Close
0001a4  4861              LDR      r0,|L7.812|
0001a6  f890205a          LDRB     r2,[r0,#0x5a]         ;263  ; System
0001aa  f890105b          LDRB     r1,[r0,#0x5b]         ;263  ; System
0001ae  4896              LDR      r0,|L7.1032|
0001b0  f7fffffe          BL       Trans_printf
0001b4  2000              MOVS     r0,#0                 ;264
0001b6  e78d              B        |L7.212|
                  |L7.440|
0001b8  2c01              CMP      r4,#1                 ;267
0001ba  d013              BEQ      |L7.484|
0001bc  2000              MOVS     r0,#0                 ;269
0001be  495b              LDR      r1,|L7.812|
0001c0  7548              STRB     r0,[r1,#0x15]         ;269
0001c2  2002              MOVS     r0,#2                 ;271
0001c4  7308              STRB     r0,[r1,#0xc]          ;271
0001c6  2000              MOVS     r0,#0                 ;272
0001c8  7448              STRB     r0,[r1,#0x11]         ;272
0001ca  7488              STRB     r0,[r1,#0x12]         ;273
0001cc  74c8              STRB     r0,[r1,#0x13]         ;274
0001ce  f7fffffe          BL       System_Status_Clean
0001d2  200a              MOVS     r0,#0xa               ;277
0001d4  4985              LDR      r1,|L7.1004|
0001d6  7188              STRB     r0,[r1,#6]            ;277
0001d8  a08c              ADR      r0,|L7.1036|
0001da  f7fffffe          BL       Trans_printf
0001de  2000              MOVS     r0,#0                 ;279
0001e0  e778              B        |L7.212|
                  |L7.482|
0001e2  e087              B        |L7.756|
                  |L7.484|
0001e4  2500              MOVS     r5,#0                 ;285
0001e6  e024              B        |L7.562|
                  |L7.488|
0001e8  f7fffffe          BL       Gt_Inquire_All
0001ec  2032              MOVS     r0,#0x32              ;288
0001ee  f7fffffe          BL       vTaskDelay
0001f2  20ce              MOVS     r0,#0xce              ;289
0001f4  f7fffffe          BL       GT2000_Wait_Ack
0001f8  4604              MOV      r4,r0                 ;289
0001fa  1ca0              ADDS     r0,r4,#2              ;290
0001fc  b918              CBNZ     r0,|L7.518|
0001fe  f7fffffe          BL       GT2000_Alarm_Stop
000202  4620              MOV      r0,r4                 ;293
000204  e766              B        |L7.212|
                  |L7.518|
000206  4949              LDR      r1,|L7.812|
000208  6ec8              LDR      r0,[r1,#0x6c]         ;295  ; System
00020a  f7fffffe          BL       __aeabi_f2d
00020e  4607              MOV      r7,r0                 ;295
000210  2200              MOVS     r2,#0                 ;295
000212  4b87              LDR      r3,|L7.1072|
000214  f7fffffe          BL       __aeabi_cdrcmple
000218  d803              BHI      |L7.546|
00021a  2001              MOVS     r0,#1                 ;297
00021c  4943              LDR      r1,|L7.812|
00021e  7588              STRB     r0,[r1,#0x16]         ;297
000220  e009              B        |L7.566|
                  |L7.546|
000222  2000              MOVS     r0,#0                 ;302
000224  4941              LDR      r1,|L7.812|
000226  7588              STRB     r0,[r1,#0x16]         ;302
000228  20c8              MOVS     r0,#0xc8              ;305
00022a  f7fffffe          BL       vTaskDelay
00022e  1c68              ADDS     r0,r5,#1              ;285
000230  b2c5              UXTB     r5,r0                 ;285
                  |L7.562|
000232  2d32              CMP      r5,#0x32              ;285
000234  dbd8              BLT      |L7.488|
                  |L7.566|
000236  bf00              NOP                            ;298
000238  2c01              CMP      r4,#1                 ;308
00023a  d007              BEQ      |L7.588|
00023c  200c              MOVS     r0,#0xc               ;310
00023e  496b              LDR      r1,|L7.1004|
000240  7188              STRB     r0,[r1,#6]            ;310
000242  a07c              ADR      r0,|L7.1076|
000244  f7fffffe          BL       Trans_printf
000248  2000              MOVS     r0,#0                 ;312
00024a  e743              B        |L7.212|
                  |L7.588|
00024c  4937              LDR      r1,|L7.812|
00024e  6ec8              LDR      r0,[r1,#0x6c]         ;315  ; System
000250  f7fffffe          BL       __aeabi_f2d
000254  4607              MOV      r7,r0                 ;315
000256  2200              MOVS     r2,#0                 ;315
000258  4b7f              LDR      r3,|L7.1112|
00025a  f7fffffe          BL       __aeabi_cdcmple
00025e  d83c              BHI      |L7.730|
000260  4932              LDR      r1,|L7.812|
000262  6f88              LDR      r0,[r1,#0x78]         ;315  ; System
000264  f7fffffe          BL       __aeabi_f2d
000268  4607              MOV      r7,r0                 ;315
00026a  2200              MOVS     r2,#0                 ;315
00026c  4b7a              LDR      r3,|L7.1112|
00026e  f7fffffe          BL       __aeabi_cdrcmple
000272  d232              BCS      |L7.730|
000274  485d              LDR      r0,|L7.1004|
000276  7cc0              LDRB     r0,[r0,#0x13]         ;318  ; Alarm
000278  bb78              CBNZ     r0,|L7.730|
00027a  482c              LDR      r0,|L7.812|
00027c  7a80              LDRB     r0,[r0,#0xa]          ;320  ; System
00027e  2801              CMP      r0,#1                 ;320
000280  d124              BNE      |L7.716|
000282  495a              LDR      r1,|L7.1004|
000284  7508              STRB     r0,[r1,#0x14]         ;322
000286  f7fffffe          BL       RTC_GetCounter
00028a  4974              LDR      r1,|L7.1116|
00028c  6809              LDR      r1,[r1,#0]            ;323  ; g_stamp_distance
00028e  1847              ADDS     r7,r0,r1              ;323
000290  4973              LDR      r1,|L7.1120|
000292  4638              MOV      r0,r7                 ;323
000294  f7fffffe          BL       Time_Printf
000298  4871              LDR      r0,|L7.1120|
00029a  7d00              LDRB     r0,[r0,#0x14]         ;324  ; set_time
00029c  f5a060fa          SUB      r0,r0,#0x7d0          ;324
0002a0  4970              LDR      r1,|L7.1124|
0002a2  70c8              STRB     r0,[r1,#3]            ;324
0002a4  486e              LDR      r0,|L7.1120|
0002a6  7c01              LDRB     r1,[r0,#0x10]         ;325  ; set_time
0002a8  486e              LDR      r0,|L7.1124|
0002aa  7101              STRB     r1,[r0,#4]            ;325
0002ac  486c              LDR      r0,|L7.1120|
0002ae  7b01              LDRB     r1,[r0,#0xc]          ;326  ; set_time
0002b0  486c              LDR      r0,|L7.1124|
0002b2  7141              STRB     r1,[r0,#5]            ;326
0002b4  486a              LDR      r0,|L7.1120|
0002b6  7a01              LDRB     r1,[r0,#8]            ;327  ; set_time
0002b8  486a              LDR      r0,|L7.1124|
0002ba  7181              STRB     r1,[r0,#6]            ;327
0002bc  4868              LDR      r0,|L7.1120|
0002be  7901              LDRB     r1,[r0,#4]            ;328  ; set_time
0002c0  4868              LDR      r0,|L7.1124|
0002c2  71c1              STRB     r1,[r0,#7]            ;328
0002c4  4866              LDR      r0,|L7.1120|
0002c6  7801              LDRB     r1,[r0,#0]            ;329  ; set_time
0002c8  4866              LDR      r0,|L7.1124|
0002ca  7201              STRB     r1,[r0,#8]            ;329
                  |L7.716|
0002cc  2001              MOVS     r0,#1                 ;332
0002ce  4947              LDR      r1,|L7.1004|
0002d0  7008              STRB     r0,[r1,#0]            ;332
0002d2  74c8              STRB     r0,[r1,#0x13]         ;333
0002d4  a064              ADR      r0,|L7.1128|
0002d6  f7fffffe          BL       Trans_printf
                  |L7.730|
0002da  f7fffffe          BL       swr_power_alarm_check
0002de  a06a              ADR      r0,|L7.1160|
0002e0  f7fffffe          BL       Trans_printf
0002e4  4841              LDR      r0,|L7.1004|
0002e6  7840              LDRB     r0,[r0,#1]            ;341  ; Alarm
0002e8  2801              CMP      r0,#1                 ;341
0002ea  d11c              BNE      |L7.806|
0002ec  f7fffffe          BL       GT2000_Alarm_Stop
0002f0  2000              MOVS     r0,#0                 ;344
0002f2  e6ef              B        |L7.212|
                  |L7.756|
0002f4  a06f              ADR      r0,|L7.1204|
0002f6  f7fffffe          BL       Trans_printf
0002fa  2000              MOVS     r0,#0                 ;351
0002fc  490b              LDR      r1,|L7.812|
0002fe  7548              STRB     r0,[r1,#0x15]         ;351
000300  2002              MOVS     r0,#2                 ;353
000302  7308              STRB     r0,[r1,#0xc]          ;353
000304  2000              MOVS     r0,#0                 ;354
000306  7448              STRB     r0,[r1,#0x11]         ;354
000308  7488              STRB     r0,[r1,#0x12]         ;355
00030a  74c8              STRB     r0,[r1,#0x13]         ;356
00030c  f7fffffe          BL       System_Status_Clean
000310  a06e              ADR      r0,|L7.1228|
000312  f7fffffe          BL       Trans_printf
000316  2008              MOVS     r0,#8                 ;361
000318  4934              LDR      r1,|L7.1004|
00031a  7188              STRB     r0,[r1,#6]            ;361
00031c  a06e              ADR      r0,|L7.1240|
00031e  f7fffffe          BL       Trans_printf
000322  2000              MOVS     r0,#0                 ;363
000324  e6d6              B        |L7.212|
                  |L7.806|
000326  2000              MOVS     r0,#0                 ;366
000328  e6d4              B        |L7.212|
;;;368    
                          ENDP

00032a  0000              DCW      0x0000
                  |L7.812|
                          DCD      System
                  |L7.816|
                          DCD      GT2000_Tx
                  |L7.820|
000334  2031d3c9          DCB      " 1",211,201,180,203,189,248,200,235,201,232,214,195,185
000338  b4cbbdf8
00033c  c8ebc9e8
000340  d6c3b9  
000343  a4d7f7c4          DCB      164,215,247,196,163,202,189,186,205,198,181,194,202,"GT2"
000347  a3cabdba
00034b  cdc6b5c2
00034f  ca475432
000353  3030305f          DCB      "000_Tx.Gt2000_mode== %d \n",0
000357  54782e47
00035b  74323030
00035f  305f6d6f
000363  64653d3d
000367  20256420
00036b  0a00    
00036d  00                DCB      0
00036e  00                DCB      0
00036f  00                DCB      0
                  |L7.880|
                          DCD      GT2000_Rx
                  |L7.884|
000374  20b5da20          DCB      " ",181,218," %d ",180,206,183,162,201,228,178,206,202,253
000378  256420b4
00037c  ceb7a2c9
000380  e4b2ceca
000384  fd      
000385  c9e8d6c3          DCB      201,232,214,195,202,167,176,220," \n",0
000389  caa7b0dc
00038d  200a00  
                  |L7.912|
000390  2020c9e8          DCB      "  ",201,232,214,195,205,234,185,164,215,247,178,206,202
000394  d6c3cdea
000398  b9a4d7f7
00039c  b2ceca  
00039f  fdbaf3b5          DCB      253,186,243,181,200,180,253,"10s! \n",0
0003a3  c8b4fd31
0003a7  30732120
0003ab  0a00    
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L7.944|
0003b0  2020b4a5          DCB      "  ",180,165,183,162,"GT2000_Alarm_Stop! \n",0
0003b4  b7a24754
0003b8  32303030
0003bc  5f416c61
0003c0  726d5f53
0003c4  746f7021
0003c8  200a00  
0003cb  00                DCB      0
                  |L7.972|
0003cc  20bfaab7          DCB      " ",191,170,183,162,201,228,197,208,182,207,202,199,183,241
0003d0  a2c9e4c5
0003d4  d0b6cfca
0003d8  c7b7f1  
0003db  d3d0c0fa          DCB      211,208,192,250,202,183,177,168,190,175," ",163,161," \n"
0003df  cab7b1a8
0003e3  beaf20a3
0003e7  a1200a  
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L7.1004|
                          DCD      Alarm
                  |L7.1008|
0003f0  20c6b5b6          DCB      " ",198,181,182,206,210,187,214,194,163,161,191,170,183,162
0003f4  ced2bbd6
0003f8  c2a3a1bf
0003fc  aab7a2  
0003ff  c9e4200a          DCB      201,228," \n ",0
000403  2000    
000405  00                DCB      0
000406  00                DCB      0
000407  00                DCB      0
                  |L7.1032|
                          DCD      ||.conststring||+0x44
                  |L7.1036|
00040c  20416c61          DCB      " Alarm.no_respond_locate = 10  \n",0
000410  726d2e6e
000414  6f5f7265
000418  73706f6e
00041c  645f6c6f
000420  63617465
000424  203d2031
000428  3020200a
00042c  00      
00042d  00                DCB      0
00042e  00                DCB      0
00042f  00                DCB      0
                  |L7.1072|
                          DCD      0x4062c000
                  |L7.1076|
000434  20416c61          DCB      " Alarm.no_respond_locate = 12  \n",0
000438  726d2e6e
00043c  6f5f7265
000440  73706f6e
000444  645f6c6f
000448  63617465
00044c  203d2031
000450  3220200a
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L7.1112|
                          DCD      0x40240000
                  |L7.1116|
                          DCD      g_stamp_distance
                  |L7.1120|
                          DCD      set_time
                  |L7.1124|
                          DCD      Alarm_historyBack
                  |L7.1128|
000468  20bfaab7          DCB      " ",191,170,183,162,201,228,186,243,188,236,178,226,181,189
00046c  a2c9e4ba
000470  f3bcecb2
000474  e2b5bd  
000477  cedeb9a6          DCB      206,222,185,166,194,202,177,168,190,175,"1",163,161," \n"
00047b  c2cab1a8
00047f  beaf31a3
000483  a1200a  
000486  00                DCB      0
000487  00                DCB      0
                  |L7.1160|
000488  20d4cbd0          DCB      " ",212,203,208,208,181,189,213,226,192,239,177,237,202,190
00048c  d0b5bdd5
000490  e2c0efb1
000494  edcabe  
000497  b7a2c9e4          DCB      183,162,201,228,179,201,185,166,163,172,189,248,208,208,215
00049b  b3c9b9a6
00049f  a3acbdf8
0004a3  d0d0d7  
0004a6  a4b2a8b1          DCB      164,178,168,177,200,188,236,178,226,"  \n",0
0004aa  c8bcecb2
0004ae  e220200a
0004b2  00      
0004b3  00                DCB      0
                  |L7.1204|
0004b4  456d6973          DCB      "Emis//Channel fail\r\n",0
0004b8  2f2f4368
0004bc  616e6e65
0004c0  6c206661
0004c4  696c0d0a
0004c8  00      
0004c9  00                DCB      0
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L7.1228|
0004cc  b7a2c9e4          DCB      183,162,201,228,202,167,176,220,"\r\n",0
0004d0  caa7b0dc
0004d4  0d0a00  
0004d7  00                DCB      0
                  |L7.1240|
0004d8  424a3230          DCB      "BJ2000_Emit Channel 8 no respond.\r\n",0
0004dc  30305f45
0004e0  6d697420
0004e4  4368616e
0004e8  6e656c20
0004ec  38206e6f
0004f0  20726573
0004f4  706f6e64
0004f8  2e0d0a00

                          AREA ||i.GT2000_Init||, CODE, READONLY, ALIGN=2

                  GT2000_Init PROC
;;;19     
;;;20     void GT2000_Init(void)
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22         uint8_t i=0;
000002  2400              MOVS     r4,#0
;;;23     
;;;24         /*--------------------------GT2000_Tx------------------------------*/
;;;25         GT2000_Tx.Gt2000_mode = 0;		//固频
000004  2000              MOVS     r0,#0
000006  4946              LDR      r1,|L8.288|
000008  7148              STRB     r0,[r1,#5]
;;;26     	  GT2000_Tx.method = 0;		//FM
00000a  7188              STRB     r0,[r1,#6]
;;;27         Power_Range(&GT2000_Tx,(uint8_t*)(0xAF));  //幅度值转化为功率975W，赋值给Frequency_power
00000c  21af              MOVS     r1,#0xaf
00000e  4844              LDR      r0,|L8.288|
000010  f7fffffe          BL       Power_Range
;;;28     	
;;;29     	  GT2000_Tx.channel[0] = 0;	//信道01
000014  2000              MOVS     r0,#0
000016  4942              LDR      r1,|L8.288|
000018  71c8              STRB     r0,[r1,#7]
;;;30         GT2000_Tx.channel[1] = 1;
00001a  2101              MOVS     r1,#1
00001c  4840              LDR      r0,|L8.288|
00001e  7201              STRB     r1,[r0,#8]
;;;31         GT2000_Tx.channel[2] = 0;
000020  2100              MOVS     r1,#0
000022  7241              STRB     r1,[r0,#9]
;;;32         
;;;33         for(i=0; i<8; i++)
000024  bf00              NOP      
000026  e005              B        |L8.52|
                  |L8.40|
;;;34             GT2000_Tx.Gt2000_freq1[i] = 0;
000028  2100              MOVS     r1,#0
00002a  483d              LDR      r0,|L8.288|
00002c  3024              ADDS     r0,r0,#0x24
00002e  5501              STRB     r1,[r0,r4]
000030  1c60              ADDS     r0,r4,#1              ;33
000032  b2c4              UXTB     r4,r0                 ;33
                  |L8.52|
000034  2c08              CMP      r4,#8                 ;33
000036  dbf7              BLT      |L8.40|
;;;35     
;;;36         for(i=0; i<8; i++)
000038  2400              MOVS     r4,#0
00003a  e005              B        |L8.72|
                  |L8.60|
;;;37             GT2000_Tx.Gt2000_freq2[i] = 0;
00003c  2100              MOVS     r1,#0
00003e  4838              LDR      r0,|L8.288|
000040  302e              ADDS     r0,r0,#0x2e
000042  5501              STRB     r1,[r0,r4]
000044  1c60              ADDS     r0,r4,#1              ;36
000046  b2c4              UXTB     r4,r0                 ;36
                  |L8.72|
000048  2c08              CMP      r4,#8                 ;36
00004a  dbf7              BLT      |L8.60|
;;;38     
;;;39         for(i=0; i<8; i++)
00004c  2400              MOVS     r4,#0
00004e  e005              B        |L8.92|
                  |L8.80|
;;;40             GT2000_Tx.Gt2000_freq3[i] = 0;
000050  2100              MOVS     r1,#0
000052  4833              LDR      r0,|L8.288|
000054  3038              ADDS     r0,r0,#0x38
000056  5501              STRB     r1,[r0,r4]
000058  1c60              ADDS     r0,r4,#1              ;39
00005a  b2c4              UXTB     r4,r0                 ;39
                  |L8.92|
00005c  2c08              CMP      r4,#8                 ;39
00005e  dbf7              BLT      |L8.80|
;;;41     
;;;42         for(i=0; i<4; i++)
000060  2400              MOVS     r4,#0
000062  e005              B        |L8.112|
                  |L8.100|
;;;43             GT2000_Tx.forward_power[i] = 0;
000064  2100              MOVS     r1,#0
000066  482e              LDR      r0,|L8.288|
000068  300a              ADDS     r0,r0,#0xa
00006a  5501              STRB     r1,[r0,r4]
00006c  1c60              ADDS     r0,r4,#1              ;42
00006e  b2c4              UXTB     r4,r0                 ;42
                  |L8.112|
000070  2c04              CMP      r4,#4                 ;42
000072  dbf7              BLT      |L8.100|
;;;44     
;;;45         for(i=0; i<4; i++)
000074  2400              MOVS     r4,#0
000076  e005              B        |L8.132|
                  |L8.120|
;;;46             GT2000_Tx.reverse_power[i] = 0;
000078  2100              MOVS     r1,#0
00007a  4829              LDR      r0,|L8.288|
00007c  3010              ADDS     r0,r0,#0x10
00007e  5501              STRB     r1,[r0,r4]
000080  1c60              ADDS     r0,r4,#1              ;45
000082  b2c4              UXTB     r4,r0                 ;45
                  |L8.132|
000084  2c04              CMP      r4,#4                 ;45
000086  dbf7              BLT      |L8.120|
;;;47     
;;;48         /*--------------------------GT2000_Rx------------------------------*/
;;;49         GT2000_Rx.Gt2000_mode = 1;		//固频
000088  2001              MOVS     r0,#1
00008a  4926              LDR      r1,|L8.292|
00008c  7148              STRB     r0,[r1,#5]
;;;50     		GT2000_Rx.method= 0;		//FM
00008e  2000              MOVS     r0,#0
000090  7188              STRB     r0,[r1,#6]
;;;51     		GT2000_Rx.Frequency_power[1] = 0x03;	
000092  2103              MOVS     r1,#3
000094  4823              LDR      r0,|L8.292|
000096  f8801043          STRB     r1,[r0,#0x43]
;;;52         GT2000_Rx.Frequency_power[0] = 0xCF;		//幅度值7.5
00009a  20cf              MOVS     r0,#0xcf
00009c  4921              LDR      r1,|L8.292|
00009e  f8810042          STRB     r0,[r1,#0x42]
;;;53         GT2000_Rx.sys_open = 0;		//停止模式
0000a2  2000              MOVS     r0,#0
0000a4  f8810021          STRB     r0,[r1,#0x21]
;;;54     		
;;;55     		GT2000_Rx.channel[0] = 0;	//信道01
0000a8  71c8              STRB     r0,[r1,#7]
;;;56         GT2000_Rx.channel[1] = 1;
0000aa  2101              MOVS     r1,#1
0000ac  481d              LDR      r0,|L8.292|
0000ae  7201              STRB     r1,[r0,#8]
;;;57         GT2000_Rx.channel[2] = 0;
0000b0  2100              MOVS     r1,#0
0000b2  7241              STRB     r1,[r0,#9]
;;;58     
;;;59          for(i=0; i<10; i++)
0000b4  2400              MOVS     r4,#0
0000b6  e005              B        |L8.196|
                  |L8.184|
;;;60             GT2000_Rx.Gt2000_freq1[i] = 0;
0000b8  2100              MOVS     r1,#0
0000ba  481a              LDR      r0,|L8.292|
0000bc  3024              ADDS     r0,r0,#0x24
0000be  5501              STRB     r1,[r0,r4]
0000c0  1c60              ADDS     r0,r4,#1              ;59
0000c2  b2c4              UXTB     r4,r0                 ;59
                  |L8.196|
0000c4  2c0a              CMP      r4,#0xa               ;59
0000c6  dbf7              BLT      |L8.184|
;;;61     
;;;62         for(i=0; i<10; i++)
0000c8  2400              MOVS     r4,#0
0000ca  e005              B        |L8.216|
                  |L8.204|
;;;63             GT2000_Rx.Gt2000_freq2[i] = 0;
0000cc  2100              MOVS     r1,#0
0000ce  4815              LDR      r0,|L8.292|
0000d0  302e              ADDS     r0,r0,#0x2e
0000d2  5501              STRB     r1,[r0,r4]
0000d4  1c60              ADDS     r0,r4,#1              ;62
0000d6  b2c4              UXTB     r4,r0                 ;62
                  |L8.216|
0000d8  2c0a              CMP      r4,#0xa               ;62
0000da  dbf7              BLT      |L8.204|
;;;64     
;;;65         for(i=0; i<10; i++)
0000dc  2400              MOVS     r4,#0
0000de  e005              B        |L8.236|
                  |L8.224|
;;;66             GT2000_Rx.Gt2000_freq3[i] = 0;
0000e0  2100              MOVS     r1,#0
0000e2  4810              LDR      r0,|L8.292|
0000e4  3038              ADDS     r0,r0,#0x38
0000e6  5501              STRB     r1,[r0,r4]
0000e8  1c60              ADDS     r0,r4,#1              ;65
0000ea  b2c4              UXTB     r4,r0                 ;65
                  |L8.236|
0000ec  2c0a              CMP      r4,#0xa               ;65
0000ee  dbf7              BLT      |L8.224|
;;;67     
;;;68         for(i=0; i<5; i++)
0000f0  2400              MOVS     r4,#0
0000f2  e005              B        |L8.256|
                  |L8.244|
;;;69             GT2000_Rx.forward_power[i] = 0;
0000f4  2100              MOVS     r1,#0
0000f6  480b              LDR      r0,|L8.292|
0000f8  300a              ADDS     r0,r0,#0xa
0000fa  5501              STRB     r1,[r0,r4]
0000fc  1c60              ADDS     r0,r4,#1              ;68
0000fe  b2c4              UXTB     r4,r0                 ;68
                  |L8.256|
000100  2c05              CMP      r4,#5                 ;68
000102  dbf7              BLT      |L8.244|
;;;70     
;;;71     
;;;72         for(i=0; i<5; i++)
000104  2400              MOVS     r4,#0
000106  e005              B        |L8.276|
                  |L8.264|
;;;73             GT2000_Rx.reverse_power[i] = 0;
000108  2100              MOVS     r1,#0
00010a  4806              LDR      r0,|L8.292|
00010c  3010              ADDS     r0,r0,#0x10
00010e  5501              STRB     r1,[r0,r4]
000110  1c60              ADDS     r0,r4,#1              ;72
000112  b2c4              UXTB     r4,r0                 ;72
                  |L8.276|
000114  2c05              CMP      r4,#5                 ;72
000116  dbf7              BLT      |L8.264|
;;;74         GT2000_Rx.reverse_power[3] = 0;
000118  2100              MOVS     r1,#0
00011a  4802              LDR      r0,|L8.292|
00011c  74c1              STRB     r1,[r0,#0x13]
;;;75     }
00011e  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  |L8.288|
                          DCD      GT2000_Tx
                  |L8.292|
                          DCD      GT2000_Rx

                          AREA ||i.GT2000_Open||, CODE, READONLY, ALIGN=2

                  GT2000_Open PROC
;;;76     
;;;77     void GT2000_Open(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         int ret;
;;;80     				Gt_Inquire_All();
000002  f7fffffe          BL       Gt_Inquire_All
;;;81     				ret=GT2000_Wait_Ack(MT2000_CMD_INQUIRE);
000006  20ce              MOVS     r0,#0xce
000008  f7fffffe          BL       GT2000_Wait_Ack
00000c  4604              MOV      r4,r0
;;;82         if( ret == MT2000_ACK_ALARM )	//激励器报警
00000e  1ca0              ADDS     r0,r4,#2
000010  b910              CBNZ     r0,|L9.24|
;;;83         {
;;;84             GT2000_Alarm_Stop();
000012  f7fffffe          BL       GT2000_Alarm_Stop
                  |L9.22|
;;;85             return;
;;;86         }
;;;87         else	if( ret == MT2000_ACK_OK )
;;;88         {
;;;89             GT2000_Buffer_Clean();
;;;90     			  vTaskDelay(30);
;;;91     				Gt2000_Open();   //开机
;;;92     			  vTaskDelay(1000);
;;;93     				System.status=SYSTEM_OPENING;
;;;94         }
;;;95         else						
;;;96         {
;;;97             Alarm.no_respond = 0x01;
;;;98     		  	Trans_printf(" Alarm.no_respond 3 ! ");
;;;99             Alarm.no_respond_count = 0;		//开机只开一次
;;;100    
;;;101            System.open = 0x00;
;;;102            Power_onBack.results[0]=0xFD;
;;;103            Trans_printf("system open fail!\n");
;;;104    
;;;105            if( Monitor.hard_control == 1 )
;;;106            {
;;;107                if( get_history_alarm() == 0x01 )
;;;108                {
;;;109                    System.status = SYSTEM_ALARM;
;;;110                }
;;;111            }
;;;112        }
;;;113    
;;;114    }
000016  bd10              POP      {r4,pc}
                  |L9.24|
000018  2c01              CMP      r4,#1                 ;87
00001a  d10e              BNE      |L9.58|
00001c  f7fffffe          BL       GT2000_Buffer_Clean
000020  201e              MOVS     r0,#0x1e              ;90
000022  f7fffffe          BL       vTaskDelay
000026  f7fffffe          BL       Gt2000_Open
00002a  f44f707a          MOV      r0,#0x3e8             ;92
00002e  f7fffffe          BL       vTaskDelay
000032  2006              MOVS     r0,#6                 ;93
000034  4910              LDR      r1,|L9.120|
000036  72c8              STRB     r0,[r1,#0xb]          ;93
000038  e01c              B        |L9.116|
                  |L9.58|
00003a  2001              MOVS     r0,#1                 ;97
00003c  490f              LDR      r1,|L9.124|
00003e  70c8              STRB     r0,[r1,#3]            ;97
000040  a00f              ADR      r0,|L9.128|
000042  f7fffffe          BL       Trans_printf
000046  2000              MOVS     r0,#0                 ;99
000048  490c              LDR      r1,|L9.124|
00004a  7148              STRB     r0,[r1,#5]            ;99
00004c  490a              LDR      r1,|L9.120|
00004e  7308              STRB     r0,[r1,#0xc]          ;101
000050  20fd              MOVS     r0,#0xfd              ;102
000052  4911              LDR      r1,|L9.152|
000054  7048              STRB     r0,[r1,#1]            ;102
000056  a011              ADR      r0,|L9.156|
000058  f7fffffe          BL       Trans_printf
00005c  4814              LDR      r0,|L9.176|
00005e  f89000ca          LDRB     r0,[r0,#0xca]         ;105  ; Monitor
000062  2801              CMP      r0,#1                 ;105
000064  d106              BNE      |L9.116|
000066  f7fffffe          BL       get_history_alarm
00006a  2801              CMP      r0,#1                 ;107
00006c  d102              BNE      |L9.116|
00006e  2011              MOVS     r0,#0x11              ;109
000070  4901              LDR      r1,|L9.120|
000072  72c8              STRB     r0,[r1,#0xb]          ;109
                  |L9.116|
000074  bf00              NOP      
000076  e7ce              B        |L9.22|
;;;115    
                          ENDP

                  |L9.120|
                          DCD      System
                  |L9.124|
                          DCD      Alarm
                  |L9.128|
000080  20416c61          DCB      " Alarm.no_respond 3 ! ",0
000084  726d2e6e
000088  6f5f7265
00008c  73706f6e
000090  64203320
000094  212000  
000097  00                DCB      0
                  |L9.152|
                          DCD      Power_onBack
                  |L9.156|
00009c  73797374          DCB      "system open fail!\n",0
0000a0  656d206f
0000a4  70656e20
0000a8  6661696c
0000ac  210a00  
0000af  00                DCB      0
                  |L9.176|
                          DCD      Monitor

                          AREA ||i.GT2000_Stop||, CODE, READONLY, ALIGN=2

                  GT2000_Stop PROC
;;;368    
;;;369    void GT2000_Stop(void)
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
;;;371        uint8_t repeat_send_counter = 0;
000002  2600              MOVS     r6,#0
;;;372        int ret;
;;;373    	  uint8_t i;  //用于for循环
;;;374    
;;;375        System.stop = 0x01;
000004  2001              MOVS     r0,#1
000006  494e              LDR      r1,|L10.320|
000008  7548              STRB     r0,[r1,#0x15]
;;;376    		System.protect_adjust = 0x00;
00000a  2000              MOVS     r0,#0
00000c  7508              STRB     r0,[r1,#0x14]
;;;377    
;;;378        //停止发射,在停止的时候，再发送停止指令，也可以响应
;;;379        //查询
;;;380        for(repeat_send_counter=0; repeat_send_counter<NO_RESPOND_MAX; repeat_send_counter++)
00000e  bf00              NOP      
000010  e00c              B        |L10.44|
                  |L10.18|
;;;381        {
;;;382    				Gt_Inquire_All();		//发射机状态查询			
000012  f7fffffe          BL       Gt_Inquire_All
;;;383    				ret=GT2000_Wait_Ack(MT2000_CMD_INQUIRE);
000016  20ce              MOVS     r0,#0xce
000018  f7fffffe          BL       GT2000_Wait_Ack
00001c  4604              MOV      r4,r0
;;;384    			  if( (ret == MT2000_ACK_OK) || (ret == MT2000_ACK_ALARM) )
00001e  2c01              CMP      r4,#1
000020  d001              BEQ      |L10.38|
000022  1ca0              ADDS     r0,r4,#2
000024  b900              CBNZ     r0,|L10.40|
                  |L10.38|
;;;385                break;
000026  e003              B        |L10.48|
                  |L10.40|
000028  1c70              ADDS     r0,r6,#1              ;380
00002a  b2c6              UXTB     r6,r0                 ;380
                  |L10.44|
00002c  2e03              CMP      r6,#3                 ;380
00002e  dbf0              BLT      |L10.18|
                  |L10.48|
000030  bf00              NOP      
;;;386        }
;;;387        if( ret == MT2000_ACK_OK )			//查询成功了，才继续下面的，否则就是报警状态
000032  2c01              CMP      r4,#1
000034  d151              BNE      |L10.218|
;;;388        {
;;;389            if( System.emission != 0x01 )	//如果不是发射状态，不用停止
000036  4842              LDR      r0,|L10.320|
000038  7d80              LDRB     r0,[r0,#0x16]  ; System
00003a  2801              CMP      r0,#1
00003c  d00c              BEQ      |L10.88|
;;;390            {
;;;391                System.sweep = 0;
00003e  2000              MOVS     r0,#0
000040  493f              LDR      r1,|L10.320|
000042  7388              STRB     r0,[r1,#0xe]
;;;392                System.stop = 0;
000044  7548              STRB     r0,[r1,#0x15]
;;;393                System.achieve_add_sub = 0;
000046  7448              STRB     r0,[r1,#0x11]
;;;394                System.modify_power = 0;
000048  7488              STRB     r0,[r1,#0x12]
;;;395                System.cancel_add_sub = 0;
00004a  74c8              STRB     r0,[r1,#0x13]
;;;396                System_Status_Clean();
00004c  f7fffffe          BL       System_Status_Clean
;;;397                Trans_stopBack.Trans_state[0]=0xFC;	//已经是停止状态
000050  20fc              MOVS     r0,#0xfc
000052  493c              LDR      r1,|L10.324|
000054  7048              STRB     r0,[r1,#1]
000056  e049              B        |L10.236|
                  |L10.88|
;;;398            }
;;;399            else
;;;400            {
;;;401    				 for(i=0;i<10;i++)
000058  2500              MOVS     r5,#0
00005a  e017              B        |L10.140|
                  |L10.92|
;;;402    					{
;;;403    					Gt_RF_Close();	 //关发射	
00005c  f7fffffe          BL       Gt_RF_Close
;;;404    				  vTaskDelay(1500);  //各种指令需要间隔1.5s
000060  f24050dc          MOV      r0,#0x5dc
000064  f7fffffe          BL       vTaskDelay
;;;405    					Gt_Inquire_All();		//发射机状态查询
000068  f7fffffe          BL       Gt_Inquire_All
;;;406    				  ret=GT2000_Wait_Ack(MT2000_CMD_INQUIRE);
00006c  20ce              MOVS     r0,#0xce
00006e  f7fffffe          BL       GT2000_Wait_Ack
000072  4604              MOV      r4,r0
;;;407    						if(ret == MT2000_ACK_OK && GT2000_Rx.sys_emit_open==0) //查询是否关发射成功
000074  2c01              CMP      r4,#1
000076  d107              BNE      |L10.136|
000078  4833              LDR      r0,|L10.328|
00007a  f8900022          LDRB     r0,[r0,#0x22]  ; GT2000_Rx
00007e  b918              CBNZ     r0,|L10.136|
;;;408    						{
;;;409    							Trans_printf(" Gt_RF_Close OK！ ");
000080  a032              ADR      r0,|L10.332|
000082  f7fffffe          BL       Trans_printf
;;;410    							break;  //跳出当前for循环
000086  e003              B        |L10.144|
                  |L10.136|
000088  1c68              ADDS     r0,r5,#1              ;401
00008a  b2c5              UXTB     r5,r0                 ;401
                  |L10.140|
00008c  2d0a              CMP      r5,#0xa               ;401
00008e  dbe5              BLT      |L10.92|
                  |L10.144|
000090  bf00              NOP      
;;;411    						}
;;;412    					}
;;;413    
;;;414    					System.sweep = 0;
000092  2000              MOVS     r0,#0
000094  492a              LDR      r1,|L10.320|
000096  7388              STRB     r0,[r1,#0xe]
;;;415    					System.stop = 0;
000098  7548              STRB     r0,[r1,#0x15]
;;;416    					System.achieve_add_sub = 0;
00009a  7448              STRB     r0,[r1,#0x11]
;;;417    					System.modify_power = 0;
00009c  7488              STRB     r0,[r1,#0x12]
;;;418    					System.cancel_add_sub = 0;
00009e  74c8              STRB     r0,[r1,#0x13]
;;;419    					System_Status_Clean();
0000a0  f7fffffe          BL       System_Status_Clean
;;;420    
;;;421    					if( get_history_alarm() == 0x01 )
0000a4  f7fffffe          BL       get_history_alarm
0000a8  2801              CMP      r0,#1
0000aa  d106              BNE      |L10.186|
;;;422    					{
;;;423    							System.status = SYSTEM_ALARM;
0000ac  2011              MOVS     r0,#0x11
0000ae  4924              LDR      r1,|L10.320|
0000b0  72c8              STRB     r0,[r1,#0xb]
;;;424    				  Trans_printf(" GT2000_Stop_have_history_alarm ！ \n");
0000b2  a02b              ADR      r0,|L10.352|
0000b4  f7fffffe          BL       Trans_printf
0000b8  e005              B        |L10.198|
                  |L10.186|
;;;425    					}
;;;426    					else
;;;427    					{
;;;428    							System.status = SYSTEM_STANDBY;
0000ba  2002              MOVS     r0,#2
0000bc  4920              LDR      r1,|L10.320|
0000be  72c8              STRB     r0,[r1,#0xb]
;;;429    					Trans_printf(" GT2000_Stop_SYSTEM_STANDBY ！ \n");
0000c0  a031              ADR      r0,|L10.392|
0000c2  f7fffffe          BL       Trans_printf
                  |L10.198|
;;;430    					}
;;;431    					
;;;432    					System.emission=0;
0000c6  2000              MOVS     r0,#0
0000c8  491d              LDR      r1,|L10.320|
0000ca  7588              STRB     r0,[r1,#0x16]
;;;433    					Trans_printf(" GT2000_Stop__System.emission=0 Stop_ok！ \n");
0000cc  a037              ADR      r0,|L10.428|
0000ce  f7fffffe          BL       Trans_printf
;;;434    					Trans_stopBack.Trans_state[0]=0xFE;		//停止成功
0000d2  20fe              MOVS     r0,#0xfe
0000d4  491b              LDR      r1,|L10.324|
0000d6  7048              STRB     r0,[r1,#1]
0000d8  e008              B        |L10.236|
                  |L10.218|
;;;435            }
;;;436        }
;;;437        else     //连查询都不成功，返回停止失败，处于报警状态(这里不修改状态)
;;;438        {
;;;439            Trans_stopBack.Trans_state[0]=0x02;		//停止失败
0000da  2002              MOVS     r0,#2
0000dc  4919              LDR      r1,|L10.324|
0000de  7048              STRB     r0,[r1,#1]
;;;440            Alarm.no_respond_locate = 13;
0000e0  200d              MOVS     r0,#0xd
0000e2  493d              LDR      r1,|L10.472|
0000e4  7188              STRB     r0,[r1,#6]
;;;441    			Trans_printf(" GT2000_Stop_Stop_fail ！ \n");
0000e6  a03d              ADR      r0,|L10.476|
0000e8  f7fffffe          BL       Trans_printf
                  |L10.236|
;;;442        }
;;;443    
;;;444        if( System.emission == 0x00 ) //检查赋值情况,在上面被赋值0
0000ec  4814              LDR      r0,|L10.320|
0000ee  7d80              LDRB     r0,[r0,#0x16]  ; System
0000f0  bb28              CBNZ     r0,|L10.318|
;;;445        {
;;;446    		
;;;447    		if( System.sweep == 0x01 )
0000f2  4813              LDR      r0,|L10.320|
0000f4  7b80              LDRB     r0,[r0,#0xe]  ; System
0000f6  2801              CMP      r0,#1
0000f8  d116              BNE      |L10.296|
;;;448    		{
;;;449    			if( (Alarm.emission==0x01) || (Alarm.no_respond==0x01) || (Alarm.no_power==0x01) )
0000fa  4837              LDR      r0,|L10.472|
0000fc  7840              LDRB     r0,[r0,#1]  ; Alarm
0000fe  2801              CMP      r0,#1
000100  d007              BEQ      |L10.274|
000102  4835              LDR      r0,|L10.472|
000104  78c0              LDRB     r0,[r0,#3]  ; Alarm
000106  2801              CMP      r0,#1
000108  d003              BEQ      |L10.274|
00010a  4833              LDR      r0,|L10.472|
00010c  7cc0              LDRB     r0,[r0,#0x13]  ; Alarm
00010e  2801              CMP      r0,#1
000110  d106              BNE      |L10.288|
                  |L10.274|
;;;450    			{
;;;451    				System.status = SYSTEM_ALARM;
000112  2011              MOVS     r0,#0x11
000114  490a              LDR      r1,|L10.320|
000116  72c8              STRB     r0,[r1,#0xb]
;;;452    				
;;;453    				System.sweep = 0;
000118  2000              MOVS     r0,#0
00011a  7388              STRB     r0,[r1,#0xe]
;;;454            System.stop = 0;
00011c  7548              STRB     r0,[r1,#0x15]
00011e  e006              B        |L10.302|
                  |L10.288|
;;;455    			}
;;;456    			else
;;;457    			{
;;;458    				System.status = SYSTEM_SCAN;		//扫下一个频点
000120  2005              MOVS     r0,#5
000122  4907              LDR      r1,|L10.320|
000124  72c8              STRB     r0,[r1,#0xb]
000126  e002              B        |L10.302|
                  |L10.296|
;;;459    			}
;;;460    		}
;;;461    		else
;;;462    		{
;;;463    			System.status = SYSTEM_STANDBY;
000128  2002              MOVS     r0,#2
00012a  4905              LDR      r1,|L10.320|
00012c  72c8              STRB     r0,[r1,#0xb]
                  |L10.302|
;;;464    		}
;;;465    		
;;;466            System_Status_Clean();
00012e  f7fffffe          BL       System_Status_Clean
;;;467            App_printf("stop successfully!\r\n");
000132  a031              ADR      r0,|L10.504|
000134  f7fffffe          BL       App_printf
;;;468    		    Trans_printf(" GT2000_Stop停止成功！ \n");
000138  a035              ADR      r0,|L10.528|
00013a  f7fffffe          BL       Trans_printf
                  |L10.318|
;;;469        }
;;;470        else	//三次停止失败，清除发射位
;;;471        {
;;;472    
;;;473        }
;;;474    }
00013e  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP

                  |L10.320|
                          DCD      System
                  |L10.324|
                          DCD      Trans_stopBack
                  |L10.328|
                          DCD      GT2000_Rx
                  |L10.332|
00014c  2047745f          DCB      " Gt_RF_Close OK",163,161," ",0
000150  52465f43
000154  6c6f7365
000158  204f4ba3
00015c  a12000  
00015f  00                DCB      0
                  |L10.352|
000160  20475432          DCB      " GT2000_Stop_have_history_alarm ",163,161," \n",0
000164  3030305f
000168  53746f70
00016c  5f686176
000170  655f6869
000174  73746f72
000178  795f616c
00017c  61726d20
000180  a3a1200a
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L10.392|
000188  20475432          DCB      " GT2000_Stop_SYSTEM_STANDBY ",163,161," \n",0
00018c  3030305f
000190  53746f70
000194  5f535953
000198  54454d5f
00019c  5354414e
0001a0  44425920
0001a4  a3a1200a
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L10.428|
0001ac  20475432          DCB      " GT2000_Stop__System.emission=0 Stop_ok",163,161," \n",0
0001b0  3030305f
0001b4  53746f70
0001b8  5f5f5379
0001bc  7374656d
0001c0  2e656d69
0001c4  7373696f
0001c8  6e3d3020
0001cc  53746f70
0001d0  5f6f6ba3
0001d4  a1200a00
                  |L10.472|
                          DCD      Alarm
                  |L10.476|
0001dc  20475432          DCB      " GT2000_Stop_Stop_fail ",163,161," \n",0
0001e0  3030305f
0001e4  53746f70
0001e8  5f53746f
0001ec  705f6661
0001f0  696c20a3
0001f4  a1200a00
                  |L10.504|
0001f8  73746f70          DCB      "stop successfully!\r\n",0
0001fc  20737563
000200  63657373
000204  66756c6c
000208  79210d0a
00020c  00      
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0
                  |L10.528|
000210  20475432          DCB      " GT2000_Stop",205,163,214,185,179,201,185,166,163,161," "
000214  3030305f
000218  53746f70
00021c  cda3d6b9
000220  b3c9b9a6
000224  a3a120  
000227  0a00              DCB      "\n",0
000229  00                DCB      0
00022a  00                DCB      0
00022b  00                DCB      0

                          AREA ||i.GT2000_Wait_Ack||, CODE, READONLY, ALIGN=2

                  GT2000_Wait_Ack PROC
;;;810    
;;;811    int GT2000_Wait_Ack(uint8_t cmd)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;812    {
000004  4605              MOV      r5,r0
;;;813        
;;;814        uint16_t i = 0;
000006  2700              MOVS     r7,#0
;;;815        uint8_t temp = 0;
000008  46b8              MOV      r8,r7
;;;816        uint8_t read;
;;;817        uint16_t num = 0;
00000a  46b9              MOV      r9,r7
;;;818        int count = 0;
00000c  2600              MOVS     r6,#0
;;;819        int ret;
;;;820    //		uint8_t Power_1[3],Power_2[3],Power_3[3];
;;;821        switch( cmd )
00000e  2d2b              CMP      r5,#0x2b
000010  d025              BEQ      |L11.94|
000012  dc0c              BGT      |L11.46|
000014  2d03              CMP      r5,#3
000016  d02e              BEQ      |L11.118|
000018  dc04              BGT      |L11.36|
00001a  2d01              CMP      r5,#1
00001c  d010              BEQ      |L11.64|
00001e  2d02              CMP      r5,#2
000020  d12c              BNE      |L11.124|
000022  e025              B        |L11.112|
                  |L11.36|
000024  2d0d              CMP      r5,#0xd
000026  d017              BEQ      |L11.88|
000028  2d18              CMP      r5,#0x18
00002a  d127              BNE      |L11.124|
00002c  e01d              B        |L11.106|
                  |L11.46|
00002e  2d2d              CMP      r5,#0x2d
000030  d018              BEQ      |L11.100|
000032  2d43              CMP      r5,#0x43
000034  d00a              BEQ      |L11.76|
000036  2d74              CMP      r5,#0x74
000038  d00b              BEQ      |L11.82|
00003a  2dce              CMP      r5,#0xce
00003c  d11e              BNE      |L11.124|
00003e  e002              B        |L11.70|
                  |L11.64|
;;;822        {
;;;823    		case MT2000_WAIT_ACK_OK:		num = 20;		break;	//应答等 1s
000040  f04f0914          MOV      r9,#0x14
000044  e01d              B        |L11.130|
                  |L11.70|
;;;824    		case MT2000_CMD_INQUIRE:		num = 20;		break;	//查询等 1s
000046  f04f0914          MOV      r9,#0x14
00004a  e01a              B        |L11.130|
                  |L11.76|
;;;825    		case MT2000_CMD_CHANNEL:		num = 20;		break;	//设置等 1s
00004c  f04f0914          MOV      r9,#0x14
000050  e017              B        |L11.130|
                  |L11.82|
;;;826    		case MT2000_CMD_TUNING:			num = 600;		break;	//调谐等 30s
000052  f44f7916          MOV      r9,#0x258
000056  e014              B        |L11.130|
                  |L11.88|
;;;827    		case MT2000_CMD_EMISSION:		num = 20;		break;	//发射等 1s
000058  f04f0914          MOV      r9,#0x14
00005c  e011              B        |L11.130|
                  |L11.94|
;;;828    		case MT2000_CMD_POWER_ADD:		num = 20;		break;	//增加功率等 1s
00005e  f04f0914          MOV      r9,#0x14
000062  e00e              B        |L11.130|
                  |L11.100|
;;;829    		case MT2000_CMD_POWER_SUB:		num = 20;		break;	//减小功率等 1s
000064  f04f0914          MOV      r9,#0x14
000068  e00b              B        |L11.130|
                  |L11.106|
;;;830    		case MT2000_CMD_STOP:			num = 20;		break;	//停止等 3s
00006a  f04f0914          MOV      r9,#0x14
00006e  e008              B        |L11.130|
                  |L11.112|
;;;831    		case MT2000_CMD_POWER_ON:		num = 300;		break;	//开机等 15s
000070  f44f7996          MOV      r9,#0x12c
000074  e005              B        |L11.130|
                  |L11.118|
;;;832    		case MT2000_CMD_POWER_OFF:		num = 60;		break;	//关机等 3s
000076  f04f093c          MOV      r9,#0x3c
00007a  e002              B        |L11.130|
                  |L11.124|
;;;833    		default:						num = 100;		break;	//否则等 5s
00007c  f04f0964          MOV      r9,#0x64
000080  bf00              NOP      
                  |L11.130|
000082  bf00              NOP                            ;823
;;;834        }
;;;835    
;;;836        for(i=0; i<num; i++)
000084  2700              MOVS     r7,#0
000086  e1a5              B        |L11.980|
                  |L11.136|
;;;837        {
;;;838            while( comGetChar(COM4,&read) )  //广通机器只从一个串口收发数据
000088  e00a              B        |L11.160|
                  |L11.138|
;;;839            {                                //串口4是232，串口2采集温湿度数据
;;;840                if(count<Emis_Size)
00008a  2ea0              CMP      r6,#0xa0
00008c  da05              BGE      |L11.154|
;;;841                {
;;;842                    Emission_Rx[count++]=read;
00008e  f89d2000          LDRB     r2,[sp,#0]
000092  4630              MOV      r0,r6
000094  1c76              ADDS     r6,r6,#1
000096  49fe              LDR      r1,|L11.1168|
000098  540a              STRB     r2,[r1,r0]
                  |L11.154|
;;;843                }
;;;844                vTaskDelay(1);
00009a  2001              MOVS     r0,#1
00009c  f7fffffe          BL       vTaskDelay
                  |L11.160|
0000a0  4669              MOV      r1,sp                 ;838
0000a2  2003              MOVS     r0,#3                 ;838
0000a4  f7fffffe          BL       comGetChar
0000a8  2800              CMP      r0,#0                 ;838
0000aa  d1ee              BNE      |L11.138|
;;;845            }
;;;846    				
;;;847    			  if( (count>2) && (Emission_Rx[0]==0x42)&&(Emission_Rx[158]==0x41)&&(Emission_Rx[159]==0x00))  //只解析正确数据
0000ac  2e02              CMP      r6,#2
0000ae  dd7d              BLE      |L11.428|
0000b0  48f7              LDR      r0,|L11.1168|
0000b2  7800              LDRB     r0,[r0,#0]  ; Emission_Rx
0000b4  2842              CMP      r0,#0x42
                  |L11.182|
0000b6  d179              BNE      |L11.428|
0000b8  48f5              LDR      r0,|L11.1168|
0000ba  f890009e          LDRB     r0,[r0,#0x9e]  ; Emission_Rx
0000be  2841              CMP      r0,#0x41
0000c0  d1f9              BNE      |L11.182|
0000c2  48f3              LDR      r0,|L11.1168|
0000c4  f890009f          LDRB     r0,[r0,#0x9f]  ; Emission_Rx
0000c8  2800              CMP      r0,#0
0000ca  d1f4              BNE      |L11.182|
;;;848            {
;;;849    //          /*---------接收数据测试----------*/
;;;850    //					if (count!=0)  //如果有数据
;;;851    //					{
;;;852    //						Trans_printf("\r\n=====================================\r\n");
;;;853    //						Trans_printf(	"读取到count: %d 个字节 = ",count);
;;;854    //						for(i = 0; i<(count); i++)
;;;855    //						{
;;;856    //								Trans_printf("%02X ",Emission_Rx[i]);
;;;857    //						}
;;;858    //						Trans_printf("\r\n=====================================\r\n");
;;;859    //					}
;;;860    //			  	/*---------接收数据测试----------*/	
;;;861    					
;;;862    					ret = GT2000_Cmd_Analyze(Emission_Rx, cmd);		//解析激励器的数据并返回结果,若有报警，再次判断
0000cc  4629              MOV      r1,r5
0000ce  48f0              LDR      r0,|L11.1168|
0000d0  f7fffffe          BL       GT2000_Cmd_Analyze
0000d4  4604              MOV      r4,r0
;;;863    					
;;;864       if (GT2000_Rx.sys_open==0)		//根据查询到的机器状态，机器关
0000d6  48ef              LDR      r0,|L11.1172|
0000d8  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
0000dc  2800              CMP      r0,#0
0000de  d139              BNE      |L11.340|
;;;865        {
;;;866    				System.achieve_add_sub = 0;
0000e0  49ed              LDR      r1,|L11.1176|
0000e2  7448              STRB     r0,[r1,#0x11]
;;;867    				System.modify_power = 0;
0000e4  7488              STRB     r0,[r1,#0x12]
;;;868    				System.cancel_add_sub = 0;
0000e6  74c8              STRB     r0,[r1,#0x13]
;;;869    				System_Status_Clean();
0000e8  f7fffffe          BL       System_Status_Clean
;;;870    				System.Voltage = 0.0;
0000ec  2000              MOVS     r0,#0
0000ee  49ea              LDR      r1,|L11.1176|
0000f0  6748              STR      r0,[r1,#0x74]  ; System
;;;871    				System.Electricity = 0.0;
0000f2  6788              STR      r0,[r1,#0x78]  ; System
;;;872    				System.sweep = 0;
0000f4  7388              STRB     r0,[r1,#0xe]
;;;873    				System.open = 0;
0000f6  7308              STRB     r0,[r1,#0xc]
;;;874    				System.close = 0;				//清零
0000f8  7348              STRB     r0,[r1,#0xd]
;;;875    
;;;876    				if( get_history_alarm() == 0x01 )   //有历史报警信息
0000fa  f7fffffe          BL       get_history_alarm
0000fe  2801              CMP      r0,#1
000100  d106              BNE      |L11.272|
;;;877    				{
;;;878    						System.status = SYSTEM_ALARM;
000102  2011              MOVS     r0,#0x11
000104  49e4              LDR      r1,|L11.1176|
000106  72c8              STRB     r0,[r1,#0xb]
;;;879    					  Trans_printf(" 有历史报警消息！ \n ");
000108  a0e4              ADR      r0,|L11.1180|
00010a  f7fffffe          BL       Trans_printf
00010e  e014              B        |L11.314|
                  |L11.272|
;;;880    				}
;;;881    				else
;;;882    				{
;;;883    					if(System.status!=SYSTEM_OPENING&&System.status!=SYSTEM_ALARM)		//不是正在开机、不是报警状态
000110  48e1              LDR      r0,|L11.1176|
000112  7ac0              LDRB     r0,[r0,#0xb]  ; System
000114  2806              CMP      r0,#6
000116  d010              BEQ      |L11.314|
000118  48df              LDR      r0,|L11.1176|
00011a  7ac0              LDRB     r0,[r0,#0xb]  ; System
00011c  2811              CMP      r0,#0x11
00011e  d00c              BEQ      |L11.314|
;;;884    					{
;;;885    						if(GT2000_Rx.sys_open==0)
000120  48dc              LDR      r0,|L11.1172|
000122  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
000126  b940              CBNZ     r0,|L11.314|
;;;886    						{
;;;887    						System.status = SYSTEM_SHUTDOWN;   //关机状态
000128  2004              MOVS     r0,#4
00012a  49db              LDR      r1,|L11.1176|
00012c  72c8              STRB     r0,[r1,#0xb]
;;;888    						System.Open_Close=0;		//只是用于查询返回//0代表发射机关机，1代表开机
00012e  2000              MOVS     r0,#0
000130  f88100a7          STRB     r0,[r1,#0xa7]
;;;889    						Trans_printf("关机状态1！ \n");
000134  a0df              ADR      r0,|L11.1204|
000136  f7fffffe          BL       Trans_printf
                  |L11.314|
;;;890    						}
;;;891    					}
;;;892    				}
;;;893           if(GT2000_Rx.sys_open==0)
00013a  48d6              LDR      r0,|L11.1172|
00013c  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
000140  b920              CBNZ     r0,|L11.332|
;;;894    			 {
;;;895    				 System.Open_Close=0;		//只是用于查询返回//0代表发射机关机，1代表开机
000142  2000              MOVS     r0,#0
000144  49d4              LDR      r1,|L11.1176|
000146  f88100a7          STRB     r0,[r1,#0xa7]
00014a  e003              B        |L11.340|
                  |L11.332|
;;;896    			 }
;;;897           else  
;;;898    				 System.Open_Close=1; 				 
00014c  2001              MOVS     r0,#1
00014e  49d2              LDR      r1,|L11.1176|
000150  f88100a7          STRB     r0,[r1,#0xa7]
                  |L11.340|
;;;899        }
;;;900    		
;;;901    		    /*系统处于开机，但未开发射，若不想要电流检测条件，可去掉*/
;;;902    		if((GT2000_Rx.sys_open==1)&&(GT2000_Rx.sys_emit_open==0))	//开机，但未开发射，待机状态
000154  48cf              LDR      r0,|L11.1172|
000156  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
00015a  2801              CMP      r0,#1
00015c  d11c              BNE      |L11.408|
00015e  48cd              LDR      r0,|L11.1172|
000160  f8900022          LDRB     r0,[r0,#0x22]  ; GT2000_Rx
000164  b9c0              CBNZ     r0,|L11.408|
;;;903    		{
;;;904    			System.Voltage=43;
000166  48d7              LDR      r0,|L11.1220|
000168  49cb              LDR      r1,|L11.1176|
00016a  6748              STR      r0,[r1,#0x74]  ; System
;;;905    			if(System.status!=SYSTEM_SCAN&&System.status!=SYSTEM_ALARM&&System.Power_Adjustment!=1)		//非扫频状态、报警状态、增减功率时
00016c  4608              MOV      r0,r1
00016e  7ac0              LDRB     r0,[r0,#0xb]  ; System
000170  2805              CMP      r0,#5
000172  d00a              BEQ      |L11.394|
000174  4608              MOV      r0,r1
000176  7ac0              LDRB     r0,[r0,#0xb]  ; System
000178  2811              CMP      r0,#0x11
00017a  d006              BEQ      |L11.394|
00017c  4608              MOV      r0,r1
00017e  f89000a8          LDRB     r0,[r0,#0xa8]  ; System
000182  2801              CMP      r0,#1
000184  d001              BEQ      |L11.394|
;;;906    			{
;;;907    				System.status=SYSTEM_STANDBY;  //待机状态
000186  2002              MOVS     r0,#2
000188  72c8              STRB     r0,[r1,#0xb]
                  |L11.394|
;;;908    			}
;;;909    			Trans_printf(" 待机状态1！ \n");
00018a  a0cf              ADR      r0,|L11.1224|
00018c  f7fffffe          BL       Trans_printf
;;;910    			System.Open_Close=1; //开机状态标志位
000190  2001              MOVS     r0,#1
000192  49c1              LDR      r1,|L11.1176|
000194  f88100a7          STRB     r0,[r1,#0xa7]
                  |L11.408|
;;;911    		 
;;;912    	  }
;;;913    		
;;;914    		if((GT2000_Rx.sys_open==1)&&(GT2000_Rx.sys_emit_open==1))  //根据查询到的系统状态，开机，开发射，说明正在发射
000198  48be              LDR      r0,|L11.1172|
00019a  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
00019e  2801              CMP      r0,#1
0001a0  d11a              BNE      |L11.472|
0001a2  48bc              LDR      r0,|L11.1172|
0001a4  f8900022          LDRB     r0,[r0,#0x22]  ; GT2000_Rx
0001a8  2801              CMP      r0,#1
0001aa  e000              B        |L11.430|
                  |L11.428|
0001ac  e10c              B        |L11.968|
                  |L11.430|
0001ae  d113              BNE      |L11.472|
;;;915    		{
;;;916    			if(System.status!=SYSTEM_SCAN&&System.status!=SYSTEM_ALARM)  //若不是扫频或报警状态。
0001b0  48b9              LDR      r0,|L11.1176|
0001b2  7ac0              LDRB     r0,[r0,#0xb]  ; System
0001b4  2805              CMP      r0,#5
0001b6  d008              BEQ      |L11.458|
0001b8  48b7              LDR      r0,|L11.1176|
0001ba  7ac0              LDRB     r0,[r0,#0xb]  ; System
0001bc  2811              CMP      r0,#0x11
0001be  d004              BEQ      |L11.458|
;;;917    			{
;;;918    				System.status=SYSTEM_EMISSING;	//发射状态	
0001c0  2001              MOVS     r0,#1
0001c2  49b5              LDR      r1,|L11.1176|
0001c4  72c8              STRB     r0,[r1,#0xb]
;;;919    				System.Voltage=43;   
0001c6  48bf              LDR      r0,|L11.1220|
0001c8  6748              STR      r0,[r1,#0x74]  ; System
                  |L11.458|
;;;920    			}
;;;921    			Trans_printf("发射状态1！ \n");
0001ca  a0c3              ADR      r0,|L11.1240|
0001cc  f7fffffe          BL       Trans_printf
;;;922    			System.Open_Close=1;
0001d0  2001              MOVS     r0,#1
0001d2  49b1              LDR      r1,|L11.1176|
0001d4  f88100a7          STRB     r0,[r1,#0xa7]
                  |L11.472|
;;;923    		}
;;;924    	if ((ret==MT2000_ACK_ALARM)&&(GT2000_Rx.sys_open==1)&&(GT2000_Rx.system_status1!=0))		/*详细报警暂不列入监控范围，暂只监控开机时各个模块的报警*/
0001d8  1ca0              ADDS     r0,r4,#2
0001da  2800              CMP      r0,#0
                  |L11.476|
0001dc  d17e              BNE      |L11.732|
0001de  48ad              LDR      r0,|L11.1172|
0001e0  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
0001e4  2801              CMP      r0,#1
0001e6  d1f9              BNE      |L11.476|
0001e8  48aa              LDR      r0,|L11.1172|
0001ea  f8900020          LDRB     r0,[r0,#0x20]  ; GT2000_Rx
0001ee  2800              CMP      r0,#0
0001f0  d074              BEQ      |L11.732|
;;;925    		{  
;;;926    				   vTaskDelay(1000);  //延时1s再次判断
0001f2  f44f707a          MOV      r0,#0x3e8
0001f6  f7fffffe          BL       vTaskDelay
;;;927    					 Gt_Inquire_All();		//再次发射机状态查询
0001fa  f7fffffe          BL       Gt_Inquire_All
;;;928    					ret=GT2000_Wait_Ack(MT2000_CMD_INQUIRE);
0001fe  20ce              MOVS     r0,#0xce
000200  f7fffffe          BL       GT2000_Wait_Ack
000204  4604              MOV      r4,r0
;;;929    			
;;;930    				if((GT2000_Rx.sys_open==1)&&(GT2000_Rx.system_status1!=0))  //依旧有故障
000206  48a3              LDR      r0,|L11.1172|
000208  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
00020c  2801              CMP      r0,#1
00020e  d145              BNE      |L11.668|
000210  48a0              LDR      r0,|L11.1172|
000212  f8900020          LDRB     r0,[r0,#0x20]  ; GT2000_Rx
000216  b3d0              CBZ      r0,|L11.654|
;;;931    				{
;;;932    					if( System.time_update_flag == 0x01 )  //更新时间
000218  489f              LDR      r0,|L11.1176|
00021a  7a80              LDRB     r0,[r0,#0xa]  ; System
00021c  2801              CMP      r0,#1
00021e  d12b              BNE      |L11.632|
;;;933    					{
;;;934    							Alarm.emission_time_flag = 0x01;
000220  49b1              LDR      r1,|L11.1256|
000222  7088              STRB     r0,[r1,#2]
;;;935    							Time_Printf( (RTC_GetCounter()+g_stamp_distance), &set_time );
000224  f7fffffe          BL       RTC_GetCounter
000228  49b0              LDR      r1,|L11.1260|
00022a  6809              LDR      r1,[r1,#0]  ; g_stamp_distance
00022c  eb000a01          ADD      r10,r0,r1
000230  49af              LDR      r1,|L11.1264|
000232  4650              MOV      r0,r10
000234  f7fffffe          BL       Time_Printf
;;;936    							Alarm_historyBack.emission_time[0]=set_time.tm_year-2000;
000238  48ad              LDR      r0,|L11.1264|
00023a  7d00              LDRB     r0,[r0,#0x14]  ; set_time
00023c  f5a060fa          SUB      r0,r0,#0x7d0
000240  49ac              LDR      r1,|L11.1268|
000242  f8810037          STRB     r0,[r1,#0x37]
;;;937    							Alarm_historyBack.emission_time[1]=set_time.tm_mon;
000246  48aa              LDR      r0,|L11.1264|
000248  7c01              LDRB     r1,[r0,#0x10]  ; set_time
00024a  48aa              LDR      r0,|L11.1268|
00024c  f8801038          STRB     r1,[r0,#0x38]
;;;938    							Alarm_historyBack.emission_time[2]=set_time.tm_mday;
000250  48a7              LDR      r0,|L11.1264|
000252  7b01              LDRB     r1,[r0,#0xc]  ; set_time
000254  48a7              LDR      r0,|L11.1268|
000256  f8801039          STRB     r1,[r0,#0x39]
;;;939    							Alarm_historyBack.emission_time[3]=set_time.tm_hour;
00025a  48a5              LDR      r0,|L11.1264|
00025c  7a01              LDRB     r1,[r0,#8]  ; set_time
00025e  48a5              LDR      r0,|L11.1268|
000260  f880103a          STRB     r1,[r0,#0x3a]
;;;940    							Alarm_historyBack.emission_time[4]=set_time.tm_min;
000264  48a2              LDR      r0,|L11.1264|
000266  7901              LDRB     r1,[r0,#4]  ; set_time
000268  48a2              LDR      r0,|L11.1268|
00026a  f880103b          STRB     r1,[r0,#0x3b]
;;;941    							Alarm_historyBack.emission_time[5]=set_time.tm_sec;
00026e  48a0              LDR      r0,|L11.1264|
000270  7801              LDRB     r1,[r0,#0]  ; set_time
000272  48a0              LDR      r0,|L11.1268|
000274  f880103c          STRB     r1,[r0,#0x3c]
                  |L11.632|
;;;942    					}
;;;943    
;;;944    					System.status = SYSTEM_ALARM;    //报警状态
000278  2011              MOVS     r0,#0x11
00027a  4987              LDR      r1,|L11.1176|
00027c  72c8              STRB     r0,[r1,#0xb]
;;;945    					Alarm.alarm_history = 1;
00027e  2001              MOVS     r0,#1
000280  4999              LDR      r1,|L11.1256|
000282  7008              STRB     r0,[r1,#0]
;;;946    					Alarm.emission = 0x01;  //激励器报警是总体报警，详细报警信息再日志里查看。
000284  7048              STRB     r0,[r1,#1]
;;;947    					Trans_printf("emission alarm alarm alarm! GT2000_Rx.system_status1== %02X \r\n",GT2000_Rx.system_status1);
000286  4883              LDR      r0,|L11.1172|
000288  f8901020          LDRB     r1,[r0,#0x20]  ; GT2000_Rx
00028c  e000              B        |L11.656|
                  |L11.654|
00028e  e005              B        |L11.668|
                  |L11.656|
000290  a099              ADR      r0,|L11.1272|
000292  f7fffffe          BL       Trans_printf
;;;948    					ret=MT2000_ACK_ALARM;					
000296  f06f0401          MVN      r4,#1
00029a  e058              B        |L11.846|
                  |L11.668|
;;;949    				}
;;;950    					else  //再次判断时无故障
;;;951    				{	
;;;952               if(System.Launch_Switch_state==1)
00029c  487e              LDR      r0,|L11.1176|
00029e  f8900058          LDRB     r0,[r0,#0x58]  ; System
0002a2  2801              CMP      r0,#1
0002a4  d103              BNE      |L11.686|
;;;953    						{
;;;954    							GT2000_Rx.sys_emit_open = 1;	//发射/停止状态
0002a6  497b              LDR      r1,|L11.1172|
0002a8  f8810022          STRB     r0,[r1,#0x22]
0002ac  e003              B        |L11.694|
                  |L11.686|
;;;955    						}
;;;956    				    else
;;;957    						{
;;;958    							GT2000_Rx.sys_emit_open = 0;	//发射/停止状态
0002ae  2000              MOVS     r0,#0
0002b0  4978              LDR      r1,|L11.1172|
0002b2  f8810022          STRB     r0,[r1,#0x22]
                  |L11.694|
;;;959    						}
;;;960    				  System.Electricity=GT2000_Rx.Working_current; //工作电流  //16~19
0002b6  4877              LDR      r0,|L11.1172|
0002b8  69c0              LDR      r0,[r0,#0x1c]  ; GT2000_Rx
0002ba  4977              LDR      r1,|L11.1176|
0002bc  6788              STR      r0,[r1,#0x78]  ; System
;;;961    					System.Forward_Power=(float)((GT2000_Rx.forward_power[0]<<8)|(GT2000_Rx.forward_power[1])); //发射机入射功率   //6~7
0002be  4975              LDR      r1,|L11.1172|
0002c0  7ac9              LDRB     r1,[r1,#0xb]
0002c2  4a74              LDR      r2,|L11.1172|
0002c4  7a92              LDRB     r2,[r2,#0xa]  ; GT2000_Rx
0002c6  ea412002          ORR      r0,r1,r2,LSL #8
0002ca  f7fffffe          BL       __aeabi_i2f
0002ce  4972              LDR      r1,|L11.1176|
0002d0  66c8              STR      r0,[r1,#0x6c]  ; System
;;;962    		      System.Reverse_Power=(float)((GT2000_Rx.reverse_power[0]<<8)|(GT2000_Rx.reverse_power[1])); //发射机反射功率   //8~9 
0002d2  4970              LDR      r1,|L11.1172|
0002d4  7c49              LDRB     r1,[r1,#0x11]
0002d6  4a6f              LDR      r2,|L11.1172|
0002d8  7c12              LDRB     r2,[r2,#0x10]  ; GT2000_Rx
0002da  e000              B        |L11.734|
                  |L11.732|
0002dc  e00c              B        |L11.760|
                  |L11.734|
0002de  ea412002          ORR      r0,r1,r2,LSL #8
0002e2  f7fffffe          BL       __aeabi_i2f
0002e6  496c              LDR      r1,|L11.1176|
0002e8  6708              STR      r0,[r1,#0x70]  ; System
;;;963    						
;;;964    					
;;;965    					System_Status_Update(); //系统状态更新
0002ea  f7fffffe          BL       System_Status_Update
;;;966    				  Alarm.no_respond_count = 0;  //新增清除					
0002ee  2000              MOVS     r0,#0
0002f0  497d              LDR      r1,|L11.1256|
0002f2  7148              STRB     r0,[r1,#5]
;;;967    					ret=MT2000_ACK_OK;
0002f4  2401              MOVS     r4,#1
0002f6  e02a              B        |L11.846|
                  |L11.760|
;;;968    				}
;;;969        }
;;;970    		else
;;;971    		{
;;;972    			 if(System.Launch_Switch_state==1)
0002f8  4867              LDR      r0,|L11.1176|
0002fa  f8900058          LDRB     r0,[r0,#0x58]  ; System
0002fe  2801              CMP      r0,#1
000300  d103              BNE      |L11.778|
;;;973    						{
;;;974    							GT2000_Rx.sys_emit_open = 1;	//发射/停止状态
000302  4964              LDR      r1,|L11.1172|
000304  f8810022          STRB     r0,[r1,#0x22]
000308  e003              B        |L11.786|
                  |L11.778|
;;;975    						}
;;;976    				    else
;;;977    						{
;;;978    							GT2000_Rx.sys_emit_open = 0;	//发射/停止状态
00030a  2000              MOVS     r0,#0
00030c  4961              LDR      r1,|L11.1172|
00030e  f8810022          STRB     r0,[r1,#0x22]
                  |L11.786|
;;;979    						}
;;;980    				  System.Electricity=GT2000_Rx.Working_current; //工作电流  //16~19
000312  4860              LDR      r0,|L11.1172|
000314  69c0              LDR      r0,[r0,#0x1c]  ; GT2000_Rx
000316  4960              LDR      r1,|L11.1176|
000318  6788              STR      r0,[r1,#0x78]  ; System
;;;981    					System.Forward_Power=(float)((GT2000_Rx.forward_power[0]<<8)|(GT2000_Rx.forward_power[1])); //发射机入射功率   //6~7
00031a  495e              LDR      r1,|L11.1172|
00031c  7ac9              LDRB     r1,[r1,#0xb]
00031e  4a5d              LDR      r2,|L11.1172|
000320  7a92              LDRB     r2,[r2,#0xa]  ; GT2000_Rx
000322  ea412002          ORR      r0,r1,r2,LSL #8
000326  f7fffffe          BL       __aeabi_i2f
00032a  495b              LDR      r1,|L11.1176|
00032c  66c8              STR      r0,[r1,#0x6c]  ; System
;;;982    		      System.Reverse_Power=(float)((GT2000_Rx.reverse_power[0]<<8)|(GT2000_Rx.reverse_power[1])); //发射机反射功率   //8~9 
00032e  4959              LDR      r1,|L11.1172|
000330  7c49              LDRB     r1,[r1,#0x11]
000332  4a58              LDR      r2,|L11.1172|
000334  7c12              LDRB     r2,[r2,#0x10]  ; GT2000_Rx
000336  ea412002          ORR      r0,r1,r2,LSL #8
00033a  f7fffffe          BL       __aeabi_i2f
00033e  4956              LDR      r1,|L11.1176|
000340  6708              STR      r0,[r1,#0x70]  ; System
;;;983    						
;;;984    					
;;;985    					System_Status_Update(); //系统状态更新
000342  f7fffffe          BL       System_Status_Update
;;;986    				  Alarm.no_respond_count = 0;  //新增清除					
000346  2000              MOVS     r0,#0
000348  4967              LDR      r1,|L11.1256|
00034a  7148              STRB     r0,[r1,#5]
;;;987    					ret=MT2000_ACK_OK;
00034c  2401              MOVS     r4,#1
                  |L11.846|
;;;988    		}
;;;989    					
;;;990    					
;;;991    #if	NO_RESPOND_RECOVER
;;;992                if( ret == MT2000_ACK_OK )
00034e  2c01              CMP      r4,#1
000350  d137              BNE      |L11.962|
;;;993                {
;;;994                    if( Alarm.no_respond == 0x01 )
000352  4865              LDR      r0,|L11.1256|
000354  78c0              LDRB     r0,[r0,#3]  ; Alarm
000356  2801              CMP      r0,#1
000358  d103              BNE      |L11.866|
;;;995                    {
;;;996                        System.stop = 0;
00035a  2000              MOVS     r0,#0
00035c  494e              LDR      r1,|L11.1176|
00035e  7548              STRB     r0,[r1,#0x15]
;;;997                        System.cancel_sweeping = 0;
000360  73c8              STRB     r0,[r1,#0xf]
                  |L11.866|
;;;998                    }
;;;999    
;;;1000                   Alarm.no_respond_count = 0;
000362  2000              MOVS     r0,#0
000364  4960              LDR      r1,|L11.1256|
000366  7148              STRB     r0,[r1,#5]
;;;1001                   Alarm.no_respond = 0;
000368  70c8              STRB     r0,[r1,#3]
;;;1002                   if( get_history_alarm() == 0x01 )
00036a  f7fffffe          BL       get_history_alarm
00036e  2801              CMP      r0,#1
000370  d11f              BNE      |L11.946|
;;;1003                   {
;;;1004                       if( (System.status==SYSTEM_EMISSING) || (System.status==SYSTEM_SCAN) )	//发射/扫频状态，只有严重报警(激励器报警、设备无响应报警和无功率报警)才切换为报警状态
000372  4849              LDR      r0,|L11.1176|
000374  7ac0              LDRB     r0,[r0,#0xb]  ; System
000376  2801              CMP      r0,#1
000378  d003              BEQ      |L11.898|
00037a  4847              LDR      r0,|L11.1176|
00037c  7ac0              LDRB     r0,[r0,#0xb]  ; System
00037e  2805              CMP      r0,#5
000380  d113              BNE      |L11.938|
                  |L11.898|
;;;1005                       {
;;;1006                           if( (Alarm.emission==0x01) || (Alarm.no_respond==0x01) || (Alarm.no_power==0x01) || (Alarm.swr_alarm==0x01))
000382  4859              LDR      r0,|L11.1256|
000384  7840              LDRB     r0,[r0,#1]  ; Alarm
000386  2801              CMP      r0,#1
000388  d00b              BEQ      |L11.930|
00038a  4857              LDR      r0,|L11.1256|
00038c  78c0              LDRB     r0,[r0,#3]  ; Alarm
00038e  2801              CMP      r0,#1
000390  d007              BEQ      |L11.930|
000392  4855              LDR      r0,|L11.1256|
000394  7cc0              LDRB     r0,[r0,#0x13]  ; Alarm
000396  2801              CMP      r0,#1
000398  d003              BEQ      |L11.930|
00039a  4853              LDR      r0,|L11.1256|
00039c  7c40              LDRB     r0,[r0,#0x11]  ; Alarm
00039e  2801              CMP      r0,#1
0003a0  d10f              BNE      |L11.962|
                  |L11.930|
;;;1007                           {
;;;1008                               System.status = SYSTEM_ALARM;
0003a2  2011              MOVS     r0,#0x11
0003a4  493c              LDR      r1,|L11.1176|
0003a6  72c8              STRB     r0,[r1,#0xb]
0003a8  e00b              B        |L11.962|
                  |L11.938|
;;;1009                           }
;;;1010                       }
;;;1011                       else
;;;1012                       {
;;;1013                           System.status = SYSTEM_ALARM;
0003aa  2011              MOVS     r0,#0x11
0003ac  493a              LDR      r1,|L11.1176|
0003ae  72c8              STRB     r0,[r1,#0xb]
0003b0  e007              B        |L11.962|
                  |L11.946|
;;;1014                       }
;;;1015                   }
;;;1016                   else
;;;1017                   {
;;;1018                       clean_all_alarm_flags();
0003b2  f7fffffe          BL       clean_all_alarm_flags
;;;1019   
;;;1020                       if( System.already_init == 0x00 )
0003b6  4838              LDR      r0,|L11.1176|
0003b8  7880              LDRB     r0,[r0,#2]  ; System
0003ba  b910              CBNZ     r0,|L11.962|
;;;1021                       {
;;;1022                           System.status = SYSTEM_UNINITIALIZE;  //未初始化
0003bc  2010              MOVS     r0,#0x10
0003be  4936              LDR      r1,|L11.1176|
0003c0  72c8              STRB     r0,[r1,#0xb]
                  |L11.962|
;;;1023                       }
;;;1024                   }
;;;1025   //								Trans_printf("发射机响应OK  \n");
;;;1026               }
;;;1027   #endif
;;;1028   
;;;1029               return ret;
0003c2  4620              MOV      r0,r4
                  |L11.964|
;;;1030           }
;;;1031           count=0;   //清零
;;;1032           vTaskDelay(50);
;;;1033       }
;;;1034   
;;;1035   		if(System.status!=SYSTEM_UNINITIALIZE) //只要不是未初始化
;;;1036   		{
;;;1037   			if( Alarm.no_respond == 0x00 )
;;;1038   			{
;;;1039   					Alarm.no_respond_count++;
;;;1040   					if( Alarm.no_respond_count >= NO_RESPOND_MAX )  //检测发射机是否失联，检测串口4是否有数据
;;;1041   					{
;;;1042   							Alarm.no_respond_count = 0;
;;;1043   
;;;1044   							if( System.time_update_flag == 0x01 )
;;;1045   							{
;;;1046   									Alarm.no_respond_time_flag = 0x01;
;;;1047   									Time_Printf( (RTC_GetCounter()+g_stamp_distance), &set_time );
;;;1048   									Alarm_historyBack.no_response_time[0]=set_time.tm_year-2000;
;;;1049   									Alarm_historyBack.no_response_time[1]=set_time.tm_mon;
;;;1050   									Alarm_historyBack.no_response_time[2]=set_time.tm_mday;
;;;1051   									Alarm_historyBack.no_response_time[3]=set_time.tm_hour;
;;;1052   									Alarm_historyBack.no_response_time[4]=set_time.tm_min;
;;;1053   									Alarm_historyBack.no_response_time[5]=set_time.tm_sec;
;;;1054   							}
;;;1055   
;;;1056   							System.emission = 0x00;		//设备无响应时，清除发射标志位
;;;1057   							Alarm.no_respond = 0x01;
;;;1058   							Trans_printf(" Alarm.no_respond 1 ! ");
;;;1059   							Alarm.alarm_history = 0x01;  //置位无响应报警，说明未收到发射据的正确数据。
;;;1060   
;;;1061   							System.achieve_add_sub = 0x00;
;;;1062   							System.modify_power = 0x00;
;;;1063   							System.cancel_add_sub = 0x00;
;;;1064   
;;;1065   							temp = System.emission;
;;;1066   							System.Voltage = 0.0;
;;;1067   							System.Electricity = 0.0;
;;;1068   							System_Status_Clean();		//不清，先返回给PC当前状态，再自己停止3次，3次失败再清空	再修正：清除电压电流功率	--20181031 Luonus
;;;1069   							System.emission = temp;		//要停止
;;;1070   					}
;;;1071   				}
;;;1072       }
;;;1073   
;;;1074       return MT2000_NO_ACK;	//无应答	
;;;1075   
;;;1076   }
0003c4  e8bd8ff8          POP      {r3-r11,pc}
                  |L11.968|
0003c8  2600              MOVS     r6,#0                 ;1031
0003ca  2032              MOVS     r0,#0x32              ;1032
0003cc  f7fffffe          BL       vTaskDelay
0003d0  1c78              ADDS     r0,r7,#1              ;836
0003d2  b287              UXTH     r7,r0                 ;836
                  |L11.980|
0003d4  454f              CMP      r7,r9                 ;836
0003d6  f6ffae57          BLT      |L11.136|
0003da  482f              LDR      r0,|L11.1176|
0003dc  7ac0              LDRB     r0,[r0,#0xb]          ;1035  ; System
0003de  2810              CMP      r0,#0x10              ;1035
0003e0  d040              BEQ      |L11.1124|
0003e2  4841              LDR      r0,|L11.1256|
0003e4  78c0              LDRB     r0,[r0,#3]            ;1037  ; Alarm
0003e6  bbe8              CBNZ     r0,|L11.1124|
0003e8  483f              LDR      r0,|L11.1256|
0003ea  7940              LDRB     r0,[r0,#5]            ;1039  ; Alarm
0003ec  1c40              ADDS     r0,r0,#1              ;1039
0003ee  493e              LDR      r1,|L11.1256|
0003f0  7148              STRB     r0,[r1,#5]            ;1039
0003f2  4608              MOV      r0,r1                 ;1040
0003f4  7940              LDRB     r0,[r0,#5]            ;1040  ; Alarm
0003f6  2803              CMP      r0,#3                 ;1040
0003f8  db34              BLT      |L11.1124|
0003fa  2000              MOVS     r0,#0                 ;1042
0003fc  7148              STRB     r0,[r1,#5]            ;1042
0003fe  4826              LDR      r0,|L11.1176|
000400  7a80              LDRB     r0,[r0,#0xa]          ;1044  ; System
000402  2801              CMP      r0,#1                 ;1044
000404  d12a              BNE      |L11.1116|
000406  7108              STRB     r0,[r1,#4]            ;1046
000408  f7fffffe          BL       RTC_GetCounter
00040c  4937              LDR      r1,|L11.1260|
00040e  6809              LDR      r1,[r1,#0]            ;1047  ; g_stamp_distance
000410  eb000a01          ADD      r10,r0,r1             ;1047
000414  4936              LDR      r1,|L11.1264|
000416  4650              MOV      r0,r10                ;1047
000418  f7fffffe          BL       Time_Printf
00041c  4834              LDR      r0,|L11.1264|
00041e  7d00              LDRB     r0,[r0,#0x14]         ;1048  ; set_time
000420  f5a060fa          SUB      r0,r0,#0x7d0          ;1048
000424  4933              LDR      r1,|L11.1268|
000426  f8810031          STRB     r0,[r1,#0x31]         ;1048
00042a  4831              LDR      r0,|L11.1264|
00042c  7c01              LDRB     r1,[r0,#0x10]         ;1049  ; set_time
00042e  4831              LDR      r0,|L11.1268|
000430  f8801032          STRB     r1,[r0,#0x32]         ;1049
000434  482e              LDR      r0,|L11.1264|
000436  7b01              LDRB     r1,[r0,#0xc]          ;1050  ; set_time
000438  482e              LDR      r0,|L11.1268|
00043a  f8801033          STRB     r1,[r0,#0x33]         ;1050
00043e  482c              LDR      r0,|L11.1264|
000440  7a01              LDRB     r1,[r0,#8]            ;1051  ; set_time
000442  482c              LDR      r0,|L11.1268|
000444  f8801034          STRB     r1,[r0,#0x34]         ;1051
000448  4829              LDR      r0,|L11.1264|
00044a  7901              LDRB     r1,[r0,#4]            ;1052  ; set_time
00044c  4829              LDR      r0,|L11.1268|
00044e  f8801035          STRB     r1,[r0,#0x35]         ;1052
000452  4827              LDR      r0,|L11.1264|
000454  7801              LDRB     r1,[r0,#0]            ;1053  ; set_time
000456  4827              LDR      r0,|L11.1268|
000458  f8801036          STRB     r1,[r0,#0x36]         ;1053
                  |L11.1116|
00045c  2000              MOVS     r0,#0                 ;1056
00045e  490e              LDR      r1,|L11.1176|
000460  7588              STRB     r0,[r1,#0x16]         ;1056
000462  e000              B        |L11.1126|
                  |L11.1124|
000464  e079              B        |L11.1370|
                  |L11.1126|
000466  2001              MOVS     r0,#1                 ;1057
000468  491f              LDR      r1,|L11.1256|
00046a  70c8              STRB     r0,[r1,#3]            ;1057
00046c  a032              ADR      r0,|L11.1336|
00046e  f7fffffe          BL       Trans_printf
000472  2001              MOVS     r0,#1                 ;1059
000474  491c              LDR      r1,|L11.1256|
000476  7008              STRB     r0,[r1,#0]            ;1059
000478  2000              MOVS     r0,#0                 ;1061
00047a  4907              LDR      r1,|L11.1176|
00047c  7448              STRB     r0,[r1,#0x11]         ;1061
00047e  7488              STRB     r0,[r1,#0x12]         ;1062
000480  74c8              STRB     r0,[r1,#0x13]         ;1063
000482  4608              MOV      r0,r1                 ;1065
000484  f8908016          LDRB     r8,[r0,#0x16]         ;1065  ; System
000488  2000              MOVS     r0,#0                 ;1066
00048a  6748              STR      r0,[r1,#0x74]         ;1066  ; System
00048c  6788              STR      r0,[r1,#0x78]         ;1067  ; System
00048e  e05f              B        |L11.1360|
                  |L11.1168|
                          DCD      Emission_Rx
                  |L11.1172|
                          DCD      GT2000_Rx
                  |L11.1176|
                          DCD      System
                  |L11.1180|
00049c  20d3d0c0          DCB      " ",211,208,192,250,202,183,177,168,190,175,207,251,207,162
0004a0  facab7b1
0004a4  a8beafcf
0004a8  fbcfa2  
0004ab  a3a1200a          DCB      163,161," \n ",0
0004af  2000    
0004b1  00                DCB      0
0004b2  00                DCB      0
0004b3  00                DCB      0
                  |L11.1204|
0004b4  b9d8bbfa          DCB      185,216,187,250,215,180,204,172,"1",163,161," \n",0
0004b8  d7b4ccac
0004bc  31a3a120
0004c0  0a00    
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L11.1220|
                          DCD      0x422c0000
                  |L11.1224|
0004c8  20b4fdbb          DCB      " ",180,253,187,250,215,180,204,172,"1",163,161," \n",0
0004cc  fad7b4cc
0004d0  ac31a3a1
0004d4  200a00  
0004d7  00                DCB      0
                  |L11.1240|
0004d8  b7a2c9e4          DCB      183,162,201,228,215,180,204,172,"1",163,161," \n",0
0004dc  d7b4ccac
0004e0  31a3a120
0004e4  0a00    
0004e6  00                DCB      0
0004e7  00                DCB      0
                  |L11.1256|
                          DCD      Alarm
                  |L11.1260|
                          DCD      g_stamp_distance
                  |L11.1264|
                          DCD      set_time
                  |L11.1268|
                          DCD      Alarm_historyBack
                  |L11.1272|
0004f8  656d6973          DCB      "emission alarm alarm alarm! GT2000_Rx.system_status1== "
0004fc  73696f6e
000500  20616c61
000504  726d2061
000508  6c61726d
00050c  20616c61
000510  726d2120
000514  47543230
000518  30305f52
00051c  782e7379
000520  7374656d
000524  5f737461
000528  74757331
00052c  3d3d20  
00052f  25303258          DCB      "%02X \r\n",0
000533  200d0a00
000537  00                DCB      0
                  |L11.1336|
000538  20416c61          DCB      " Alarm.no_respond 1 ! ",0
00053c  726d2e6e
000540  6f5f7265
000544  73706f6e
000548  64203120
00054c  212000  
00054f  00                DCB      0
                  |L11.1360|
000550  f7fffffe          BL       System_Status_Clean
000554  4802              LDR      r0,|L11.1376|
000556  f8808016          STRB     r8,[r0,#0x16]         ;1069
                  |L11.1370|
00055a  f04f30ff          MOV      r0,#0xffffffff        ;1074
00055e  e731              B        |L11.964|
;;;1077   	
                          ENDP

                  |L11.1376|
                          DCD      System

                          AREA ||i.GT_Set_Value||, CODE, READONLY, ALIGN=2

                  GT_Set_Value PROC
;;;747    /*开发射工作参数设置*/
;;;748    void GT_Set_Value(GT2000_t Send_CMD)  
000000  b40f              PUSH     {r0-r3}
;;;749    {
000002  b500              PUSH     {lr}
000004  b097              SUB      sp,sp,#0x5c
;;;750    		
;;;751    		if(Send_CMD.Gt2000_mode==1)		//固频
000006  f89d0065          LDRB     r0,[sp,#0x65]
00000a  2801              CMP      r0,#1
00000c  d123              BNE      |L12.86|
;;;752    		{
;;;753    			Gt_Set_Mode(1);   //设置工作模式为1单频
00000e  f7fffffe          BL       Gt_Set_Mode
;;;754    			vTaskDelay(1000);  //等待设置完毕间隔事时间至少1000
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       vTaskDelay
;;;755    			Gt_Set_Power(Send_CMD);  //设置功率	
00001a  225b              MOVS     r2,#0x5b
00001c  a91c              ADD      r1,sp,#0x70
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       __aeabi_memcpy4
000024  a818              ADD      r0,sp,#0x60
000026  c80f              LDM      r0,{r0-r3}
000028  f7fffffe          BL       Gt_Set_Power
;;;756    			vTaskDelay(1000);
00002c  f44f707a          MOV      r0,#0x3e8
000030  f7fffffe          BL       vTaskDelay
;;;757          Gt_Set_Freq(Send_CMD);   //设置频率
000034  225b              MOVS     r2,#0x5b
000036  a91c              ADD      r1,sp,#0x70
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       __aeabi_memcpy4
00003e  a818              ADD      r0,sp,#0x60
000040  c80f              LDM      r0,{r0-r3}
000042  f7fffffe          BL       Gt_Set_Freq
;;;758    			vTaskDelay(1000);			
000046  f44f707a          MOV      r0,#0x3e8
00004a  f7fffffe          BL       vTaskDelay
;;;759    			Trans_printf(" 固频工作模式参数已下发完毕！\n");
00004e  a030              ADR      r0,|L12.272|
000050  f7fffffe          BL       Trans_printf
000054  e053              B        |L12.254|
                  |L12.86|
;;;760    		}
;;;761    		
;;;762    		else if(Send_CMD.Gt2000_mode==2) //双频
000056  f89d0065          LDRB     r0,[sp,#0x65]
00005a  2802              CMP      r0,#2
00005c  d11f              BNE      |L12.158|
;;;763    		{
;;;764    			Gt_Set_Mode(2);   //设置工作模式为2双频
00005e  f7fffffe          BL       Gt_Set_Mode
;;;765    			vTaskDelay(1000);
000062  f44f707a          MOV      r0,#0x3e8
000066  f7fffffe          BL       vTaskDelay
;;;766    			Gt_Set_Power(Send_CMD);  //设置功率	
00006a  225b              MOVS     r2,#0x5b
00006c  a91c              ADD      r1,sp,#0x70
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       __aeabi_memcpy4
000074  a818              ADD      r0,sp,#0x60
000076  c80f              LDM      r0,{r0-r3}
000078  f7fffffe          BL       Gt_Set_Power
;;;767    			vTaskDelay(1000);
00007c  f44f707a          MOV      r0,#0x3e8
000080  f7fffffe          BL       vTaskDelay
;;;768          Gt_Set_Freq(Send_CMD);   //设置频率
000084  225b              MOVS     r2,#0x5b
000086  a91c              ADD      r1,sp,#0x70
000088  4668              MOV      r0,sp
00008a  f7fffffe          BL       __aeabi_memcpy4
00008e  a818              ADD      r0,sp,#0x60
000090  c80f              LDM      r0,{r0-r3}
000092  f7fffffe          BL       Gt_Set_Freq
;;;769    			Trans_printf(" 双频工作模式参数已下发完毕！\n");
000096  a026              ADR      r0,|L12.304|
000098  f7fffffe          BL       Trans_printf
00009c  e02f              B        |L12.254|
                  |L12.158|
;;;770    		}
;;;771    		
;;;772    		else if(Send_CMD.Gt2000_mode==3) //三频
00009e  f89d0065          LDRB     r0,[sp,#0x65]
0000a2  2803              CMP      r0,#3
0000a4  d11f              BNE      |L12.230|
;;;773    		{
;;;774    			Gt_Set_Mode(3);
0000a6  f7fffffe          BL       Gt_Set_Mode
;;;775    			vTaskDelay(1500);
0000aa  f24050dc          MOV      r0,#0x5dc
0000ae  f7fffffe          BL       vTaskDelay
;;;776    			Gt_Set_Power(Send_CMD);  //设置功率
0000b2  225b              MOVS     r2,#0x5b
0000b4  a91c              ADD      r1,sp,#0x70
0000b6  4668              MOV      r0,sp
0000b8  f7fffffe          BL       __aeabi_memcpy4
0000bc  a818              ADD      r0,sp,#0x60
0000be  c80f              LDM      r0,{r0-r3}
0000c0  f7fffffe          BL       Gt_Set_Power
;;;777    			vTaskDelay(1500);
0000c4  f24050dc          MOV      r0,#0x5dc
0000c8  f7fffffe          BL       vTaskDelay
;;;778          Gt_Set_Freq(Send_CMD);   //设置频率
0000cc  225b              MOVS     r2,#0x5b
0000ce  a91c              ADD      r1,sp,#0x70
0000d0  4668              MOV      r0,sp
0000d2  f7fffffe          BL       __aeabi_memcpy4
0000d6  a818              ADD      r0,sp,#0x60
0000d8  c80f              LDM      r0,{r0-r3}
0000da  f7fffffe          BL       Gt_Set_Freq
;;;779    			Trans_printf(" 三频工作模式参数已下发完毕！\n");
0000de  a01c              ADR      r0,|L12.336|
0000e0  f7fffffe          BL       Trans_printf
0000e4  e00b              B        |L12.254|
                  |L12.230|
;;;780    		}
;;;781    		else if(Send_CMD.Gt2000_mode==4)  //AM
0000e6  f89d0065          LDRB     r0,[sp,#0x65]
0000ea  2804              CMP      r0,#4
0000ec  d102              BNE      |L12.244|
;;;782    		{
;;;783    			 Gt_Set_Mode(4);
0000ee  f7fffffe          BL       Gt_Set_Mode
0000f2  e004              B        |L12.254|
                  |L12.244|
;;;784    		}
;;;785    		else 
;;;786    		{
;;;787    			 Trans_printf(" error：无此工作模式！Send_CMD.Gt2000_mode==  %d \n",Send_CMD.Gt2000_mode);
0000f4  f89d1065          LDRB     r1,[sp,#0x65]
0000f8  a01d              ADR      r0,|L12.368|
0000fa  f7fffffe          BL       Trans_printf
                  |L12.254|
;;;788    		}
;;;789    		Trans_printf(" 开发射工作参数设置命令已下发完毕！Send_CMD.Gt2000_mode==  %d \n",Send_CMD.Gt2000_mode);
0000fe  f89d1065          LDRB     r1,[sp,#0x65]
000102  a028              ADR      r0,|L12.420|
000104  f7fffffe          BL       Trans_printf
;;;790    }
000108  b017              ADD      sp,sp,#0x5c
00010a  f85dfb14          LDR      pc,[sp],#0x14
;;;791    
                          ENDP

00010e  0000              DCW      0x0000
                  |L12.272|
000110  20b9ccc6          DCB      " ",185,204,198,181,185,164,215,247,196,163,202,189,178,206
000114  b5b9a4d7
000118  f7c4a3ca
00011c  bdb2ce  
00011f  cafdd2d1          DCB      202,253,210,209,207,194,183,162,205,234,177,207,163,161,"\n"
000123  cfc2b7a2
000127  cdeab1cf
00012b  a3a10a  
00012e  00                DCB      0
00012f  00                DCB      0
                  |L12.304|
000130  20cbabc6          DCB      " ",203,171,198,181,185,164,215,247,196,163,202,189,178,206
000134  b5b9a4d7
000138  f7c4a3ca
00013c  bdb2ce  
00013f  cafdd2d1          DCB      202,253,210,209,207,194,183,162,205,234,177,207,163,161,"\n"
000143  cfc2b7a2
000147  cdeab1cf
00014b  a3a10a  
00014e  00                DCB      0
00014f  00                DCB      0
                  |L12.336|
000150  20c8fdc6          DCB      " ",200,253,198,181,185,164,215,247,196,163,202,189,178,206
000154  b5b9a4d7
000158  f7c4a3ca
00015c  bdb2ce  
00015f  cafdd2d1          DCB      202,253,210,209,207,194,183,162,205,234,177,207,163,161,"\n"
000163  cfc2b7a2
000167  cdeab1cf
00016b  a3a10a  
00016e  00                DCB      0
00016f  00                DCB      0
                  |L12.368|
000170  20657272          DCB      " error",163,186,206,222,180,203,185,164,215,247,196,163
000174  6f72a3ba
000178  cedeb4cb
00017c  b9a4d7f7
000180  c4a3    
000182  cabda3a1          DCB      202,189,163,161,"Send_CMD.Gt2000_mode==  %d \n",0
000186  53656e64
00018a  5f434d44
00018e  2e477432
000192  3030305f
000196  6d6f6465
00019a  3d3d2020
00019e  2564200a
0001a2  00      
0001a3  00                DCB      0
                  |L12.420|
0001a4  20bfaab7          DCB      " ",191,170,183,162,201,228,185,164,215,247,178,206,202,253
0001a8  a2c9e4b9
0001ac  a4d7f7b2
0001b0  cecafd  
0001b3  c9e8d6c3          DCB      201,232,214,195,195,252,193,238,210,209,207,194,183,162,205
0001b7  c3fcc1ee
0001bb  d2d1cfc2
0001bf  b7a2cd  
0001c2  eab1cfa3          DCB      234,177,207,163,161,"Send_CMD.Gt2000_mode==  %d \n",0
0001c6  a153656e
0001ca  645f434d
0001ce  442e4774
0001d2  32303030
0001d6  5f6d6f64
0001da  653d3d20
0001de  20256420
0001e2  0a00    

                          AREA ||i.Gt2000_Close||, CODE, READONLY, ALIGN=2

                  Gt2000_Close PROC
;;;526    /* 关机 */
;;;527    void Gt2000_Close(void)
000000  b500              PUSH     {lr}
;;;528    {
000002  b087              SUB      sp,sp,#0x1c
;;;529        uint8_t buf[22] ={0x42,0x0A,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
000004  2218              MOVS     r2,#0x18
000006  a105              ADR      r1,|L13.28|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;530    		                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41};
;;;531        comSendBuf(COM4, buf, 22);
00000e  2216              MOVS     r2,#0x16
000010  a901              ADD      r1,sp,#4
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       comSendBuf
;;;532    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bd00              POP      {pc}
;;;533    
                          ENDP

                  |L13.28|
00001c  420a0200          DCB      "B\n",2,0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  414100            DCB      "AA",0
000033  00                DCB      0

                          AREA ||i.Gt2000_Open||, CODE, READONLY, ALIGN=2

                  Gt2000_Open PROC
;;;518    /* 开机 */
;;;519    void Gt2000_Open(void)
000000  b500              PUSH     {lr}
;;;520    {
000002  b087              SUB      sp,sp,#0x1c
;;;521        uint8_t buf[22] ={0x42,0x0A,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
000004  2218              MOVS     r2,#0x18
000006  a105              ADR      r1,|L14.28|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;522    		                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41};
;;;523        comSendBuf(COM4, buf, 22);								
00000e  2216              MOVS     r2,#0x16
000010  a901              ADD      r1,sp,#4
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       comSendBuf
;;;524    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bd00              POP      {pc}
;;;525    
                          ENDP

                  |L14.28|
00001c  420a0100          DCB      "B\n",1,0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  414100            DCB      "AA",0
000033  00                DCB      0

                          AREA ||i.Gt2000_Reset||, CODE, READONLY, ALIGN=2

                  Gt2000_Reset PROC
;;;550    /*功放复位*/
;;;551    void Gt2000_Reset(void)
000000  b500              PUSH     {lr}
;;;552    {
000002  b087              SUB      sp,sp,#0x1c
;;;553        uint8_t buf[22] ={0x42,0x0A,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
000004  2218              MOVS     r2,#0x18
000006  a105              ADR      r1,|L15.28|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;554    		                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41};
;;;555        comSendBuf(COM4, buf, 22);
00000e  2216              MOVS     r2,#0x16
000010  a901              ADD      r1,sp,#4
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       comSendBuf
;;;556    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bd00              POP      {pc}
;;;557    
                          ENDP

                  |L15.28|
00001c  420a0500          DCB      "B\n",5,0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  414100            DCB      "AA",0
000033  00                DCB      0

                          AREA ||i.Gt_Inquire_All||, CODE, READONLY, ALIGN=2

                  Gt_Inquire_All PROC
;;;558    /*查询所有状态*/
;;;559    void Gt_Inquire_All(void)
000000  b500              PUSH     {lr}
;;;560    {
000002  b087              SUB      sp,sp,#0x1c
;;;561        uint8_t buf[22] ={0x42,0x0A,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
000004  2218              MOVS     r2,#0x18
000006  a105              ADR      r1,|L16.28|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;562    		                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41};
;;;563        comSendBuf(COM4, buf, 22);
00000e  2216              MOVS     r2,#0x16
000010  a901              ADD      r1,sp,#4
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       comSendBuf
;;;564    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bd00              POP      {pc}
;;;565    
                          ENDP

                  |L16.28|
00001c  420a1400          DCB      "B\n",20,0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  414100            DCB      "AA",0
000033  00                DCB      0

                          AREA ||i.Gt_RF_Close||, CODE, READONLY, ALIGN=2

                  Gt_RF_Close PROC
;;;542    /*关发射*/
;;;543    void Gt_RF_Close(void)
000000  b500              PUSH     {lr}
;;;544    {
000002  b087              SUB      sp,sp,#0x1c
;;;545        uint8_t buf[22] ={0x42,0x0A,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
000004  2218              MOVS     r2,#0x18
000006  a105              ADR      r1,|L17.28|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;546    		                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41};
;;;547        comSendBuf(COM4, buf, 22);
00000e  2216              MOVS     r2,#0x16
000010  a901              ADD      r1,sp,#4
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       comSendBuf
;;;548    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bd00              POP      {pc}
;;;549    
                          ENDP

                  |L17.28|
00001c  420a0400          DCB      "B\n",4,0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  414100            DCB      "AA",0
000033  00                DCB      0

                          AREA ||i.Gt_RF_Open||, CODE, READONLY, ALIGN=2

                  Gt_RF_Open PROC
;;;534    /*开发射*/
;;;535    void Gt_RF_Open(void)
000000  b500              PUSH     {lr}
;;;536    {
000002  b087              SUB      sp,sp,#0x1c
;;;537        uint8_t buf[22] ={0x42,0x0A,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
000004  2218              MOVS     r2,#0x18
000006  a105              ADR      r1,|L18.28|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;538    		                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41};
;;;539        comSendBuf(COM4, buf, 22);
00000e  2216              MOVS     r2,#0x16
000010  a901              ADD      r1,sp,#4
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       comSendBuf
;;;540    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bd00              POP      {pc}
;;;541    
                          ENDP

                  |L18.28|
00001c  420a0300          DCB      "B\n",3,0
000020  00                DCB      0
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  00                DCB      0
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  414100            DCB      "AA",0
000033  00                DCB      0

                          AREA ||i.Gt_Set_Freq||, CODE, READONLY, ALIGN=2

                  Gt_Set_Freq PROC
;;;566    /*设置频率1、2、3*/
;;;567    void Gt_Set_Freq(GT2000_t Set_CMD)
000000  b40f              PUSH     {r0-r3}
;;;568    {
000002  b510              PUSH     {r4,lr}
000004  b09e              SUB      sp,sp,#0x78
;;;569    	uint8_t i;
;;;570    		if(Set_CMD.Gt2000_mode==1)		//设置频率1
000006  f89d0085          LDRB     r0,[sp,#0x85]
00000a  2801              CMP      r0,#1
00000c  d148              BNE      |L19.160|
;;;571    		{
;;;572    			uint8_t buf[22];
;;;573    			buf[0]=0x42;
00000e  2042              MOVS     r0,#0x42
000010  f88d0060          STRB     r0,[sp,#0x60]
;;;574    			buf[1]=0x0A;
000014  200a              MOVS     r0,#0xa
000016  f88d0061          STRB     r0,[sp,#0x61]
;;;575    			buf[2]=0x06;
00001a  2006              MOVS     r0,#6
00001c  f88d0062          STRB     r0,[sp,#0x62]
;;;576    			buf[3]=0x00;
000020  2000              MOVS     r0,#0
000022  f88d0063          STRB     r0,[sp,#0x63]
;;;577    			buf[4]=Set_CMD.Gt2000_freq1[0];
000026  f89d00a4          LDRB     r0,[sp,#0xa4]
00002a  f88d0064          STRB     r0,[sp,#0x64]
;;;578    			buf[5]=Set_CMD.Gt2000_freq1[1];
00002e  f89d00a5          LDRB     r0,[sp,#0xa5]
000032  f88d0065          STRB     r0,[sp,#0x65]
;;;579    			buf[6]=0x00;
000036  2000              MOVS     r0,#0
000038  f88d0066          STRB     r0,[sp,#0x66]
;;;580    			buf[7]=0x00;
00003c  f88d0067          STRB     r0,[sp,#0x67]
;;;581    			memset(buf+8,0x00,12);
000040  901a              STR      r0,[sp,#0x68]
000042  901b              STR      r0,[sp,#0x6c]
000044  901c              STR      r0,[sp,#0x70]
;;;582          buf[20]=0x41;buf[21]=0x41;
000046  2041              MOVS     r0,#0x41
000048  f88d0074          STRB     r0,[sp,#0x74]
00004c  f88d0075          STRB     r0,[sp,#0x75]
;;;583          comSendBuf(COM4, buf, 22);
000050  2216              MOVS     r2,#0x16
000052  a918              ADD      r1,sp,#0x60
000054  2003              MOVS     r0,#3
000056  f7fffffe          BL       comSendBuf
;;;584    			vTaskDelay(1500);
00005a  f24050dc          MOV      r0,#0x5dc
00005e  f7fffffe          BL       vTaskDelay
;;;585    			Gt_Set_Power(Set_CMD);  //设置功率
000062  225b              MOVS     r2,#0x5b
000064  a924              ADD      r1,sp,#0x90
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       __aeabi_memcpy4
00006c  a820              ADD      r0,sp,#0x80
00006e  c80f              LDM      r0,{r0-r3}
000070  f7fffffe          BL       Gt_Set_Power
;;;586          vTaskDelay(1000);			
000074  f44f707a          MOV      r0,#0x3e8
000078  f7fffffe          BL       vTaskDelay
;;;587    			Trans_printf(" 模式1 buf[0-21]= ");
00007c  a07f              ADR      r0,|L19.636|
00007e  f7fffffe          BL       Trans_printf
;;;588    			for(i=0;i<22;i++)
000082  2400              MOVS     r4,#0
000084  e006              B        |L19.148|
                  |L19.134|
;;;589    		{
;;;590          Trans_printf(" %02X ",buf[i]);	
000086  a818              ADD      r0,sp,#0x60
000088  5d01              LDRB     r1,[r0,r4]
00008a  a081              ADR      r0,|L19.656|
00008c  f7fffffe          BL       Trans_printf
000090  1c60              ADDS     r0,r4,#1              ;588
000092  b2c4              UXTB     r4,r0                 ;588
                  |L19.148|
000094  2c16              CMP      r4,#0x16              ;588
000096  dbf6              BLT      |L19.134|
;;;591    		}
;;;592          Trans_printf(" \n ");		
000098  a07f              ADR      r0,|L19.664|
00009a  f7fffffe          BL       Trans_printf
                  |L19.158|
;;;593    		}
00009e  e0e8              B        |L19.626|
                  |L19.160|
;;;594    		else if(Set_CMD.Gt2000_mode==2)		//先设置频率1，再设置频率2
0000a0  f89d0085          LDRB     r0,[sp,#0x85]
0000a4  2802              CMP      r0,#2
0000a6  d15b              BNE      |L19.352|
;;;595    		{
;;;596    			uint8_t buf[22];
;;;597    			buf[0]=0x42;
0000a8  2042              MOVS     r0,#0x42
0000aa  f88d0060          STRB     r0,[sp,#0x60]
;;;598    			buf[1]=0x0A;
0000ae  200a              MOVS     r0,#0xa
0000b0  f88d0061          STRB     r0,[sp,#0x61]
;;;599    			buf[2]=0x06;
0000b4  2006              MOVS     r0,#6
0000b6  f88d0062          STRB     r0,[sp,#0x62]
;;;600    			buf[3]=0x00;
0000ba  2000              MOVS     r0,#0
0000bc  f88d0063          STRB     r0,[sp,#0x63]
;;;601    			memcpy(buf+4,Set_CMD.Gt2000_freq1,4);
0000c0  9829              LDR      r0,[sp,#0xa4]
0000c2  9019              STR      r0,[sp,#0x64]
;;;602    			memset(buf+8,0x00,12);
0000c4  2000              MOVS     r0,#0
0000c6  901a              STR      r0,[sp,#0x68]
0000c8  901b              STR      r0,[sp,#0x6c]
0000ca  901c              STR      r0,[sp,#0x70]
;;;603          buf[20]=0x41;buf[21]=0x41;
0000cc  2041              MOVS     r0,#0x41
0000ce  f88d0074          STRB     r0,[sp,#0x74]
0000d2  f88d0075          STRB     r0,[sp,#0x75]
;;;604          comSendBuf(COM4, buf, 22);
0000d6  2216              MOVS     r2,#0x16
0000d8  a918              ADD      r1,sp,#0x60
0000da  2003              MOVS     r0,#3
0000dc  f7fffffe          BL       comSendBuf
;;;605    			vTaskDelay(1500);  //等待设置完成			
0000e0  f24050dc          MOV      r0,#0x5dc
0000e4  f7fffffe          BL       vTaskDelay
;;;606    			GT2000_Buffer_Clean(); //清除串口发送队列
0000e8  f7fffffe          BL       GT2000_Buffer_Clean
;;;607    			memset(buf,0x00,22);  //清零buf
0000ec  2118              MOVS     r1,#0x18
0000ee  a818              ADD      r0,sp,#0x60
0000f0  f7fffffe          BL       __aeabi_memclr4
;;;608    			
;;;609    			buf[0]=0x42;
0000f4  2042              MOVS     r0,#0x42
0000f6  f88d0060          STRB     r0,[sp,#0x60]
;;;610    			buf[1]=0x0A;
0000fa  200a              MOVS     r0,#0xa
0000fc  f88d0061          STRB     r0,[sp,#0x61]
;;;611    			buf[2]=0x07;
000100  2007              MOVS     r0,#7
000102  f88d0062          STRB     r0,[sp,#0x62]
;;;612    			buf[3]=0x00;
000106  2000              MOVS     r0,#0
000108  f88d0063          STRB     r0,[sp,#0x63]
;;;613    			memset(buf+4,0x00,4);
00010c  9019              STR      r0,[sp,#0x64]
;;;614    			memcpy(buf+8,Set_CMD.Gt2000_freq2,2);
00010e  f8bd00ae          LDRH     r0,[sp,#0xae]
000112  f8ad0068          STRH     r0,[sp,#0x68]
;;;615    			memset(buf+10,0x00,8);
000116  2000              MOVS     r0,#0
000118  f8cd006a          STR      r0,[sp,#0x6a]
00011c  f8cd006e          STR      r0,[sp,#0x6e]
;;;616          buf[20]=0x41;buf[21]=0x41;
000120  2041              MOVS     r0,#0x41
000122  f88d0074          STRB     r0,[sp,#0x74]
000126  f88d0075          STRB     r0,[sp,#0x75]
;;;617          comSendBuf(COM4, buf, 22);
00012a  2216              MOVS     r2,#0x16
00012c  a918              ADD      r1,sp,#0x60
00012e  2003              MOVS     r0,#3
000130  f7fffffe          BL       comSendBuf
;;;618    			vTaskDelay(1500);
000134  f24050dc          MOV      r0,#0x5dc
000138  f7fffffe          BL       vTaskDelay
;;;619    			
;;;620          Trans_printf(" 模式2 buf[0-21]= ");
00013c  a057              ADR      r0,|L19.668|
00013e  f7fffffe          BL       Trans_printf
;;;621    			for(i=0;i<22;i++)
000142  2400              MOVS     r4,#0
000144  e006              B        |L19.340|
                  |L19.326|
;;;622    		{
;;;623          Trans_printf(" %02X ",buf[i]);	
000146  a818              ADD      r0,sp,#0x60
000148  5d01              LDRB     r1,[r0,r4]
00014a  a051              ADR      r0,|L19.656|
00014c  f7fffffe          BL       Trans_printf
000150  1c60              ADDS     r0,r4,#1              ;621
000152  b2c4              UXTB     r4,r0                 ;621
                  |L19.340|
000154  2c16              CMP      r4,#0x16              ;621
000156  dbf6              BLT      |L19.326|
;;;624    		}
;;;625          Trans_printf(" \n ");		
000158  a04f              ADR      r0,|L19.664|
00015a  f7fffffe          BL       Trans_printf
;;;626    		}
00015e  e088              B        |L19.626|
                  |L19.352|
;;;627    		else if(Set_CMD.Gt2000_mode==3)		//先设置频率1，再设置频率2，设置频率3
000160  f89d0085          LDRB     r0,[sp,#0x85]
000164  2803              CMP      r0,#3
000166  d19a              BNE      |L19.158|
;;;628    		{
;;;629    			uint8_t buf[22];
;;;630    			buf[0]=0x42;
000168  2042              MOVS     r0,#0x42
00016a  f88d0060          STRB     r0,[sp,#0x60]
;;;631    			buf[1]=0x0A;
00016e  200a              MOVS     r0,#0xa
000170  f88d0061          STRB     r0,[sp,#0x61]
;;;632    			buf[2]=0x06;
000174  2006              MOVS     r0,#6
000176  f88d0062          STRB     r0,[sp,#0x62]
;;;633    			buf[3]=0x00;
00017a  2000              MOVS     r0,#0
00017c  f88d0063          STRB     r0,[sp,#0x63]
;;;634    			memcpy(buf+4,Set_CMD.Gt2000_freq1,4); 
000180  9829              LDR      r0,[sp,#0xa4]
000182  9019              STR      r0,[sp,#0x64]
;;;635    			memset(buf+8,0x00,4);
000184  2000              MOVS     r0,#0
000186  901a              STR      r0,[sp,#0x68]
;;;636    			memset(buf+12,0x00,4);
000188  901b              STR      r0,[sp,#0x6c]
;;;637    			memset(buf+16,0x00,4);
00018a  901c              STR      r0,[sp,#0x70]
;;;638          buf[20]=0x41;buf[21]=0x41;
00018c  2041              MOVS     r0,#0x41
00018e  f88d0074          STRB     r0,[sp,#0x74]
000192  f88d0075          STRB     r0,[sp,#0x75]
;;;639          comSendBuf(COM4, buf, 22);
000196  2216              MOVS     r2,#0x16
000198  a918              ADD      r1,sp,#0x60
00019a  2003              MOVS     r0,#3
00019c  f7fffffe          BL       comSendBuf
;;;640    			vTaskDelay(1500);  //等待设置完成	
0001a0  f24050dc          MOV      r0,#0x5dc
0001a4  f7fffffe          BL       vTaskDelay
;;;641    			GT2000_Buffer_Clean();
0001a8  f7fffffe          BL       GT2000_Buffer_Clean
;;;642    			memset(buf,0x00,22);  //清零buf
0001ac  2118              MOVS     r1,#0x18
0001ae  a818              ADD      r0,sp,#0x60
0001b0  f7fffffe          BL       __aeabi_memclr4
;;;643    			
;;;644    			buf[0]=0x42;          //设置频率2
0001b4  2042              MOVS     r0,#0x42
0001b6  f88d0060          STRB     r0,[sp,#0x60]
;;;645    			buf[1]=0x0A;
0001ba  200a              MOVS     r0,#0xa
0001bc  f88d0061          STRB     r0,[sp,#0x61]
;;;646    			buf[2]=0x07;
0001c0  2007              MOVS     r0,#7
0001c2  f88d0062          STRB     r0,[sp,#0x62]
;;;647    			buf[3]=0x00;
0001c6  2000              MOVS     r0,#0
0001c8  f88d0063          STRB     r0,[sp,#0x63]
;;;648    			memset(buf+4,0x00,4);
0001cc  9019              STR      r0,[sp,#0x64]
;;;649    			memcpy(buf+8,Set_CMD.Gt2000_freq2,2);
0001ce  f8bd00ae          LDRH     r0,[sp,#0xae]
0001d2  f8ad0068          STRH     r0,[sp,#0x68]
;;;650    			memset(buf+10,0x00,8);
0001d6  2000              MOVS     r0,#0
0001d8  f8cd006a          STR      r0,[sp,#0x6a]
0001dc  f8cd006e          STR      r0,[sp,#0x6e]
;;;651          buf[20]=0x41;buf[21]=0x41;
0001e0  2041              MOVS     r0,#0x41
0001e2  f88d0074          STRB     r0,[sp,#0x74]
0001e6  f88d0075          STRB     r0,[sp,#0x75]
;;;652          comSendBuf(COM4, buf, 22);
0001ea  2216              MOVS     r2,#0x16
0001ec  a918              ADD      r1,sp,#0x60
0001ee  2003              MOVS     r0,#3
0001f0  f7fffffe          BL       comSendBuf
;;;653    			vTaskDelay(1500);  //等待设置完成
0001f4  f24050dc          MOV      r0,#0x5dc
0001f8  f7fffffe          BL       vTaskDelay
;;;654    			GT2000_Buffer_Clean();
0001fc  f7fffffe          BL       GT2000_Buffer_Clean
;;;655    			memset(buf,0x00,22);  //清零buf
000200  2118              MOVS     r1,#0x18
000202  a818              ADD      r0,sp,#0x60
000204  f7fffffe          BL       __aeabi_memclr4
;;;656    			
;;;657    			buf[0]=0x42;          //设置频率3
000208  2042              MOVS     r0,#0x42
00020a  f88d0060          STRB     r0,[sp,#0x60]
;;;658    			buf[1]=0x0A;
00020e  200a              MOVS     r0,#0xa
000210  f88d0061          STRB     r0,[sp,#0x61]
;;;659    			buf[2]=0x08;
000214  2008              MOVS     r0,#8
000216  f88d0062          STRB     r0,[sp,#0x62]
;;;660    			buf[3]=0x00;
00021a  2000              MOVS     r0,#0
00021c  f88d0063          STRB     r0,[sp,#0x63]
;;;661    			memset(buf+4,0x00,8);
000220  9019              STR      r0,[sp,#0x64]
000222  901a              STR      r0,[sp,#0x68]
;;;662    			memcpy(buf+12,Set_CMD.Gt2000_freq3,2);
000224  f8bd00b8          LDRH     r0,[sp,#0xb8]
000228  f8ad006c          STRH     r0,[sp,#0x6c]
;;;663    			memset(buf+14,0x00,4);
00022c  2000              MOVS     r0,#0
00022e  f8cd006e          STR      r0,[sp,#0x6e]
;;;664          buf[20]=0x41;buf[21]=0x41;
000232  2041              MOVS     r0,#0x41
000234  f88d0074          STRB     r0,[sp,#0x74]
000238  f88d0075          STRB     r0,[sp,#0x75]
;;;665          comSendBuf(COM4, buf, 22);
00023c  2216              MOVS     r2,#0x16
00023e  a918              ADD      r1,sp,#0x60
000240  2003              MOVS     r0,#3
000242  f7fffffe          BL       comSendBuf
;;;666    			vTaskDelay(1500);	
000246  f24050dc          MOV      r0,#0x5dc
00024a  f7fffffe          BL       vTaskDelay
;;;667    			Trans_printf(" 模式3 buf[0-21]= ");
00024e  a018              ADR      r0,|L19.688|
000250  f7fffffe          BL       Trans_printf
;;;668         for(i=0;i<22;i++)
000254  2400              MOVS     r4,#0
000256  e006              B        |L19.614|
                  |L19.600|
;;;669    		{
;;;670          Trans_printf(" %02X ",buf[i]);	
000258  a818              ADD      r0,sp,#0x60
00025a  5d01              LDRB     r1,[r0,r4]
00025c  a00c              ADR      r0,|L19.656|
00025e  f7fffffe          BL       Trans_printf
000262  1c60              ADDS     r0,r4,#1              ;668
000264  b2c4              UXTB     r4,r0                 ;668
                  |L19.614|
000266  2c16              CMP      r4,#0x16              ;668
000268  dbf6              BLT      |L19.600|
;;;671    		}
;;;672          Trans_printf(" \n ");				
00026a  a00b              ADR      r0,|L19.664|
00026c  f7fffffe          BL       Trans_printf
;;;673    		
;;;674    		}		
000270  bf00              NOP      
                  |L19.626|
;;;675    }
000272  b01e              ADD      sp,sp,#0x78
000274  bc10              POP      {r4}
000276  f85dfb14          LDR      pc,[sp],#0x14
;;;676    
                          ENDP

00027a  0000              DCW      0x0000
                  |L19.636|
00027c  20c4a3ca          DCB      " ",196,163,202,189,"1 buf[0-21]= ",0
000280  bd312062
000284  75665b30
000288  2d32315d
00028c  3d2000  
00028f  00                DCB      0
                  |L19.656|
000290  20253032          DCB      " %02X ",0
000294  582000  
000297  00                DCB      0
                  |L19.664|
000298  200a2000          DCB      " \n ",0
                  |L19.668|
00029c  20c4a3ca          DCB      " ",196,163,202,189,"2 buf[0-21]= ",0
0002a0  bd322062
0002a4  75665b30
0002a8  2d32315d
0002ac  3d2000  
0002af  00                DCB      0
                  |L19.688|
0002b0  20c4a3ca          DCB      " ",196,163,202,189,"3 buf[0-21]= ",0
0002b4  bd332062
0002b8  75665b30
0002bc  2d32315d
0002c0  3d2000  
0002c3  00                DCB      0

                          AREA ||i.Gt_Set_Mode||, CODE, READONLY, ALIGN=2

                  Gt_Set_Mode PROC
;;;693    /* 设置工作模式1~4 */
;;;694    void Gt_Set_Mode(uint8_t num)
000000  b510              PUSH     {r4,lr}
;;;695    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;696    		if(num==1)		//设置为单频,返回7B 53 31 7D  设置成功。
000006  2c01              CMP      r4,#1
000008  d11f              BNE      |L20.74|
;;;697    		{
;;;698    			uint8_t buf[22];
;;;699    			buf[0]=0x42;
00000a  2042              MOVS     r0,#0x42
00000c  f88d0000          STRB     r0,[sp,#0]
;;;700    			buf[1]=0x0A;
000010  200a              MOVS     r0,#0xa
000012  f88d0001          STRB     r0,[sp,#1]
;;;701    			buf[2]=0x0A;
000016  f88d0002          STRB     r0,[sp,#2]
;;;702    			buf[3]=0x00;
00001a  2000              MOVS     r0,#0
00001c  f88d0003          STRB     r0,[sp,#3]
;;;703    			memset(buf+4,0x00,14);
000020  210e              MOVS     r1,#0xe
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       __aeabi_memclr4
;;;704    			buf[18]=0x01;buf[19]=0x00;
000028  2001              MOVS     r0,#1
00002a  f88d0012          STRB     r0,[sp,#0x12]
00002e  2000              MOVS     r0,#0
000030  f88d0013          STRB     r0,[sp,#0x13]
;;;705    	    buf[20]=0x41;buf[21]=0x41;
000034  2041              MOVS     r0,#0x41
000036  f88d0014          STRB     r0,[sp,#0x14]
00003a  f88d0015          STRB     r0,[sp,#0x15]
;;;706          comSendBuf(COM4, buf, 22);	
00003e  2216              MOVS     r2,#0x16
000040  4669              MOV      r1,sp
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       comSendBuf
;;;707    		}
000048  e065              B        |L20.278|
                  |L20.74|
;;;708    		else if(num==2)		//设置为双频
00004a  2c02              CMP      r4,#2
00004c  d11f              BNE      |L20.142|
;;;709    		{
;;;710    			uint8_t buf[22];
;;;711    			buf[0]=0x42;
00004e  2042              MOVS     r0,#0x42
000050  f88d0000          STRB     r0,[sp,#0]
;;;712    			buf[1]=0x0A;
000054  200a              MOVS     r0,#0xa
000056  f88d0001          STRB     r0,[sp,#1]
;;;713    			buf[2]=0x0A;
00005a  f88d0002          STRB     r0,[sp,#2]
;;;714    			buf[3]=0x00;
00005e  2000              MOVS     r0,#0
000060  f88d0003          STRB     r0,[sp,#3]
;;;715    			memset(buf+4,0x00,14);
000064  210e              MOVS     r1,#0xe
000066  a801              ADD      r0,sp,#4
000068  f7fffffe          BL       __aeabi_memclr4
;;;716    			buf[18]=0x02;buf[19]=0x00;
00006c  2002              MOVS     r0,#2
00006e  f88d0012          STRB     r0,[sp,#0x12]
000072  2000              MOVS     r0,#0
000074  f88d0013          STRB     r0,[sp,#0x13]
;;;717    	    buf[20]=0x41;buf[21]=0x41;
000078  2041              MOVS     r0,#0x41
00007a  f88d0014          STRB     r0,[sp,#0x14]
00007e  f88d0015          STRB     r0,[sp,#0x15]
;;;718          comSendBuf(COM4, buf, 22);
000082  2216              MOVS     r2,#0x16
000084  4669              MOV      r1,sp
000086  2003              MOVS     r0,#3
000088  f7fffffe          BL       comSendBuf
;;;719    		}
00008c  e043              B        |L20.278|
                  |L20.142|
;;;720    		else if(num==3)		//设置为三频
00008e  2c03              CMP      r4,#3
000090  d11f              BNE      |L20.210|
;;;721    		{
;;;722    			uint8_t buf[22];
;;;723    			buf[0]=0x42;
000092  2042              MOVS     r0,#0x42
000094  f88d0000          STRB     r0,[sp,#0]
;;;724    			buf[1]=0x0A;
000098  200a              MOVS     r0,#0xa
00009a  f88d0001          STRB     r0,[sp,#1]
;;;725    			buf[2]=0x0A;
00009e  f88d0002          STRB     r0,[sp,#2]
;;;726    			buf[3]=0x00;
0000a2  2000              MOVS     r0,#0
0000a4  f88d0003          STRB     r0,[sp,#3]
;;;727    			memset(buf+4,0x00,14);
0000a8  210e              MOVS     r1,#0xe
0000aa  a801              ADD      r0,sp,#4
0000ac  f7fffffe          BL       __aeabi_memclr4
;;;728    			buf[18]=0x03;buf[19]=0x00;
0000b0  2003              MOVS     r0,#3
0000b2  f88d0012          STRB     r0,[sp,#0x12]
0000b6  2000              MOVS     r0,#0
0000b8  f88d0013          STRB     r0,[sp,#0x13]
;;;729    	    buf[20]=0x41;buf[21]=0x41;
0000bc  2041              MOVS     r0,#0x41
0000be  f88d0014          STRB     r0,[sp,#0x14]
0000c2  f88d0015          STRB     r0,[sp,#0x15]
;;;730          comSendBuf(COM4, buf, 22);
0000c6  2216              MOVS     r2,#0x16
0000c8  4669              MOV      r1,sp
0000ca  2003              MOVS     r0,#3
0000cc  f7fffffe          BL       comSendBuf
;;;731    		}
0000d0  e021              B        |L20.278|
                  |L20.210|
;;;732    		else if(num==4)		//设置为AM
0000d2  2c04              CMP      r4,#4
0000d4  d11f              BNE      |L20.278|
;;;733    		{
;;;734    			uint8_t buf[22];
;;;735    			buf[0]=0x42;
0000d6  2042              MOVS     r0,#0x42
0000d8  f88d0000          STRB     r0,[sp,#0]
;;;736    			buf[1]=0x0A;
0000dc  200a              MOVS     r0,#0xa
0000de  f88d0001          STRB     r0,[sp,#1]
;;;737    			buf[2]=0x0A;
0000e2  f88d0002          STRB     r0,[sp,#2]
;;;738    			buf[3]=0x00;
0000e6  2000              MOVS     r0,#0
0000e8  f88d0003          STRB     r0,[sp,#3]
;;;739    			memset(buf+4,0x00,14);
0000ec  210e              MOVS     r1,#0xe
0000ee  a801              ADD      r0,sp,#4
0000f0  f7fffffe          BL       __aeabi_memclr4
;;;740    			buf[18]=0x04;buf[19]=0x00;
0000f4  2004              MOVS     r0,#4
0000f6  f88d0012          STRB     r0,[sp,#0x12]
0000fa  2000              MOVS     r0,#0
0000fc  f88d0013          STRB     r0,[sp,#0x13]
;;;741    	    buf[20]=0x41;buf[21]=0x41;
000100  2041              MOVS     r0,#0x41
000102  f88d0014          STRB     r0,[sp,#0x14]
000106  f88d0015          STRB     r0,[sp,#0x15]
;;;742          comSendBuf(COM4, buf, 22);
00010a  2216              MOVS     r2,#0x16
00010c  4669              MOV      r1,sp
00010e  2003              MOVS     r0,#3
000110  f7fffffe          BL       comSendBuf
;;;743    		}
000114  bf00              NOP      
                  |L20.278|
;;;744      Trans_printf(" 设置工作模式%d命令已下发 \n",num);		
000116  4621              MOV      r1,r4
000118  a002              ADR      r0,|L20.292|
00011a  f7fffffe          BL       Trans_printf
;;;745    }
00011e  b006              ADD      sp,sp,#0x18
000120  bd10              POP      {r4,pc}
;;;746    
                          ENDP

000122  0000              DCW      0x0000
                  |L20.292|
000124  20c9e8d6          DCB      " ",201,232,214,195,185,164,215,247,196,163,202,189,"%d",195
000128  c3b9a4d7
00012c  f7c4a3ca
000130  bd2564c3
000134  fcc1eed2          DCB      252,193,238,210,209,207,194,183,162," \n",0
000138  d1cfc2b7
00013c  a2200a00

                          AREA ||i.Gt_Set_Power||, CODE, READONLY, ALIGN=2

                  Gt_Set_Power PROC
;;;677    /* 设置功率 */
;;;678    void Gt_Set_Power(GT2000_t Set_Power)
000000  b40f              PUSH     {r0-r3}
;;;679    {	
000002  b500              PUSH     {lr}
000004  b087              SUB      sp,sp,#0x1c
;;;680    			uint8_t buf1[22];
;;;681    			buf1[0]=0x42;
000006  2042              MOVS     r0,#0x42
000008  f88d0004          STRB     r0,[sp,#4]
;;;682    			buf1[1]=0x0A;
00000c  200a              MOVS     r0,#0xa
00000e  f88d0005          STRB     r0,[sp,#5]
;;;683    			buf1[2]=0x09;
000012  2009              MOVS     r0,#9
000014  f88d0006          STRB     r0,[sp,#6]
;;;684    			buf1[3]=0x00;
000018  2000              MOVS     r0,#0
00001a  f88d0007          STRB     r0,[sp,#7]
;;;685    			memset(buf1+4,0x00,12);
00001e  9002              STR      r0,[sp,#8]
000020  9003              STR      r0,[sp,#0xc]
000022  9004              STR      r0,[sp,#0x10]
;;;686    			memcpy(buf1+16,Set_Power.Frequency_power,2); //在Task_Upper_Computer.c中赋值。低位在前
000024  f8bd0062          LDRH     r0,[sp,#0x62]
000028  f8ad0014          STRH     r0,[sp,#0x14]
;;;687          memset(buf1+18,0x00,2);
00002c  2000              MOVS     r0,#0
00002e  f8ad0016          STRH     r0,[sp,#0x16]
;;;688    	    buf1[20]=0x41;buf1[21]=0x41;
000032  2041              MOVS     r0,#0x41
000034  f88d0018          STRB     r0,[sp,#0x18]
000038  f88d0019          STRB     r0,[sp,#0x19]
;;;689          comSendBuf(COM4, buf1, 22);
00003c  2216              MOVS     r2,#0x16
00003e  a901              ADD      r1,sp,#4
000040  2003              MOVS     r0,#3
000042  f7fffffe          BL       comSendBuf
;;;690    	    Trans_printf(" 设置功率命令已下发Set_Power.Frequency_power= %x %x \n",buf1[16],buf1[17]);
000046  f89d2015          LDRB     r2,[sp,#0x15]
00004a  f89d1014          LDRB     r1,[sp,#0x14]
00004e  a003              ADR      r0,|L21.92|
000050  f7fffffe          BL       Trans_printf
;;;691    }
000054  b007              ADD      sp,sp,#0x1c
000056  f85dfb14          LDR      pc,[sp],#0x14
;;;692    
                          ENDP

00005a  0000              DCW      0x0000
                  |L21.92|
00005c  20c9e8d6          DCB      " ",201,232,214,195,185,166,194,202,195,252,193,238,210,209
000060  c3b9a6c2
000064  cac3fcc1
000068  eed2d1  
00006b  cfc2b7a2          DCB      207,194,183,162,"Set_Power.Frequency_power= %x %x \n",0
00006f  5365745f
000073  506f7765
000077  722e4672
00007b  65717565
00007f  6e63795f
000083  706f7765
000087  723d2025
00008b  78202578
00008f  200a00  
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.Power_Range||, CODE, READONLY, ALIGN=1

                  Power_Range PROC
;;;1232   /*PC下发的数据转换为功率值 [100~250],对应【0~1950W】,1*13*/
;;;1233   void Power_Range(GT2000_t *Value,uint8_t *Data)
000000  b510              PUSH     {r4,lr}
;;;1234   {
000002  460a              MOV      r2,r1
;;;1235   	uint8_t i;
;;;1236   	for(i=0;i<3;i++)
000004  2100              MOVS     r1,#0
000006  e049              B        |L22.156|
                  |L22.8|
;;;1237   	{
;;;1238   		if(Data[i]<200)
000008  5c53              LDRB     r3,[r2,r1]
00000a  2bc8              CMP      r3,#0xc8
00000c  da1b              BGE      |L22.70|
;;;1239   		{
;;;1240   			if(i==0)
00000e  bbd9              CBNZ     r1,|L22.136|
;;;1241   			{   //新发射机采用以太网通讯，低位在前
;;;1242   				Value->Frequency_power[1]=((((Data[i]-100)*13)&0xff00)>>8);   //取功率的高位字节
000010  5c53              LDRB     r3,[r2,r1]
000012  3b64              SUBS     r3,r3,#0x64
000014  eb030483          ADD      r4,r3,r3,LSL #2
000018  eb0403c3          ADD      r3,r4,r3,LSL #3
00001c  f3c32407          UBFX     r4,r3,#8,#8
000020  2343              MOVS     r3,#0x43
000022  541c              STRB     r4,[r3,r0]
;;;1243   				Value->Frequency_power[0]=(((Data[i]-100)*13)&0xff);   //取功率的低位字节
000024  5c53              LDRB     r3,[r2,r1]
000026  3b64              SUBS     r3,r3,#0x64
000028  eb030483          ADD      r4,r3,r3,LSL #2
00002c  eb0403c3          ADD      r3,r4,r3,LSL #3
000030  f8803042          STRB     r3,[r0,#0x42]
;;;1244   				Value->Now_all_power=((Value->Frequency_power[1]<<8)|Value->Frequency_power[0]);  //十六进制总功率
000034  f8904042          LDRB     r4,[r0,#0x42]
000038  2343              MOVS     r3,#0x43
00003a  5c1b              LDRB     r3,[r3,r0]
00003c  ea442303          ORR      r3,r4,r3,LSL #8
000040  f8a03044          STRH     r3,[r0,#0x44]
000044  e028              B        |L22.152|
                  |L22.70|
;;;1245   			}
;;;1246   		}
;;;1247   		
;;;1248   		else if(Data[i]>=200&&Data[i]<250)
000046  5c53              LDRB     r3,[r2,r1]
000048  2bc8              CMP      r3,#0xc8
00004a  db1e              BLT      |L22.138|
00004c  5c53              LDRB     r3,[r2,r1]
00004e  2bfa              CMP      r3,#0xfa
000050  da1b              BGE      |L22.138|
;;;1249   		{
;;;1250   			if(i==0)
000052  b9c9              CBNZ     r1,|L22.136|
;;;1251   			{    //新发射机采用以太网通讯，低位在前
;;;1252   				Value->Frequency_power[1]=((((Data[i]-100)*13)&0xff00)>>8);   //取功率的高位字节
000054  5c53              LDRB     r3,[r2,r1]
000056  3b64              SUBS     r3,r3,#0x64
000058  eb030483          ADD      r4,r3,r3,LSL #2
00005c  eb0403c3          ADD      r3,r4,r3,LSL #3
000060  f3c32407          UBFX     r4,r3,#8,#8
000064  2343              MOVS     r3,#0x43
000066  541c              STRB     r4,[r3,r0]
;;;1253   				Value->Frequency_power[0]=(((Data[i]-100)*13)&0xff);   //取功率的低位字节
000068  5c53              LDRB     r3,[r2,r1]
00006a  3b64              SUBS     r3,r3,#0x64
00006c  eb030483          ADD      r4,r3,r3,LSL #2
000070  eb0403c3          ADD      r3,r4,r3,LSL #3
000074  f8803042          STRB     r3,[r0,#0x42]
;;;1254   				Value->Now_all_power=((Value->Frequency_power[1]<<8)|Value->Frequency_power[0]);  //十六进制总功率
000078  f8904042          LDRB     r4,[r0,#0x42]
00007c  2343              MOVS     r3,#0x43
00007e  5c1b              LDRB     r3,[r3,r0]
000080  ea442303          ORR      r3,r4,r3,LSL #8
000084  f8a03044          STRH     r3,[r0,#0x44]
                  |L22.136|
000088  e006              B        |L22.152|
                  |L22.138|
;;;1255   			}
;;;1256   		}
;;;1257   		
;;;1258   		else		//参数错误
;;;1259   		{
;;;1260   				if(i==0)
00008a  b929              CBNZ     r1,|L22.152|
;;;1261   			{
;;;1262   				Value->Frequency_power[0]=0;   //
00008c  2300              MOVS     r3,#0
00008e  f8803042          STRB     r3,[r0,#0x42]
;;;1263   				Value->Frequency_power[1]=0;   //
000092  2400              MOVS     r4,#0
000094  2343              MOVS     r3,#0x43
000096  541c              STRB     r4,[r3,r0]
                  |L22.152|
000098  1c4b              ADDS     r3,r1,#1              ;1236
00009a  b2d9              UXTB     r1,r3                 ;1236
                  |L22.156|
00009c  2903              CMP      r1,#3                 ;1236
00009e  dbb3              BLT      |L22.8|
;;;1264   			}
;;;1265   		}
;;;1266   	}
;;;1267   }
0000a0  bd10              POP      {r4,pc}
;;;1268   
                          ENDP


                          AREA ||i.Range_Power||, CODE, READONLY, ALIGN=2

                  Range_Power PROC
;;;1269   /* 功率转化为系统幅度值 */
;;;1270   void Range_Power(GT2000_t *Value)
000000  f8b01044          LDRH     r1,[r0,#0x44]
;;;1271   {
;;;1272   	System.power[0]=(Value->Now_all_power/13); 
000004  220d              MOVS     r2,#0xd
000006  fb91f1f2          SDIV     r1,r1,r2
00000a  4a01              LDR      r2,|L23.16|
00000c  76d1              STRB     r1,[r2,#0x1b]
;;;1273   	/* GT2000新机器只显示一个功率。 */	
;;;1274   }
00000e  4770              BX       lr
;;;1275   
                          ENDP

                  |L23.16|
                          DCD      System

                          AREA ||i.check_sum||, CODE, READONLY, ALIGN=1

                  check_sum PROC
;;;792    
;;;793    uint8_t check_sum(uint8_t *buf,uint16_t len)		//求校验和
000000  b510              PUSH     {r4,lr}
;;;794    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;795    	uint16_t sum=0;
000006  2100              MOVS     r1,#0
;;;796    		for (uint16_t i=0;i<len;i++)
000008  2000              MOVS     r0,#0
00000a  e004              B        |L24.22|
                  |L24.12|
;;;797    	{
;;;798         sum+=buf[i];//将每个数相加
00000c  5c14              LDRB     r4,[r2,r0]
00000e  440c              ADD      r4,r4,r1
000010  b2a1              UXTH     r1,r4
000012  1c44              ADDS     r4,r0,#1              ;796
000014  b2a0              UXTH     r0,r4                 ;796
                  |L24.22|
000016  4298              CMP      r0,r3                 ;796
000018  dbf8              BLT      |L24.12|
;;;799    	}
;;;800         if(sum>0xff)
00001a  29ff              CMP      r1,#0xff
00001c  dd03              BLE      |L24.38|
;;;801         {
;;;802            sum=~sum;
00001e  43c8              MVNS     r0,r1
000020  b281              UXTH     r1,r0
;;;803                      
;;;804            sum+=1;
000022  1c48              ADDS     r0,r1,#1
000024  b281              UXTH     r1,r0
                  |L24.38|
;;;805     
;;;806         }
;;;807    		return (sum&0xff); 
000026  b2c8              UXTB     r0,r1
;;;808    }
000028  bd10              POP      {r4,pc}
;;;809    
                          ENDP


                          AREA ||i.power_add||, CODE, READONLY, ALIGN=1

                  power_add PROC
;;;1276   //功率微调 +65
;;;1277   void power_add(uint8_t *data)
000000  7802              LDRB     r2,[r0,#0]
;;;1278   {
;;;1279   	uint16_t All_power;
;;;1280   	All_power=((data[1]<<8)|data[0]);
000002  7843              LDRB     r3,[r0,#1]
000004  ea422103          ORR      r1,r2,r3,LSL #8
;;;1281   	All_power=All_power+0x41;
000008  f1010241          ADD      r2,r1,#0x41
00000c  b291              UXTH     r1,r2
;;;1282   	data[1]=((All_power&0xff00)>>8);
00000e  0a0a              LSRS     r2,r1,#8
000010  7042              STRB     r2,[r0,#1]
;;;1283   	data[0]=(All_power&0xff);
000012  7001              STRB     r1,[r0,#0]
;;;1284   }
000014  4770              BX       lr
;;;1285   
                          ENDP


                          AREA ||i.power_sub||, CODE, READONLY, ALIGN=1

                  power_sub PROC
;;;1287   //功率微减 -65
;;;1288   void power_sub(uint8_t *data)
000000  7842              LDRB     r2,[r0,#1]
;;;1289   {
;;;1290   	uint16_t All_power;
;;;1291   	All_power=((data[0]<<8)|data[1]);
000002  7803              LDRB     r3,[r0,#0]
000004  ea422103          ORR      r1,r2,r3,LSL #8
;;;1292   	All_power=All_power-0x41;
000008  f1a10241          SUB      r2,r1,#0x41
00000c  b291              UXTH     r1,r2
;;;1293   	data[0]=((All_power&0xff00)>>8);
00000e  0a0a              LSRS     r2,r1,#8
000010  7002              STRB     r2,[r0,#0]
;;;1294   	data[1]=(All_power&0xff);
000012  7041              STRB     r1,[r0,#1]
;;;1295   }
000014  4770              BX       lr
;;;1296   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  GT2000_Rx
                          %        107
                  GT2000_Tx
                          %        107
                  Emission_Tx
                          %        160
                  Emission_Rx
                          %        160

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  20b4a5b7          DCB      " ",180,165,183,162,"GT2000_Alarm_Stop,",207,200,185,216
000004  a2475432
000008  3030305f
00000c  416c6172
000010  6d5f5374
000014  6f702ccf
000018  c8b9d8  
00001b  b7a2c9e4          DCB      183,162,201,228,163,172,"5S",186,243,212,217,185,216,187
00001f  a3ac3553
000023  baf3d4d9
000027  b9d8bb  
00002a  faa3acd6          DCB      250,163,172,214,195,206,187,"Alarm.emission=1 ",0
00002e  c3cebb41
000032  6c61726d
000036  2e656d69
00003a  7373696f
00003e  6e3d3120
000042  00      
000043  00                DCB      0
000044  20c6b5b6          DCB      " ",198,181,182,206,178,187,210,187,214,194,163,161,185,216
000048  ceb2bbd2
00004c  bbd6c2a3
000050  a1b9d8  
000053  bbfa5379          DCB      187,250,"System.fbv_c== %d  System.Frequency_band_value="
000057  7374656d
00005b  2e666276
00005f  5f633d3d
000063  20256420
000067  20537973
00006b  74656d2e
00006f  46726571
000073  75656e63
000077  795f6261
00007b  6e645f76
00007f  616c7565
000083  3d      
000084  3d202564          DCB      "= %d \n ",0
000088  200a2000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\MT2000_protocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_MT2000_protocol_c_f0594e28____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_MT2000_protocol_c_f0594e28____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_MT2000_protocol_c_f0594e28____REVSH|
#line 128
|__asm___17_MT2000_protocol_c_f0594e28____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
