; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\my_protocol.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\my_protocol.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\my_protocol.crf ..\..\User\my_protocol.c]
                          THUMB

                          AREA ||i.Band_scan||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Band_scan PROC
;;;1591   /*------------------------------------扫频函数1----------------------------------------*/
;;;1592   void Band_scan(uint8_t freq_begin, uint8_t freq_end, uint8_t index_dec)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1593   {
000004  b08e              SUB      sp,sp,#0x38
000006  4607              MOV      r7,r0
000008  4615              MOV      r5,r2
;;;1594       int ret = 0,Flag=0,n;
00000a  f04f0900          MOV      r9,#0
00000e  2000              MOVS     r0,#0
000010  900d              STR      r0,[sp,#0x34]
;;;1595   	uint8_t protect_count = 0;		//保护机器
000012  4682              MOV      r10,r0
;;;1596   	char freq_scan_to_Tx[4];    //保存十六进制扫频下发的频率数据
;;;1597   	unsigned char test_to_Tx[2] = {0};
000014  900a              STR      r0,[sp,#0x28]
;;;1598   	
;;;1599   	uint8_t		temp_begin = freq_begin;
000016  9709              STR      r7,[sp,#0x24]
;;;1600   	uint8_t		temp_point = freq_begin;
000018  463c              MOV      r4,r7
;;;1601   	uint8_t		temp_end = freq_end;
00001a  f8dd803c          LDR      r8,[sp,#0x3c]
;;;1602   	
;;;1603   	uint8_t		next_point_int = 0;
00001e  4683              MOV      r11,r0
;;;1604   	uint8_t		next_point_dec = 0;
000020  9008              STR      r0,[sp,#0x20]
;;;1605   	uint16_t	next_point = 0;
000022  2600              MOVS     r6,#0
;;;1606   	
;;;1607       float		temp_Forward_power = 0.0;
000024  9007              STR      r0,[sp,#0x1c]
;;;1608       float		temp_Reverse_power = 0.0;
000026  9006              STR      r0,[sp,#0x18]
;;;1609       float		temp_Standing_wave_ratio = 0.0;
000028  9005              STR      r0,[sp,#0x14]
;;;1610   		float		temp_swr = 0.0;
00002a  9004              STR      r0,[sp,#0x10]
;;;1611   	
;;;1612       for(temp_point=temp_begin; temp_point<=temp_end; temp_point++)   //从freq_begin开扫 freq_end结束
00002c  9f09              LDR      r7,[sp,#0x24]
00002e  463c              MOV      r4,r7
000030  e26e              B        |L1.1296|
                  |L1.50|
;;;1613       {
;;;1614   		if( re_scan_flag == 0x01 )		//存在有效的扫描数据，扫描按钮已被激活
000032  48f8              LDR      r0,|L1.1044|
000034  7800              LDRB     r0,[r0,#0]  ; re_scan_flag
000036  2801              CMP      r0,#1
000038  d123              BNE      |L1.130|
;;;1615   		{
;;;1616   			temp_swr = SWR_array[(temp_point-3)*10+index_dec];
00003a  1ee0              SUBS     r0,r4,#3
00003c  eb000080          ADD      r0,r0,r0,LSL #2
000040  eb050040          ADD      r0,r5,r0,LSL #1
000044  49f4              LDR      r1,|L1.1048|
000046  f8510020          LDR      r0,[r1,r0,LSL #2]
00004a  9004              STR      r0,[sp,#0x10]
;;;1617   			if( (temp_swr < 1.0) || (temp_swr >= 2.0) )	//unvalid data  无效数据
00004c  9804              LDR      r0,[sp,#0x10]
00004e  f7fffffe          BL       __aeabi_f2d
000052  2200              MOVS     r2,#0
000054  4bf1              LDR      r3,|L1.1052|
000056  e9cd0102          STRD     r0,r1,[sp,#8]
00005a  f7fffffe          BL       __aeabi_cdcmple
00005e  d310              BCC      |L1.130|
000060  9804              LDR      r0,[sp,#0x10]
000062  f7fffffe          BL       __aeabi_f2d
000066  2200              MOVS     r2,#0
000068  f04f4380          MOV      r3,#0x40000000
00006c  e9cd0102          STRD     r0,r1,[sp,#8]
000070  f7fffffe          BL       __aeabi_cdrcmple
000074  d905              BLS      |L1.130|
;;;1618   			{
;;;1619   				//scan
;;;1620   			}
;;;1621   			else	if( temp_point == temp_end )		//end  如果扫频起点和终点一样，退出
000076  4544              CMP      r4,r8
000078  d102              BNE      |L1.128|
                  |L1.122|
;;;1622   			{
;;;1623   				return;
;;;1624   			}
;;;1625   			else	//the data is well  数据很好，跳过这一个频点
;;;1626   			{
;;;1627   				continue;
;;;1628   			}
;;;1629   		}
;;;1630   		
;;;1631           if( (System.cancel_sweeping == 0x01) || (System.stop == 0x01) )		//取消扫频
;;;1632           {
;;;1633               GT2000_Stop();  //停止发射
;;;1634   	
;;;1635               System.sweep = 0;
;;;1636               System.stop = 0;
;;;1637               System.achieve_add_sub = 0;
;;;1638               System.modify_power = 0;
;;;1639               System.cancel_add_sub = 0;
;;;1640               System_Status_Clean();
;;;1641               System.status = SYSTEM_STANDBY;
;;;1642   				
;;;1643   						Scan_Breakpoint_Save(temp_point, index_dec);  //保存扫频断点，退出扫频
;;;1644               return;
;;;1645           }
;;;1646           else	if( System.Voltage < 40.0 )  //如果是关机状态，退出扫频
;;;1647           {
;;;1648               System.open = 0x00;
;;;1649               return;
;;;1650           }
;;;1651   		
;;;1652   		System.status = SYSTEM_SCAN;  //扫频状态
;;;1653       System.sweep = 0x01;  //扫频标志位	1:正在扫频，2:扫频完成，更新status标志位，并将sweep清零		最后，保存在flash
;;;1654   		
;;;1655   		//channel method都在MT2000_Cmd_Channel()固定写死了的，不需要再设置
;;;1656   		GT2000_Tx.Gt2000_mode = 1;		//固频
;;;1657   		GT2000_Tx.Frequency_power[1] = 0x04 ;		//北京机器扫频功率值1040W
;;;1658       GT2000_Tx.Frequency_power[0] = 0x10 ;		
;;;1659   //		MT2000_Tx.method = 'F';		//FM
;;;1660   		
;;;1661   		n=(temp_point*1000)+(index_dec*100);  //扫频频率扩大1000倍
;;;1662   		sprintf(freq_scan_to_Tx, "%X", n); //把十进制数字转为16进制大写字符串
;;;1663   	  StrToHex(test_to_Tx,(uint8_t*)freq_scan_to_Tx, 2); //remarks : 将字符串转化为16进制数	保存在test_to_Tx				
;;;1664   		GT2000_Tx.Gt2000_freq1[0] = test_to_Tx[1];
;;;1665   		GT2000_Tx.Gt2000_freq1[1] = test_to_Tx[0];
;;;1666   		GT2000_Tx.Gt2000_freq1[2] = 0x00;					//小数点保持不变
;;;1667   		GT2000_Tx.Gt2000_freq1[3] = 0x00;
;;;1668   				Trans_printf(" scan1现在的扫频频点: temp_point= %d index_dec= %d \n",temp_point,index_dec);
;;;1669   				Trans_printf(" 扫频下发的scan1_freq_Tx: %02X %02X ",GT2000_Tx.Gt2000_freq1[0],GT2000_Tx.Gt2000_freq1[1]);
;;;1670   
;;;1671   		temp_Forward_power = 0.0;
;;;1672   		temp_Reverse_power = 0.0;
;;;1673   		temp_Standing_wave_ratio = 0.0;
;;;1674   
;;;1675   		next_point = Scan_Breakpoint_Read(); //在FLASH中读取扫频断点
;;;1676   		next_point_int = next_point/10;
;;;1677   		next_point_dec = next_point%10;
;;;1678   		
;;;1679   		//有效数据，下一个频点的整数部分大于当前频点，小数部分相同，则扫下一个频点
;;;1680   		if( (next_point!=0x0000) && (next_point!=0xFFFF) && (next_point_int>temp_point) && (next_point_dec==index_dec) )
;;;1681   		{
;;;1682   			continue;
;;;1683   		}
;;;1684   
;;;1685           Flag=GT2000_Emit();
;;;1686   		    Trans_printf(" 1_T0_GT2000_Emit() Flag= %d \n",Flag);
;;;1687   		    vTaskDelay(6000);
;;;1688   				Gt_Inquire_All();		//查询一次
;;;1689   				Flag=GT2000_Wait_Ack(MT2000_CMD_CHANNEL);
;;;1690   		
;;;1691   	    	if(Flag==MT2000_ACK_ALARM)
;;;1692   				{		
;;;1693   					temp_Forward_power = 0.0;
;;;1694   					temp_Reverse_power = 0.0;
;;;1695   					temp_Standing_wave_ratio = SCAN_ALARM_SWR_THRESHOLD;
;;;1696   					Scan_Breakpoint_Save(temp_point+1, index_dec);	
;;;1697   					continue;
;;;1698   				}
;;;1699           if( System.emission == 0x01 )	//发射成功
;;;1700           {
;;;1701               App_printf("Sweep//发射成功\r\n");
;;;1702   
;;;1703               temp_Forward_power = System.Forward_Power;
;;;1704               temp_Reverse_power = System.Reverse_Power;
;;;1705               temp_Standing_wave_ratio = System.Standing_wave_ratio;
;;;1706   
;;;1707               //无应答报警、无功率报警
;;;1708               if( (Alarm.no_respond==0x01) || (Alarm.no_power==0x01) )					//退出扫频
;;;1709               {
;;;1710                   System.cancel_sweeping = 0x01;		//退出扫频
;;;1711                   GT2000_Stop();
;;;1712   
;;;1713   								System.status = SYSTEM_ALARM;
;;;1714                   System.sweep = 0;
;;;1715                   System.stop = 0;
;;;1716   				
;;;1717   								Scan_Breakpoint_Save(temp_point, index_dec);
;;;1718                   return;
;;;1719               }
;;;1720   							if( Alarm.emission == 0x01 )										//退出扫频，并在下次扫频时，退出当前频率
;;;1721   						{
;;;1722   							System.cancel_sweeping = 0x01;		//退出扫频
;;;1723   							GT2000_Stop();
;;;1724   							System.status = SYSTEM_ALARM;
;;;1725   							System.sweep = 0;
;;;1726   							System.stop = 0;
;;;1727   							
;;;1728   							temp_Forward_power = 0.0;
;;;1729   							temp_Reverse_power = 0.0;
;;;1730   							temp_Standing_wave_ratio = SCAN_ALARM_SWR_THRESHOLD;
;;;1731   							
;;;1732   							Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;1733   							return;
;;;1734   						}
;;;1735   							 else	if( (Alarm.swr_alarm == 0x01) || (Alarm.over_Electric==0x01) )		//跳过当前频点
;;;1736   						{
;;;1737   							//先记录下当前电压电流驻波比，后停止
;;;1738   			//				MT2000_Cmd_Inquire();			//查询
;;;1739   			//				ret = MT2000_Wait_Ack(MT2000_CMD_INQUIRE);
;;;1740   
;;;1741   							Alarm.swr_alarm = 0x00;
;;;1742   							Alarm.over_Electric = 0x00;
;;;1743   							
;;;1744   							temp_Forward_power = System.Forward_Power;
;;;1745   							temp_Reverse_power = System.Reverse_Power;
;;;1746   							temp_Standing_wave_ratio = System.Standing_wave_ratio;
;;;1747   							
;;;1748   							GT2000_Stop();
;;;1749   
;;;1750   							//改回扫频状态，继续扫下一个频率
;;;1751   							System.status = SYSTEM_SCAN;
;;;1752   							System.sweep = 0x01;
;;;1753   							System.stop = 0;
;;;1754   							
;;;1755   							Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;1756   						}
;;;1757   					}
;;;1758   				
;;;1759           else							//发射失败
;;;1760           {
;;;1761               App_printf("Sweep//发射失败\r\n");
;;;1762   
;;;1763   						System.status = SYSTEM_ALARM;
;;;1764   						System.sweep = 0;
;;;1765   						System.stop = 0;
;;;1766   			
;;;1767               temp_Forward_power = 0.0;
;;;1768               temp_Reverse_power = 0.0;
;;;1769               temp_Standing_wave_ratio = SCAN_ALARM_SWR_THRESHOLD;
;;;1770   
;;;1771   						if( Alarm.emission == 0x01 )									//退出扫频，并在下次扫频时，退出当前频率
;;;1772   						{
;;;1773   							System.cancel_sweeping = 0x01;		//退出扫频
;;;1774   							GT2000_Stop();
;;;1775   							System.status = SYSTEM_ALARM;
;;;1776   							System.sweep = 0;
;;;1777   							System.stop = 0;
;;;1778   							
;;;1779   							Scan_Breakpoint_Save(temp_point+1, index_dec);							//调谐时报警，先停止，跳过当前频点
;;;1780   						}				
;;;1781   						else
;;;1782   						{
;;;1783   							Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;1784   						}
;;;1785           }
;;;1786   
;;;1787   				vTaskDelay(4000);
;;;1788   				Gt_Inquire_All();		//查询一次
;;;1789   				ret=GT2000_Wait_Ack(MT2000_CMD_CHANNEL);
;;;1790   				if(ret==MT2000_ACK_OK)
;;;1791   				{
;;;1792   					temp_Forward_power = System.Forward_Power;
;;;1793   					temp_Reverse_power = System.Reverse_Power;
;;;1794   					temp_Standing_wave_ratio = System.Standing_wave_ratio;
;;;1795   				}
;;;1796   				vTaskDelay(2000);
;;;1797           //数组下标为	( 频率(MHz)-5 )*10
;;;1798           //				5.0MHz => Forward_Power_array[0]	5.1MHz => Forward_Power_array[1]
;;;1799           //				6.0MHz => Forward_Power_array[10]	6.1MHz => Forward_Power_array[11]
;;;1800           //	index_dec:0~9	i:freq_end-freq_begin = 26.0-5.0 = 21
;;;1801           Forward_Power_array[(temp_point-3)*10+index_dec] = temp_Forward_power/10.0;			//232，需要存进flash，返回扫频结果
;;;1802           Reverse_Power_array[(temp_point-3)*10+index_dec] = temp_Reverse_power;					//不需要存，也不需要返回，所以不除
;;;1803           SWR_array[(temp_point-3)*10+index_dec] = temp_Standing_wave_ratio;	//232，需要存进flash，返回扫频结果
;;;1804   				
;;;1805   				Gt_RF_Close();		
;;;1806   				vTaskDelay(500);   //新发射机响应较慢
;;;1807   				ret=MT2000_ACK_OK;	//默认成功，待多次测试
;;;1808   
;;;1809           if( ret == MT2000_ACK_OK )							//停止成功
;;;1810           {
;;;1811               System.stop = 0x00;
;;;1812               App_printf("Sweep//发射停止\r\n");
;;;1813   
;;;1814               if( (System.cancel_sweeping == 0x01) || (System.stop == 0x01)  )
;;;1815               {
;;;1816                   System.sweep = 0;
;;;1817                   System.stop = 0;
;;;1818                   System.achieve_add_sub = 0;
;;;1819                   System.modify_power = 0;
;;;1820                   System.cancel_add_sub = 0;
;;;1821                   System_Status_Clean();
;;;1822                   System.status = SYSTEM_STANDBY;
;;;1823   
;;;1824   								Scan_Breakpoint_Save(temp_point, index_dec);
;;;1825                   return;
;;;1826               }
;;;1827               else
;;;1828               {
;;;1829                   System_Status_Clean();
;;;1830               }
;;;1831   
;;;1832               System.status = SYSTEM_SCAN;	//正在扫频
;;;1833               System.sweep = 0x01;
;;;1834   
;;;1835               if(temp_point<temp_end)
;;;1836               {
;;;1837                   for(protect_count=0; protect_count<50; protect_count++)
;;;1838                   {
;;;1839                       if( (System.cancel_sweeping == 0x01) || (System.stop == 0x01)  )		//取消扫频
;;;1840                       {
;;;1841   												Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;1842                           return;
;;;1843                       }
;;;1844                       else
;;;1845                       {
;;;1846                           vTaskDelay(100);						//保护机器
;;;1847                       }
;;;1848                   }
;;;1849               }
;;;1850   						else
;;;1851   						{
;;;1852   							Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;1853   							return;
;;;1854   						}
;;;1855           }
;;;1856           else     //不成功，返回停止失败
;;;1857           {
;;;1858               Alarm.no_respond_locate = 5;
;;;1859               App_printf("Sweep stop 5 no respond.\r\n");
;;;1860               return;
;;;1861           }
;;;1862       }
;;;1863       return;
;;;1864   }
00007a  b011              ADD      sp,sp,#0x44
00007c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.128|
000080  e244              B        |L1.1292|
                  |L1.130|
000082  48e7              LDR      r0,|L1.1056|
000084  7bc0              LDRB     r0,[r0,#0xf]          ;1631  ; System
000086  2801              CMP      r0,#1                 ;1631
000088  d003              BEQ      |L1.146|
00008a  48e5              LDR      r0,|L1.1056|
00008c  7d40              LDRB     r0,[r0,#0x15]         ;1631  ; System
00008e  2801              CMP      r0,#1                 ;1631
000090  d112              BNE      |L1.184|
                  |L1.146|
000092  f7fffffe          BL       GT2000_Stop
000096  2000              MOVS     r0,#0                 ;1635
000098  49e1              LDR      r1,|L1.1056|
00009a  7388              STRB     r0,[r1,#0xe]          ;1635
00009c  7548              STRB     r0,[r1,#0x15]         ;1636
00009e  7448              STRB     r0,[r1,#0x11]         ;1637
0000a0  7488              STRB     r0,[r1,#0x12]         ;1638
0000a2  74c8              STRB     r0,[r1,#0x13]         ;1639
0000a4  f7fffffe          BL       System_Status_Clean
0000a8  2002              MOVS     r0,#2                 ;1641
0000aa  49dd              LDR      r1,|L1.1056|
0000ac  72c8              STRB     r0,[r1,#0xb]          ;1641
0000ae  4629              MOV      r1,r5                 ;1643
0000b0  4620              MOV      r0,r4                 ;1643
0000b2  f7fffffe          BL       Scan_Breakpoint_Save
0000b6  e7e0              B        |L1.122|
                  |L1.184|
0000b8  49d9              LDR      r1,|L1.1056|
0000ba  6f48              LDR      r0,[r1,#0x74]         ;1646  ; System
0000bc  f7fffffe          BL       __aeabi_f2d
0000c0  2200              MOVS     r2,#0                 ;1646
0000c2  4bd8              LDR      r3,|L1.1060|
0000c4  e9cd0102          STRD     r0,r1,[sp,#8]         ;1646
0000c8  f7fffffe          BL       __aeabi_cdcmple
0000cc  d203              BCS      |L1.214|
0000ce  2000              MOVS     r0,#0                 ;1648
0000d0  49d3              LDR      r1,|L1.1056|
0000d2  7308              STRB     r0,[r1,#0xc]          ;1648
0000d4  e7d1              B        |L1.122|
                  |L1.214|
0000d6  2005              MOVS     r0,#5                 ;1652
0000d8  49d1              LDR      r1,|L1.1056|
0000da  72c8              STRB     r0,[r1,#0xb]          ;1652
0000dc  2001              MOVS     r0,#1                 ;1653
0000de  7388              STRB     r0,[r1,#0xe]          ;1653
0000e0  49d1              LDR      r1,|L1.1064|
0000e2  7148              STRB     r0,[r1,#5]            ;1656
0000e4  2104              MOVS     r1,#4                 ;1657
0000e6  48d0              LDR      r0,|L1.1064|
0000e8  f8801043          STRB     r1,[r0,#0x43]         ;1657
0000ec  2010              MOVS     r0,#0x10              ;1658
0000ee  49ce              LDR      r1,|L1.1064|
0000f0  f8810042          STRB     r0,[r1,#0x42]         ;1658
0000f4  f44f707a          MOV      r0,#0x3e8             ;1661
0000f8  4360              MULS     r0,r4,r0              ;1661
0000fa  eb0501c5          ADD      r1,r5,r5,LSL #3       ;1661
0000fe  eb011105          ADD      r1,r1,r5,LSL #4       ;1661
000102  eb000081          ADD      r0,r0,r1,LSL #2       ;1661
000106  900c              STR      r0,[sp,#0x30]         ;1661
000108  a1c8              ADR      r1,|L1.1068|
00010a  a80b              ADD      r0,sp,#0x2c           ;1662
00010c  9a0c              LDR      r2,[sp,#0x30]         ;1662
00010e  f7fffffe          BL       __2sprintf
000112  2202              MOVS     r2,#2                 ;1663
000114  a90b              ADD      r1,sp,#0x2c           ;1663
000116  a80a              ADD      r0,sp,#0x28           ;1663
000118  f7fffffe          BL       StrToHex
00011c  f89d0029          LDRB     r0,[sp,#0x29]         ;1664
000120  49c1              LDR      r1,|L1.1064|
000122  f8810024          STRB     r0,[r1,#0x24]         ;1664
000126  f89d1028          LDRB     r1,[sp,#0x28]         ;1665
00012a  48bf              LDR      r0,|L1.1064|
00012c  f8801025          STRB     r1,[r0,#0x25]         ;1665
000130  2100              MOVS     r1,#0                 ;1666
000132  f8801026          STRB     r1,[r0,#0x26]         ;1666
000136  f8801027          STRB     r1,[r0,#0x27]         ;1667
00013a  462a              MOV      r2,r5                 ;1668
00013c  4621              MOV      r1,r4                 ;1668
00013e  a0bc              ADR      r0,|L1.1072|
000140  f7fffffe          BL       Trans_printf
000144  48b8              LDR      r0,|L1.1064|
000146  f8902025          LDRB     r2,[r0,#0x25]         ;1669
00014a  f8901024          LDRB     r1,[r0,#0x24]         ;1669  ; GT2000_Tx
00014e  a0c6              ADR      r0,|L1.1128|
000150  f7fffffe          BL       Trans_printf
000154  2000              MOVS     r0,#0                 ;1671
000156  9007              STR      r0,[sp,#0x1c]         ;1671
000158  9006              STR      r0,[sp,#0x18]         ;1672
00015a  9005              STR      r0,[sp,#0x14]         ;1673
00015c  f7fffffe          BL       Scan_Breakpoint_Read
000160  4606              MOV      r6,r0                 ;1675
000162  210a              MOVS     r1,#0xa               ;1676
000164  fb96f0f1          SDIV     r0,r6,r1              ;1676
000168  f0000bff          AND      r11,r0,#0xff          ;1676
00016c  fb96f2f1          SDIV     r2,r6,r1              ;1677
000170  fb016012          MLS      r0,r1,r2,r6           ;1677
000174  b2c0              UXTB     r0,r0                 ;1677
000176  9008              STR      r0,[sp,#0x20]         ;1677
000178  b14e              CBZ      r6,|L1.398|
00017a  f64f70ff          MOV      r0,#0xffff            ;1680
00017e  4286              CMP      r6,r0                 ;1680
000180  d005              BEQ      |L1.398|
000182  45a3              CMP      r11,r4                ;1680
000184  dd03              BLE      |L1.398|
000186  9808              LDR      r0,[sp,#0x20]         ;1680
000188  42a8              CMP      r0,r5                 ;1680
00018a  d100              BNE      |L1.398|
00018c  e1be              B        |L1.1292|
                  |L1.398|
00018e  f7fffffe          BL       GT2000_Emit
000192  900d              STR      r0,[sp,#0x34]         ;1685
000194  a0be              ADR      r0,|L1.1168|
000196  990d              LDR      r1,[sp,#0x34]         ;1686
000198  f7fffffe          BL       Trans_printf
00019c  f2417070          MOV      r0,#0x1770            ;1687
0001a0  f7fffffe          BL       vTaskDelay
0001a4  f7fffffe          BL       Gt_Inquire_All
0001a8  2043              MOVS     r0,#0x43              ;1689
0001aa  f7fffffe          BL       GT2000_Wait_Ack
0001ae  900d              STR      r0,[sp,#0x34]         ;1689
0001b0  980d              LDR      r0,[sp,#0x34]         ;1691
0001b2  1c80              ADDS     r0,r0,#2              ;1691
0001b4  b958              CBNZ     r0,|L1.462|
0001b6  2000              MOVS     r0,#0                 ;1693
0001b8  9007              STR      r0,[sp,#0x1c]         ;1693
0001ba  9006              STR      r0,[sp,#0x18]         ;1694
0001bc  f04f4081          MOV      r0,#0x40800000        ;1695
0001c0  9005              STR      r0,[sp,#0x14]         ;1695
0001c2  1c61              ADDS     r1,r4,#1              ;1696
0001c4  b2c8              UXTB     r0,r1                 ;1696
0001c6  4629              MOV      r1,r5                 ;1696
0001c8  f7fffffe          BL       Scan_Breakpoint_Save
0001cc  e19e              B        |L1.1292|
                  |L1.462|
0001ce  4894              LDR      r0,|L1.1056|
0001d0  7d80              LDRB     r0,[r0,#0x16]         ;1699  ; System
0001d2  2801              CMP      r0,#1                 ;1699
0001d4  d160              BNE      |L1.664|
0001d6  a0b6              ADR      r0,|L1.1200|
0001d8  f7fffffe          BL       App_printf
0001dc  4890              LDR      r0,|L1.1056|
0001de  6ec0              LDR      r0,[r0,#0x6c]         ;1703  ; System
0001e0  9007              STR      r0,[sp,#0x1c]         ;1703
0001e2  488f              LDR      r0,|L1.1056|
0001e4  6f00              LDR      r0,[r0,#0x70]         ;1704  ; System
0001e6  9006              STR      r0,[sp,#0x18]         ;1704
0001e8  488d              LDR      r0,|L1.1056|
0001ea  6fc0              LDR      r0,[r0,#0x7c]         ;1705  ; System
0001ec  9005              STR      r0,[sp,#0x14]         ;1705
0001ee  48b5              LDR      r0,|L1.1220|
0001f0  78c0              LDRB     r0,[r0,#3]            ;1708  ; Alarm
0001f2  2801              CMP      r0,#1                 ;1708
0001f4  d003              BEQ      |L1.510|
0001f6  48b3              LDR      r0,|L1.1220|
0001f8  7cc0              LDRB     r0,[r0,#0x13]         ;1708  ; Alarm
0001fa  2801              CMP      r0,#1                 ;1708
0001fc  d10f              BNE      |L1.542|
                  |L1.510|
0001fe  2001              MOVS     r0,#1                 ;1710
000200  4987              LDR      r1,|L1.1056|
000202  73c8              STRB     r0,[r1,#0xf]          ;1710
000204  f7fffffe          BL       GT2000_Stop
000208  2011              MOVS     r0,#0x11              ;1713
00020a  4985              LDR      r1,|L1.1056|
00020c  72c8              STRB     r0,[r1,#0xb]          ;1713
00020e  2000              MOVS     r0,#0                 ;1714
000210  7388              STRB     r0,[r1,#0xe]          ;1714
000212  7548              STRB     r0,[r1,#0x15]         ;1715
000214  4629              MOV      r1,r5                 ;1717
000216  4620              MOV      r0,r4                 ;1717
000218  f7fffffe          BL       Scan_Breakpoint_Save
00021c  e72d              B        |L1.122|
                  |L1.542|
00021e  48a9              LDR      r0,|L1.1220|
000220  7840              LDRB     r0,[r0,#1]            ;1720  ; Alarm
000222  2801              CMP      r0,#1                 ;1720
000224  d114              BNE      |L1.592|
000226  497e              LDR      r1,|L1.1056|
000228  73c8              STRB     r0,[r1,#0xf]          ;1722
00022a  f7fffffe          BL       GT2000_Stop
00022e  2011              MOVS     r0,#0x11              ;1724
000230  497b              LDR      r1,|L1.1056|
000232  72c8              STRB     r0,[r1,#0xb]          ;1724
000234  2000              MOVS     r0,#0                 ;1725
000236  7388              STRB     r0,[r1,#0xe]          ;1725
000238  7548              STRB     r0,[r1,#0x15]         ;1726
00023a  9007              STR      r0,[sp,#0x1c]         ;1728
00023c  9006              STR      r0,[sp,#0x18]         ;1729
00023e  f04f4081          MOV      r0,#0x40800000        ;1730
000242  9005              STR      r0,[sp,#0x14]         ;1730
000244  1c61              ADDS     r1,r4,#1              ;1732
000246  b2c8              UXTB     r0,r1                 ;1732
000248  4629              MOV      r1,r5                 ;1732
00024a  f7fffffe          BL       Scan_Breakpoint_Save
00024e  e714              B        |L1.122|
                  |L1.592|
000250  489c              LDR      r0,|L1.1220|
000252  7c40              LDRB     r0,[r0,#0x11]         ;1735  ; Alarm
000254  2801              CMP      r0,#1                 ;1735
000256  d003              BEQ      |L1.608|
000258  489a              LDR      r0,|L1.1220|
00025a  7ac0              LDRB     r0,[r0,#0xb]          ;1735  ; Alarm
00025c  2801              CMP      r0,#1                 ;1735
00025e  d141              BNE      |L1.740|
                  |L1.608|
000260  2000              MOVS     r0,#0                 ;1741
000262  4998              LDR      r1,|L1.1220|
000264  7448              STRB     r0,[r1,#0x11]         ;1741
000266  72c8              STRB     r0,[r1,#0xb]          ;1742
000268  486d              LDR      r0,|L1.1056|
00026a  6ec0              LDR      r0,[r0,#0x6c]         ;1744  ; System
00026c  9007              STR      r0,[sp,#0x1c]         ;1744
00026e  486c              LDR      r0,|L1.1056|
000270  6f00              LDR      r0,[r0,#0x70]         ;1745  ; System
000272  9006              STR      r0,[sp,#0x18]         ;1745
000274  486a              LDR      r0,|L1.1056|
000276  6fc0              LDR      r0,[r0,#0x7c]         ;1746  ; System
000278  9005              STR      r0,[sp,#0x14]         ;1746
00027a  f7fffffe          BL       GT2000_Stop
00027e  2005              MOVS     r0,#5                 ;1751
000280  4967              LDR      r1,|L1.1056|
000282  72c8              STRB     r0,[r1,#0xb]          ;1751
000284  2001              MOVS     r0,#1                 ;1752
000286  7388              STRB     r0,[r1,#0xe]          ;1752
000288  2000              MOVS     r0,#0                 ;1753
00028a  7548              STRB     r0,[r1,#0x15]         ;1753
00028c  1c61              ADDS     r1,r4,#1              ;1755
00028e  b2c8              UXTB     r0,r1                 ;1755
000290  4629              MOV      r1,r5                 ;1755
000292  f7fffffe          BL       Scan_Breakpoint_Save
000296  e025              B        |L1.740|
                  |L1.664|
000298  a08b              ADR      r0,|L1.1224|
00029a  f7fffffe          BL       App_printf
00029e  2011              MOVS     r0,#0x11              ;1763
0002a0  495f              LDR      r1,|L1.1056|
0002a2  72c8              STRB     r0,[r1,#0xb]          ;1763
0002a4  2000              MOVS     r0,#0                 ;1764
0002a6  7388              STRB     r0,[r1,#0xe]          ;1764
0002a8  7548              STRB     r0,[r1,#0x15]         ;1765
0002aa  9007              STR      r0,[sp,#0x1c]         ;1767
0002ac  9006              STR      r0,[sp,#0x18]         ;1768
0002ae  f04f4081          MOV      r0,#0x40800000        ;1769
0002b2  9005              STR      r0,[sp,#0x14]         ;1769
0002b4  4883              LDR      r0,|L1.1220|
0002b6  7840              LDRB     r0,[r0,#1]            ;1771  ; Alarm
0002b8  2801              CMP      r0,#1                 ;1771
0002ba  d10e              BNE      |L1.730|
0002bc  73c8              STRB     r0,[r1,#0xf]          ;1773
0002be  f7fffffe          BL       GT2000_Stop
0002c2  2011              MOVS     r0,#0x11              ;1775
0002c4  4956              LDR      r1,|L1.1056|
0002c6  72c8              STRB     r0,[r1,#0xb]          ;1775
0002c8  2000              MOVS     r0,#0                 ;1776
0002ca  7388              STRB     r0,[r1,#0xe]          ;1776
0002cc  7548              STRB     r0,[r1,#0x15]         ;1777
0002ce  1c61              ADDS     r1,r4,#1              ;1779
0002d0  b2c8              UXTB     r0,r1                 ;1779
0002d2  4629              MOV      r1,r5                 ;1779
0002d4  f7fffffe          BL       Scan_Breakpoint_Save
0002d8  e004              B        |L1.740|
                  |L1.730|
0002da  1c61              ADDS     r1,r4,#1              ;1783
0002dc  b2c8              UXTB     r0,r1                 ;1783
0002de  4629              MOV      r1,r5                 ;1783
0002e0  f7fffffe          BL       Scan_Breakpoint_Save
                  |L1.740|
0002e4  f44f607a          MOV      r0,#0xfa0             ;1787
0002e8  f7fffffe          BL       vTaskDelay
0002ec  f7fffffe          BL       Gt_Inquire_All
0002f0  2043              MOVS     r0,#0x43              ;1789
0002f2  f7fffffe          BL       GT2000_Wait_Ack
0002f6  4681              MOV      r9,r0                 ;1789
0002f8  f1b90f01          CMP      r9,#1                 ;1790
0002fc  d108              BNE      |L1.784|
0002fe  4848              LDR      r0,|L1.1056|
000300  6ec0              LDR      r0,[r0,#0x6c]         ;1792  ; System
000302  9007              STR      r0,[sp,#0x1c]         ;1792
000304  4846              LDR      r0,|L1.1056|
000306  6f00              LDR      r0,[r0,#0x70]         ;1793  ; System
000308  9006              STR      r0,[sp,#0x18]         ;1793
00030a  4845              LDR      r0,|L1.1056|
00030c  6fc0              LDR      r0,[r0,#0x7c]         ;1794  ; System
00030e  9005              STR      r0,[sp,#0x14]         ;1794
                  |L1.784|
000310  f44f60fa          MOV      r0,#0x7d0             ;1796
000314  f7fffffe          BL       vTaskDelay
000318  9807              LDR      r0,[sp,#0x1c]         ;1801
00031a  f7fffffe          BL       __aeabi_f2d
00031e  2200              MOVS     r2,#0                 ;1801
000320  4b6e              LDR      r3,|L1.1244|
000322  e9cd0100          STRD     r0,r1,[sp,#0]         ;1801
000326  f7fffffe          BL       __aeabi_ddiv
00032a  e9cd0102          STRD     r0,r1,[sp,#8]         ;1801
00032e  f7fffffe          BL       __aeabi_d2f
000332  1ee1              SUBS     r1,r4,#3              ;1801
000334  eb010181          ADD      r1,r1,r1,LSL #2       ;1801
000338  eb050141          ADD      r1,r5,r1,LSL #1       ;1801
00033c  4a68              LDR      r2,|L1.1248|
00033e  f8420021          STR      r0,[r2,r1,LSL #2]     ;1801
000342  1ee1              SUBS     r1,r4,#3              ;1802
000344  eb010181          ADD      r1,r1,r1,LSL #2       ;1802
000348  eb050141          ADD      r1,r5,r1,LSL #1       ;1802
00034c  4a65              LDR      r2,|L1.1252|
00034e  9806              LDR      r0,[sp,#0x18]         ;1802
000350  f8420021          STR      r0,[r2,r1,LSL #2]     ;1802
000354  1ee1              SUBS     r1,r4,#3              ;1803
000356  eb010181          ADD      r1,r1,r1,LSL #2       ;1803
00035a  eb050141          ADD      r1,r5,r1,LSL #1       ;1803
00035e  4a2e              LDR      r2,|L1.1048|
000360  9805              LDR      r0,[sp,#0x14]         ;1803
000362  f8420021          STR      r0,[r2,r1,LSL #2]     ;1803
000366  f7fffffe          BL       Gt_RF_Close
00036a  f44f70fa          MOV      r0,#0x1f4             ;1806
00036e  f7fffffe          BL       vTaskDelay
000372  f04f0901          MOV      r9,#1                 ;1807
000376  f1b90f00          CMP      r9,#0                 ;1809
00037a  d049              BEQ      |L1.1040|
00037c  2000              MOVS     r0,#0                 ;1811
00037e  4928              LDR      r1,|L1.1056|
000380  7548              STRB     r0,[r1,#0x15]         ;1811
000382  a059              ADR      r0,|L1.1256|
000384  f7fffffe          BL       App_printf
000388  4825              LDR      r0,|L1.1056|
00038a  7bc0              LDRB     r0,[r0,#0xf]          ;1814  ; System
00038c  2801              CMP      r0,#1                 ;1814
00038e  d003              BEQ      |L1.920|
000390  4823              LDR      r0,|L1.1056|
000392  7d40              LDRB     r0,[r0,#0x15]         ;1814  ; System
000394  2801              CMP      r0,#1                 ;1814
000396  d110              BNE      |L1.954|
                  |L1.920|
000398  2000              MOVS     r0,#0                 ;1816
00039a  4921              LDR      r1,|L1.1056|
00039c  7388              STRB     r0,[r1,#0xe]          ;1816
00039e  7548              STRB     r0,[r1,#0x15]         ;1817
0003a0  7448              STRB     r0,[r1,#0x11]         ;1818
0003a2  7488              STRB     r0,[r1,#0x12]         ;1819
0003a4  74c8              STRB     r0,[r1,#0x13]         ;1820
0003a6  f7fffffe          BL       System_Status_Clean
0003aa  2002              MOVS     r0,#2                 ;1822
0003ac  491c              LDR      r1,|L1.1056|
0003ae  72c8              STRB     r0,[r1,#0xb]          ;1822
0003b0  4629              MOV      r1,r5                 ;1824
0003b2  4620              MOV      r0,r4                 ;1824
0003b4  f7fffffe          BL       Scan_Breakpoint_Save
0003b8  e65f              B        |L1.122|
                  |L1.954|
0003ba  f7fffffe          BL       System_Status_Clean
0003be  2005              MOVS     r0,#5                 ;1832
0003c0  4917              LDR      r1,|L1.1056|
0003c2  72c8              STRB     r0,[r1,#0xb]          ;1832
0003c4  2001              MOVS     r0,#1                 ;1833
0003c6  7388              STRB     r0,[r1,#0xe]          ;1833
0003c8  4544              CMP      r4,r8                 ;1835
0003ca  da1b              BGE      |L1.1028|
0003cc  f04f0a00          MOV      r10,#0                ;1837
0003d0  e014              B        |L1.1020|
                  |L1.978|
0003d2  4813              LDR      r0,|L1.1056|
0003d4  7bc0              LDRB     r0,[r0,#0xf]          ;1839  ; System
0003d6  2801              CMP      r0,#1                 ;1839
0003d8  d003              BEQ      |L1.994|
0003da  4811              LDR      r0,|L1.1056|
0003dc  7d40              LDRB     r0,[r0,#0x15]         ;1839  ; System
0003de  2801              CMP      r0,#1                 ;1839
0003e0  d105              BNE      |L1.1006|
                  |L1.994|
0003e2  1c61              ADDS     r1,r4,#1              ;1841
0003e4  b2c8              UXTB     r0,r1                 ;1841
0003e6  4629              MOV      r1,r5                 ;1841
0003e8  f7fffffe          BL       Scan_Breakpoint_Save
0003ec  e645              B        |L1.122|
                  |L1.1006|
0003ee  2064              MOVS     r0,#0x64              ;1846
0003f0  f7fffffe          BL       vTaskDelay
0003f4  f10a0001          ADD      r0,r10,#1             ;1837
0003f8  f0000aff          AND      r10,r0,#0xff          ;1837
                  |L1.1020|
0003fc  f1ba0f32          CMP      r10,#0x32             ;1837
000400  dbe7              BLT      |L1.978|
000402  e082              B        |L1.1290|
                  |L1.1028|
000404  1c61              ADDS     r1,r4,#1              ;1852
000406  b2c8              UXTB     r0,r1                 ;1852
000408  4629              MOV      r1,r5                 ;1852
00040a  f7fffffe          BL       Scan_Breakpoint_Save
00040e  e634              B        |L1.122|
                  |L1.1040|
000410  e074              B        |L1.1276|
000412  0000              DCW      0x0000
                  |L1.1044|
                          DCD      re_scan_flag
                  |L1.1048|
                          DCD      SWR_array
                  |L1.1052|
                          DCD      0x3ff00000
                  |L1.1056|
                          DCD      System
                  |L1.1060|
                          DCD      0x40440000
                  |L1.1064|
                          DCD      GT2000_Tx
                  |L1.1068|
00042c  255800            DCB      "%X",0
00042f  00                DCB      0
                  |L1.1072|
000430  20736361          DCB      " scan1",207,214,212,218,181,196,201,168,198,181,198,181
000434  6e31cfd6
000438  d4dab5c4
00043c  c9a8c6b5
000440  c6b5    
000442  b5e33a20          DCB      181,227,": temp_point= %d index_dec= %d \n",0
000446  74656d70
00044a  5f706f69
00044e  6e743d20
000452  25642069
000456  6e646578
00045a  5f646563
00045e  3d202564
000462  200a00  
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  20c9a8c6          DCB      " ",201,168,198,181,207,194,183,162,181,196,"scan1_freq_"
00046c  b5cfc2b7
000470  a2b5c473
000474  63616e31
000478  5f667265
00047c  715f    
00047e  54783a20          DCB      "Tx: %02X %02X ",0
000482  25303258
000486  20253032
00048a  582000  
00048d  00                DCB      0
00048e  00                DCB      0
00048f  00                DCB      0
                  |L1.1168|
000490  20315f54          DCB      " 1_T0_GT2000_Emit() Flag= %d \n",0
000494  305f4754
000498  32303030
00049c  5f456d69
0004a0  74282920
0004a4  466c6167
0004a8  3d202564
0004ac  200a00  
0004af  00                DCB      0
                  |L1.1200|
0004b0  53776565          DCB      "Sweep//",183,162,201,228,179,201,185,166,"\r\n",0
0004b4  702f2fb7
0004b8  a2c9e4b3
0004bc  c9b9a60d
0004c0  0a00    
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L1.1220|
                          DCD      Alarm
                  |L1.1224|
0004c8  53776565          DCB      "Sweep//",183,162,201,228,202,167,176,220,"\r\n",0
0004cc  702f2fb7
0004d0  a2c9e4ca
0004d4  a7b0dc0d
0004d8  0a00    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L1.1244|
                          DCD      0x40240000
                  |L1.1248|
                          DCD      Forward_Power_array
                  |L1.1252|
                          DCD      Reverse_Power_array
                  |L1.1256|
0004e8  53776565          DCB      "Sweep//",183,162,201,228,205,163,214,185,"\r\n",0
0004ec  702f2fb7
0004f0  a2c9e4cd
0004f4  a3d6b90d
0004f8  0a00    
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L1.1276|
0004fc  2005              MOVS     r0,#5                 ;1858
0004fe  4907              LDR      r1,|L1.1308|
000500  7188              STRB     r0,[r1,#6]            ;1858
000502  a007              ADR      r0,|L1.1312|
000504  f7fffffe          BL       App_printf
000508  e5b7              B        |L1.122|
                  |L1.1290|
00050a  bf00              NOP                            ;1627
                  |L1.1292|
00050c  1c60              ADDS     r0,r4,#1              ;1612
00050e  b2c4              UXTB     r4,r0                 ;1612
                  |L1.1296|
000510  4544              CMP      r4,r8                 ;1612
000512  f77fad8e          BLE      |L1.50|
000516  bf00              NOP                            ;1863
000518  e5af              B        |L1.122|
;;;1865   
                          ENDP

00051a  0000              DCW      0x0000
                  |L1.1308|
                          DCD      Alarm
                  |L1.1312|
000520  53776565          DCB      "Sweep stop 5 no respond.\r\n",0
000524  70207374
000528  6f702035
00052c  206e6f20
000530  72657370
000534  6f6e642e
000538  0d0a00  
00053b  00                DCB      0

                          AREA ||i.CAN_data_analyze||, CODE, READONLY, ALIGN=2

                  CAN_data_analyze PROC
;;;337    ***************************************************/
;;;338    uint8_t CAN_data_analyze(uint8_t *p_func_code, Buffer_t *p_PC_data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;339    {
000002  f5ad7d05          SUB      sp,sp,#0x214
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
;;;340        uint8_t i = 0;
00000a  2500              MOVS     r5,#0
;;;341        uint8_t err_code;
;;;342        App_printf("\r\n=====================================\r\n");		//进入解析
00000c  a020              ADR      r0,|L2.144|
00000e  f7fffffe          BL       App_printf
;;;343        W5500_data_t W5500_data_buf;
;;;344    
;;;345        err_code = judge_is_valid_can_data(p_PC_data);//判断数据正确性
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       judge_is_valid_can_data
000018  4607              MOV      r7,r0
;;;346        if( err_code == 0x00 )
00001a  b91f              CBNZ     r7,|L2.36|
;;;347            return 0x02;
00001c  2002              MOVS     r0,#2
                  |L2.30|
;;;348    
;;;349    #if	STM32_W5500_EN
;;;350        W5500_data_buf  = Get_CAN_Data(p_PC_data);
;;;351    #else
;;;352    
;;;353    #endif
;;;354    
;;;355        if(W5500_data_buf.eff_sign == 0)
;;;356            return 5;
;;;357    		
;;;358        App_printf("CAN_data_buf.Func_code	= %02X%02X\r\n", W5500_data_buf.Func_code[0],W5500_data_buf.Func_code[1]);
;;;359    	/*提取功能码两位*/
;;;360        p_func_code[0] = W5500_data_buf.Func_code[0];
;;;361        p_func_code[1] = W5500_data_buf.Func_code[1];
;;;362    
;;;363        App_printf(	"CAN_Specific Data	= ");
;;;364        for(i = 0; i<(W5500_data_buf.len-3); i++)
;;;365        {
;;;366            App_printf("%02X ",W5500_data_buf.data_buf[i]);
;;;367        }
;;;368        App_printf("\r\n=====================================\r\n");
;;;369    
;;;370    
;;;371        err_code = Data_Storage(&W5500_data_buf);//传入数据为：长度(有效数据长度，数组第四位)及有效数据,CANid,有效数据标志位
;;;372        return err_code;
;;;373    }
00001e  f50d7d05          ADD      sp,sp,#0x214
000022  bdf0              POP      {r4-r7,pc}
                  |L2.36|
000024  4631              MOV      r1,r6                 ;350
000026  a801              ADD      r0,sp,#4              ;350
000028  f7fffffe          BL       Get_CAN_Data
00002c  f44f7284          MOV      r2,#0x108             ;350
000030  a901              ADD      r1,sp,#4              ;350
000032  a843              ADD      r0,sp,#0x10c          ;350
000034  f7fffffe          BL       __aeabi_memcpy4
000038  f89d010c          LDRB     r0,[sp,#0x10c]        ;355
00003c  b908              CBNZ     r0,|L2.66|
00003e  2005              MOVS     r0,#5                 ;356
000040  e7ed              B        |L2.30|
                  |L2.66|
000042  a843              ADD      r0,sp,#0x10c          ;358
000044  78c2              LDRB     r2,[r0,#3]            ;358
000046  f89d110e          LDRB     r1,[sp,#0x10e]        ;358
00004a  a01c              ADR      r0,|L2.188|
00004c  f7fffffe          BL       App_printf
000050  f89d010e          LDRB     r0,[sp,#0x10e]        ;360
000054  7020              STRB     r0,[r4,#0]            ;360
000056  a843              ADD      r0,sp,#0x10c          ;361
000058  78c0              LDRB     r0,[r0,#3]            ;361
00005a  7060              STRB     r0,[r4,#1]            ;361
00005c  a020              ADR      r0,|L2.224|
00005e  f7fffffe          BL       App_printf
000062  2500              MOVS     r5,#0                 ;364
000064  e006              B        |L2.116|
                  |L2.102|
000066  a844              ADD      r0,sp,#0x110          ;366
000068  5d41              LDRB     r1,[r0,r5]            ;366
00006a  a023              ADR      r0,|L2.248|
00006c  f7fffffe          BL       App_printf
000070  1c68              ADDS     r0,r5,#1              ;364
000072  b2c5              UXTB     r5,r0                 ;364
                  |L2.116|
000074  f89d0210          LDRB     r0,[sp,#0x210]        ;364
000078  1ec0              SUBS     r0,r0,#3              ;364
00007a  42a8              CMP      r0,r5                 ;364
00007c  dcf3              BGT      |L2.102|
00007e  a004              ADR      r0,|L2.144|
000080  f7fffffe          BL       App_printf
000084  a843              ADD      r0,sp,#0x10c          ;371
000086  f7fffffe          BL       Data_Storage
00008a  4607              MOV      r7,r0                 ;371
00008c  4638              MOV      r0,r7                 ;372
00008e  e7c6              B        |L2.30|
;;;374    
                          ENDP

                  |L2.144|
000090  0d0a3d3d          DCB      "\r\n=====================================\r\n",0
000094  3d3d3d3d
000098  3d3d3d3d
00009c  3d3d3d3d
0000a0  3d3d3d3d
0000a4  3d3d3d3d
0000a8  3d3d3d3d
0000ac  3d3d3d3d
0000b0  3d3d3d3d
0000b4  3d3d3d0d
0000b8  0a00    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L2.188|
0000bc  43414e5f          DCB      "CAN_data_buf.Func_code\t= %02X%02X\r\n",0
0000c0  64617461
0000c4  5f627566
0000c8  2e46756e
0000cc  635f636f
0000d0  6465093d
0000d4  20253032
0000d8  58253032
0000dc  580d0a00
                  |L2.224|
0000e0  43414e5f          DCB      "CAN_Specific Data\t= ",0
0000e4  53706563
0000e8  69666963
0000ec  20446174
0000f0  61093d20
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L2.248|
0000f8  25303258          DCB      "%02X ",0
0000fc  2000    
0000fe  00                DCB      0
0000ff  00                DCB      0

                          AREA ||i.Data_Assemble||, CODE, READONLY, ALIGN=2

                  Data_Assemble PROC
;;;731    ********************************************************/
;;;732    uint8_t Data_Assemble(uint8_t *Func_code, uint8_t *p_data, uint8_t Can_ID, uint8_t len, Buffer_t *Buffer)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;733    {
000004  4607              MOV      r7,r0
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
00000a  461d              MOV      r5,r3
00000c  9c0c              LDR      r4,[sp,#0x30]
;;;734        uint16_t CRC_Back;
;;;735        uint8_t Start_Data[7] = {0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
00000e  a138              ADR      r1,|L3.240|
000010  c903              LDM      r1,{r0,r1}
000012  e9cd0101          STRD     r0,r1,[sp,#4]
;;;736        uint8_t End_Data[4] = {0x00, 0x00, 0x03, 0x04};
000016  a038              ADR      r0,|L3.248|
000018  6800              LDR      r0,[r0,#0]
00001a  9000              STR      r0,[sp,#0]
;;;737    
;;;738        //补零
;;;739        uint8_t temp = 0x00;
00001c  f04f0800          MOV      r8,#0
;;;740        uint8_t temp_len = 0x00;
000020  46c1              MOV      r9,r8
;;;741    
;;;742        if( Work_paraBack.Transmitte_id[0] != 0x00 )			//已经初始化，但是MCU和CAN没有接匹配的，错乱了，就按收到的CAN_ID来返回，防止掉线
000022  4836              LDR      r0,|L3.252|
000024  7800              LDRB     r0,[r0,#0]  ; Work_paraBack
000026  b118              CBZ      r0,|L3.48|
;;;743        {
;;;744            Start_Data[2] = Work_paraBack.Transmitte_id[0];		//写入发射机ID		--20181031 Luonus
000028  4834              LDR      r0,|L3.252|
00002a  7800              LDRB     r0,[r0,#0]  ; Work_paraBack
00002c  f88d0006          STRB     r0,[sp,#6]
                  |L3.48|
;;;745        }
;;;746    
;;;747        if( Start_Data[2] == 0x00 )	
000030  f89d0006          LDRB     r0,[sp,#6]
000034  b918              CBNZ     r0,|L3.62|
;;;748        {
;;;749            Start_Data[2] = System.CAN_ID[0];				//写入发射机ID		--20181102 Luonus
000036  4832              LDR      r0,|L3.256|
000038  7800              LDRB     r0,[r0,#0]  ; System
00003a  f88d0006          STRB     r0,[sp,#6]
                  |L3.62|
;;;750        }
;;;751    
;;;752        Start_Data[3] = len + 3;			//数据长度
00003e  1ce8              ADDS     r0,r5,#3
000040  b2c0              UXTB     r0,r0
000042  f88d0007          STRB     r0,[sp,#7]
;;;753        Start_Data[4] = Func_code[0];		//功能码
000046  7838              LDRB     r0,[r7,#0]
000048  f88d0008          STRB     r0,[sp,#8]
;;;754        Start_Data[5] = Func_code[1];		//功能码
00004c  7878              LDRB     r0,[r7,#1]
00004e  f88d0009          STRB     r0,[sp,#9]
;;;755    
;;;756    #if	ADD_CAN_LEN
;;;757        Start_Data[6] = (CEIL_DIV(Start_Data[3]+8-12,8))*4 + Start_Data[3] + 8;
000052  f89d1007          LDRB     r1,[sp,#7]
000056  1cc8              ADDS     r0,r1,#3
000058  17c1              ASRS     r1,r0,#31
00005a  eb007151          ADD      r1,r0,r1,LSR #29
00005e  10c9              ASRS     r1,r1,#3
000060  f89d2007          LDRB     r2,[sp,#7]
000064  eb020181          ADD      r1,r2,r1,LSL #2
000068  3108              ADDS     r1,r1,#8
00006a  b2c9              UXTB     r1,r1
00006c  f88d100a          STRB     r1,[sp,#0xa]
;;;758    #endif
;;;759    
;;;760        memcpy(Buffer->data, Start_Data,7);
000070  9801              LDR      r0,[sp,#4]
000072  6020              STR      r0,[r4,#0]
000074  f8bd0008          LDRH     r0,[sp,#8]
000078  80a0              STRH     r0,[r4,#4]
00007a  f89d000a          LDRB     r0,[sp,#0xa]
00007e  71a0              STRB     r0,[r4,#6]
;;;761        memcpy(Buffer->data+7, p_data, len);
000080  462a              MOV      r2,r5
000082  4651              MOV      r1,r10
000084  1de0              ADDS     r0,r4,#7
000086  f7fffffe          BL       __aeabi_memcpy
;;;762        CRC_Back = CRC16_XMODEM(Buffer->data+4, len+3);
00008a  1ce9              ADDS     r1,r5,#3
00008c  1d20              ADDS     r0,r4,#4
00008e  f7fffffe          BL       CRC16_XMODEM
000092  4606              MOV      r6,r0
;;;763        End_Data[0] = (uint8_t)((CRC_Back >> 8) & 0xff);		//存高八位
000094  0a30              LSRS     r0,r6,#8
000096  f88d0000          STRB     r0,[sp,#0]
;;;764        End_Data[1] = (uint8_t)((CRC_Back >> 0) & 0xff) ;		//低八位
00009a  b2f0              UXTB     r0,r6
00009c  f88d0001          STRB     r0,[sp,#1]
;;;765        memcpy(Buffer->data+len+7, End_Data,4);
0000a0  1960              ADDS     r0,r4,r5
0000a2  9900              LDR      r1,[sp,#0]
0000a4  f8c01007          STR      r1,[r0,#7]
;;;766        Buffer->len = len+11;
0000a8  f105000b          ADD      r0,r5,#0xb
0000ac  f8840100          STRB     r0,[r4,#0x100]
;;;767    
;;;768    #if	1	//不够8位，补零
;;;769        temp = Buffer->len % 8;
0000b0  f8940100          LDRB     r0,[r4,#0x100]
0000b4  17c1              ASRS     r1,r0,#31
0000b6  eb007151          ADD      r1,r0,r1,LSR #29
0000ba  10c9              ASRS     r1,r1,#3
0000bc  eba001c1          SUB      r1,r0,r1,LSL #3
0000c0  f00108ff          AND      r8,r1,#0xff
;;;770    
;;;771        if( temp == 0x00 )
0000c4  f1b80f00          CMP      r8,#0
0000c8  d00e              BEQ      |L3.232|
;;;772        {
;;;773    
;;;774        }
;;;775        else
;;;776        {
;;;777            temp_len = 8-temp;
0000ca  f1c80008          RSB      r0,r8,#8
0000ce  f00009ff          AND      r9,r0,#0xff
;;;778            memset(Buffer->data+Buffer->len, 0, temp_len);
0000d2  f8941100          LDRB     r1,[r4,#0x100]
0000d6  1908              ADDS     r0,r1,r4
0000d8  4649              MOV      r1,r9
0000da  f7fffffe          BL       __aeabi_memclr
;;;779            Buffer->len += temp_len;
0000de  f8940100          LDRB     r0,[r4,#0x100]
0000e2  4448              ADD      r0,r0,r9
0000e4  f8840100          STRB     r0,[r4,#0x100]
                  |L3.232|
;;;780        }
;;;781    #endif
;;;782    
;;;783        return Start_Data[3];
0000e8  f89d0007          LDRB     r0,[sp,#7]
;;;784    }
0000ec  e8bd8ffe          POP      {r1-r11,pc}
;;;785    
                          ENDP

                  |L3.240|
0000f0  050200            DCB      5,2,0
0000f3  00                DCB      0
0000f4  00                DCB      0
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L3.248|
0000f8  00                DCB      0
0000f9  00                DCB      0
0000fa  0304              DCB      3,4
                  |L3.252|
                          DCD      Work_paraBack
                  |L3.256|
                          DCD      System

                          AREA ||i.Data_Storage||, CODE, READONLY, ALIGN=2

                  Data_Storage PROC
;;;461    /* 数据赋值更新 */
;;;462    uint8_t Data_Storage(W5500_data_t *CAN_data_cmp)
000000  b508              PUSH     {r3,lr}
;;;463    {
000002  4601              MOV      r1,r0
;;;464        uint8_t temp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;465    
;;;466        if(CAN_data_cmp->Func_code[0] == 0x01 && CAN_data_cmp->Func_code[1] == 0x01)		//PC下发报警参数阈值
000008  7888              LDRB     r0,[r1,#2]
00000a  2801              CMP      r0,#1
00000c  d124              BNE      |L4.88|
00000e  78c8              LDRB     r0,[r1,#3]
000010  2801              CMP      r0,#1
000012  d121              BNE      |L4.88|
;;;467        {
;;;468    				memcpy(System.CAN_ID, 						CAN_data_cmp->data_buf, 	1);
000014  48f7              LDR      r0,|L4.1012|
000016  790a              LDRB     r2,[r1,#4]
000018  7002              STRB     r2,[r0,#0]
;;;469            memcpy(Alarm_threshold.Transmitte_id, 		CAN_data_cmp->data_buf,     1);
00001a  48f7              LDR      r0,|L4.1016|
00001c  790a              LDRB     r2,[r1,#4]
00001e  f8802026          STRB     r2,[r0,#0x26]
;;;470            memcpy(Alarm_threshold.Low_temp_limit,		CAN_data_cmp->data_buf+1,	4);
000022  4602              MOV      r2,r0
000024  f8d10005          LDR      r0,[r1,#5]
000028  6010              STR      r0,[r2,#0]  ; Alarm_threshold
;;;471            memcpy(Alarm_threshold.Upp_temp_limit,		CAN_data_cmp->data_buf+5,	4);
00002a  f8d10009          LDR      r0,[r1,#9]
00002e  6050              STR      r0,[r2,#4]  ; Alarm_threshold
;;;472            memcpy(Alarm_threshold.Low_humidity_limit,	CAN_data_cmp->data_buf+9,	4);
000030  f8d1000d          LDR      r0,[r1,#0xd]
000034  6090              STR      r0,[r2,#8]  ; Alarm_threshold
;;;473            memcpy(Alarm_threshold.Upp_humidity_limit,	CAN_data_cmp->data_buf+13,	4);
000036  f8d10011          LDR      r0,[r1,#0x11]
00003a  60d0              STR      r0,[r2,#0xc]  ; Alarm_threshold
;;;474            memcpy(Alarm_threshold.Low_45I_limit,		CAN_data_cmp->data_buf+17,	4);
00003c  f8d10015          LDR      r0,[r1,#0x15]
000040  6110              STR      r0,[r2,#0x10]  ; Alarm_threshold
;;;475            memcpy(Alarm_threshold.Upp_45I_limit,		CAN_data_cmp->data_buf+21,	4);
000042  f8d10019          LDR      r0,[r1,#0x19]
000046  6150              STR      r0,[r2,#0x14]  ; Alarm_threshold
;;;476            memcpy(Alarm_threshold.Low_45V_limit,		CAN_data_cmp->data_buf+25,	4);
000048  f8d1001d          LDR      r0,[r1,#0x1d]
00004c  6190              STR      r0,[r2,#0x18]  ; Alarm_threshold
;;;477            memcpy(Alarm_threshold.Upp_45V_limit,		CAN_data_cmp->data_buf+29,	4);
00004e  f8d10021          LDR      r0,[r1,#0x21]
000052  61d0              STR      r0,[r2,#0x1c]  ; Alarm_threshold
;;;478            			  
;;;479            return 1;
000054  2001              MOVS     r0,#1
                  |L4.86|
;;;480        }
;;;481        else if(CAN_data_cmp->Func_code[0] == 0x02 && CAN_data_cmp->Func_code[1] == 0x01)	//PC下发状态查询
;;;482        {
;;;483            if( System.CAN_ID[0] == 0xFF )				//Flash读取CAN_ID错误(修改了flash位置，会一直显示CAN_ID匹配失败，自适应CAN_ID)
;;;484            {
;;;485                System.CAN_ID[0] = CAN_data_cmp->data_buf[0];
;;;486                Work_paraBack.Transmitte_id[0] = CAN_data_cmp->data_buf[0];	//为了不让PC显示掉线，现在的状态该是啥就啥，但是返回的是未初始化
;;;487                return 3;
;;;488            }
;;;489            else	if( System.CAN_ID[0] == 0x00 )		//初始化CAN_ID失败(会一直显示CAN_ID匹配失败，自适应CAN_ID)
;;;490            {
;;;491                System.CAN_ID[0] = CAN_data_cmp->data_buf[0];
;;;492                Work_paraBack.Transmitte_id[0] = CAN_data_cmp->data_buf[0];	//为了不让PC显示掉线，现在的状态该是啥就啥，但是返回的是未初始化
;;;493                return 3;
;;;494            }
;;;495            else
;;;496            {
;;;497                if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;498                {
;;;499                    //时间戳	大小端转换
;;;500                    memcpy(&temp, CAN_data_cmp->data_buf+1, 1);
;;;501                    g_inquire_stamp = temp<<24;
;;;502                    memcpy(&temp, CAN_data_cmp->data_buf+2, 1);
;;;503                    g_inquire_stamp += temp<<16;
;;;504                    memcpy(&temp, CAN_data_cmp->data_buf+3, 1);
;;;505                    g_inquire_stamp += temp<<8;
;;;506                    memcpy(&temp, CAN_data_cmp->data_buf+4, 1);
;;;507                    g_inquire_stamp += temp;
;;;508                    return 1;
;;;509                }
;;;510                else
;;;511                {
;;;512                    Work_paraBack.Transmitte_id[0] = CAN_data_cmp->data_buf[0];	//为了不让PC显示掉线，现在的状态该是啥就啥，但是返回的是未初始化
;;;513                    return 3;
;;;514                }
;;;515            }
;;;516        }
;;;517        else if(CAN_data_cmp->Func_code[0] == 0x03 && CAN_data_cmp->Func_code[1] == 0x01)	//开启发射机
;;;518        {
;;;519            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;520            {
;;;521                PC_Cmd.mode=CAN_data_cmp->data_buf[1];		//工作模式
;;;522                memcpy(PC_Cmd.channel,		CAN_data_cmp->data_buf+2,	3);		//信道	新协议只有一个信道，即存三个，用一个(0x01)
;;;523                memcpy(PC_Cmd.freq,			CAN_data_cmp->data_buf+5,	12);	//频率
;;;524                memcpy(PC_Cmd.power,		CAN_data_cmp->data_buf+17,	3);		//功率等级
;;;525                memcpy(System.time,			CAN_data_cmp->data_buf+20,	6);		//北斗时间
;;;526                return 1;
;;;527            }
;;;528            else
;;;529            {
;;;530                return 3;
;;;531            }
;;;532        }
;;;533        else if(CAN_data_cmp->Func_code[0] == 0x04 && CAN_data_cmp->Func_code[1] == 0x01)	//关闭发射机
;;;534        {
;;;535            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;536            {
;;;537                memcpy(System.time,	CAN_data_cmp->data_buf+1,	6);	//北斗时间
;;;538                return 1;
;;;539            }
;;;540            else
;;;541            {
;;;542                return 3;
;;;543            }
;;;544        }
;;;545        else if(CAN_data_cmp->Func_code[0] == 0x05 && CAN_data_cmp->Func_code[1] == 0x01)	//取消报警
;;;546        {
;;;547            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;548            {
;;;549                memcpy(Disalarm.Disalarm_type, CAN_data_cmp->data_buf+1,2);//解除报警类型
;;;550                return 1;
;;;551            }
;;;552            else
;;;553            {
;;;554                return 3;
;;;555            }
;;;556        }
;;;557        else if(CAN_data_cmp->Func_code[0] == 0x06 && CAN_data_cmp->Func_code[1] == 0x01)	//查询历史报警状态
;;;558        {
;;;559            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;560            {
;;;561                memcpy(System.time,	CAN_data_cmp->data_buf+1,	6);//北斗时间
;;;562                return 1;
;;;563            }
;;;564            else
;;;565            {
;;;566                return 3;
;;;567            }
;;;568        }
;;;569        else if(CAN_data_cmp->Func_code[0] == 0x07 && CAN_data_cmp->Func_code[1] == 0x01)	//发射机上电
;;;570        {
;;;571            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;572            {
;;;573    //            memcpy(Power_on.Retain,CAN_data_cmp->data_buf+1,	1);			//保留
;;;574                memcpy(System.time,	CAN_data_cmp->data_buf+2,	6);		//北斗时间
;;;575                return 1;
;;;576            }
;;;577            else
;;;578            {
;;;579                return 3;
;;;580            }
;;;581        }
;;;582        else if(CAN_data_cmp->Func_code[0] == 0x08 && CAN_data_cmp->Func_code[1] == 0x01)	//发射机断电
;;;583        {
;;;584            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;585            {
;;;586    //            memcpy(Power_off.Retain,CAN_data_cmp->data_buf+1,1);	//保留
;;;587                return 1;
;;;588            }
;;;589            else
;;;590            {
;;;591                return 3;
;;;592            }
;;;593        }
;;;594        else if(CAN_data_cmp->Func_code[0] == 0x09 && CAN_data_cmp->Func_code[1] == 0x01)	//扫描最佳工作频段
;;;595        {
;;;596            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;597            {
;;;598                memcpy(Scan_Frq.state,CAN_data_cmp->data_buf+1,1);		//扫频/查频
;;;599                memcpy(Scan_Frq.Fre_Band,CAN_data_cmp->data_buf+2,8);	//需要查询的频段
;;;600                return 1;
;;;601            }
;;;602            else
;;;603            {
;;;604                return 3;
;;;605            }
;;;606        }
;;;607        else if(CAN_data_cmp->Func_code[0] == 0x0A && CAN_data_cmp->Func_code[1] == 0x01)	//停止扫频
;;;608        {
;;;609            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;610            {
;;;611                memcpy(Sacn_stop.state,CAN_data_cmp->data_buf+1,1);
;;;612                return 1;
;;;613            }
;;;614            else
;;;615            {
;;;616                return 3;
;;;617            }
;;;618        }
;;;619        else if(CAN_data_cmp->Func_code[0] == 0x0B && CAN_data_cmp->Func_code[1] == 0x01)	//增加功率
;;;620        {
;;;621            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;622            {
;;;623                memcpy(Add_Power.Power_UP,CAN_data_cmp->data_buf+1,2);
;;;624                return 1;
;;;625            }
;;;626            else
;;;627            {
;;;628                return 3;
;;;629            }
;;;630        }
;;;631        else if(CAN_data_cmp->Func_code[0] == 0x0C && CAN_data_cmp->Func_code[1] == 0x01)	//减小功率
;;;632        {
;;;633            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;634            {
;;;635                memcpy(Sub_Power.Power_DOWN,CAN_data_cmp->data_buf+1,2);
;;;636                return 1;
;;;637            }
;;;638            else
;;;639            {
;;;640                return 3;
;;;641            }
;;;642        }
;;;643        else if(CAN_data_cmp->Func_code[0] == 0x0D && CAN_data_cmp->Func_code[1] == 0x01)	//运行图
;;;644        {
;;;645            if(CAN_data_cmp->data_buf[0] == System.CAN_ID[0])   //第一个字节表示发射机ID，必须判断与自身是否相同
;;;646            {
;;;647    //            memcpy(Run_Diagram.count,	CAN_data_cmp->data_buf+1,1);
;;;648    					  Run_Diagram.count[0]=CAN_data_cmp->data_buf[1];
;;;649    //            memcpy(Run_Diagram.Continue,CAN_data_cmp->data_buf+2,2);
;;;650    						Run_Diagram.Continue[0]=CAN_data_cmp->data_buf[2];
;;;651    						Run_Diagram.Continue[1]=CAN_data_cmp->data_buf[3];
;;;652                memcpy(Run_Diagram.Start_Time1,	CAN_data_cmp->data_buf+4,2);
;;;653                memcpy(Run_Diagram.End_Time1,	CAN_data_cmp->data_buf+6,2);
;;;654                memcpy(Run_Diagram.Power1,		CAN_data_cmp->data_buf+8,1);
;;;655                memcpy(Run_Diagram.Frq1,		CAN_data_cmp->data_buf+9,4);
;;;656    //            memcpy(Run_Diagram.channel1,	CAN_data_cmp->data_buf+13,1);
;;;657    
;;;658                memcpy(Run_Diagram.Start_Time2,	CAN_data_cmp->data_buf+14,2);
;;;659                memcpy(Run_Diagram.End_Time2,	CAN_data_cmp->data_buf+16,2);
;;;660                memcpy(Run_Diagram.Power2,		CAN_data_cmp->data_buf+18,1);
;;;661                memcpy(Run_Diagram.Frq2,		CAN_data_cmp->data_buf+19,4);
;;;662    //            memcpy(Run_Diagram.channel2,	CAN_data_cmp->data_buf+23,1);
;;;663    
;;;664                memcpy(Run_Diagram.Start_Time3,	CAN_data_cmp->data_buf+24,2);
;;;665                memcpy(Run_Diagram.End_Time3,	CAN_data_cmp->data_buf+26,2);
;;;666                memcpy(Run_Diagram.Power3,		CAN_data_cmp->data_buf+28,1);
;;;667                memcpy(Run_Diagram.Frq3,		CAN_data_cmp->data_buf+29,4);
;;;668    //            memcpy(Run_Diagram.channel3,	CAN_data_cmp->data_buf+33,1);
;;;669    
;;;670                memcpy(Run_Diagram.Start_Time4,	CAN_data_cmp->data_buf+34,2);
;;;671                memcpy(Run_Diagram.End_Time4,	CAN_data_cmp->data_buf+36,2);
;;;672                memcpy(Run_Diagram.Power4,		CAN_data_cmp->data_buf+38,1);
;;;673                memcpy(Run_Diagram.Frq4,		CAN_data_cmp->data_buf+39,4);
;;;674    //            memcpy(Run_Diagram.channel4,	CAN_data_cmp->data_buf+43,1);
;;;675    
;;;676                memcpy(Run_Diagram.Start_Time5,	CAN_data_cmp->data_buf+44,2);
;;;677                memcpy(Run_Diagram.End_Time5,	CAN_data_cmp->data_buf+46,2);
;;;678                memcpy(Run_Diagram.Power5,		CAN_data_cmp->data_buf+48,1);
;;;679                memcpy(Run_Diagram.Frq5,		CAN_data_cmp->data_buf+49,4);
;;;680    //            memcpy(Run_Diagram.channel5,	CAN_data_cmp->data_buf+53,1);
;;;681    
;;;682                memcpy(Run_Diagram.Start_Time6,	CAN_data_cmp->data_buf+54,2);
;;;683                memcpy(Run_Diagram.End_Time6,	CAN_data_cmp->data_buf+56,2);
;;;684                memcpy(Run_Diagram.Power6,		CAN_data_cmp->data_buf+58,1);
;;;685                memcpy(Run_Diagram.Frq6,		CAN_data_cmp->data_buf+59,4);
;;;686    //            memcpy(Run_Diagram.channel6,	CAN_data_cmp->data_buf+63,1);
;;;687    
;;;688                memcpy(Run_Diagram.Start_Time7,	CAN_data_cmp->data_buf+64,2);
;;;689                memcpy(Run_Diagram.End_Time7,	CAN_data_cmp->data_buf+66,2);
;;;690                memcpy(Run_Diagram.Power7,		CAN_data_cmp->data_buf+68,1);
;;;691                memcpy(Run_Diagram.Frq7,		CAN_data_cmp->data_buf+69,4);
;;;692    //            memcpy(Run_Diagram.channel7,	CAN_data_cmp->data_buf+73,1);
;;;693    
;;;694                memcpy(Run_Diagram.Start_Time8,	CAN_data_cmp->data_buf+74,2);
;;;695                memcpy(Run_Diagram.End_Time8,	CAN_data_cmp->data_buf+76,2);
;;;696                memcpy(Run_Diagram.Power8,		CAN_data_cmp->data_buf+78,1);
;;;697                memcpy(Run_Diagram.Frq8,		CAN_data_cmp->data_buf+79,4);
;;;698    //            memcpy(Run_Diagram.channel8,	CAN_data_cmp->data_buf+83,1);
;;;699    
;;;700                memcpy(Run_Diagram.Start_Time9,	CAN_data_cmp->data_buf+84,2);
;;;701                memcpy(Run_Diagram.End_Time9,	CAN_data_cmp->data_buf+86,2);
;;;702                memcpy(Run_Diagram.Power9,		CAN_data_cmp->data_buf+88,1);
;;;703                memcpy(Run_Diagram.Frq9,		CAN_data_cmp->data_buf+89,4);
;;;704    //            memcpy(Run_Diagram.channel9,	CAN_data_cmp->data_buf+93,1);
;;;705    
;;;706                memcpy(Run_Diagram.Start_Time10,	CAN_data_cmp->data_buf+94,2);
;;;707                memcpy(Run_Diagram.End_Time10,		CAN_data_cmp->data_buf+96,2);
;;;708                memcpy(Run_Diagram.Power10,			CAN_data_cmp->data_buf+98,1);
;;;709                memcpy(Run_Diagram.Frq10,			CAN_data_cmp->data_buf+99,4);
;;;710    //            memcpy(Run_Diagram.channel10,		CAN_data_cmp->data_buf+103,1);
;;;711    
;;;712                return 1;
;;;713            }
;;;714            else
;;;715            {
;;;716                return 3;
;;;717            }
;;;718        }
;;;719    
;;;720        return 4;//没有功能码
;;;721    }
000056  bd08              POP      {r3,pc}
                  |L4.88|
000058  7888              LDRB     r0,[r1,#2]            ;481
00005a  2802              CMP      r0,#2                 ;481
00005c  d149              BNE      |L4.242|
00005e  78c8              LDRB     r0,[r1,#3]            ;481
000060  2801              CMP      r0,#1                 ;481
000062  d146              BNE      |L4.242|
000064  48e3              LDR      r0,|L4.1012|
000066  7800              LDRB     r0,[r0,#0]            ;483  ; System
000068  28ff              CMP      r0,#0xff              ;483
00006a  d107              BNE      |L4.124|
00006c  7908              LDRB     r0,[r1,#4]            ;485
00006e  4ae1              LDR      r2,|L4.1012|
000070  7010              STRB     r0,[r2,#0]            ;485
000072  7908              LDRB     r0,[r1,#4]            ;486
000074  4ae1              LDR      r2,|L4.1020|
000076  7010              STRB     r0,[r2,#0]            ;486
000078  2003              MOVS     r0,#3                 ;487
00007a  e7ec              B        |L4.86|
                  |L4.124|
00007c  48dd              LDR      r0,|L4.1012|
00007e  7800              LDRB     r0,[r0,#0]            ;489  ; System
000080  b938              CBNZ     r0,|L4.146|
000082  7908              LDRB     r0,[r1,#4]            ;491
000084  4adb              LDR      r2,|L4.1012|
000086  7010              STRB     r0,[r2,#0]            ;491
000088  7908              LDRB     r0,[r1,#4]            ;492
00008a  4adc              LDR      r2,|L4.1020|
00008c  7010              STRB     r0,[r2,#0]            ;492
00008e  2003              MOVS     r0,#3                 ;493
000090  e7e1              B        |L4.86|
                  |L4.146|
000092  7908              LDRB     r0,[r1,#4]            ;497
000094  4ad7              LDR      r2,|L4.1012|
000096  7812              LDRB     r2,[r2,#0]            ;497  ; System
000098  4290              CMP      r0,r2                 ;497
00009a  d125              BNE      |L4.232|
00009c  7948              LDRB     r0,[r1,#5]            ;500
00009e  9000              STR      r0,[sp,#0]            ;500
0000a0  f89d0000          LDRB     r0,[sp,#0]            ;501
0000a4  0600              LSLS     r0,r0,#24             ;501
0000a6  4ad6              LDR      r2,|L4.1024|
0000a8  6010              STR      r0,[r2,#0]            ;501  ; g_inquire_stamp
0000aa  7988              LDRB     r0,[r1,#6]            ;502
0000ac  9000              STR      r0,[sp,#0]            ;502
0000ae  4610              MOV      r0,r2                 ;503
0000b0  6800              LDR      r0,[r0,#0]            ;503  ; g_inquire_stamp
0000b2  f89d2000          LDRB     r2,[sp,#0]            ;503
0000b6  eb004002          ADD      r0,r0,r2,LSL #16      ;503
0000ba  4ad1              LDR      r2,|L4.1024|
0000bc  6010              STR      r0,[r2,#0]            ;503  ; g_inquire_stamp
0000be  79c8              LDRB     r0,[r1,#7]            ;504
0000c0  9000              STR      r0,[sp,#0]            ;504
0000c2  4610              MOV      r0,r2                 ;505
0000c4  6800              LDR      r0,[r0,#0]            ;505  ; g_inquire_stamp
0000c6  f89d2000          LDRB     r2,[sp,#0]            ;505
0000ca  eb002002          ADD      r0,r0,r2,LSL #8       ;505
0000ce  4acc              LDR      r2,|L4.1024|
0000d0  6010              STR      r0,[r2,#0]            ;505  ; g_inquire_stamp
0000d2  7a08              LDRB     r0,[r1,#8]            ;506
0000d4  9000              STR      r0,[sp,#0]            ;506
0000d6  4610              MOV      r0,r2                 ;507
0000d8  6800              LDR      r0,[r0,#0]            ;507  ; g_inquire_stamp
0000da  f89d2000          LDRB     r2,[sp,#0]            ;507
0000de  4410              ADD      r0,r0,r2              ;507
0000e0  4ac7              LDR      r2,|L4.1024|
0000e2  6010              STR      r0,[r2,#0]            ;507  ; g_inquire_stamp
0000e4  2001              MOVS     r0,#1                 ;508
0000e6  e7b6              B        |L4.86|
                  |L4.232|
0000e8  7908              LDRB     r0,[r1,#4]            ;512
0000ea  4ac4              LDR      r2,|L4.1020|
0000ec  7010              STRB     r0,[r2,#0]            ;512
0000ee  2003              MOVS     r0,#3                 ;513
0000f0  e7b1              B        |L4.86|
                  |L4.242|
0000f2  7888              LDRB     r0,[r1,#2]            ;517
0000f4  2803              CMP      r0,#3                 ;517
0000f6  d126              BNE      |L4.326|
0000f8  78c8              LDRB     r0,[r1,#3]            ;517
0000fa  2801              CMP      r0,#1                 ;517
0000fc  d123              BNE      |L4.326|
0000fe  7908              LDRB     r0,[r1,#4]            ;519
000100  4abc              LDR      r2,|L4.1012|
000102  7812              LDRB     r2,[r2,#0]            ;519  ; System
000104  4290              CMP      r0,r2                 ;519
000106  d11c              BNE      |L4.322|
000108  7948              LDRB     r0,[r1,#5]            ;521
00010a  4abe              LDR      r2,|L4.1028|
00010c  7010              STRB     r0,[r2,#0]            ;521
00010e  88cb              LDRH     r3,[r1,#6]            ;522
000110  f8a23005          STRH     r3,[r2,#5]            ;522
000114  7a08              LDRB     r0,[r1,#8]            ;522
000116  71d0              STRB     r0,[r2,#7]            ;522
000118  f8d13009          LDR      r3,[r1,#9]            ;523
00011c  6093              STR      r3,[r2,#8]            ;523  ; PC_Cmd
00011e  f8d1300d          LDR      r3,[r1,#0xd]          ;523
000122  60d3              STR      r3,[r2,#0xc]          ;523  ; PC_Cmd
000124  f8d10011          LDR      r0,[r1,#0x11]         ;523
000128  6110              STR      r0,[r2,#0x10]         ;523  ; PC_Cmd
00012a  f8b13015          LDRH     r3,[r1,#0x15]         ;524
00012e  8053              STRH     r3,[r2,#2]            ;524
000130  7dc8              LDRB     r0,[r1,#0x17]         ;524
000132  7110              STRB     r0,[r2,#4]            ;524
000134  4aaf              LDR      r2,|L4.1012|
000136  698b              LDR      r3,[r1,#0x18]         ;525
000138  6053              STR      r3,[r2,#4]            ;525  ; System
00013a  8b88              LDRH     r0,[r1,#0x1c]         ;525
00013c  8110              STRH     r0,[r2,#8]            ;525
00013e  2001              MOVS     r0,#1                 ;526
000140  e789              B        |L4.86|
                  |L4.322|
000142  2003              MOVS     r0,#3                 ;530
000144  e787              B        |L4.86|
                  |L4.326|
000146  7888              LDRB     r0,[r1,#2]            ;533
000148  2804              CMP      r0,#4                 ;533
00014a  d112              BNE      |L4.370|
00014c  78c8              LDRB     r0,[r1,#3]            ;533
00014e  2801              CMP      r0,#1                 ;533
000150  d10f              BNE      |L4.370|
000152  7908              LDRB     r0,[r1,#4]            ;535
000154  4aa7              LDR      r2,|L4.1012|
000156  7812              LDRB     r2,[r2,#0]            ;535  ; System
000158  4290              CMP      r0,r2                 ;535
00015a  d108              BNE      |L4.366|
00015c  4aa5              LDR      r2,|L4.1012|
00015e  f8d13005          LDR      r3,[r1,#5]            ;537
000162  6053              STR      r3,[r2,#4]            ;537  ; System
000164  f8b10009          LDRH     r0,[r1,#9]            ;537
000168  8110              STRH     r0,[r2,#8]            ;537
00016a  2001              MOVS     r0,#1                 ;538
00016c  e773              B        |L4.86|
                  |L4.366|
00016e  2003              MOVS     r0,#3                 ;542
000170  e771              B        |L4.86|
                  |L4.370|
000172  7888              LDRB     r0,[r1,#2]            ;545
000174  2805              CMP      r0,#5                 ;545
000176  d110              BNE      |L4.410|
000178  78c8              LDRB     r0,[r1,#3]            ;545
00017a  2801              CMP      r0,#1                 ;545
00017c  d10d              BNE      |L4.410|
00017e  7908              LDRB     r0,[r1,#4]            ;547
000180  4a9c              LDR      r2,|L4.1012|
000182  7812              LDRB     r2,[r2,#0]            ;547  ; System
000184  4290              CMP      r0,r2                 ;547
000186  d106              BNE      |L4.406|
000188  4a9f              LDR      r2,|L4.1032|
00018a  f8b10005          LDRH     r0,[r1,#5]            ;549
00018e  f8a20001          STRH     r0,[r2,#1]            ;549
000192  2001              MOVS     r0,#1                 ;550
000194  e75f              B        |L4.86|
                  |L4.406|
000196  2003              MOVS     r0,#3                 ;554
000198  e75d              B        |L4.86|
                  |L4.410|
00019a  7888              LDRB     r0,[r1,#2]            ;557
00019c  2806              CMP      r0,#6                 ;557
00019e  d112              BNE      |L4.454|
0001a0  78c8              LDRB     r0,[r1,#3]            ;557
0001a2  2801              CMP      r0,#1                 ;557
0001a4  d10f              BNE      |L4.454|
0001a6  7908              LDRB     r0,[r1,#4]            ;559
0001a8  4a92              LDR      r2,|L4.1012|
0001aa  7812              LDRB     r2,[r2,#0]            ;559  ; System
0001ac  4290              CMP      r0,r2                 ;559
0001ae  d108              BNE      |L4.450|
0001b0  4a90              LDR      r2,|L4.1012|
0001b2  f8d13005          LDR      r3,[r1,#5]            ;561
0001b6  6053              STR      r3,[r2,#4]            ;561  ; System
0001b8  f8b10009          LDRH     r0,[r1,#9]            ;561
0001bc  8110              STRH     r0,[r2,#8]            ;561
0001be  2001              MOVS     r0,#1                 ;562
0001c0  e749              B        |L4.86|
                  |L4.450|
0001c2  2003              MOVS     r0,#3                 ;566
0001c4  e747              B        |L4.86|
                  |L4.454|
0001c6  7888              LDRB     r0,[r1,#2]            ;569
0001c8  2807              CMP      r0,#7                 ;569
0001ca  d111              BNE      |L4.496|
0001cc  78c8              LDRB     r0,[r1,#3]            ;569
0001ce  2801              CMP      r0,#1                 ;569
0001d0  d10e              BNE      |L4.496|
0001d2  7908              LDRB     r0,[r1,#4]            ;571
0001d4  4a87              LDR      r2,|L4.1012|
0001d6  7812              LDRB     r2,[r2,#0]            ;571  ; System
0001d8  4290              CMP      r0,r2                 ;571
0001da  d107              BNE      |L4.492|
0001dc  4a85              LDR      r2,|L4.1012|
0001de  f8d13006          LDR      r3,[r1,#6]            ;574
0001e2  6053              STR      r3,[r2,#4]            ;574  ; System
0001e4  8948              LDRH     r0,[r1,#0xa]          ;574
0001e6  8110              STRH     r0,[r2,#8]            ;574
0001e8  2001              MOVS     r0,#1                 ;575
0001ea  e734              B        |L4.86|
                  |L4.492|
0001ec  2003              MOVS     r0,#3                 ;579
0001ee  e732              B        |L4.86|
                  |L4.496|
0001f0  7888              LDRB     r0,[r1,#2]            ;582
0001f2  2808              CMP      r0,#8                 ;582
0001f4  d10b              BNE      |L4.526|
0001f6  78c8              LDRB     r0,[r1,#3]            ;582
0001f8  2801              CMP      r0,#1                 ;582
0001fa  d108              BNE      |L4.526|
0001fc  7908              LDRB     r0,[r1,#4]            ;584
0001fe  4a7d              LDR      r2,|L4.1012|
000200  7812              LDRB     r2,[r2,#0]            ;584  ; System
000202  4290              CMP      r0,r2                 ;584
000204  d101              BNE      |L4.522|
000206  2001              MOVS     r0,#1                 ;587
000208  e725              B        |L4.86|
                  |L4.522|
00020a  2003              MOVS     r0,#3                 ;591
00020c  e723              B        |L4.86|
                  |L4.526|
00020e  7888              LDRB     r0,[r1,#2]            ;594
000210  2809              CMP      r0,#9                 ;594
000212  d115              BNE      |L4.576|
000214  78c8              LDRB     r0,[r1,#3]            ;594
000216  2801              CMP      r0,#1                 ;594
000218  d112              BNE      |L4.576|
00021a  7908              LDRB     r0,[r1,#4]            ;596
00021c  4a75              LDR      r2,|L4.1012|
00021e  7812              LDRB     r2,[r2,#0]            ;596  ; System
000220  4290              CMP      r0,r2                 ;596
000222  d10b              BNE      |L4.572|
000224  4a79              LDR      r2,|L4.1036|
000226  7948              LDRB     r0,[r1,#5]            ;598
000228  7050              STRB     r0,[r2,#1]            ;598
00022a  1c92              ADDS     r2,r2,#2              ;599
00022c  f8d13006          LDR      r3,[r1,#6]            ;599
000230  6013              STR      r3,[r2,#0]            ;599  ; Scan_Frq
000232  f8d1000a          LDR      r0,[r1,#0xa]          ;599
000236  6050              STR      r0,[r2,#4]            ;599  ; Scan_Frq
000238  2001              MOVS     r0,#1                 ;600
00023a  e70c              B        |L4.86|
                  |L4.572|
00023c  2003              MOVS     r0,#3                 ;604
00023e  e70a              B        |L4.86|
                  |L4.576|
000240  7888              LDRB     r0,[r1,#2]            ;607
000242  280a              CMP      r0,#0xa               ;607
000244  d10e              BNE      |L4.612|
000246  78c8              LDRB     r0,[r1,#3]            ;607
000248  2801              CMP      r0,#1                 ;607
00024a  d10b              BNE      |L4.612|
00024c  7908              LDRB     r0,[r1,#4]            ;609
00024e  4a69              LDR      r2,|L4.1012|
000250  7812              LDRB     r2,[r2,#0]            ;609  ; System
000252  4290              CMP      r0,r2                 ;609
000254  d104              BNE      |L4.608|
000256  4a6e              LDR      r2,|L4.1040|
000258  7948              LDRB     r0,[r1,#5]            ;611
00025a  7050              STRB     r0,[r2,#1]            ;611
00025c  2001              MOVS     r0,#1                 ;612
00025e  e6fa              B        |L4.86|
                  |L4.608|
000260  2003              MOVS     r0,#3                 ;616
000262  e6f8              B        |L4.86|
                  |L4.612|
000264  7888              LDRB     r0,[r1,#2]            ;619
000266  280b              CMP      r0,#0xb               ;619
000268  d110              BNE      |L4.652|
00026a  78c8              LDRB     r0,[r1,#3]            ;619
00026c  2801              CMP      r0,#1                 ;619
00026e  d10d              BNE      |L4.652|
000270  7908              LDRB     r0,[r1,#4]            ;621
000272  4a60              LDR      r2,|L4.1012|
000274  7812              LDRB     r2,[r2,#0]            ;621  ; System
000276  4290              CMP      r0,r2                 ;621
000278  d106              BNE      |L4.648|
00027a  4a66              LDR      r2,|L4.1044|
00027c  f8b10005          LDRH     r0,[r1,#5]            ;623
000280  f8a20001          STRH     r0,[r2,#1]            ;623
000284  2001              MOVS     r0,#1                 ;624
000286  e6e6              B        |L4.86|
                  |L4.648|
000288  2003              MOVS     r0,#3                 ;628
00028a  e6e4              B        |L4.86|
                  |L4.652|
00028c  7888              LDRB     r0,[r1,#2]            ;631
00028e  280c              CMP      r0,#0xc               ;631
000290  d110              BNE      |L4.692|
000292  78c8              LDRB     r0,[r1,#3]            ;631
000294  2801              CMP      r0,#1                 ;631
000296  d10d              BNE      |L4.692|
000298  7908              LDRB     r0,[r1,#4]            ;633
00029a  4a56              LDR      r2,|L4.1012|
00029c  7812              LDRB     r2,[r2,#0]            ;633  ; System
00029e  4290              CMP      r0,r2                 ;633
0002a0  d106              BNE      |L4.688|
0002a2  4a5d              LDR      r2,|L4.1048|
0002a4  f8b10005          LDRH     r0,[r1,#5]            ;635
0002a8  f8a20001          STRH     r0,[r2,#1]            ;635
0002ac  2001              MOVS     r0,#1                 ;636
0002ae  e6d2              B        |L4.86|
                  |L4.688|
0002b0  2003              MOVS     r0,#3                 ;640
0002b2  e6d0              B        |L4.86|
                  |L4.692|
0002b4  7888              LDRB     r0,[r1,#2]            ;643
0002b6  280d              CMP      r0,#0xd               ;643
                  |L4.696|
0002b8  d17e              BNE      |L4.952|
0002ba  78c8              LDRB     r0,[r1,#3]            ;643
0002bc  2801              CMP      r0,#1                 ;643
0002be  d1fb              BNE      |L4.696|
0002c0  7908              LDRB     r0,[r1,#4]            ;645
0002c2  4a4c              LDR      r2,|L4.1012|
0002c4  7812              LDRB     r2,[r2,#0]            ;645  ; System
0002c6  4290              CMP      r0,r2                 ;645
0002c8  d177              BNE      |L4.954|
0002ca  7948              LDRB     r0,[r1,#5]            ;648
0002cc  4a53              LDR      r2,|L4.1052|
0002ce  7050              STRB     r0,[r2,#1]            ;648
0002d0  7988              LDRB     r0,[r1,#6]            ;650
0002d2  7090              STRB     r0,[r2,#2]            ;650
0002d4  79ca              LDRB     r2,[r1,#7]            ;651
0002d6  4851              LDR      r0,|L4.1052|
0002d8  70c2              STRB     r2,[r0,#3]            ;651
0002da  4602              MOV      r2,r0                 ;652
0002dc  8908              LDRH     r0,[r1,#8]            ;652
0002de  8090              STRH     r0,[r2,#4]            ;652
0002e0  8948              LDRH     r0,[r1,#0xa]          ;653
0002e2  80d0              STRH     r0,[r2,#6]            ;653
0002e4  7b08              LDRB     r0,[r1,#0xc]          ;654
0002e6  7210              STRB     r0,[r2,#8]            ;654
0002e8  f8d1000d          LDR      r0,[r1,#0xd]          ;655
0002ec  f8c20009          STR      r0,[r2,#9]            ;655  ; Run_Diagram
0002f0  8a48              LDRH     r0,[r1,#0x12]         ;658
0002f2  81d0              STRH     r0,[r2,#0xe]          ;658
0002f4  8a88              LDRH     r0,[r1,#0x14]         ;659
0002f6  8210              STRH     r0,[r2,#0x10]         ;659
0002f8  7d88              LDRB     r0,[r1,#0x16]         ;660
0002fa  7490              STRB     r0,[r2,#0x12]         ;660
0002fc  f8d10017          LDR      r0,[r1,#0x17]         ;661
000300  f8c20013          STR      r0,[r2,#0x13]         ;661  ; Run_Diagram
000304  8b88              LDRH     r0,[r1,#0x1c]         ;664
000306  8310              STRH     r0,[r2,#0x18]         ;664
000308  8bc8              LDRH     r0,[r1,#0x1e]         ;665
00030a  8350              STRH     r0,[r2,#0x1a]         ;665
00030c  2020              MOVS     r0,#0x20              ;666
00030e  5c40              LDRB     r0,[r0,r1]            ;666
000310  7710              STRB     r0,[r2,#0x1c]         ;666
000312  f8d10021          LDR      r0,[r1,#0x21]         ;667
000316  f8c2001d          STR      r0,[r2,#0x1d]         ;667  ; Run_Diagram
00031a  8cc8              LDRH     r0,[r1,#0x26]         ;670
00031c  8450              STRH     r0,[r2,#0x22]         ;670
00031e  8d08              LDRH     r0,[r1,#0x28]         ;671
000320  8490              STRH     r0,[r2,#0x24]         ;671
000322  f891002a          LDRB     r0,[r1,#0x2a]         ;672
000326  f8820026          STRB     r0,[r2,#0x26]         ;672
00032a  f8d1002b          LDR      r0,[r1,#0x2b]         ;673
00032e  f8c20027          STR      r0,[r2,#0x27]         ;673  ; Run_Diagram
000332  8e08              LDRH     r0,[r1,#0x30]         ;676
000334  8590              STRH     r0,[r2,#0x2c]         ;676
000336  8e48              LDRH     r0,[r1,#0x32]         ;677
000338  85d0              STRH     r0,[r2,#0x2e]         ;677
00033a  f8910034          LDRB     r0,[r1,#0x34]         ;678
00033e  f8820030          STRB     r0,[r2,#0x30]         ;678
000342  f8d10035          LDR      r0,[r1,#0x35]         ;679
000346  f8c20031          STR      r0,[r2,#0x31]         ;679  ; Run_Diagram
00034a  8f48              LDRH     r0,[r1,#0x3a]         ;682
00034c  86d0              STRH     r0,[r2,#0x36]         ;682
00034e  8f88              LDRH     r0,[r1,#0x3c]         ;683
000350  8710              STRH     r0,[r2,#0x38]         ;683
000352  f891003e          LDRB     r0,[r1,#0x3e]         ;684
000356  f882003a          STRB     r0,[r2,#0x3a]         ;684
00035a  f8d1003f          LDR      r0,[r1,#0x3f]         ;685
00035e  f8c2003b          STR      r0,[r2,#0x3b]         ;685  ; Run_Diagram
000362  f8b10044          LDRH     r0,[r1,#0x44]         ;688
000366  f8a20040          STRH     r0,[r2,#0x40]         ;688
00036a  f8b10046          LDRH     r0,[r1,#0x46]         ;689
00036e  f8a20042          STRH     r0,[r2,#0x42]         ;689
000372  f8910048          LDRB     r0,[r1,#0x48]         ;690
000376  f8820044          STRB     r0,[r2,#0x44]         ;690
00037a  f8d10049          LDR      r0,[r1,#0x49]         ;691
00037e  f8c20045          STR      r0,[r2,#0x45]         ;691  ; Run_Diagram
000382  f8b1004e          LDRH     r0,[r1,#0x4e]         ;694
000386  f8a2004a          STRH     r0,[r2,#0x4a]         ;694
00038a  f8b10050          LDRH     r0,[r1,#0x50]         ;695
00038e  f8a2004c          STRH     r0,[r2,#0x4c]         ;695
000392  f8910052          LDRB     r0,[r1,#0x52]         ;696
000396  f882004e          STRB     r0,[r2,#0x4e]         ;696
00039a  f8d10053          LDR      r0,[r1,#0x53]         ;697
00039e  f8c2004f          STR      r0,[r2,#0x4f]         ;697  ; Run_Diagram
0003a2  f8b10058          LDRH     r0,[r1,#0x58]         ;700
0003a6  f8a20054          STRH     r0,[r2,#0x54]         ;700
0003aa  f8b1005a          LDRH     r0,[r1,#0x5a]         ;701
0003ae  f8a20056          STRH     r0,[r2,#0x56]         ;701
0003b2  f891005c          LDRB     r0,[r1,#0x5c]         ;702
0003b6  e001              B        |L4.956|
                  |L4.952|
0003b8  e01a              B        |L4.1008|
                  |L4.954|
0003ba  e017              B        |L4.1004|
                  |L4.956|
0003bc  f8820058          STRB     r0,[r2,#0x58]         ;702
0003c0  f8d1005d          LDR      r0,[r1,#0x5d]         ;703
0003c4  f8c20059          STR      r0,[r2,#0x59]         ;703  ; Run_Diagram
0003c8  f8b10062          LDRH     r0,[r1,#0x62]         ;706
0003cc  f8a2005e          STRH     r0,[r2,#0x5e]         ;706
0003d0  f8b10064          LDRH     r0,[r1,#0x64]         ;707
0003d4  f8a20060          STRH     r0,[r2,#0x60]         ;707
0003d8  f8910066          LDRB     r0,[r1,#0x66]         ;708
0003dc  f8820062          STRB     r0,[r2,#0x62]         ;708
0003e0  f8d10067          LDR      r0,[r1,#0x67]         ;709
0003e4  f8c20063          STR      r0,[r2,#0x63]         ;709  ; Run_Diagram
0003e8  2001              MOVS     r0,#1                 ;712
0003ea  e634              B        |L4.86|
                  |L4.1004|
0003ec  2003              MOVS     r0,#3                 ;716
0003ee  e632              B        |L4.86|
                  |L4.1008|
0003f0  2004              MOVS     r0,#4                 ;720
0003f2  e630              B        |L4.86|
                  |L4.1012|
                          DCD      System
                  |L4.1016|
                          DCD      Alarm_threshold
                  |L4.1020|
                          DCD      Work_paraBack
                  |L4.1024|
                          DCD      g_inquire_stamp
                  |L4.1028|
                          DCD      PC_Cmd
                  |L4.1032|
                          DCD      Disalarm
                  |L4.1036|
                          DCD      Scan_Frq
                  |L4.1040|
                          DCD      Sacn_stop
                  |L4.1044|
                          DCD      Add_Power
                  |L4.1048|
                          DCD      Sub_Power
                  |L4.1052|
                          DCD      Run_Diagram
                          ENDP


                          AREA ||i.GT2000_Tx_freq_Hex_to_PChex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  GT2000_Tx_freq_Hex_to_PChex PROC
;;;2254   
;;;2255   void GT2000_Tx_freq_Hex_to_PChex(unsigned char *freq_Trans_hex, unsigned char *freq_PC_Hex)  //供查询扫频函数使用
000000  b5fe              PUSH     {r1-r7,lr}
;;;2256   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2257   	int n = 0;
000006  2600              MOVS     r6,#0
;;;2258     unsigned char freq[6];
;;;2259   	freq[5] = '\0';
000008  2000              MOVS     r0,#0
00000a  f88d0009          STRB     r0,[sp,#9]
;;;2260   	n = (*(freq_Trans_hex + 1) << 8) | (*(freq_Trans_hex + 0));
00000e  7828              LDRB     r0,[r5,#0]
000010  7869              LDRB     r1,[r5,#1]
000012  ea402601          ORR      r6,r0,r1,LSL #8
;;;2261   	printf(" 2获取到的十六进制频率为= %X \n", n);
000016  4631              MOV      r1,r6
000018  a00d              ADR      r0,|L5.80|
00001a  f7fffffe          BL       __2printf
;;;2262   	sprintf((char *)freq, "%05d", n); //把十六进制数字转为十进制字符串
00001e  4632              MOV      r2,r6
000020  a113              ADR      r1,|L5.112|
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       __2sprintf
;;;2263   	
;;;2264   		freq_str_to_hex(freq, freq_PC_Hex);
000028  4621              MOV      r1,r4
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       freq_str_to_hex
;;;2265   		Trans_printf(" 2获取到的十进制频率为freq= %s \n", freq);
000030  a901              ADD      r1,sp,#4
000032  a011              ADR      r0,|L5.120|
000034  f7fffffe          BL       Trans_printf
;;;2266   	
;;;2267   	*(freq_PC_Hex + 2) = 0x00;
000038  2000              MOVS     r0,#0
00003a  70a0              STRB     r0,[r4,#2]
;;;2268   	*(freq_PC_Hex + 3) = 0x00;
00003c  70e0              STRB     r0,[r4,#3]
;;;2269   
;;;2270   	Trans_printf(" 2转化后的频率为= %02X %02X %02X %02X \n", freq_PC_Hex[0], freq_PC_Hex[1], freq_PC_Hex[2], freq_PC_Hex[3]);
00003e  78e0              LDRB     r0,[r4,#3]
000040  9000              STR      r0,[sp,#0]
000042  78a3              LDRB     r3,[r4,#2]
000044  7862              LDRB     r2,[r4,#1]
000046  7821              LDRB     r1,[r4,#0]
000048  a014              ADR      r0,|L5.156|
00004a  f7fffffe          BL       Trans_printf
;;;2271   
;;;2272   }
00004e  bdfe              POP      {r1-r7,pc}
;;;2273   
                          ENDP

                  |L5.80|
000050  2032bbf1          DCB      " 2",187,241,200,161,181,189,181,196,202,174,193,249,189
000054  c8a1b5bd
000058  b5c4caae
00005c  c1f9bd  
00005f  f8d6c6c6          DCB      248,214,198,198,181,194,202,206,170,"= %X \n",0
000063  b5c2cace
000067  aa3d2025
00006b  58200a00
00006f  00                DCB      0
                  |L5.112|
000070  25303564          DCB      "%05d",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L5.120|
000078  2032bbf1          DCB      " 2",187,241,200,161,181,189,181,196,202,174,189,248,214
00007c  c8a1b5bd
000080  b5c4caae
000084  bdf8d6  
000087  c6c6b5c2          DCB      198,198,181,194,202,206,170,"freq= %s \n",0
00008b  caceaa66
00008f  7265713d
000093  20257320
000097  0a00    
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L5.156|
00009c  2032d7aa          DCB      " 2",215,170,187,175,186,243,181,196,198,181,194,202,206
0000a0  bbafbaf3
0000a4  b5c4c6b5
0000a8  c2cace  
0000ab  aa3d2025          DCB      170,"= %02X %02X %02X %02X \n",0
0000af  30325820
0000b3  25303258
0000b7  20253032
0000bb  58202530
0000bf  3258200a
0000c3  00      

                          AREA ||i.Get_CAN_Data||, CODE, READONLY, ALIGN=2

                  Get_CAN_Data PROC
;;;398    /* 去帧尾，校验并且返回数据 */
;;;399    W5500_data_t Get_CAN_Data(Buffer_t *p_PC_data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;400    {
000004  b0e4              SUB      sp,sp,#0x190
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
;;;401    	uint8_t i = 0;
00000a  2500              MOVS     r5,#0
;;;402        int ReceiveData_CRC;
;;;403        unsigned char buf_CRC[2];
;;;404        unsigned int CRC_Back;
;;;405        unsigned char Vaild[128];
;;;406        W5500_data_t CAN_data;
;;;407    
;;;408        CAN_data.CAN_ID = p_PC_data->data[2];//发送数据包中的ID号
00000c  78a0              LDRB     r0,[r4,#2]
00000e  f88d0005          STRB     r0,[sp,#5]
;;;409    
;;;410        CAN_data.Func_code[0] = p_PC_data->data[4];//功能码所在区域
000012  7920              LDRB     r0,[r4,#4]
000014  f88d0006          STRB     r0,[sp,#6]
;;;411        CAN_data.Func_code[1] = p_PC_data->data[5];
000018  7961              LDRB     r1,[r4,#5]
00001a  f88d1007          STRB     r1,[sp,#7]
;;;412    
;;;413    #if	1
;;;414        CAN_data.len = p_PC_data->data[3];//发送数据包中数据部分的长度(功能码开始到CRC检验位前结束)
00001e  78e0              LDRB     r0,[r4,#3]
000020  f88d0108          STRB     r0,[sp,#0x108]
;;;415        for(i=0;i< CAN_data.len-3;i++)
000024  bf00              NOP      
000026  e005              B        |L6.52|
                  |L6.40|
;;;416    	{
;;;417    		CAN_data.data_buf[i]=p_PC_data->data[7+i];//保存帧内数据部分
000028  1de8              ADDS     r0,r5,#7
00002a  5c21              LDRB     r1,[r4,r0]
00002c  a802              ADD      r0,sp,#8
00002e  5541              STRB     r1,[r0,r5]
000030  1c68              ADDS     r0,r5,#1              ;415
000032  b2c5              UXTB     r5,r0                 ;415
                  |L6.52|
000034  f89d0108          LDRB     r0,[sp,#0x108]        ;415
000038  1ec0              SUBS     r0,r0,#3              ;415
00003a  42a8              CMP      r0,r5                 ;415
00003c  dcf4              BGT      |L6.40|
;;;418    	}	
;;;419        buf_CRC[0] = p_PC_data->data[p_PC_data->len-4];
00003e  f8940100          LDRB     r0,[r4,#0x100]
000042  1f00              SUBS     r0,r0,#4
000044  5c20              LDRB     r0,[r4,r0]
000046  f88d018c          STRB     r0,[sp,#0x18c]
;;;420        buf_CRC[1] = p_PC_data->data[p_PC_data->len-3];
00004a  f8940100          LDRB     r0,[r4,#0x100]
00004e  1ec0              SUBS     r0,r0,#3
000050  5c20              LDRB     r0,[r4,r0]
000052  f88d018d          STRB     r0,[sp,#0x18d]
;;;421    #else
;;;422        while( 1 )
;;;423        {
;;;424            //02 01 00 05 5b e5 85 95 03 04 03 04 校验和等于0304
;;;425            if( (p_PC_data->data[i+3]==0x03) && (p_PC_data->data[i+4]==0x04) )
;;;426            {
;;;427                break;
;;;428            }
;;;429            else
;;;430            {
;;;431                CAN_data.data_buf[i] = p_PC_data->data[i+3];
;;;432                i++;
;;;433            }
;;;434        }
;;;435    
;;;436        CAN_data.len = i+3-2;		//校验和不算数据，所以减2
;;;437        buf_CRC[0] = p_PC_data->data[i+1];
;;;438        buf_CRC[1] = p_PC_data->data[i+2];
;;;439    #endif
;;;440    
;;;441        ReceiveData_CRC = ((buf_CRC[0]<<8) +(buf_CRC[1]));
000056  f89d018d          LDRB     r0,[sp,#0x18d]
00005a  f89d118c          LDRB     r1,[sp,#0x18c]
00005e  eb002701          ADD      r7,r0,r1,LSL #8
;;;442        for(i=0;i<CAN_data.len;i++)
000062  2500              MOVS     r5,#0
000064  e005              B        |L6.114|
                  |L6.102|
;;;443    	{
;;;444    		Vaild[i]=p_PC_data->data[4+i];//第五位开始是数据部分(功能码开始)
000066  1d28              ADDS     r0,r5,#4
000068  5c20              LDRB     r0,[r4,r0]
00006a  a943              ADD      r1,sp,#0x10c
00006c  5548              STRB     r0,[r1,r5]
00006e  1c68              ADDS     r0,r5,#1              ;442
000070  b2c5              UXTB     r5,r0                 ;442
                  |L6.114|
000072  f89d0108          LDRB     r0,[sp,#0x108]        ;442
000076  42a8              CMP      r0,r5                 ;442
000078  dcf5              BGT      |L6.102|
;;;445    	}
;;;446        CRC_Back = CRC16_XMODEM(Vaild, CAN_data.len);
00007a  f89d1108          LDRB     r1,[sp,#0x108]
00007e  a843              ADD      r0,sp,#0x10c
000080  f7fffffe          BL       CRC16_XMODEM
000084  4606              MOV      r6,r0
;;;447    
;;;448        if(CRC_Back == ReceiveData_CRC)
000086  42be              CMP      r6,r7
000088  d103              BNE      |L6.146|
;;;449        {
;;;450            CAN_data.eff_sign = 1;
00008a  2001              MOVS     r0,#1
00008c  f88d0004          STRB     r0,[sp,#4]
000090  e005              B        |L6.158|
                  |L6.146|
;;;451        }
;;;452        else
;;;453        {
;;;454            CAN_data.eff_sign = 0;//标志结构体里面是数据无效
000092  2000              MOVS     r0,#0
000094  f88d0004          STRB     r0,[sp,#4]
;;;455            App_printf("CRC错误\r\n");
000098  a005              ADR      r0,|L6.176|
00009a  f7fffffe          BL       App_printf
                  |L6.158|
;;;456        }
;;;457    
;;;458        return CAN_data;
00009e  f2401205          MOV      r2,#0x105
0000a2  a901              ADD      r1,sp,#4
0000a4  4640              MOV      r0,r8
0000a6  f7fffffe          BL       __aeabi_memcpy
;;;459    }
0000aa  b064              ADD      sp,sp,#0x190
0000ac  e8bd81f0          POP      {r4-r8,pc}
;;;460    
                          ENDP

                  |L6.176|
0000b0  435243b4          DCB      "CRC",180,237,206,243,"\r\n",0
0000b4  edcef30d
0000b8  0a00    
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||i.Optional_Band_scan||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Optional_Band_scan PROC
;;;1866   /*------------------------------------扫频函数2----------------------------------------*/
;;;1867   void Optional_Band_scan(uint8_t Now_Frq,uint8_t Scan_end)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1868   {
000004  b08b              SUB      sp,sp,#0x2c
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
;;;1869   	int ret = 0,Flag=0,n;
00000a  f04f0900          MOV      r9,#0
00000e  46ca              MOV      r10,r9
;;;1870   	uint8_t protect_count = 0;		//保护机器
000010  46cb              MOV      r11,r9
;;;1871   	char freq_scan_to_Tx[4]={0x00};    //保存十六进制扫频下发的频率数据
000012  2000              MOVS     r0,#0
000014  900a              STR      r0,[sp,#0x28]
;;;1872   	unsigned char test_to_Tx[2] = {0};
000016  9009              STR      r0,[sp,#0x24]
;;;1873   	
;;;1874   	uint8_t		temp_point ;
;;;1875   	uint8_t		temp_end ;
;;;1876   	uint8_t   index_dec;
;;;1877   	
;;;1878   	float		temp_Forward_power = 0.0;
000018  9007              STR      r0,[sp,#0x1c]
;;;1879   	float		temp_Reverse_power = 0.0;
00001a  9006              STR      r0,[sp,#0x18]
;;;1880   	float		temp_Standing_wave_ratio = 0.0;
00001c  9005              STR      r0,[sp,#0x14]
;;;1881   	float		temp_swr = 0.0;
00001e  9004              STR      r0,[sp,#0x10]
;;;1882   	
;;;1883   	
;;;1884   		temp_point=Now_Frq/10;
000020  200a              MOVS     r0,#0xa
000022  fb96f0f0          SDIV     r0,r6,r0
000026  b2c4              UXTB     r4,r0
;;;1885   		temp_end=Scan_end/10;
000028  200a              MOVS     r0,#0xa
00002a  fb98f0f0          SDIV     r0,r8,r0
00002e  b2c0              UXTB     r0,r0
000030  9008              STR      r0,[sp,#0x20]
;;;1886   		index_dec=Now_Frq%10;
000032  200a              MOVS     r0,#0xa
000034  fb96f1f0          SDIV     r1,r6,r0
000038  fb006011          MLS      r0,r0,r1,r6
00003c  b2c5              UXTB     r5,r0
;;;1887   		
;;;1888   		if( re_scan_flag == 0x01 )		//there are valid data of scan, and the button of scan have been click again.
00003e  48f7              LDR      r0,|L7.1052|
000040  7800              LDRB     r0,[r0,#0]  ; re_scan_flag
000042  2801              CMP      r0,#1
000044  d120              BNE      |L7.136|
;;;1889   		{
;;;1890   			temp_swr = SWR_array[(temp_point-3)*10+index_dec];
000046  1ee0              SUBS     r0,r4,#3
000048  eb000080          ADD      r0,r0,r0,LSL #2
00004c  eb050040          ADD      r0,r5,r0,LSL #1
000050  49f3              LDR      r1,|L7.1056|
000052  f8510020          LDR      r0,[r1,r0,LSL #2]
000056  9004              STR      r0,[sp,#0x10]
;;;1891   			if( (temp_swr < 1.0) || (temp_swr >= 2.0) )	//unvalid data
000058  9804              LDR      r0,[sp,#0x10]
00005a  f7fffffe          BL       __aeabi_f2d
00005e  2200              MOVS     r2,#0
000060  4bf0              LDR      r3,|L7.1060|
000062  e9cd0102          STRD     r0,r1,[sp,#8]
000066  f7fffffe          BL       __aeabi_cdcmple
00006a  d30d              BCC      |L7.136|
00006c  9804              LDR      r0,[sp,#0x10]
00006e  f7fffffe          BL       __aeabi_f2d
000072  2200              MOVS     r2,#0
000074  f04f4380          MOV      r3,#0x40000000
000078  e9cd0102          STRD     r0,r1,[sp,#8]
00007c  f7fffffe          BL       __aeabi_cdrcmple
000080  d902              BLS      |L7.136|
                  |L7.130|
;;;1892   			{
;;;1893   				//scan
;;;1894   			}
;;;1895   			
;;;1896   			else	//the data is well
;;;1897   			{
;;;1898   				return;
;;;1899   			}
;;;1900   		}
;;;1901   		
;;;1902           if( (System.cancel_sweeping == 0x01) || (System.stop == 0x01) )		//取消扫频
;;;1903           {
;;;1904               GT2000_Stop();
;;;1905   
;;;1906               System.sweep = 0;
;;;1907               System.stop = 0;
;;;1908               System.achieve_add_sub = 0;
;;;1909               System.modify_power = 0;
;;;1910               System.cancel_add_sub = 0;
;;;1911               System_Status_Clean();
;;;1912               System.status = SYSTEM_STANDBY;
;;;1913   			
;;;1914   						Scan_Breakpoint_Save(temp_point, index_dec);
;;;1915               return;
;;;1916           }
;;;1917           else	if( System.Voltage < 40.0 )
;;;1918           {
;;;1919               System.open = 0x00;
;;;1920   					  Trans_printf(" System.Voltage < 40.0 退出扫频！\n");
;;;1921               return;
;;;1922           }
;;;1923   
;;;1924   				System.status = SYSTEM_SCAN;
;;;1925   				System.sweep = 0x01;//扫频标志位	1:正在扫频，2:扫频完成，更新status标志位，并将sweep清零		最后，保存在flash
;;;1926   				
;;;1927   				//channel method都在MT2000_Cmd_Channel()固定写死了的，不需要再设置
;;;1928   				GT2000_Tx.Gt2000_mode = 1;		//固频
;;;1929   				GT2000_Tx.Frequency_power[1] = 0x04 ;		//北京广通机器扫频功率值1001
;;;1930   				GT2000_Tx.Frequency_power[0] = 0x10 ;		
;;;1931   		//		MT2000_Tx.method = 'F';		//FM
;;;1932   				
;;;1933   				n=(temp_point*1000)+(index_dec*100);  //扫频频率扩大1000倍
;;;1934   				Trans_printf(" scan2频点n=  %d \n",n);
;;;1935   				sprintf(freq_scan_to_Tx, "%04X", n); //把十进制数字转为16进制大写字符串
;;;1936   				StrToHex(test_to_Tx,(uint8_t*)freq_scan_to_Tx, 2); //remarks : 将字符串转化为16进制数	保存在test_to_Tx				
;;;1937   				GT2000_Tx.Gt2000_freq1[0] = test_to_Tx[1];
;;;1938   				GT2000_Tx.Gt2000_freq1[1] = test_to_Tx[0];
;;;1939   				GT2000_Tx.Gt2000_freq1[2] = 0x00;					//小数点保持不变
;;;1940   				GT2000_Tx.Gt2000_freq1[3] = 0x00;
;;;1941   						Trans_printf(" scan2现在的扫频频点: temp_point= %d index_dec= %d freq_scan_to_Tx=%02x %02x \n",temp_point,index_dec,freq_scan_to_Tx[0],freq_scan_to_Tx[1]);
;;;1942   						Trans_printf(" 扫频下发的scan2_freq_Tx: %02X %02X ",GT2000_Tx.Gt2000_freq1[0],GT2000_Tx.Gt2000_freq1[1]);
;;;1943   
;;;1944   				temp_Forward_power = 0.0;
;;;1945   				temp_Reverse_power = 0.0;
;;;1946   				temp_Standing_wave_ratio = 0.0;
;;;1947   
;;;1948   
;;;1949           Flag=GT2000_Emit();   //触发发射，在上面赋值发射参数
;;;1950   				Trans_printf(" 2_T0_GT2000_Emit() Flag= %d \n",Flag);
;;;1951   				vTaskDelay(6000);
;;;1952   				Gt_Inquire_All();		//查询一次
;;;1953   				Flag=GT2000_Wait_Ack(MT2000_CMD_CHANNEL);
;;;1954   				
;;;1955   				if(Flag==MT2000_ACK_ALARM)
;;;1956   				{		
;;;1957   					temp_Forward_power = 0.0;
;;;1958   					temp_Reverse_power = 0.0;
;;;1959   					temp_Standing_wave_ratio = SCAN_ALARM_SWR_THRESHOLD;
;;;1960   					Scan_Breakpoint_Save(temp_point+1, index_dec);	
;;;1961   					return;
;;;1962   				}
;;;1963   
;;;1964           if( System.emission == 0x01 )	//发射成功
;;;1965           {
;;;1966   					temp_Forward_power = System.Forward_Power;
;;;1967   					temp_Reverse_power = System.Reverse_Power;
;;;1968   					temp_Standing_wave_ratio = System.Standing_wave_ratio;
;;;1969   
;;;1970               //无应答报警、无功率报警
;;;1971               if( (Alarm.no_respond==0x01) || (Alarm.no_power==0x01) )					//退出扫频
;;;1972               {
;;;1973                   System.cancel_sweeping = 0x01;		//退出扫频
;;;1974                   GT2000_Stop();
;;;1975   
;;;1976   								System.status = SYSTEM_ALARM;
;;;1977                   System.sweep = 0;
;;;1978                   System.stop = 0;
;;;1979   				         
;;;1980   							  Trans_printf(" 无应答报警、无功率报警、退出扫频 \n");
;;;1981   								Scan_Breakpoint_Save(temp_point, index_dec);
;;;1982                   return;
;;;1983               }
;;;1984   				if( Alarm.emission == 0x01 )										//退出扫频，并在下次扫频时，退出当前频率
;;;1985   			{
;;;1986   				System.cancel_sweeping = 0x01;		//退出扫频
;;;1987   				GT2000_Stop();
;;;1988   				System.status = SYSTEM_ALARM;
;;;1989   				System.sweep = 0;
;;;1990   				System.stop = 0;
;;;1991   				
;;;1992   				temp_Forward_power = 0.0;
;;;1993   				temp_Reverse_power = 0.0;
;;;1994   				temp_Standing_wave_ratio = SCAN_ALARM_SWR_THRESHOLD;
;;;1995   				
;;;1996   				Trans_printf(" 激励器自身报警、退出扫频 \n");
;;;1997   				Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;1998   				return;
;;;1999   			}
;;;2000            else	if( (Alarm.swr_alarm == 0x01) || (Alarm.over_Electric==0x01) )		//跳过当前频点
;;;2001   			{
;;;2002   				Alarm.swr_alarm = 0x00;
;;;2003   				Alarm.over_Electric = 0x00;
;;;2004   				
;;;2005   				temp_Forward_power = System.Forward_Power;
;;;2006   				temp_Reverse_power = System.Reverse_Power;
;;;2007   				temp_Standing_wave_ratio = System.Standing_wave_ratio;
;;;2008   				
;;;2009   				GT2000_Stop();
;;;2010   
;;;2011   				//改回扫频状态，继续扫下一个频率
;;;2012   				System.status = SYSTEM_SCAN;
;;;2013   				System.sweep = 0x01;
;;;2014   				System.stop = 0;
;;;2015   				
;;;2016   				Trans_printf(" 驻波比报警、过流报警、退出扫频 \n");
;;;2017   				Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;2018   			}
;;;2019              
;;;2020           }
;;;2021           else							//发射失败
;;;2022           {
;;;2023   					Trans_printf(" 扫频发射失败、退出扫频 \n");
;;;2024   						System.status = SYSTEM_ALARM;
;;;2025   						System.sweep = 0;
;;;2026   						System.stop = 0;
;;;2027   			
;;;2028               temp_Forward_power = 0.0;
;;;2029               temp_Reverse_power = 0.0;
;;;2030               temp_Standing_wave_ratio = SCAN_ALARM_SWR_THRESHOLD;
;;;2031   
;;;2032   
;;;2033   					if( Alarm.emission == 0x01 )									//退出扫频，并在下次扫频时，退出当前频率
;;;2034   					{
;;;2035   						System.cancel_sweeping = 0x01;		//退出扫频
;;;2036   						GT2000_Stop();
;;;2037   						System.status = SYSTEM_ALARM;
;;;2038   						System.sweep = 0;
;;;2039   						System.stop = 0;
;;;2040   						
;;;2041   						Scan_Breakpoint_Save(temp_point+1, index_dec);							//调谐时报警，先停止，跳过当前频点
;;;2042   					}				
;;;2043   					else
;;;2044   					{
;;;2045   						Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;2046   					}
;;;2047           }
;;;2048   				
;;;2049   				vTaskDelay(4000);
;;;2050   				Gt_Inquire_All();		//查询一次
;;;2051   				ret=GT2000_Wait_Ack(MT2000_CMD_CHANNEL);
;;;2052   				if(ret==MT2000_ACK_OK)
;;;2053   				{
;;;2054   					temp_Forward_power = System.Forward_Power;
;;;2055   					temp_Reverse_power = System.Reverse_Power;
;;;2056   					temp_Standing_wave_ratio = System.Standing_wave_ratio;
;;;2057   				}
;;;2058   				vTaskDelay(2000);
;;;2059           //数组下标为	( 频率(MHz)-5 )*10
;;;2060           //				5.0MHz => Forward_Power_array[0]	5.1MHz => Forward_Power_array[1]
;;;2061           //				6.0MHz => Forward_Power_array[10]	6.1MHz => Forward_Power_array[11]
;;;2062           //	index_dec:0~9	i:freq_end-freq_begin = 26.0-5.0 = 21
;;;2063           Forward_Power_array[(temp_point-3)*10+index_dec] = temp_Forward_power/10.0;			//233，需要存进flash，返回扫频结果
;;;2064           Reverse_Power_array[(temp_point-3)*10+index_dec] = temp_Reverse_power;					//不需要存，也不需要返回，所以不除
;;;2065           SWR_array[(temp_point-3)*10+index_dec] = temp_Standing_wave_ratio;	//233，需要存进flash，返回扫频结果
;;;2066   				
;;;2067   				Gt_RF_Close();		//关发射
;;;2068   				vTaskDelay(50);
;;;2069   				ret=MT2000_ACK_OK;			//默认成功
;;;2070   
;;;2071           if( ret == MT2000_ACK_OK )							//停止成功
;;;2072           {
;;;2073               System.stop = 0x00;
;;;2074               App_printf("Sweep//发射停止\r\n");
;;;2075   
;;;2076               if( (System.cancel_sweeping == 0x01) || (System.stop == 0x01)  )
;;;2077               {
;;;2078                   System.sweep = 0;
;;;2079                   System.stop = 0;
;;;2080                   System.achieve_add_sub = 0;
;;;2081                   System.modify_power = 0;
;;;2082                   System.cancel_add_sub = 0;
;;;2083                   System_Status_Clean();
;;;2084                   System.status = SYSTEM_STANDBY;
;;;2085   
;;;2086   								Scan_Breakpoint_Save(temp_point, index_dec);
;;;2087                   return;
;;;2088               }
;;;2089               else
;;;2090               {
;;;2091                   System_Status_Clean();
;;;2092               }
;;;2093   
;;;2094               System.status = SYSTEM_SCAN;	//正在扫频
;;;2095               System.sweep = 0x01;
;;;2096   
;;;2097               if(temp_point<temp_end)
;;;2098               {
;;;2099                   for(protect_count=0; protect_count<50; protect_count++)
;;;2100                   {
;;;2101                       if( (System.cancel_sweeping == 0x01) || (System.stop == 0x01)  )		//取消扫频
;;;2102                       {
;;;2103   												Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;2104                           return;
;;;2105                       }
;;;2106                       else
;;;2107                       {
;;;2108                           vTaskDelay(100);						//保护机器
;;;2109                       }
;;;2110                   }
;;;2111               }
;;;2112   						else
;;;2113   						{
;;;2114   							Scan_Breakpoint_Save(temp_point+1, index_dec);
;;;2115   							return;
;;;2116   						}
;;;2117           }
;;;2118           else     //不成功，返回停止失败
;;;2119           {
;;;2120               Alarm.no_respond_locate = 5;
;;;2121               App_printf("Sweep stop 5 no respond.\r\n");
;;;2122   				  	Trans_printf("Sweep stop 5 no respond.\r\n");
;;;2123               return;
;;;2124           }
;;;2125   								
;;;2126       return;
;;;2127   }
000082  b00b              ADD      sp,sp,#0x2c
000084  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.136|
000088  48e7              LDR      r0,|L7.1064|
00008a  7bc0              LDRB     r0,[r0,#0xf]          ;1902  ; System
00008c  2801              CMP      r0,#1                 ;1902
00008e  d003              BEQ      |L7.152|
000090  48e5              LDR      r0,|L7.1064|
000092  7d40              LDRB     r0,[r0,#0x15]         ;1902  ; System
000094  2801              CMP      r0,#1                 ;1902
000096  d112              BNE      |L7.190|
                  |L7.152|
000098  f7fffffe          BL       GT2000_Stop
00009c  2000              MOVS     r0,#0                 ;1906
00009e  49e2              LDR      r1,|L7.1064|
0000a0  7388              STRB     r0,[r1,#0xe]          ;1906
0000a2  7548              STRB     r0,[r1,#0x15]         ;1907
0000a4  7448              STRB     r0,[r1,#0x11]         ;1908
0000a6  7488              STRB     r0,[r1,#0x12]         ;1909
0000a8  74c8              STRB     r0,[r1,#0x13]         ;1910
0000aa  f7fffffe          BL       System_Status_Clean
0000ae  2002              MOVS     r0,#2                 ;1912
0000b0  49dd              LDR      r1,|L7.1064|
0000b2  72c8              STRB     r0,[r1,#0xb]          ;1912
0000b4  4629              MOV      r1,r5                 ;1914
0000b6  4620              MOV      r0,r4                 ;1914
0000b8  f7fffffe          BL       Scan_Breakpoint_Save
0000bc  e7e1              B        |L7.130|
                  |L7.190|
0000be  49da              LDR      r1,|L7.1064|
0000c0  6f48              LDR      r0,[r1,#0x74]         ;1917  ; System
0000c2  f7fffffe          BL       __aeabi_f2d
0000c6  2200              MOVS     r2,#0                 ;1917
0000c8  4bd8              LDR      r3,|L7.1068|
0000ca  e9cd0102          STRD     r0,r1,[sp,#8]         ;1917
0000ce  f7fffffe          BL       __aeabi_cdcmple
0000d2  d206              BCS      |L7.226|
0000d4  2000              MOVS     r0,#0                 ;1919
0000d6  49d4              LDR      r1,|L7.1064|
0000d8  7308              STRB     r0,[r1,#0xc]          ;1919
0000da  a0d5              ADR      r0,|L7.1072|
0000dc  f7fffffe          BL       Trans_printf
0000e0  e7cf              B        |L7.130|
                  |L7.226|
0000e2  2005              MOVS     r0,#5                 ;1924
0000e4  49d0              LDR      r1,|L7.1064|
0000e6  72c8              STRB     r0,[r1,#0xb]          ;1924
0000e8  2001              MOVS     r0,#1                 ;1925
0000ea  7388              STRB     r0,[r1,#0xe]          ;1925
0000ec  49d9              LDR      r1,|L7.1108|
0000ee  7148              STRB     r0,[r1,#5]            ;1928
0000f0  2104              MOVS     r1,#4                 ;1929
0000f2  48d8              LDR      r0,|L7.1108|
0000f4  f8801043          STRB     r1,[r0,#0x43]         ;1929
0000f8  2010              MOVS     r0,#0x10              ;1930
0000fa  49d6              LDR      r1,|L7.1108|
0000fc  f8810042          STRB     r0,[r1,#0x42]         ;1930
000100  f44f707a          MOV      r0,#0x3e8             ;1933
000104  4360              MULS     r0,r4,r0              ;1933
000106  eb0501c5          ADD      r1,r5,r5,LSL #3       ;1933
00010a  eb011105          ADD      r1,r1,r5,LSL #4       ;1933
00010e  eb000781          ADD      r7,r0,r1,LSL #2       ;1933
000112  4639              MOV      r1,r7                 ;1934
000114  a0d0              ADR      r0,|L7.1112|
000116  f7fffffe          BL       Trans_printf
00011a  463a              MOV      r2,r7                 ;1935
00011c  a1d3              ADR      r1,|L7.1132|
00011e  a80a              ADD      r0,sp,#0x28           ;1935
000120  f7fffffe          BL       __2sprintf
000124  2202              MOVS     r2,#2                 ;1936
000126  a90a              ADD      r1,sp,#0x28           ;1936
000128  a809              ADD      r0,sp,#0x24           ;1936
00012a  f7fffffe          BL       StrToHex
00012e  f89d0025          LDRB     r0,[sp,#0x25]         ;1937
000132  49c8              LDR      r1,|L7.1108|
000134  f8810024          STRB     r0,[r1,#0x24]         ;1937
000138  f89d1024          LDRB     r1,[sp,#0x24]         ;1938
00013c  48c5              LDR      r0,|L7.1108|
00013e  f8801025          STRB     r1,[r0,#0x25]         ;1938
000142  2100              MOVS     r1,#0                 ;1939
000144  f8801026          STRB     r1,[r0,#0x26]         ;1939
000148  f8801027          STRB     r1,[r0,#0x27]         ;1940
00014c  f89d0029          LDRB     r0,[sp,#0x29]         ;1941
000150  9000              STR      r0,[sp,#0]            ;1941
000152  f89d3028          LDRB     r3,[sp,#0x28]         ;1941
000156  462a              MOV      r2,r5                 ;1941
000158  4621              MOV      r1,r4                 ;1941
00015a  48c6              LDR      r0,|L7.1140|
00015c  f7fffffe          BL       Trans_printf
000160  48bc              LDR      r0,|L7.1108|
000162  f8902025          LDRB     r2,[r0,#0x25]         ;1942
000166  f8901024          LDRB     r1,[r0,#0x24]         ;1942  ; GT2000_Tx
00016a  a0c3              ADR      r0,|L7.1144|
00016c  f7fffffe          BL       Trans_printf
000170  2000              MOVS     r0,#0                 ;1944
000172  9007              STR      r0,[sp,#0x1c]         ;1944
000174  9006              STR      r0,[sp,#0x18]         ;1945
000176  9005              STR      r0,[sp,#0x14]         ;1946
000178  f7fffffe          BL       GT2000_Emit
00017c  4682              MOV      r10,r0                ;1949
00017e  4651              MOV      r1,r10                ;1950
000180  a0c7              ADR      r0,|L7.1184|
000182  f7fffffe          BL       Trans_printf
000186  f2417070          MOV      r0,#0x1770            ;1951
00018a  f7fffffe          BL       vTaskDelay
00018e  f7fffffe          BL       Gt_Inquire_All
000192  2043              MOVS     r0,#0x43              ;1953
000194  f7fffffe          BL       GT2000_Wait_Ack
000198  4682              MOV      r10,r0                ;1953
00019a  f10a0002          ADD      r0,r10,#2             ;1955
00019e  b958              CBNZ     r0,|L7.440|
0001a0  2000              MOVS     r0,#0                 ;1957
0001a2  9007              STR      r0,[sp,#0x1c]         ;1957
0001a4  9006              STR      r0,[sp,#0x18]         ;1958
0001a6  f04f4081          MOV      r0,#0x40800000        ;1959
0001aa  9005              STR      r0,[sp,#0x14]         ;1959
0001ac  1c61              ADDS     r1,r4,#1              ;1960
0001ae  b2c8              UXTB     r0,r1                 ;1960
0001b0  4629              MOV      r1,r5                 ;1960
0001b2  f7fffffe          BL       Scan_Breakpoint_Save
0001b6  e764              B        |L7.130|
                  |L7.440|
0001b8  489b              LDR      r0,|L7.1064|
0001ba  7d80              LDRB     r0,[r0,#0x16]         ;1964  ; System
0001bc  2801              CMP      r0,#1                 ;1964
0001be  d166              BNE      |L7.654|
0001c0  4899              LDR      r0,|L7.1064|
0001c2  6ec0              LDR      r0,[r0,#0x6c]         ;1966  ; System
0001c4  9007              STR      r0,[sp,#0x1c]         ;1966
0001c6  4898              LDR      r0,|L7.1064|
0001c8  6f00              LDR      r0,[r0,#0x70]         ;1967  ; System
0001ca  9006              STR      r0,[sp,#0x18]         ;1967
0001cc  4896              LDR      r0,|L7.1064|
0001ce  6fc0              LDR      r0,[r0,#0x7c]         ;1968  ; System
0001d0  9005              STR      r0,[sp,#0x14]         ;1968
0001d2  48bb              LDR      r0,|L7.1216|
0001d4  78c0              LDRB     r0,[r0,#3]            ;1971  ; Alarm
0001d6  2801              CMP      r0,#1                 ;1971
0001d8  d003              BEQ      |L7.482|
0001da  48b9              LDR      r0,|L7.1216|
0001dc  7cc0              LDRB     r0,[r0,#0x13]         ;1971  ; Alarm
0001de  2801              CMP      r0,#1                 ;1971
0001e0  d112              BNE      |L7.520|
                  |L7.482|
0001e2  2001              MOVS     r0,#1                 ;1973
0001e4  4990              LDR      r1,|L7.1064|
0001e6  73c8              STRB     r0,[r1,#0xf]          ;1973
0001e8  f7fffffe          BL       GT2000_Stop
0001ec  2011              MOVS     r0,#0x11              ;1976
0001ee  498e              LDR      r1,|L7.1064|
0001f0  72c8              STRB     r0,[r1,#0xb]          ;1976
0001f2  2000              MOVS     r0,#0                 ;1977
0001f4  7388              STRB     r0,[r1,#0xe]          ;1977
0001f6  7548              STRB     r0,[r1,#0x15]         ;1978
0001f8  a0b2              ADR      r0,|L7.1220|
0001fa  f7fffffe          BL       Trans_printf
0001fe  4629              MOV      r1,r5                 ;1981
000200  4620              MOV      r0,r4                 ;1981
000202  f7fffffe          BL       Scan_Breakpoint_Save
000206  e73c              B        |L7.130|
                  |L7.520|
000208  48ad              LDR      r0,|L7.1216|
00020a  7840              LDRB     r0,[r0,#1]            ;1984  ; Alarm
00020c  2801              CMP      r0,#1                 ;1984
00020e  d117              BNE      |L7.576|
000210  4985              LDR      r1,|L7.1064|
000212  73c8              STRB     r0,[r1,#0xf]          ;1986
000214  f7fffffe          BL       GT2000_Stop
000218  2011              MOVS     r0,#0x11              ;1988
00021a  4983              LDR      r1,|L7.1064|
00021c  72c8              STRB     r0,[r1,#0xb]          ;1988
00021e  2000              MOVS     r0,#0                 ;1989
000220  7388              STRB     r0,[r1,#0xe]          ;1989
000222  7548              STRB     r0,[r1,#0x15]         ;1990
000224  9007              STR      r0,[sp,#0x1c]         ;1992
000226  9006              STR      r0,[sp,#0x18]         ;1993
000228  f04f4081          MOV      r0,#0x40800000        ;1994
00022c  9005              STR      r0,[sp,#0x14]         ;1994
00022e  a0ae              ADR      r0,|L7.1256|
000230  f7fffffe          BL       Trans_printf
000234  1c61              ADDS     r1,r4,#1              ;1997
000236  b2c8              UXTB     r0,r1                 ;1997
000238  4629              MOV      r1,r5                 ;1997
00023a  f7fffffe          BL       Scan_Breakpoint_Save
00023e  e720              B        |L7.130|
                  |L7.576|
000240  489f              LDR      r0,|L7.1216|
000242  7c40              LDRB     r0,[r0,#0x11]         ;2000  ; Alarm
000244  2801              CMP      r0,#1                 ;2000
000246  d003              BEQ      |L7.592|
000248  489d              LDR      r0,|L7.1216|
00024a  7ac0              LDRB     r0,[r0,#0xb]          ;2000  ; Alarm
00024c  2801              CMP      r0,#1                 ;2000
00024e  d144              BNE      |L7.730|
                  |L7.592|
000250  2000              MOVS     r0,#0                 ;2002
000252  499b              LDR      r1,|L7.1216|
000254  7448              STRB     r0,[r1,#0x11]         ;2002
000256  72c8              STRB     r0,[r1,#0xb]          ;2003
000258  4873              LDR      r0,|L7.1064|
00025a  6ec0              LDR      r0,[r0,#0x6c]         ;2005  ; System
00025c  9007              STR      r0,[sp,#0x1c]         ;2005
00025e  4872              LDR      r0,|L7.1064|
000260  6f00              LDR      r0,[r0,#0x70]         ;2006  ; System
000262  9006              STR      r0,[sp,#0x18]         ;2006
000264  4870              LDR      r0,|L7.1064|
000266  6fc0              LDR      r0,[r0,#0x7c]         ;2007  ; System
000268  9005              STR      r0,[sp,#0x14]         ;2007
00026a  f7fffffe          BL       GT2000_Stop
00026e  2005              MOVS     r0,#5                 ;2012
000270  496d              LDR      r1,|L7.1064|
000272  72c8              STRB     r0,[r1,#0xb]          ;2012
000274  2001              MOVS     r0,#1                 ;2013
000276  7388              STRB     r0,[r1,#0xe]          ;2013
000278  2000              MOVS     r0,#0                 ;2014
00027a  7548              STRB     r0,[r1,#0x15]         ;2014
00027c  a0a1              ADR      r0,|L7.1284|
00027e  f7fffffe          BL       Trans_printf
000282  1c61              ADDS     r1,r4,#1              ;2017
000284  b2c8              UXTB     r0,r1                 ;2017
000286  4629              MOV      r1,r5                 ;2017
000288  f7fffffe          BL       Scan_Breakpoint_Save
00028c  e025              B        |L7.730|
                  |L7.654|
00028e  a0a6              ADR      r0,|L7.1320|
000290  f7fffffe          BL       Trans_printf
000294  2011              MOVS     r0,#0x11              ;2024
000296  4964              LDR      r1,|L7.1064|
000298  72c8              STRB     r0,[r1,#0xb]          ;2024
00029a  2000              MOVS     r0,#0                 ;2025
00029c  7388              STRB     r0,[r1,#0xe]          ;2025
00029e  7548              STRB     r0,[r1,#0x15]         ;2026
0002a0  9007              STR      r0,[sp,#0x1c]         ;2028
0002a2  9006              STR      r0,[sp,#0x18]         ;2029
0002a4  f04f4081          MOV      r0,#0x40800000        ;2030
0002a8  9005              STR      r0,[sp,#0x14]         ;2030
0002aa  4885              LDR      r0,|L7.1216|
0002ac  7840              LDRB     r0,[r0,#1]            ;2033  ; Alarm
0002ae  2801              CMP      r0,#1                 ;2033
0002b0  d10e              BNE      |L7.720|
0002b2  73c8              STRB     r0,[r1,#0xf]          ;2035
0002b4  f7fffffe          BL       GT2000_Stop
0002b8  2011              MOVS     r0,#0x11              ;2037
0002ba  495b              LDR      r1,|L7.1064|
0002bc  72c8              STRB     r0,[r1,#0xb]          ;2037
0002be  2000              MOVS     r0,#0                 ;2038
0002c0  7388              STRB     r0,[r1,#0xe]          ;2038
0002c2  7548              STRB     r0,[r1,#0x15]         ;2039
0002c4  1c61              ADDS     r1,r4,#1              ;2041
0002c6  b2c8              UXTB     r0,r1                 ;2041
0002c8  4629              MOV      r1,r5                 ;2041
0002ca  f7fffffe          BL       Scan_Breakpoint_Save
0002ce  e004              B        |L7.730|
                  |L7.720|
0002d0  1c61              ADDS     r1,r4,#1              ;2045
0002d2  b2c8              UXTB     r0,r1                 ;2045
0002d4  4629              MOV      r1,r5                 ;2045
0002d6  f7fffffe          BL       Scan_Breakpoint_Save
                  |L7.730|
0002da  f44f607a          MOV      r0,#0xfa0             ;2049
0002de  f7fffffe          BL       vTaskDelay
0002e2  f7fffffe          BL       Gt_Inquire_All
0002e6  2043              MOVS     r0,#0x43              ;2051
0002e8  f7fffffe          BL       GT2000_Wait_Ack
0002ec  4681              MOV      r9,r0                 ;2051
0002ee  f1b90f01          CMP      r9,#1                 ;2052
0002f2  d108              BNE      |L7.774|
0002f4  484c              LDR      r0,|L7.1064|
0002f6  6ec0              LDR      r0,[r0,#0x6c]         ;2054  ; System
0002f8  9007              STR      r0,[sp,#0x1c]         ;2054
0002fa  484b              LDR      r0,|L7.1064|
0002fc  6f00              LDR      r0,[r0,#0x70]         ;2055  ; System
0002fe  9006              STR      r0,[sp,#0x18]         ;2055
000300  4849              LDR      r0,|L7.1064|
000302  6fc0              LDR      r0,[r0,#0x7c]         ;2056  ; System
000304  9005              STR      r0,[sp,#0x14]         ;2056
                  |L7.774|
000306  f44f60fa          MOV      r0,#0x7d0             ;2058
00030a  f7fffffe          BL       vTaskDelay
00030e  9807              LDR      r0,[sp,#0x1c]         ;2063
000310  f7fffffe          BL       __aeabi_f2d
000314  2200              MOVS     r2,#0                 ;2063
000316  4b8b              LDR      r3,|L7.1348|
000318  e9cd0100          STRD     r0,r1,[sp,#0]         ;2063
00031c  f7fffffe          BL       __aeabi_ddiv
000320  e9cd0102          STRD     r0,r1,[sp,#8]         ;2063
000324  f7fffffe          BL       __aeabi_d2f
000328  1ee1              SUBS     r1,r4,#3              ;2063
00032a  eb010181          ADD      r1,r1,r1,LSL #2       ;2063
00032e  eb050141          ADD      r1,r5,r1,LSL #1       ;2063
000332  4a85              LDR      r2,|L7.1352|
000334  f8420021          STR      r0,[r2,r1,LSL #2]     ;2063
000338  1ee1              SUBS     r1,r4,#3              ;2064
00033a  eb010181          ADD      r1,r1,r1,LSL #2       ;2064
00033e  eb050141          ADD      r1,r5,r1,LSL #1       ;2064
000342  4a82              LDR      r2,|L7.1356|
000344  9806              LDR      r0,[sp,#0x18]         ;2064
000346  f8420021          STR      r0,[r2,r1,LSL #2]     ;2064
00034a  1ee1              SUBS     r1,r4,#3              ;2065
00034c  eb010181          ADD      r1,r1,r1,LSL #2       ;2065
000350  eb050141          ADD      r1,r5,r1,LSL #1       ;2065
000354  4a32              LDR      r2,|L7.1056|
000356  9805              LDR      r0,[sp,#0x14]         ;2065
000358  f8420021          STR      r0,[r2,r1,LSL #2]     ;2065
00035c  f7fffffe          BL       Gt_RF_Close
000360  2032              MOVS     r0,#0x32              ;2068
000362  f7fffffe          BL       vTaskDelay
000366  f04f0901          MOV      r9,#1                 ;2069
00036a  f1b90f00          CMP      r9,#0                 ;2071
00036e  d04a              BEQ      |L7.1030|
000370  2000              MOVS     r0,#0                 ;2073
000372  492d              LDR      r1,|L7.1064|
000374  7548              STRB     r0,[r1,#0x15]         ;2073
000376  a076              ADR      r0,|L7.1360|
000378  f7fffffe          BL       App_printf
00037c  482a              LDR      r0,|L7.1064|
00037e  7bc0              LDRB     r0,[r0,#0xf]          ;2076  ; System
000380  2801              CMP      r0,#1                 ;2076
000382  d003              BEQ      |L7.908|
000384  4828              LDR      r0,|L7.1064|
000386  7d40              LDRB     r0,[r0,#0x15]         ;2076  ; System
000388  2801              CMP      r0,#1                 ;2076
00038a  d110              BNE      |L7.942|
                  |L7.908|
00038c  2000              MOVS     r0,#0                 ;2078
00038e  4926              LDR      r1,|L7.1064|
000390  7388              STRB     r0,[r1,#0xe]          ;2078
000392  7548              STRB     r0,[r1,#0x15]         ;2079
000394  7448              STRB     r0,[r1,#0x11]         ;2080
000396  7488              STRB     r0,[r1,#0x12]         ;2081
000398  74c8              STRB     r0,[r1,#0x13]         ;2082
00039a  f7fffffe          BL       System_Status_Clean
00039e  2002              MOVS     r0,#2                 ;2084
0003a0  4921              LDR      r1,|L7.1064|
0003a2  72c8              STRB     r0,[r1,#0xb]          ;2084
0003a4  4629              MOV      r1,r5                 ;2086
0003a6  4620              MOV      r0,r4                 ;2086
0003a8  f7fffffe          BL       Scan_Breakpoint_Save
0003ac  e669              B        |L7.130|
                  |L7.942|
0003ae  f7fffffe          BL       System_Status_Clean
0003b2  2005              MOVS     r0,#5                 ;2094
0003b4  491c              LDR      r1,|L7.1064|
0003b6  72c8              STRB     r0,[r1,#0xb]          ;2094
0003b8  2001              MOVS     r0,#1                 ;2095
0003ba  7388              STRB     r0,[r1,#0xe]          ;2095
0003bc  9808              LDR      r0,[sp,#0x20]         ;2097
0003be  4284              CMP      r4,r0                 ;2097
0003c0  da1b              BGE      |L7.1018|
0003c2  f04f0b00          MOV      r11,#0                ;2099
0003c6  e014              B        |L7.1010|
                  |L7.968|
0003c8  4817              LDR      r0,|L7.1064|
0003ca  7bc0              LDRB     r0,[r0,#0xf]          ;2101  ; System
0003cc  2801              CMP      r0,#1                 ;2101
0003ce  d003              BEQ      |L7.984|
0003d0  4815              LDR      r0,|L7.1064|
0003d2  7d40              LDRB     r0,[r0,#0x15]         ;2101  ; System
0003d4  2801              CMP      r0,#1                 ;2101
0003d6  d105              BNE      |L7.996|
                  |L7.984|
0003d8  1c61              ADDS     r1,r4,#1              ;2103
0003da  b2c8              UXTB     r0,r1                 ;2103
0003dc  4629              MOV      r1,r5                 ;2103
0003de  f7fffffe          BL       Scan_Breakpoint_Save
0003e2  e64e              B        |L7.130|
                  |L7.996|
0003e4  2064              MOVS     r0,#0x64              ;2108
0003e6  f7fffffe          BL       vTaskDelay
0003ea  f10b0001          ADD      r0,r11,#1             ;2099
0003ee  f0000bff          AND      r11,r0,#0xff          ;2099
                  |L7.1010|
0003f2  f1bb0f32          CMP      r11,#0x32             ;2099
0003f6  dbe7              BLT      |L7.968|
0003f8  e0c2              B        |L7.1408|
                  |L7.1018|
0003fa  1c61              ADDS     r1,r4,#1              ;2114
0003fc  b2c8              UXTB     r0,r1                 ;2114
0003fe  4629              MOV      r1,r5                 ;2114
000400  f7fffffe          BL       Scan_Breakpoint_Save
000404  e63d              B        |L7.130|
                  |L7.1030|
000406  2005              MOVS     r0,#5                 ;2120
000408  492d              LDR      r1,|L7.1216|
00040a  7188              STRB     r0,[r1,#6]            ;2120
00040c  a055              ADR      r0,|L7.1380|
00040e  f7fffffe          BL       App_printf
000412  a054              ADR      r0,|L7.1380|
000414  f7fffffe          BL       Trans_printf
000418  e633              B        |L7.130|
00041a  0000              DCW      0x0000
                  |L7.1052|
                          DCD      re_scan_flag
                  |L7.1056|
                          DCD      SWR_array
                  |L7.1060|
                          DCD      0x3ff00000
                  |L7.1064|
                          DCD      System
                  |L7.1068|
                          DCD      0x40440000
                  |L7.1072|
000430  20537973          DCB      " System.Voltage < 40.0 ",205,203,179,246,201,168,198,181
000434  74656d2e
000438  566f6c74
00043c  61676520
000440  3c203430
000444  2e3020cd
000448  cbb3f6c9
00044c  a8c6b5  
00044f  a3a10a00          DCB      163,161,"\n",0
000453  00                DCB      0
                  |L7.1108|
                          DCD      GT2000_Tx
                  |L7.1112|
000458  20736361          DCB      " scan2",198,181,181,227,"n=  %d \n",0
00045c  6e32c6b5
000460  b5e36e3d
000464  20202564
000468  200a00  
00046b  00                DCB      0
                  |L7.1132|
00046c  25303458          DCB      "%04X",0
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L7.1140|
                          DCD      ||.conststring||
                  |L7.1144|
000478  20c9a8c6          DCB      " ",201,168,198,181,207,194,183,162,181,196,"scan2_freq_"
00047c  b5cfc2b7
000480  a2b5c473
000484  63616e32
000488  5f667265
00048c  715f    
00048e  54783a20          DCB      "Tx: %02X %02X ",0
000492  25303258
000496  20253032
00049a  582000  
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
                  |L7.1184|
0004a0  20325f54          DCB      " 2_T0_GT2000_Emit() Flag= %d \n",0
0004a4  305f4754
0004a8  32303030
0004ac  5f456d69
0004b0  74282920
0004b4  466c6167
0004b8  3d202564
0004bc  200a00  
0004bf  00                DCB      0
                  |L7.1216|
                          DCD      Alarm
                  |L7.1220|
0004c4  20ceded3          DCB      " ",206,222,211,166,180,240,177,168,190,175,161,162,206,222
0004c8  a6b4f0b1
0004cc  a8beafa1
0004d0  a2cede  
0004d3  b9a6c2ca          DCB      185,166,194,202,177,168,190,175,161,162,205,203,179,246,201
0004d7  b1a8beaf
0004db  a1a2cdcb
0004df  b3f6c9  
0004e2  a8c6b520          DCB      168,198,181," \n",0
0004e6  0a00    
                  |L7.1256|
0004e8  20bca4c0          DCB      " ",188,164,192,248,198,247,215,212,201,237,177,168,190,175
0004ec  f8c6f7d7
0004f0  d4c9edb1
0004f4  a8beaf  
0004f7  a1a2cdcb          DCB      161,162,205,203,179,246,201,168,198,181," \n",0
0004fb  b3f6c9a8
0004ff  c6b5200a
000503  00      
                  |L7.1284|
000504  20d7a4b2          DCB      " ",215,164,178,168,177,200,177,168,190,175,161,162,185,253
000508  a8b1c8b1
00050c  a8beafa1
000510  a2b9fd  
000513  c1f7b1a8          DCB      193,247,177,168,190,175,161,162,205,203,179,246,201,168,198
000517  beafa1a2
00051b  cdcbb3f6
00051f  c9a8c6  
000522  b5200a00          DCB      181," \n",0
000526  00                DCB      0
000527  00                DCB      0
                  |L7.1320|
000528  20c9a8c6          DCB      " ",201,168,198,181,183,162,201,228,202,167,176,220,161,162
00052c  b5b7a2c9
000530  e4caa7b0
000534  dca1a2  
000537  cdcbb3f6          DCB      205,203,179,246,201,168,198,181," \n",0
00053b  c9a8c6b5
00053f  200a00  
000542  00                DCB      0
000543  00                DCB      0
                  |L7.1348|
                          DCD      0x40240000
                  |L7.1352|
                          DCD      Forward_Power_array
                  |L7.1356|
                          DCD      Reverse_Power_array
                  |L7.1360|
000550  53776565          DCB      "Sweep//",183,162,201,228,205,163,214,185,"\r\n",0
000554  702f2fb7
000558  a2c9e4cd
00055c  a3d6b90d
000560  0a00    
000562  00                DCB      0
000563  00                DCB      0
                  |L7.1380|
000564  53776565          DCB      "Sweep stop 5 no respond.\r\n",0
000568  70207374
00056c  6f702035
000570  206e6f20
000574  72657370
000578  6f6e642e
00057c  0d0a00  
00057f  00                DCB      0
                  |L7.1408|
000580  bf00              NOP                            ;2126
000582  e57e              B        |L7.130|
;;;2128   
                          ENDP


                          AREA ||i.Scan_Breakpoint_Read||, CODE, READONLY, ALIGN=2

                  Scan_Breakpoint_Read PROC
;;;1509   //读取扫频断点，并返回下一个频点
;;;1510   uint16_t Scan_Breakpoint_Read(void)
000000  b538              PUSH     {r3-r5,lr}
;;;1511   {
;;;1512   	uint8_t		buf[2];
;;;1513   	uint16_t	next_point = 0;
000002  2400              MOVS     r4,#0
;;;1514   	
;;;1515   	FLASH_Read(SCAN_BREAKPOINT_ADDRESS,		buf,	SCAN_BREAKPOINT_LEN);
000004  2202              MOVS     r2,#2
000006  4669              MOV      r1,sp
000008  4805              LDR      r0,|L8.32|
00000a  f7fffffe          BL       FLASH_Read
;;;1516   	
;;;1517   	next_point = 10*buf[0] + buf[1];
00000e  f89d0001          LDRB     r0,[sp,#1]
000012  f89d1000          LDRB     r1,[sp,#0]
000016  220a              MOVS     r2,#0xa
000018  fb020401          MLA      r4,r2,r1,r0
;;;1518   	return next_point;
00001c  4620              MOV      r0,r4
;;;1519   }
00001e  bd38              POP      {r3-r5,pc}
;;;1520   
                          ENDP

                  |L8.32|
                          DCD      0x08039000

                          AREA ||i.Scan_Breakpoint_Save||, CODE, READONLY, ALIGN=2

                  Scan_Breakpoint_Save PROC
;;;1521   //获取扫频断点
;;;1522   void Scan_Breakpoint_Save(uint8_t current_point_int, uint8_t current_point_dec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1523   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1524   	uint8_t p_data[SCAN_BREAKPOINT_LEN];
;;;1525   	uint8_t next_point_int = 0;
000006  2600              MOVS     r6,#0
;;;1526   	uint8_t next_point_dec = 0;
000008  2700              MOVS     r7,#0
;;;1527   
;;;1528   	if( (current_point_int > 26) && (current_point_dec == 0) )
00000a  2c1a              CMP      r4,#0x1a
00000c  dd03              BLE      |L9.22|
00000e  b915              CBNZ     r5,|L9.22|
;;;1529   	{
;;;1530   		next_point_int = 5;
000010  2605              MOVS     r6,#5
;;;1531   		next_point_dec = 1;
000012  2701              MOVS     r7,#1
000014  e040              B        |L9.152|
                  |L9.22|
;;;1532   	}
;;;1533   	else	if( (current_point_int > 26) && (current_point_dec == 1) )
000016  2c1a              CMP      r4,#0x1a
000018  dd04              BLE      |L9.36|
00001a  2d01              CMP      r5,#1
00001c  d102              BNE      |L9.36|
;;;1534   	{
;;;1535   		next_point_int = 5;
00001e  2605              MOVS     r6,#5
;;;1536   		next_point_dec = 2;
000020  2702              MOVS     r7,#2
000022  e039              B        |L9.152|
                  |L9.36|
;;;1537   	}
;;;1538   	else	if( (current_point_int > 25) && (current_point_dec == 2) )
000024  2c19              CMP      r4,#0x19
000026  dd04              BLE      |L9.50|
000028  2d02              CMP      r5,#2
00002a  d102              BNE      |L9.50|
;;;1539   	{
;;;1540   		next_point_int = 5;
00002c  2605              MOVS     r6,#5
;;;1541   		next_point_dec = 3;
00002e  2703              MOVS     r7,#3
000030  e032              B        |L9.152|
                  |L9.50|
;;;1542   	}
;;;1543   	else	if( (current_point_int > 25) && (current_point_dec == 3) )
000032  2c19              CMP      r4,#0x19
000034  dd04              BLE      |L9.64|
000036  2d03              CMP      r5,#3
000038  d102              BNE      |L9.64|
;;;1544   	{
;;;1545   		next_point_int = 5;
00003a  2605              MOVS     r6,#5
;;;1546   		next_point_dec = 4;
00003c  2704              MOVS     r7,#4
00003e  e02b              B        |L9.152|
                  |L9.64|
;;;1547   	}
;;;1548   	else	if( (current_point_int > 25) && (current_point_dec == 4) )
000040  2c19              CMP      r4,#0x19
000042  dd04              BLE      |L9.78|
000044  2d04              CMP      r5,#4
000046  d102              BNE      |L9.78|
;;;1549   	{
;;;1550   		next_point_int = 5;
000048  2605              MOVS     r6,#5
;;;1551   		next_point_dec = 5;
00004a  2705              MOVS     r7,#5
00004c  e024              B        |L9.152|
                  |L9.78|
;;;1552   	}
;;;1553   	else	if( (current_point_int > 25) && (current_point_dec == 5) )
00004e  2c19              CMP      r4,#0x19
000050  dd04              BLE      |L9.92|
000052  2d05              CMP      r5,#5
000054  d102              BNE      |L9.92|
;;;1554   	{
;;;1555   		next_point_int = 5;
000056  2605              MOVS     r6,#5
;;;1556   		next_point_dec = 6;
000058  2706              MOVS     r7,#6
00005a  e01d              B        |L9.152|
                  |L9.92|
;;;1557   	}
;;;1558   	else	if( (current_point_int > 25) && (current_point_dec == 6) )
00005c  2c19              CMP      r4,#0x19
00005e  dd04              BLE      |L9.106|
000060  2d06              CMP      r5,#6
000062  d102              BNE      |L9.106|
;;;1559   	{
;;;1560   		next_point_int = 5;
000064  2605              MOVS     r6,#5
;;;1561   		next_point_dec = 7;
000066  2707              MOVS     r7,#7
000068  e016              B        |L9.152|
                  |L9.106|
;;;1562   	}
;;;1563   	else	if( (current_point_int > 25) && (current_point_dec == 7) )
00006a  2c19              CMP      r4,#0x19
00006c  dd04              BLE      |L9.120|
00006e  2d07              CMP      r5,#7
000070  d102              BNE      |L9.120|
;;;1564   	{
;;;1565   		next_point_int = 5;
000072  2605              MOVS     r6,#5
;;;1566   		next_point_dec = 8;
000074  2708              MOVS     r7,#8
000076  e00f              B        |L9.152|
                  |L9.120|
;;;1567   	}
;;;1568   	else	if( (current_point_int > 25) && (current_point_dec == 8) )
000078  2c19              CMP      r4,#0x19
00007a  dd04              BLE      |L9.134|
00007c  2d08              CMP      r5,#8
00007e  d102              BNE      |L9.134|
;;;1569   	{
;;;1570   		next_point_int = 5;
000080  2605              MOVS     r6,#5
;;;1571   		next_point_dec = 9;
000082  2709              MOVS     r7,#9
000084  e008              B        |L9.152|
                  |L9.134|
;;;1572   	}
;;;1573   	else	if( (current_point_int > 25) && (current_point_dec == 9) )
000086  2c19              CMP      r4,#0x19
000088  dd04              BLE      |L9.148|
00008a  2d09              CMP      r5,#9
00008c  d102              BNE      |L9.148|
;;;1574   	{
;;;1575   		next_point_int = 5;
00008e  2605              MOVS     r6,#5
;;;1576   		next_point_dec = 0;
000090  2700              MOVS     r7,#0
000092  e001              B        |L9.152|
                  |L9.148|
;;;1577   	}
;;;1578   	else
;;;1579   	{
;;;1580   		next_point_int = current_point_int;
000094  4626              MOV      r6,r4
;;;1581   		next_point_dec = current_point_dec;
000096  462f              MOV      r7,r5
                  |L9.152|
;;;1582   	}
;;;1583   	
;;;1584   	p_data[0] = next_point_int;
000098  f88d6000          STRB     r6,[sp,#0]
;;;1585   	p_data[1] = next_point_dec;
00009c  f88d7001          STRB     r7,[sp,#1]
;;;1586   	
;;;1587   	Flash_Write(SCAN_BREAKPOINT_ADDRESS, p_data, SCAN_BREAKPOINT_LEN);
0000a0  2202              MOVS     r2,#2
0000a2  4669              MOV      r1,sp
0000a4  4801              LDR      r0,|L9.172|
0000a6  f7fffffe          BL       Flash_Write
;;;1588   }
0000aa  bdf8              POP      {r3-r7,pc}
;;;1589   
                          ENDP

                  |L9.172|
                          DCD      0x08039000

                          AREA ||i.Send_PC||, CODE, READONLY, ALIGN=2

                  Send_PC PROC
;;;792    ****************************************************/
;;;793    uint8_t Send_PC(uint8_t *Func_code)
000000  b5f0              PUSH     {r4-r7,lr}
;;;794    {
000002  b0c3              SUB      sp,sp,#0x10c
000004  4606              MOV      r6,r0
;;;795        uint8_t i = 0;
000006  2400              MOVS     r4,#0
;;;796        uint8_t len = 0;
000008  2500              MOVS     r5,#0
;;;797        uint8_t valid_len = 0;
00000a  2700              MOVS     r7,#0
;;;798        Buffer_t COM_buffer;
;;;799    
;;;800    
;;;801        if(Func_code[0] ==0x01 && Func_code[1] == 0x02)			//发射机报警参数初始化请求应答
00000c  7830              LDRB     r0,[r6,#0]
00000e  2801              CMP      r0,#1
000010  d157              BNE      |L10.194|
000012  7870              LDRB     r0,[r6,#1]
000014  2802              CMP      r0,#2
000016  d154              BNE      |L10.194|
;;;802        {
;;;803            valid_len = Data_Assemble(Func_code,(uint8_t *)&Alarm_backPC, System.CAN_ID[0], sizeof(Alarm_backPC), &COM_buffer);
000018  a802              ADD      r0,sp,#8
00001a  9000              STR      r0,[sp,#0]
00001c  48fe              LDR      r0,|L10.1048|
00001e  7802              LDRB     r2,[r0,#0]  ; System
000020  2303              MOVS     r3,#3
000022  49fe              LDR      r1,|L10.1052|
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       Data_Assemble
00002a  4607              MOV      r7,r0
;;;804            if( valid_len != 0 )
00002c  2f00              CMP      r7,#0
                  |L10.46|
00002e  d076              BEQ      |L10.286|
;;;805            {
;;;806    #if	STM32_W5500_EN
;;;807                len = COM_buffer.len;
000030  f89d5108          LDRB     r5,[sp,#0x108]
;;;808                for(i=0; ; i++)
000034  bf00              NOP      
000036  bf00              NOP      
                  |L10.56|
;;;809                {
;;;810                    if( len >= 0x08 )
000038  2d08              CMP      r5,#8
00003a  db15              BLT      |L10.104|
;;;811                    {	
;;;812    										if(S0_State == 0x03)		//03表示可以正常传输
00003c  48f8              LDR      r0,|L10.1056|
00003e  7800              LDRB     r0,[r0,#0]  ; S0_State
000040  2803              CMP      r0,#3
000042  d10c              BNE      |L10.94|
;;;813    										{
;;;814    											S0_Data&=~S_TRANSMITOK;	//处理标志位
000044  48f7              LDR      r0,|L10.1060|
000046  7800              LDRB     r0,[r0,#0]  ; S0_Data
000048  f0200002          BIC      r0,r0,#2
00004c  49f5              LDR      r1,|L10.1060|
00004e  7008              STRB     r0,[r1,#0]
;;;815    											Process_Socket_Data(0,COM_buffer.data+8*i, 8);
000050  a802              ADD      r0,sp,#8
000052  2208              MOVS     r2,#8
000054  fb020104          MLA      r1,r2,r4,r0
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       Process_Socket_Data
                  |L10.94|
;;;816    										}
;;;817                        len = len - 8;
00005e  f1a50008          SUB      r0,r5,#8
000062  b2c5              UXTB     r5,r0
;;;818                        if( len == 0x00 )
000064  b99d              CBNZ     r5,|L10.142|
;;;819    										{
;;;820                           break;
000066  e015              B        |L10.148|
                  |L10.104|
;;;821    										}
;;;822                    }
;;;823                    else
;;;824                    {
;;;825    										if(S0_State == 0x03)		//03表示可以正常传输
000068  48ed              LDR      r0,|L10.1056|
00006a  7800              LDRB     r0,[r0,#0]  ; S0_State
00006c  2803              CMP      r0,#3
00006e  d10d              BNE      |L10.140|
;;;826    										{
;;;827    											S0_Data&=~S_TRANSMITOK;	//处理标志位
000070  48ec              LDR      r0,|L10.1060|
000072  7800              LDRB     r0,[r0,#0]  ; S0_Data
000074  f0200002          BIC      r0,r0,#2
000078  49ea              LDR      r1,|L10.1060|
00007a  7008              STRB     r0,[r1,#0]
;;;828    											Process_Socket_Data(0,COM_buffer.data+8*i, len);
00007c  a802              ADD      r0,sp,#8
00007e  2208              MOVS     r2,#8
000080  fb020104          MLA      r1,r2,r4,r0
000084  462a              MOV      r2,r5
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       Process_Socket_Data
                  |L10.140|
;;;829    										}
;;;830                        break;
00008c  e002              B        |L10.148|
                  |L10.142|
00008e  1c60              ADDS     r0,r4,#1              ;808
000090  b2c4              UXTB     r4,r0                 ;808
000092  e7d1              B        |L10.56|
                  |L10.148|
000094  bf00              NOP                            ;820
;;;831                    }
;;;832                }
;;;833    #else
;;;834                comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;835    #endif
;;;836    
;;;837                App_printf("COM_buffer: ");
000096  a0e4              ADR      r0,|L10.1064|
000098  f7fffffe          BL       App_printf
;;;838                for(i=0; i<COM_buffer.len; i++)
00009c  2400              MOVS     r4,#0
00009e  e006              B        |L10.174|
                  |L10.160|
;;;839                {
;;;840                    App_printf("%02x ",COM_buffer.data[i]);
0000a0  a802              ADD      r0,sp,#8
0000a2  5d01              LDRB     r1,[r0,r4]
0000a4  a0e4              ADR      r0,|L10.1080|
0000a6  f7fffffe          BL       App_printf
0000aa  1c60              ADDS     r0,r4,#1              ;838
0000ac  b2c4              UXTB     r4,r0                 ;838
                  |L10.174|
0000ae  f89d0108          LDRB     r0,[sp,#0x108]        ;838
0000b2  42a0              CMP      r0,r4                 ;838
0000b4  dcf4              BGT      |L10.160|
;;;841                }
;;;842                App_printf("\r\n");
0000b6  a0e2              ADR      r0,|L10.1088|
0000b8  f7fffffe          BL       App_printf
;;;843                return 1;
0000bc  2001              MOVS     r0,#1
                  |L10.190|
;;;844            }
;;;845        }
;;;846        else	if(Func_code[0] ==0x02 && Func_code[1] == 0x02)	//查询
;;;847        {
;;;848            valid_len = Data_Assemble(Func_code, (uint8_t *)&Work_paraBack, System.CAN_ID[0], sizeof(Work_paraBack), &COM_buffer);
;;;849            if( valid_len != 0 )
;;;850            {
;;;851    #if	STM32_W5500_EN
;;;852                len = COM_buffer.len;
;;;853                for(i=0; ; i++)
;;;854                {
;;;855                    if( len >= 0x08 )
;;;856                    {
;;;857     					if(S0_State == 0x03)		//03表示可以正常传输
;;;858    					{
;;;859    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;860    						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;861    					}
;;;862                        len = len - 8;
;;;863                        if( len == 0x00 )
;;;864                            break;
;;;865                    }
;;;866                    else
;;;867                    {
;;;868    					if(S0_State == 0x03)		//03表示可以正常传输
;;;869    					{
;;;870    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;871    						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;872    					}
;;;873                        break;
;;;874                    }
;;;875                }
;;;876    #else
;;;877                comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;878    #endif
;;;879    
;;;880                App_printf("COM_buffer: ");
;;;881                for(i=0; i<COM_buffer.len; i++)
;;;882                {
;;;883                    App_printf("%02x ",COM_buffer.data[i]);
;;;884                }
;;;885                App_printf("\r\n");
;;;886                return 1;
;;;887            }
;;;888        }
;;;889        else	if(Func_code[0] ==0x03 && Func_code[1] == 0x02)	//发射
;;;890        {
;;;891            valid_len = Data_Assemble(Func_code, (uint8_t *)&Trans_openBack, System.CAN_ID[0], sizeof(Trans_openBack), &COM_buffer);
;;;892            if( valid_len != 0)
;;;893            {
;;;894    #if	STM32_W5500_EN
;;;895                len = COM_buffer.len;
;;;896                for(i=0; ; i++)
;;;897                {
;;;898                    if( len >= 0x08 )
;;;899                    {
;;;900    					if(S0_State == 0x03)		//03表示可以正常传输
;;;901    					{
;;;902    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;903    						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;904    					}
;;;905                        len = len - 8;
;;;906                        if( len == 0x00 )
;;;907                            break;
;;;908                    }
;;;909                    else
;;;910                    {
;;;911    					if(S0_State == 0x03)		//03表示可以正常传输
;;;912    					{
;;;913    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;914    						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;915    					}
;;;916                        break;
;;;917                    }
;;;918                }
;;;919    #else
;;;920                comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;921    #endif
;;;922    
;;;923                App_printf("COM_buffer: ");
;;;924                for(i=0; i<COM_buffer.len; i++)
;;;925                {
;;;926                    App_printf("%02x ",COM_buffer.data[i]);
;;;927                }
;;;928                App_printf("\r\n");
;;;929                return 1;
;;;930            }
;;;931        }
;;;932        else	if(Func_code[0] ==0x04 && Func_code[1] == 0x02)	//停止
;;;933        {
;;;934            valid_len = Data_Assemble(Func_code, (uint8_t *)&Trans_stopBack, System.CAN_ID[0], sizeof(Trans_stopBack), &COM_buffer);
;;;935            if( valid_len != 0 )
;;;936            {
;;;937    #if	STM32_W5500_EN
;;;938                len = COM_buffer.len;
;;;939                for(i=0; ; i++)
;;;940                {
;;;941                    if( len >= 0x08 )
;;;942                    {
;;;943    					if(S0_State == 0x03)		//03表示可以正常传输
;;;944    					{
;;;945    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;946    						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;947    					}
;;;948                        len = len - 8;
;;;949                        if( len == 0x00 )
;;;950                            break;
;;;951                    }
;;;952                    else
;;;953                    {
;;;954    					if(S0_State == 0x03)		//03表示可以正常传输
;;;955    					{
;;;956    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;957    						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;958    					}
;;;959                        break;
;;;960                    }
;;;961                }
;;;962    #else
;;;963                comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;964    #endif
;;;965    
;;;966                App_printf("COM_buffer: ");
;;;967                for(i=0; i<COM_buffer.len; i++)
;;;968                {
;;;969                    App_printf("%02x ",COM_buffer.data[i]);
;;;970                }
;;;971                App_printf("\r\n");
;;;972                return 1;
;;;973            }
;;;974        }
;;;975        else	if(Func_code[0] ==0x05 && Func_code[1] == 0x02)	//解除报警
;;;976        {
;;;977            valid_len = Data_Assemble(Func_code, (uint8_t *)&DisalarmBack, System.CAN_ID[0], sizeof(DisalarmBack), &COM_buffer);
;;;978            if( valid_len != 0 )
;;;979            {
;;;980    #if	STM32_W5500_EN
;;;981                len = COM_buffer.len;
;;;982                for(i=0; ; i++)
;;;983                {
;;;984                    if( len >= 0x08 )
;;;985                    {
;;;986    					if(S0_State == 0x03)		//03表示可以正常传输
;;;987    					{
;;;988    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;989    						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;990    					}
;;;991                        len = len - 8;
;;;992                        if( len == 0x00 )
;;;993                            break;
;;;994                    }
;;;995                    else
;;;996                    {
;;;997    					if(S0_State == 0x03)		//03表示可以正常传输
;;;998    					{
;;;999    						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1000   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1001   					}
;;;1002                       break;
;;;1003                   }
;;;1004               }
;;;1005   #else
;;;1006               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1007   #endif
;;;1008   
;;;1009               App_printf("COM_buffer: ");
;;;1010               for(i=0; i<COM_buffer.len; i++)
;;;1011               {
;;;1012                   App_printf("%02x ",COM_buffer.data[i]);
;;;1013               }
;;;1014               App_printf("\r\n");
;;;1015               return 1;
;;;1016           }
;;;1017       }
;;;1018       else	if(Func_code[0] ==0x06 && Func_code[1] == 0x02)	//报警信息查询
;;;1019       {
;;;1020           valid_len = Data_Assemble(Func_code, (uint8_t *)&Alarm_historyBack, System.CAN_ID[0], sizeof(Alarm_historyBack), &COM_buffer);
;;;1021           if( valid_len != 0 )
;;;1022           {
;;;1023   #if	STM32_W5500_EN
;;;1024               len = COM_buffer.len;
;;;1025               for(i=0; ; i++)
;;;1026               {
;;;1027                   if( len >= 0x08 )
;;;1028                   {
;;;1029    					if(S0_State == 0x03)		//03表示可以正常传输
;;;1030   					{
;;;1031   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1032   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1033   					}
;;;1034                       len = len - 8;
;;;1035                       if( len == 0x00 )
;;;1036                           break;
;;;1037                   }
;;;1038                   else
;;;1039                   {
;;;1040   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1041   					{
;;;1042   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1043   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1044   					}
;;;1045                       break;
;;;1046                   }
;;;1047               }
;;;1048   #else
;;;1049               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1050   #endif
;;;1051   
;;;1052               App_printf("COM_buffer: ");
;;;1053               for(i=0; i<COM_buffer.len; i++)
;;;1054               {
;;;1055                   App_printf("%02x ",COM_buffer.data[i]);
;;;1056               }
;;;1057               App_printf("\r\n");
;;;1058               return 1;
;;;1059           }
;;;1060       }
;;;1061       else	if(Func_code[0] ==0x07 && Func_code[1] == 0x02)	//开机
;;;1062       {
;;;1063           valid_len = Data_Assemble(Func_code, (uint8_t *)&Power_onBack, System.CAN_ID[0], sizeof(Power_onBack), &COM_buffer);
;;;1064           if( valid_len != 0 )
;;;1065           {
;;;1066   #if	STM32_W5500_EN
;;;1067               len = COM_buffer.len;
;;;1068               for(i=0; ; i++)
;;;1069               {
;;;1070                   if( len >= 0x08 )
;;;1071                   {
;;;1072   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1073   					{
;;;1074   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1075   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1076   					}
;;;1077                       len = len - 8;
;;;1078                       if( len == 0x00 )
;;;1079                           break;
;;;1080                   }
;;;1081                   else
;;;1082                   {
;;;1083   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1084   					{
;;;1085   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1086   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1087   					}
;;;1088                       break;
;;;1089                   }
;;;1090               }
;;;1091   #else
;;;1092               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1093   #endif
;;;1094   
;;;1095               App_printf("COM_buffer: ");
;;;1096               for(i=0; i<COM_buffer.len; i++)
;;;1097               {
;;;1098                   App_printf("%02x ",COM_buffer.data[i]);
;;;1099               }
;;;1100               App_printf("\r\n");
;;;1101               return 1;
;;;1102           }
;;;1103       }
;;;1104       else	if(Func_code[0] ==0x08 && Func_code[1] == 0x02)	//关机
;;;1105       {
;;;1106           valid_len = Data_Assemble(Func_code, (uint8_t *)&Power_offBack, System.CAN_ID[0], sizeof(Power_offBack), &COM_buffer);
;;;1107           if( valid_len != 0 )
;;;1108           {
;;;1109   #if	STM32_W5500_EN
;;;1110               len = COM_buffer.len;
;;;1111               for(i=0; ; i++)
;;;1112               {
;;;1113                   if( len >= 0x08 )
;;;1114                   {
;;;1115   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1116   					{
;;;1117   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1118   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1119   					}
;;;1120                       len = len - 8;
;;;1121                       if( len == 0x00 )
;;;1122                           break;
;;;1123                   }
;;;1124                   else
;;;1125                   {
;;;1126   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1127   					{
;;;1128   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1129   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1130   					}
;;;1131                       break;
;;;1132                   }
;;;1133               }
;;;1134   #else
;;;1135               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1136   #endif
;;;1137   
;;;1138               App_printf("COM_buffer: ");
;;;1139               for(i=0; i<COM_buffer.len; i++)
;;;1140               {
;;;1141                   App_printf("%02x ",COM_buffer.data[i]);
;;;1142               }
;;;1143               App_printf("\r\n");
;;;1144               return 1;
;;;1145           }
;;;1146       }
;;;1147       else	if(Func_code[0] ==0x09 && Func_code[1] == 0x02)	//扫频
;;;1148       {
;;;1149           App_printf("COM_buffer sweeping: \r\n");
;;;1150           switch(System.Scan_Freq_flag)
;;;1151   		{
;;;1152   			case 0:
;;;1153   			{
;;;1154   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack, System.CAN_ID[0], sizeof(Scan_FrqBack), &COM_buffer);
;;;1155   				if( valid_len == 0 )
;;;1156   				{
;;;1157   					return 2;
;;;1158   				}
;;;1159   
;;;1160   				break;
;;;1161   			}
;;;1162   
;;;1163   			case 1:
;;;1164   			{
;;;1165   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack1, System.CAN_ID[0], sizeof(Scan_FrqBack1), &COM_buffer);
;;;1166   				if( valid_len == 0 )
;;;1167   				{
;;;1168   					return 2;
;;;1169   				}
;;;1170   
;;;1171   				break;
;;;1172   			}
;;;1173   
;;;1174   			case 2:
;;;1175   			{
;;;1176   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack2, System.CAN_ID[0], sizeof(Scan_FrqBack2), &COM_buffer);
;;;1177   				if( valid_len == 0 )
;;;1178   				{
;;;1179   					return 2;
;;;1180   				}
;;;1181   
;;;1182   				break;
;;;1183   			}
;;;1184   
;;;1185   			case 3:
;;;1186   			{
;;;1187   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack3, System.CAN_ID[0], sizeof(Scan_FrqBack3), &COM_buffer);
;;;1188   				if( valid_len == 0 )
;;;1189   				{
;;;1190   					return 2;
;;;1191   				}
;;;1192   
;;;1193   				break;
;;;1194   			}
;;;1195   
;;;1196   			case 4:
;;;1197   			{
;;;1198   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack4, System.CAN_ID[0], sizeof(Scan_FrqBack4), &COM_buffer);
;;;1199   				if( valid_len == 0 )
;;;1200   				{
;;;1201   					return 2;
;;;1202   				}
;;;1203   
;;;1204   				break;
;;;1205   			}
;;;1206   
;;;1207   			case 5:
;;;1208   			{
;;;1209   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack5, System.CAN_ID[0], sizeof(Scan_FrqBack5), &COM_buffer);
;;;1210   				if( valid_len == 0 )
;;;1211   				{
;;;1212   					return 2;
;;;1213   				}
;;;1214   
;;;1215   				break;
;;;1216   			}
;;;1217   
;;;1218   			case 6:
;;;1219   			{
;;;1220   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack6, System.CAN_ID[0], sizeof(Scan_FrqBack6), &COM_buffer);
;;;1221   				if( valid_len == 0 )
;;;1222   				{
;;;1223   					return 2;
;;;1224   				}
;;;1225   
;;;1226   				break;
;;;1227   			}
;;;1228   
;;;1229   			case 7:
;;;1230   			{
;;;1231   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack7, System.CAN_ID[0],sizeof(Scan_FrqBack7), &COM_buffer);
;;;1232   				if( valid_len == 0 )
;;;1233   				{
;;;1234   					return 2;
;;;1235   				}
;;;1236   
;;;1237   				break;
;;;1238   			}
;;;1239   
;;;1240   			case 8:
;;;1241   			{
;;;1242   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack8, System.CAN_ID[0], sizeof(Scan_FrqBack8), &COM_buffer);
;;;1243   				if( valid_len == 0 )
;;;1244   				{
;;;1245   					return 2;
;;;1246   				}
;;;1247   
;;;1248   				break;
;;;1249   			}
;;;1250   
;;;1251   			case 9:
;;;1252   			{
;;;1253   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack9, System.CAN_ID[0], sizeof(Scan_FrqBack9), &COM_buffer);
;;;1254   				if( valid_len == 0 )
;;;1255   				{
;;;1256   					return 2;
;;;1257   				}
;;;1258   
;;;1259   				break;
;;;1260   			}
;;;1261   
;;;1262   			case 10:
;;;1263   			{
;;;1264   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack10, System.CAN_ID[0], sizeof(Scan_FrqBack10), &COM_buffer);
;;;1265   				if( valid_len == 0 )
;;;1266   				{
;;;1267   					return 2;
;;;1268   				}
;;;1269   
;;;1270   				break;
;;;1271   			}
;;;1272   
;;;1273   			case 11:
;;;1274   			{
;;;1275   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack11, System.CAN_ID[0], sizeof(Scan_FrqBack11), &COM_buffer);
;;;1276   				if( valid_len == 0 )
;;;1277   				{
;;;1278   					return 2;
;;;1279   				}
;;;1280   
;;;1281   				break;
;;;1282   			}
;;;1283   
;;;1284   			case 12:
;;;1285   			{
;;;1286   				valid_len = Data_Assemble(Func_code, (uint8_t *)&Scan_FrqBack12, System.CAN_ID[0], sizeof(Scan_FrqBack12), &COM_buffer);
;;;1287   				if( valid_len == 0 )
;;;1288   				{
;;;1289   					return 2;
;;;1290   				}
;;;1291   
;;;1292   				break;
;;;1293   			}
;;;1294           }
;;;1295   
;;;1296   #if	STM32_W5500_EN
;;;1297           len = COM_buffer.len;
;;;1298           for(i=0; ; i++)
;;;1299           {
;;;1300               if( len >= 0x08 )
;;;1301               {
;;;1302                   	if(S0_State == 0x03)		//03表示可以正常传输
;;;1303   					{
;;;1304   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1305   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1306   					}
;;;1307                   len = len - 8;
;;;1308                   if( len == 0x00 )
;;;1309                       break;
;;;1310               }
;;;1311               else
;;;1312               {
;;;1313                   	if(S0_State == 0x03)		//03表示可以正常传输
;;;1314   					{
;;;1315   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1316   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1317   					}
;;;1318                   break;
;;;1319               }
;;;1320           }
;;;1321   #else
;;;1322           comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1323   #endif
;;;1324   
;;;1325           App_printf("Scan_COM_buffer: ");
;;;1326           for(i=0; i<COM_buffer.len; i++)
;;;1327           {
;;;1328               App_printf("%02x ",COM_buffer.data[i]);
;;;1329           }
;;;1330           App_printf("\r\n");
;;;1331           return 1;
;;;1332       }
;;;1333       else	if(Func_code[0] ==0x0A && Func_code[1] == 0x02)	//停止扫频
;;;1334       {
;;;1335           valid_len = Data_Assemble(Func_code, (uint8_t *)&Sacn_stopBack, System.CAN_ID[0], sizeof(Sacn_stopBack), &COM_buffer);
;;;1336           if( valid_len != 0 )
;;;1337           {
;;;1338   #if	STM32_W5500_EN
;;;1339               len = COM_buffer.len;
;;;1340               for(i=0; ; i++)
;;;1341               {
;;;1342                   if( len >= 0x08 )
;;;1343                   {
;;;1344   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1345   					{
;;;1346   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1347   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1348   					}
;;;1349                       len = len - 8;
;;;1350                       if( len == 0x00 )
;;;1351                           break;
;;;1352                   }
;;;1353                   else
;;;1354                   {
;;;1355   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1356   					{
;;;1357   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1358   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1359   					}
;;;1360                       break;
;;;1361                   }
;;;1362               }
;;;1363   #else
;;;1364               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1365   #endif
;;;1366   
;;;1367               App_printf("COM_buffer: ");
;;;1368               for(i=0; i<COM_buffer.len; i++)
;;;1369               {
;;;1370                   App_printf("%02x ",COM_buffer.data[i]);
;;;1371               }
;;;1372               App_printf("\r\n");
;;;1373               return 1;
;;;1374           }
;;;1375       }
;;;1376       else	if(Func_code[0] ==0x0B && Func_code[1] == 0x02)	//增加功率
;;;1377       {
;;;1378           valid_len = Data_Assemble(Func_code, (uint8_t *)&Add_PowerBack, System.CAN_ID[0], sizeof(Add_PowerBack), &COM_buffer);
;;;1379           if( valid_len != 0 )
;;;1380           {
;;;1381   #if	STM32_W5500_EN
;;;1382               len = COM_buffer.len;
;;;1383               for(i=0; ; i++)
;;;1384               {
;;;1385                   if( len >= 0x08 )
;;;1386                   {
;;;1387    					if(S0_State == 0x03)		//03表示可以正常传输
;;;1388   					{
;;;1389   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1390   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1391   					}
;;;1392                       len = len - 8;
;;;1393                       if( len == 0x00 )
;;;1394                           break;
;;;1395                   }
;;;1396                   else
;;;1397                   {
;;;1398   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1399   					{
;;;1400   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1401   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1402   					}
;;;1403                       break;
;;;1404                   }
;;;1405               }
;;;1406   #else
;;;1407               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1408   #endif
;;;1409   
;;;1410               App_printf("COM_buffer: ");
;;;1411               for(i=0; i<COM_buffer.len; i++)
;;;1412               {
;;;1413                   App_printf("%02x ",COM_buffer.data[i]);
;;;1414               }
;;;1415               App_printf("\r\n");
;;;1416               return 1;
;;;1417           }
;;;1418       }
;;;1419       else	if(Func_code[0] ==0x0C && Func_code[1] == 0x02)	//减小功率
;;;1420       {
;;;1421           valid_len = Data_Assemble(Func_code, (uint8_t *)&Sub_PowerBack, System.CAN_ID[0], sizeof(Sub_PowerBack), &COM_buffer);
;;;1422           if( valid_len != 0 )
;;;1423           {
;;;1424   #if	STM32_W5500_EN
;;;1425               len = COM_buffer.len;
;;;1426               for(i=0; ; i++)
;;;1427               {
;;;1428                   if( len >= 0x08 )
;;;1429                   {
;;;1430   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1431   					{
;;;1432   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1433   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1434   					}
;;;1435                       len = len - 8;
;;;1436                       if( len == 0x00 )
;;;1437                           break;
;;;1438                   }
;;;1439                   else
;;;1440                   {
;;;1441   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1442   					{
;;;1443   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1444   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1445   					}
;;;1446                       break;
;;;1447                   }
;;;1448               }
;;;1449   #else
;;;1450               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1451   #endif
;;;1452   
;;;1453               App_printf("COM_buffer: ");
;;;1454               for(i=0; i<COM_buffer.len; i++)
;;;1455               {
;;;1456                   App_printf("%02x ",COM_buffer.data[i]);
;;;1457               }
;;;1458               App_printf("\r\n");
;;;1459               return 1;
;;;1460           }
;;;1461       }
;;;1462       else	if(Func_code[0] ==0x0D && Func_code[1] == 0x02)	//运行图
;;;1463       {
;;;1464           valid_len = Data_Assemble(Func_code, (uint8_t *)&Run_DiagramBack, System.CAN_ID[0], sizeof(Run_DiagramBack), &COM_buffer);
;;;1465           if( valid_len != 0 )
;;;1466           {
;;;1467   #if	STM32_W5500_EN
;;;1468               len = COM_buffer.len;
;;;1469               for(i=0; ; i++)
;;;1470               {
;;;1471                   if( len >= 0x08 )
;;;1472                   {
;;;1473   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1474   					{
;;;1475   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1476   						Process_Socket_Data(0,COM_buffer.data+8*i, 8);
;;;1477   					}
;;;1478                       len = len - 8;
;;;1479                       if( len == 0x00 )
;;;1480                           break;
;;;1481                   }
;;;1482                   else
;;;1483                   {
;;;1484   					if(S0_State == 0x03)		//03表示可以正常传输
;;;1485   					{
;;;1486   						S0_Data&=~S_TRANSMITOK;	//处理标志位
;;;1487   						Process_Socket_Data(0,COM_buffer.data+8*i, len);
;;;1488   					}
;;;1489                       break;
;;;1490                   }
;;;1491               }
;;;1492   #else
;;;1493               comSendBuf(COM5,COM_buffer.data, COM_buffer.len);
;;;1494   #endif
;;;1495   
;;;1496               App_printf("COM_buffer: ");
;;;1497               for(i=0; i<COM_buffer.len; i++)
;;;1498               {
;;;1499                   App_printf("%02x ",COM_buffer.data[i]);
;;;1500               }
;;;1501               App_printf("\r\n");
;;;1502               return 1;
;;;1503           }
;;;1504       }
;;;1505       return 2;
;;;1506   }
0000be  b043              ADD      sp,sp,#0x10c
0000c0  bdf0              POP      {r4-r7,pc}
                  |L10.194|
0000c2  7830              LDRB     r0,[r6,#0]            ;846
0000c4  2802              CMP      r0,#2                 ;846
0000c6  d157              BNE      |L10.376|
0000c8  7870              LDRB     r0,[r6,#1]            ;846
0000ca  2802              CMP      r0,#2                 ;846
0000cc  d154              BNE      |L10.376|
0000ce  a802              ADD      r0,sp,#8              ;848
0000d0  9000              STR      r0,[sp,#0]            ;848
0000d2  48d1              LDR      r0,|L10.1048|
0000d4  7802              LDRB     r2,[r0,#0]            ;848  ; System
0000d6  2374              MOVS     r3,#0x74              ;848
0000d8  49da              LDR      r1,|L10.1092|
0000da  4630              MOV      r0,r6                 ;848
0000dc  f7fffffe          BL       Data_Assemble
0000e0  4607              MOV      r7,r0                 ;848
0000e2  2f00              CMP      r7,#0                 ;849
                  |L10.228|
0000e4  d0a3              BEQ      |L10.46|
0000e6  f89d5108          LDRB     r5,[sp,#0x108]        ;852
0000ea  2400              MOVS     r4,#0                 ;853
0000ec  bf00              NOP                            ;853
                  |L10.238|
0000ee  2d08              CMP      r5,#8                 ;855
0000f0  db16              BLT      |L10.288|
0000f2  48cb              LDR      r0,|L10.1056|
0000f4  7800              LDRB     r0,[r0,#0]            ;857  ; S0_State
0000f6  2803              CMP      r0,#3                 ;857
0000f8  d10c              BNE      |L10.276|
0000fa  48ca              LDR      r0,|L10.1060|
0000fc  7800              LDRB     r0,[r0,#0]            ;859  ; S0_Data
0000fe  f0200002          BIC      r0,r0,#2              ;859
000102  49c8              LDR      r1,|L10.1060|
000104  7008              STRB     r0,[r1,#0]            ;859
000106  a802              ADD      r0,sp,#8              ;860
000108  2208              MOVS     r2,#8                 ;860
00010a  fb020104          MLA      r1,r2,r4,r0           ;860
00010e  2000              MOVS     r0,#0                 ;860
000110  f7fffffe          BL       Process_Socket_Data
                  |L10.276|
000114  f1a50008          SUB      r0,r5,#8              ;862
000118  b2c5              UXTB     r5,r0                 ;862
00011a  b9a5              CBNZ     r5,|L10.326|
00011c  e016              B        |L10.332|
                  |L10.286|
00011e  e243              B        |L10.1448|
                  |L10.288|
000120  48bf              LDR      r0,|L10.1056|
000122  7800              LDRB     r0,[r0,#0]            ;868  ; S0_State
000124  2803              CMP      r0,#3                 ;868
000126  d10d              BNE      |L10.324|
000128  48be              LDR      r0,|L10.1060|
00012a  7800              LDRB     r0,[r0,#0]            ;870  ; S0_Data
00012c  f0200002          BIC      r0,r0,#2              ;870
000130  49bc              LDR      r1,|L10.1060|
000132  7008              STRB     r0,[r1,#0]            ;870
000134  a802              ADD      r0,sp,#8              ;871
000136  2208              MOVS     r2,#8                 ;871
000138  fb020104          MLA      r1,r2,r4,r0           ;871
00013c  462a              MOV      r2,r5                 ;871
00013e  2000              MOVS     r0,#0                 ;871
000140  f7fffffe          BL       Process_Socket_Data
                  |L10.324|
000144  e002              B        |L10.332|
                  |L10.326|
000146  1c60              ADDS     r0,r4,#1              ;853
000148  b2c4              UXTB     r4,r0                 ;853
00014a  e7d0              B        |L10.238|
                  |L10.332|
00014c  bf00              NOP                            ;864
00014e  a0b6              ADR      r0,|L10.1064|
000150  f7fffffe          BL       App_printf
000154  2400              MOVS     r4,#0                 ;881
000156  e006              B        |L10.358|
                  |L10.344|
000158  a802              ADD      r0,sp,#8              ;883
00015a  5d01              LDRB     r1,[r0,r4]            ;883
00015c  a0b6              ADR      r0,|L10.1080|
00015e  f7fffffe          BL       App_printf
000162  1c60              ADDS     r0,r4,#1              ;881
000164  b2c4              UXTB     r4,r0                 ;881
                  |L10.358|
000166  f89d0108          LDRB     r0,[sp,#0x108]        ;881
00016a  42a0              CMP      r0,r4                 ;881
00016c  dcf4              BGT      |L10.344|
00016e  a0b4              ADR      r0,|L10.1088|
000170  f7fffffe          BL       App_printf
000174  2001              MOVS     r0,#1                 ;886
000176  e7a2              B        |L10.190|
                  |L10.376|
000178  7830              LDRB     r0,[r6,#0]            ;889
00017a  2803              CMP      r0,#3                 ;889
00017c  d156              BNE      |L10.556|
00017e  7870              LDRB     r0,[r6,#1]            ;889
000180  2802              CMP      r0,#2                 ;889
000182  d153              BNE      |L10.556|
000184  a802              ADD      r0,sp,#8              ;891
000186  9000              STR      r0,[sp,#0]            ;891
000188  48a3              LDR      r0,|L10.1048|
00018a  7802              LDRB     r2,[r0,#0]            ;891  ; System
00018c  2303              MOVS     r3,#3                 ;891
00018e  49ae              LDR      r1,|L10.1096|
000190  4630              MOV      r0,r6                 ;891
000192  f7fffffe          BL       Data_Assemble
000196  4607              MOV      r7,r0                 ;891
000198  2f00              CMP      r7,#0                 ;892
                  |L10.410|
00019a  d0a3              BEQ      |L10.228|
00019c  f89d5108          LDRB     r5,[sp,#0x108]        ;895
0001a0  2400              MOVS     r4,#0                 ;896
0001a2  bf00              NOP                            ;896
                  |L10.420|
0001a4  2d08              CMP      r5,#8                 ;898
0001a6  db15              BLT      |L10.468|
0001a8  489d              LDR      r0,|L10.1056|
0001aa  7800              LDRB     r0,[r0,#0]            ;900  ; S0_State
0001ac  2803              CMP      r0,#3                 ;900
0001ae  d10c              BNE      |L10.458|
0001b0  489c              LDR      r0,|L10.1060|
0001b2  7800              LDRB     r0,[r0,#0]            ;902  ; S0_Data
0001b4  f0200002          BIC      r0,r0,#2              ;902
0001b8  499a              LDR      r1,|L10.1060|
0001ba  7008              STRB     r0,[r1,#0]            ;902
0001bc  a802              ADD      r0,sp,#8              ;903
0001be  2208              MOVS     r2,#8                 ;903
0001c0  fb020104          MLA      r1,r2,r4,r0           ;903
0001c4  2000              MOVS     r0,#0                 ;903
0001c6  f7fffffe          BL       Process_Socket_Data
                  |L10.458|
0001ca  f1a50008          SUB      r0,r5,#8              ;905
0001ce  b2c5              UXTB     r5,r0                 ;905
0001d0  b99d              CBNZ     r5,|L10.506|
0001d2  e015              B        |L10.512|
                  |L10.468|
0001d4  4892              LDR      r0,|L10.1056|
0001d6  7800              LDRB     r0,[r0,#0]            ;911  ; S0_State
0001d8  2803              CMP      r0,#3                 ;911
0001da  d10d              BNE      |L10.504|
0001dc  4891              LDR      r0,|L10.1060|
0001de  7800              LDRB     r0,[r0,#0]            ;913  ; S0_Data
0001e0  f0200002          BIC      r0,r0,#2              ;913
0001e4  498f              LDR      r1,|L10.1060|
0001e6  7008              STRB     r0,[r1,#0]            ;913
0001e8  a802              ADD      r0,sp,#8              ;914
0001ea  2208              MOVS     r2,#8                 ;914
0001ec  fb020104          MLA      r1,r2,r4,r0           ;914
0001f0  462a              MOV      r2,r5                 ;914
0001f2  2000              MOVS     r0,#0                 ;914
0001f4  f7fffffe          BL       Process_Socket_Data
                  |L10.504|
0001f8  e002              B        |L10.512|
                  |L10.506|
0001fa  1c60              ADDS     r0,r4,#1              ;896
0001fc  b2c4              UXTB     r4,r0                 ;896
0001fe  e7d1              B        |L10.420|
                  |L10.512|
000200  bf00              NOP                            ;907
000202  a089              ADR      r0,|L10.1064|
000204  f7fffffe          BL       App_printf
000208  2400              MOVS     r4,#0                 ;924
00020a  e006              B        |L10.538|
                  |L10.524|
00020c  a802              ADD      r0,sp,#8              ;926
00020e  5d01              LDRB     r1,[r0,r4]            ;926
000210  a089              ADR      r0,|L10.1080|
000212  f7fffffe          BL       App_printf
000216  1c60              ADDS     r0,r4,#1              ;924
000218  b2c4              UXTB     r4,r0                 ;924
                  |L10.538|
00021a  f89d0108          LDRB     r0,[sp,#0x108]        ;924
00021e  42a0              CMP      r0,r4                 ;924
000220  dcf4              BGT      |L10.524|
000222  a087              ADR      r0,|L10.1088|
000224  f7fffffe          BL       App_printf
000228  2001              MOVS     r0,#1                 ;929
                  |L10.554|
00022a  e748              B        |L10.190|
                  |L10.556|
00022c  7830              LDRB     r0,[r6,#0]            ;932
00022e  2804              CMP      r0,#4                 ;932
000230  d156              BNE      |L10.736|
000232  7870              LDRB     r0,[r6,#1]            ;932
000234  2802              CMP      r0,#2                 ;932
000236  d153              BNE      |L10.736|
000238  a802              ADD      r0,sp,#8              ;934
00023a  9000              STR      r0,[sp,#0]            ;934
00023c  4876              LDR      r0,|L10.1048|
00023e  7802              LDRB     r2,[r0,#0]            ;934  ; System
000240  2302              MOVS     r3,#2                 ;934
000242  4982              LDR      r1,|L10.1100|
000244  4630              MOV      r0,r6                 ;934
000246  f7fffffe          BL       Data_Assemble
00024a  4607              MOV      r7,r0                 ;934
00024c  2f00              CMP      r7,#0                 ;935
                  |L10.590|
00024e  d0a4              BEQ      |L10.410|
000250  f89d5108          LDRB     r5,[sp,#0x108]        ;938
000254  2400              MOVS     r4,#0                 ;939
000256  bf00              NOP                            ;939
                  |L10.600|
000258  2d08              CMP      r5,#8                 ;941
00025a  db15              BLT      |L10.648|
00025c  4870              LDR      r0,|L10.1056|
00025e  7800              LDRB     r0,[r0,#0]            ;943  ; S0_State
000260  2803              CMP      r0,#3                 ;943
000262  d10c              BNE      |L10.638|
000264  486f              LDR      r0,|L10.1060|
000266  7800              LDRB     r0,[r0,#0]            ;945  ; S0_Data
000268  f0200002          BIC      r0,r0,#2              ;945
00026c  496d              LDR      r1,|L10.1060|
00026e  7008              STRB     r0,[r1,#0]            ;945
000270  a802              ADD      r0,sp,#8              ;946
000272  2208              MOVS     r2,#8                 ;946
000274  fb020104          MLA      r1,r2,r4,r0           ;946
000278  2000              MOVS     r0,#0                 ;946
00027a  f7fffffe          BL       Process_Socket_Data
                  |L10.638|
00027e  f1a50008          SUB      r0,r5,#8              ;948
000282  b2c5              UXTB     r5,r0                 ;948
000284  b99d              CBNZ     r5,|L10.686|
000286  e015              B        |L10.692|
                  |L10.648|
000288  4865              LDR      r0,|L10.1056|
00028a  7800              LDRB     r0,[r0,#0]            ;954  ; S0_State
00028c  2803              CMP      r0,#3                 ;954
00028e  d10d              BNE      |L10.684|
000290  4864              LDR      r0,|L10.1060|
000292  7800              LDRB     r0,[r0,#0]            ;956  ; S0_Data
000294  f0200002          BIC      r0,r0,#2              ;956
000298  4962              LDR      r1,|L10.1060|
00029a  7008              STRB     r0,[r1,#0]            ;956
00029c  a802              ADD      r0,sp,#8              ;957
00029e  2208              MOVS     r2,#8                 ;957
0002a0  fb020104          MLA      r1,r2,r4,r0           ;957
0002a4  462a              MOV      r2,r5                 ;957
0002a6  2000              MOVS     r0,#0                 ;957
0002a8  f7fffffe          BL       Process_Socket_Data
                  |L10.684|
0002ac  e002              B        |L10.692|
                  |L10.686|
0002ae  1c60              ADDS     r0,r4,#1              ;939
0002b0  b2c4              UXTB     r4,r0                 ;939
0002b2  e7d1              B        |L10.600|
                  |L10.692|
0002b4  bf00              NOP                            ;950
0002b6  a05c              ADR      r0,|L10.1064|
0002b8  f7fffffe          BL       App_printf
0002bc  2400              MOVS     r4,#0                 ;967
0002be  e006              B        |L10.718|
                  |L10.704|
0002c0  a802              ADD      r0,sp,#8              ;969
0002c2  5d01              LDRB     r1,[r0,r4]            ;969
0002c4  a05c              ADR      r0,|L10.1080|
0002c6  f7fffffe          BL       App_printf
0002ca  1c60              ADDS     r0,r4,#1              ;967
0002cc  b2c4              UXTB     r4,r0                 ;967
                  |L10.718|
0002ce  f89d0108          LDRB     r0,[sp,#0x108]        ;967
0002d2  42a0              CMP      r0,r4                 ;967
0002d4  dcf4              BGT      |L10.704|
0002d6  a05a              ADR      r0,|L10.1088|
0002d8  f7fffffe          BL       App_printf
0002dc  2001              MOVS     r0,#1                 ;972
                  |L10.734|
0002de  e6ee              B        |L10.190|
                  |L10.736|
0002e0  7830              LDRB     r0,[r6,#0]            ;975
0002e2  2805              CMP      r0,#5                 ;975
0002e4  d156              BNE      |L10.916|
0002e6  7870              LDRB     r0,[r6,#1]            ;975
0002e8  2802              CMP      r0,#2                 ;975
0002ea  d153              BNE      |L10.916|
0002ec  a802              ADD      r0,sp,#8              ;977
0002ee  9000              STR      r0,[sp,#0]            ;977
0002f0  4849              LDR      r0,|L10.1048|
0002f2  7802              LDRB     r2,[r0,#0]            ;977  ; System
0002f4  2305              MOVS     r3,#5                 ;977
0002f6  4956              LDR      r1,|L10.1104|
0002f8  4630              MOV      r0,r6                 ;977
0002fa  f7fffffe          BL       Data_Assemble
0002fe  4607              MOV      r7,r0                 ;977
000300  2f00              CMP      r7,#0                 ;978
                  |L10.770|
000302  d0a4              BEQ      |L10.590|
000304  f89d5108          LDRB     r5,[sp,#0x108]        ;981
000308  2400              MOVS     r4,#0                 ;982
00030a  bf00              NOP                            ;982
                  |L10.780|
00030c  2d08              CMP      r5,#8                 ;984
00030e  db15              BLT      |L10.828|
000310  4843              LDR      r0,|L10.1056|
000312  7800              LDRB     r0,[r0,#0]            ;986  ; S0_State
000314  2803              CMP      r0,#3                 ;986
000316  d10c              BNE      |L10.818|
000318  4842              LDR      r0,|L10.1060|
00031a  7800              LDRB     r0,[r0,#0]            ;988  ; S0_Data
00031c  f0200002          BIC      r0,r0,#2              ;988
000320  4940              LDR      r1,|L10.1060|
000322  7008              STRB     r0,[r1,#0]            ;988
000324  a802              ADD      r0,sp,#8              ;989
000326  2208              MOVS     r2,#8                 ;989
000328  fb020104          MLA      r1,r2,r4,r0           ;989
00032c  2000              MOVS     r0,#0                 ;989
00032e  f7fffffe          BL       Process_Socket_Data
                  |L10.818|
000332  f1a50008          SUB      r0,r5,#8              ;991
000336  b2c5              UXTB     r5,r0                 ;991
000338  b99d              CBNZ     r5,|L10.866|
00033a  e015              B        |L10.872|
                  |L10.828|
00033c  4838              LDR      r0,|L10.1056|
00033e  7800              LDRB     r0,[r0,#0]            ;997  ; S0_State
000340  2803              CMP      r0,#3                 ;997
000342  d10d              BNE      |L10.864|
000344  4837              LDR      r0,|L10.1060|
000346  7800              LDRB     r0,[r0,#0]            ;999  ; S0_Data
000348  f0200002          BIC      r0,r0,#2              ;999
00034c  4935              LDR      r1,|L10.1060|
00034e  7008              STRB     r0,[r1,#0]            ;999
000350  a802              ADD      r0,sp,#8              ;1000
000352  2208              MOVS     r2,#8                 ;1000
000354  fb020104          MLA      r1,r2,r4,r0           ;1000
000358  462a              MOV      r2,r5                 ;1000
00035a  2000              MOVS     r0,#0                 ;1000
00035c  f7fffffe          BL       Process_Socket_Data
                  |L10.864|
000360  e002              B        |L10.872|
                  |L10.866|
000362  1c60              ADDS     r0,r4,#1              ;982
000364  b2c4              UXTB     r4,r0                 ;982
000366  e7d1              B        |L10.780|
                  |L10.872|
000368  bf00              NOP                            ;993
00036a  a02f              ADR      r0,|L10.1064|
00036c  f7fffffe          BL       App_printf
000370  2400              MOVS     r4,#0                 ;1010
000372  e006              B        |L10.898|
                  |L10.884|
000374  a802              ADD      r0,sp,#8              ;1012
000376  5d01              LDRB     r1,[r0,r4]            ;1012
000378  a02f              ADR      r0,|L10.1080|
00037a  f7fffffe          BL       App_printf
00037e  1c60              ADDS     r0,r4,#1              ;1010
000380  b2c4              UXTB     r4,r0                 ;1010
                  |L10.898|
000382  f89d0108          LDRB     r0,[sp,#0x108]        ;1010
000386  42a0              CMP      r0,r4                 ;1010
000388  dcf4              BGT      |L10.884|
00038a  a02d              ADR      r0,|L10.1088|
00038c  f7fffffe          BL       App_printf
000390  2001              MOVS     r0,#1                 ;1015
                  |L10.914|
000392  e694              B        |L10.190|
                  |L10.916|
000394  7830              LDRB     r0,[r6,#0]            ;1018
000396  2806              CMP      r0,#6                 ;1018
000398  d17b              BNE      |L10.1170|
00039a  7870              LDRB     r0,[r6,#1]            ;1018
00039c  2802              CMP      r0,#2                 ;1018
00039e  d178              BNE      |L10.1170|
0003a0  a802              ADD      r0,sp,#8              ;1020
0003a2  9000              STR      r0,[sp,#0]            ;1020
0003a4  481c              LDR      r0,|L10.1048|
0003a6  7802              LDRB     r2,[r0,#0]            ;1020  ; System
0003a8  237b              MOVS     r3,#0x7b              ;1020
0003aa  492a              LDR      r1,|L10.1108|
0003ac  4630              MOV      r0,r6                 ;1020
0003ae  f7fffffe          BL       Data_Assemble
0003b2  4607              MOV      r7,r0                 ;1020
0003b4  2f00              CMP      r7,#0                 ;1021
0003b6  d0a4              BEQ      |L10.770|
0003b8  f89d5108          LDRB     r5,[sp,#0x108]        ;1024
0003bc  2400              MOVS     r4,#0                 ;1025
0003be  bf00              NOP                            ;1025
                  |L10.960|
0003c0  2d08              CMP      r5,#8                 ;1027
0003c2  db15              BLT      |L10.1008|
0003c4  4816              LDR      r0,|L10.1056|
0003c6  7800              LDRB     r0,[r0,#0]            ;1029  ; S0_State
0003c8  2803              CMP      r0,#3                 ;1029
0003ca  d10c              BNE      |L10.998|
0003cc  4815              LDR      r0,|L10.1060|
0003ce  7800              LDRB     r0,[r0,#0]            ;1031  ; S0_Data
0003d0  f0200002          BIC      r0,r0,#2              ;1031
0003d4  4913              LDR      r1,|L10.1060|
0003d6  7008              STRB     r0,[r1,#0]            ;1031
0003d8  a802              ADD      r0,sp,#8              ;1032
0003da  2208              MOVS     r2,#8                 ;1032
0003dc  fb020104          MLA      r1,r2,r4,r0           ;1032
0003e0  2000              MOVS     r0,#0                 ;1032
0003e2  f7fffffe          BL       Process_Socket_Data
                  |L10.998|
0003e6  f1a50008          SUB      r0,r5,#8              ;1034
0003ea  b2c5              UXTB     r5,r0                 ;1034
0003ec  b99d              CBNZ     r5,|L10.1046|
0003ee  e036              B        |L10.1118|
                  |L10.1008|
0003f0  480b              LDR      r0,|L10.1056|
0003f2  7800              LDRB     r0,[r0,#0]            ;1040  ; S0_State
0003f4  2803              CMP      r0,#3                 ;1040
0003f6  d10d              BNE      |L10.1044|
0003f8  480a              LDR      r0,|L10.1060|
0003fa  7800              LDRB     r0,[r0,#0]            ;1042  ; S0_Data
0003fc  f0200002          BIC      r0,r0,#2              ;1042
000400  4908              LDR      r1,|L10.1060|
000402  7008              STRB     r0,[r1,#0]            ;1042
000404  a802              ADD      r0,sp,#8              ;1043
000406  2208              MOVS     r2,#8                 ;1043
000408  fb020104          MLA      r1,r2,r4,r0           ;1043
00040c  462a              MOV      r2,r5                 ;1043
00040e  2000              MOVS     r0,#0                 ;1043
000410  f7fffffe          BL       Process_Socket_Data
                  |L10.1044|
000414  e023              B        |L10.1118|
                  |L10.1046|
000416  e01f              B        |L10.1112|
                  |L10.1048|
                          DCD      System
                  |L10.1052|
                          DCD      Alarm_backPC
                  |L10.1056|
                          DCD      S0_State
                  |L10.1060|
                          DCD      S0_Data
                  |L10.1064|
000428  434f4d5f          DCB      "COM_buffer: ",0
00042c  62756666
000430  65723a20
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L10.1080|
000438  25303278          DCB      "%02x ",0
00043c  2000    
00043e  00                DCB      0
00043f  00                DCB      0
                  |L10.1088|
000440  0d0a00            DCB      "\r\n",0
000443  00                DCB      0
                  |L10.1092|
                          DCD      Work_paraBack
                  |L10.1096|
                          DCD      Trans_openBack
                  |L10.1100|
                          DCD      Trans_stopBack
                  |L10.1104|
                          DCD      DisalarmBack
                  |L10.1108|
                          DCD      Alarm_historyBack
                  |L10.1112|
000458  1c60              ADDS     r0,r4,#1              ;1025
00045a  b2c4              UXTB     r4,r0                 ;1025
00045c  e7b0              B        |L10.960|
                  |L10.1118|
00045e  bf00              NOP                            ;1036
000460  f2af003c          ADR      r0,|L10.1064|
000464  f7fffffe          BL       App_printf
000468  2400              MOVS     r4,#0                 ;1053
00046a  e007              B        |L10.1148|
                  |L10.1132|
00046c  a802              ADD      r0,sp,#8              ;1055
00046e  5d01              LDRB     r1,[r0,r4]            ;1055
000470  f2af003c          ADR      r0,|L10.1080|
000474  f7fffffe          BL       App_printf
000478  1c60              ADDS     r0,r4,#1              ;1053
00047a  b2c4              UXTB     r4,r0                 ;1053
                  |L10.1148|
00047c  f89d0108          LDRB     r0,[sp,#0x108]        ;1053
000480  42a0              CMP      r0,r4                 ;1053
000482  dcf3              BGT      |L10.1132|
000484  f2af0048          ADR      r0,|L10.1088|
000488  f7fffffe          BL       App_printf
00048c  2001              MOVS     r0,#1                 ;1058
                  |L10.1166|
00048e  e616              B        |L10.190|
000490  e7ff              B        |L10.1170|
                  |L10.1170|
000492  7830              LDRB     r0,[r6,#0]            ;1061
000494  2807              CMP      r0,#7                 ;1061
000496  d159              BNE      |L10.1356|
000498  7870              LDRB     r0,[r6,#1]            ;1061
00049a  2802              CMP      r0,#2                 ;1061
00049c  d156              BNE      |L10.1356|
00049e  a802              ADD      r0,sp,#8              ;1063
0004a0  9000              STR      r0,[sp,#0]            ;1063
0004a2  48fc              LDR      r0,|L10.2196|
0004a4  7802              LDRB     r2,[r0,#0]            ;1063  ; System
0004a6  2302              MOVS     r3,#2                 ;1063
0004a8  49fb              LDR      r1,|L10.2200|
0004aa  4630              MOV      r0,r6                 ;1063
0004ac  f7fffffe          BL       Data_Assemble
0004b0  4607              MOV      r7,r0                 ;1063
0004b2  2f00              CMP      r7,#0                 ;1064
                  |L10.1204|
0004b4  d078              BEQ      |L10.1448|
0004b6  f89d5108          LDRB     r5,[sp,#0x108]        ;1067
0004ba  2400              MOVS     r4,#0                 ;1068
0004bc  bf00              NOP                            ;1068
                  |L10.1214|
0004be  2d08              CMP      r5,#8                 ;1070
0004c0  db15              BLT      |L10.1262|
0004c2  48f6              LDR      r0,|L10.2204|
0004c4  7800              LDRB     r0,[r0,#0]            ;1072  ; S0_State
0004c6  2803              CMP      r0,#3                 ;1072
0004c8  d10c              BNE      |L10.1252|
0004ca  48f5              LDR      r0,|L10.2208|
0004cc  7800              LDRB     r0,[r0,#0]            ;1074  ; S0_Data
0004ce  f0200002          BIC      r0,r0,#2              ;1074
0004d2  49f3              LDR      r1,|L10.2208|
0004d4  7008              STRB     r0,[r1,#0]            ;1074
0004d6  a802              ADD      r0,sp,#8              ;1075
0004d8  2208              MOVS     r2,#8                 ;1075
0004da  fb020104          MLA      r1,r2,r4,r0           ;1075
0004de  2000              MOVS     r0,#0                 ;1075
0004e0  f7fffffe          BL       Process_Socket_Data
                  |L10.1252|
0004e4  f1a50008          SUB      r0,r5,#8              ;1077
0004e8  b2c5              UXTB     r5,r0                 ;1077
0004ea  b99d              CBNZ     r5,|L10.1300|
0004ec  e015              B        |L10.1306|
                  |L10.1262|
0004ee  48eb              LDR      r0,|L10.2204|
0004f0  7800              LDRB     r0,[r0,#0]            ;1083  ; S0_State
0004f2  2803              CMP      r0,#3                 ;1083
0004f4  d10d              BNE      |L10.1298|
0004f6  48ea              LDR      r0,|L10.2208|
0004f8  7800              LDRB     r0,[r0,#0]            ;1085  ; S0_Data
0004fa  f0200002          BIC      r0,r0,#2              ;1085
0004fe  49e8              LDR      r1,|L10.2208|
000500  7008              STRB     r0,[r1,#0]            ;1085
000502  a802              ADD      r0,sp,#8              ;1086
000504  2208              MOVS     r2,#8                 ;1086
000506  fb020104          MLA      r1,r2,r4,r0           ;1086
00050a  462a              MOV      r2,r5                 ;1086
00050c  2000              MOVS     r0,#0                 ;1086
00050e  f7fffffe          BL       Process_Socket_Data
                  |L10.1298|
000512  e002              B        |L10.1306|
                  |L10.1300|
000514  1c60              ADDS     r0,r4,#1              ;1068
000516  b2c4              UXTB     r4,r0                 ;1068
000518  e7d1              B        |L10.1214|
                  |L10.1306|
00051a  bf00              NOP                            ;1079
00051c  f2af00f8          ADR      r0,|L10.1064|
000520  f7fffffe          BL       App_printf
000524  2400              MOVS     r4,#0                 ;1096
000526  e007              B        |L10.1336|
                  |L10.1320|
000528  a802              ADD      r0,sp,#8              ;1098
00052a  5d01              LDRB     r1,[r0,r4]            ;1098
00052c  f2af00f8          ADR      r0,|L10.1080|
000530  f7fffffe          BL       App_printf
000534  1c60              ADDS     r0,r4,#1              ;1096
000536  b2c4              UXTB     r4,r0                 ;1096
                  |L10.1336|
000538  f89d0108          LDRB     r0,[sp,#0x108]        ;1096
00053c  42a0              CMP      r0,r4                 ;1096
00053e  dcf3              BGT      |L10.1320|
000540  f2af1004          ADR      r0,|L10.1088|
000544  f7fffffe          BL       App_printf
000548  2001              MOVS     r0,#1                 ;1101
00054a  e5b8              B        |L10.190|
                  |L10.1356|
00054c  7830              LDRB     r0,[r6,#0]            ;1104
00054e  2808              CMP      r0,#8                 ;1104
000550  d15a              BNE      |L10.1544|
000552  7870              LDRB     r0,[r6,#1]            ;1104
000554  2802              CMP      r0,#2                 ;1104
000556  d157              BNE      |L10.1544|
000558  a802              ADD      r0,sp,#8              ;1106
00055a  9000              STR      r0,[sp,#0]            ;1106
00055c  48cd              LDR      r0,|L10.2196|
00055e  7802              LDRB     r2,[r0,#0]            ;1106  ; System
000560  2302              MOVS     r3,#2                 ;1106
000562  49d0              LDR      r1,|L10.2212|
000564  4630              MOV      r0,r6                 ;1106
000566  f7fffffe          BL       Data_Assemble
00056a  4607              MOV      r7,r0                 ;1106
00056c  2f00              CMP      r7,#0                 ;1107
00056e  d0a1              BEQ      |L10.1204|
000570  f89d5108          LDRB     r5,[sp,#0x108]        ;1110
000574  2400              MOVS     r4,#0                 ;1111
000576  bf00              NOP                            ;1111
                  |L10.1400|
000578  2d08              CMP      r5,#8                 ;1113
00057a  db16              BLT      |L10.1450|
00057c  48c7              LDR      r0,|L10.2204|
00057e  7800              LDRB     r0,[r0,#0]            ;1115  ; S0_State
000580  2803              CMP      r0,#3                 ;1115
000582  d10c              BNE      |L10.1438|
000584  48c6              LDR      r0,|L10.2208|
000586  7800              LDRB     r0,[r0,#0]            ;1117  ; S0_Data
000588  f0200002          BIC      r0,r0,#2              ;1117
00058c  49c4              LDR      r1,|L10.2208|
00058e  7008              STRB     r0,[r1,#0]            ;1117
000590  a802              ADD      r0,sp,#8              ;1118
000592  2208              MOVS     r2,#8                 ;1118
000594  fb020104          MLA      r1,r2,r4,r0           ;1118
000598  2000              MOVS     r0,#0                 ;1118
00059a  f7fffffe          BL       Process_Socket_Data
                  |L10.1438|
00059e  f1a50008          SUB      r0,r5,#8              ;1120
0005a2  b2c5              UXTB     r5,r0                 ;1120
0005a4  b9a5              CBNZ     r5,|L10.1488|
0005a6  e016              B        |L10.1494|
                  |L10.1448|
0005a8  e1c8              B        |L10.2364|
                  |L10.1450|
0005aa  48bc              LDR      r0,|L10.2204|
0005ac  7800              LDRB     r0,[r0,#0]            ;1126  ; S0_State
0005ae  2803              CMP      r0,#3                 ;1126
0005b0  d10d              BNE      |L10.1486|
0005b2  48bb              LDR      r0,|L10.2208|
0005b4  7800              LDRB     r0,[r0,#0]            ;1128  ; S0_Data
0005b6  f0200002          BIC      r0,r0,#2              ;1128
0005ba  49b9              LDR      r1,|L10.2208|
0005bc  7008              STRB     r0,[r1,#0]            ;1128
0005be  a802              ADD      r0,sp,#8              ;1129
0005c0  2208              MOVS     r2,#8                 ;1129
0005c2  fb020104          MLA      r1,r2,r4,r0           ;1129
0005c6  462a              MOV      r2,r5                 ;1129
0005c8  2000              MOVS     r0,#0                 ;1129
0005ca  f7fffffe          BL       Process_Socket_Data
                  |L10.1486|
0005ce  e002              B        |L10.1494|
                  |L10.1488|
0005d0  1c60              ADDS     r0,r4,#1              ;1111
0005d2  b2c4              UXTB     r4,r0                 ;1111
0005d4  e7d0              B        |L10.1400|
                  |L10.1494|
0005d6  bf00              NOP                            ;1122
0005d8  f2af10b4          ADR      r0,|L10.1064|
0005dc  f7fffffe          BL       App_printf
0005e0  2400              MOVS     r4,#0                 ;1139
0005e2  e007              B        |L10.1524|
                  |L10.1508|
0005e4  a802              ADD      r0,sp,#8              ;1141
0005e6  5d01              LDRB     r1,[r0,r4]            ;1141
0005e8  f2af10b4          ADR      r0,|L10.1080|
0005ec  f7fffffe          BL       App_printf
0005f0  1c60              ADDS     r0,r4,#1              ;1139
0005f2  b2c4              UXTB     r4,r0                 ;1139
                  |L10.1524|
0005f4  f89d0108          LDRB     r0,[sp,#0x108]        ;1139
0005f8  42a0              CMP      r0,r4                 ;1139
0005fa  dcf3              BGT      |L10.1508|
0005fc  f2af10c0          ADR      r0,|L10.1088|
000600  f7fffffe          BL       App_printf
000604  2001              MOVS     r0,#1                 ;1144
000606  e55a              B        |L10.190|
                  |L10.1544|
000608  7830              LDRB     r0,[r6,#0]            ;1147
00060a  2809              CMP      r0,#9                 ;1147
                  |L10.1548|
00060c  d173              BNE      |L10.1782|
00060e  7870              LDRB     r0,[r6,#1]            ;1147
000610  2802              CMP      r0,#2                 ;1147
000612  d1fb              BNE      |L10.1548|
000614  a0a4              ADR      r0,|L10.2216|
000616  f7fffffe          BL       App_printf
00061a  489e              LDR      r0,|L10.2196|
00061c  7c00              LDRB     r0,[r0,#0x10]         ;1150  ; System
00061e  280d              CMP      r0,#0xd               ;1150
000620  d215              BCS      |L10.1614|
000622  e8dff000          TBB      [pc,r0]               ;1150
000626  0715              DCB      0x07,0x15
000628  23313f4d          DCB      0x23,0x31,0x3f,0x4d
00062c  5b6a7886          DCB      0x5b,0x6a,0x78,0x86
000630  94a2b000          DCB      0x94,0xa2,0xb0,0x00
000634  a802              ADD      r0,sp,#8              ;1154
000636  9000              STR      r0,[sp,#0]            ;1154
000638  4896              LDR      r0,|L10.2196|
00063a  7802              LDRB     r2,[r0,#0]            ;1154  ; System
00063c  236e              MOVS     r3,#0x6e              ;1154
00063e  49a0              LDR      r1,|L10.2240|
000640  4630              MOV      r0,r6                 ;1154
000642  f7fffffe          BL       Data_Assemble
000646  4607              MOV      r7,r0                 ;1154
000648  b90f              CBNZ     r7,|L10.1614|
00064a  2002              MOVS     r0,#2                 ;1157
00064c  e537              B        |L10.190|
                  |L10.1614|
00064e  e0a8              B        |L10.1954|
000650  a802              ADD      r0,sp,#8              ;1165
000652  9000              STR      r0,[sp,#0]            ;1165
000654  488f              LDR      r0,|L10.2196|
000656  7802              LDRB     r2,[r0,#0]            ;1165  ; System
000658  236e              MOVS     r3,#0x6e              ;1165
00065a  499a              LDR      r1,|L10.2244|
00065c  4630              MOV      r0,r6                 ;1165
00065e  f7fffffe          BL       Data_Assemble
000662  4607              MOV      r7,r0                 ;1165
000664  b90f              CBNZ     r7,|L10.1642|
000666  2002              MOVS     r0,#2                 ;1168
000668  e529              B        |L10.190|
                  |L10.1642|
00066a  e09a              B        |L10.1954|
00066c  a802              ADD      r0,sp,#8              ;1176
00066e  9000              STR      r0,[sp,#0]            ;1176
000670  4888              LDR      r0,|L10.2196|
000672  7802              LDRB     r2,[r0,#0]            ;1176  ; System
000674  236e              MOVS     r3,#0x6e              ;1176
000676  4994              LDR      r1,|L10.2248|
000678  4630              MOV      r0,r6                 ;1176
00067a  f7fffffe          BL       Data_Assemble
00067e  4607              MOV      r7,r0                 ;1176
000680  b90f              CBNZ     r7,|L10.1670|
000682  2002              MOVS     r0,#2                 ;1179
000684  e51b              B        |L10.190|
                  |L10.1670|
000686  e08c              B        |L10.1954|
000688  a802              ADD      r0,sp,#8              ;1187
00068a  9000              STR      r0,[sp,#0]            ;1187
00068c  4881              LDR      r0,|L10.2196|
00068e  7802              LDRB     r2,[r0,#0]            ;1187  ; System
000690  236e              MOVS     r3,#0x6e              ;1187
000692  498e              LDR      r1,|L10.2252|
000694  4630              MOV      r0,r6                 ;1187
000696  f7fffffe          BL       Data_Assemble
00069a  4607              MOV      r7,r0                 ;1187
00069c  b90f              CBNZ     r7,|L10.1698|
00069e  2002              MOVS     r0,#2                 ;1190
0006a0  e50d              B        |L10.190|
                  |L10.1698|
0006a2  e07e              B        |L10.1954|
0006a4  a802              ADD      r0,sp,#8              ;1198
0006a6  9000              STR      r0,[sp,#0]            ;1198
0006a8  487a              LDR      r0,|L10.2196|
0006aa  7802              LDRB     r2,[r0,#0]            ;1198  ; System
0006ac  236e              MOVS     r3,#0x6e              ;1198
0006ae  4988              LDR      r1,|L10.2256|
0006b0  4630              MOV      r0,r6                 ;1198
0006b2  f7fffffe          BL       Data_Assemble
0006b6  4607              MOV      r7,r0                 ;1198
0006b8  b90f              CBNZ     r7,|L10.1726|
0006ba  2002              MOVS     r0,#2                 ;1201
0006bc  e4ff              B        |L10.190|
                  |L10.1726|
0006be  e070              B        |L10.1954|
0006c0  a802              ADD      r0,sp,#8              ;1209
0006c2  9000              STR      r0,[sp,#0]            ;1209
0006c4  4873              LDR      r0,|L10.2196|
0006c6  7802              LDRB     r2,[r0,#0]            ;1209  ; System
0006c8  236e              MOVS     r3,#0x6e              ;1209
0006ca  4982              LDR      r1,|L10.2260|
0006cc  4630              MOV      r0,r6                 ;1209
0006ce  f7fffffe          BL       Data_Assemble
0006d2  4607              MOV      r7,r0                 ;1209
0006d4  b90f              CBNZ     r7,|L10.1754|
0006d6  2002              MOVS     r0,#2                 ;1212
0006d8  e4f1              B        |L10.190|
                  |L10.1754|
0006da  e062              B        |L10.1954|
0006dc  a802              ADD      r0,sp,#8              ;1220
0006de  9000              STR      r0,[sp,#0]            ;1220
0006e0  486c              LDR      r0,|L10.2196|
0006e2  7802              LDRB     r2,[r0,#0]            ;1220  ; System
0006e4  236e              MOVS     r3,#0x6e              ;1220
0006e6  497c              LDR      r1,|L10.2264|
0006e8  4630              MOV      r0,r6                 ;1220
0006ea  f7fffffe          BL       Data_Assemble
0006ee  4607              MOV      r7,r0                 ;1220
0006f0  b917              CBNZ     r7,|L10.1784|
0006f2  2002              MOVS     r0,#2                 ;1223
0006f4  e4e3              B        |L10.190|
                  |L10.1782|
0006f6  e09f              B        |L10.2104|
                  |L10.1784|
0006f8  e053              B        |L10.1954|
0006fa  a802              ADD      r0,sp,#8              ;1231
0006fc  9000              STR      r0,[sp,#0]            ;1231
0006fe  4865              LDR      r0,|L10.2196|
000700  7802              LDRB     r2,[r0,#0]            ;1231  ; System
000702  236e              MOVS     r3,#0x6e              ;1231
000704  4975              LDR      r1,|L10.2268|
000706  4630              MOV      r0,r6                 ;1231
000708  f7fffffe          BL       Data_Assemble
00070c  4607              MOV      r7,r0                 ;1231
00070e  b90f              CBNZ     r7,|L10.1812|
000710  2002              MOVS     r0,#2                 ;1234
000712  e4d4              B        |L10.190|
                  |L10.1812|
000714  e045              B        |L10.1954|
000716  a802              ADD      r0,sp,#8              ;1242
000718  9000              STR      r0,[sp,#0]            ;1242
00071a  485e              LDR      r0,|L10.2196|
00071c  7802              LDRB     r2,[r0,#0]            ;1242  ; System
00071e  236e              MOVS     r3,#0x6e              ;1242
000720  496f              LDR      r1,|L10.2272|
000722  4630              MOV      r0,r6                 ;1242
000724  f7fffffe          BL       Data_Assemble
000728  4607              MOV      r7,r0                 ;1242
00072a  b90f              CBNZ     r7,|L10.1840|
00072c  2002              MOVS     r0,#2                 ;1245
00072e  e4c6              B        |L10.190|
                  |L10.1840|
000730  e037              B        |L10.1954|
000732  a802              ADD      r0,sp,#8              ;1253
000734  9000              STR      r0,[sp,#0]            ;1253
000736  4857              LDR      r0,|L10.2196|
000738  7802              LDRB     r2,[r0,#0]            ;1253  ; System
00073a  236e              MOVS     r3,#0x6e              ;1253
00073c  4969              LDR      r1,|L10.2276|
00073e  4630              MOV      r0,r6                 ;1253
000740  f7fffffe          BL       Data_Assemble
000744  4607              MOV      r7,r0                 ;1253
000746  b90f              CBNZ     r7,|L10.1868|
000748  2002              MOVS     r0,#2                 ;1256
00074a  e4b8              B        |L10.190|
                  |L10.1868|
00074c  e029              B        |L10.1954|
00074e  a802              ADD      r0,sp,#8              ;1264
000750  9000              STR      r0,[sp,#0]            ;1264
000752  4850              LDR      r0,|L10.2196|
000754  7802              LDRB     r2,[r0,#0]            ;1264  ; System
000756  236e              MOVS     r3,#0x6e              ;1264
000758  4963              LDR      r1,|L10.2280|
00075a  4630              MOV      r0,r6                 ;1264
00075c  f7fffffe          BL       Data_Assemble
000760  4607              MOV      r7,r0                 ;1264
000762  b90f              CBNZ     r7,|L10.1896|
000764  2002              MOVS     r0,#2                 ;1267
000766  e4aa              B        |L10.190|
                  |L10.1896|
000768  e01b              B        |L10.1954|
00076a  a802              ADD      r0,sp,#8              ;1275
00076c  9000              STR      r0,[sp,#0]            ;1275
00076e  4849              LDR      r0,|L10.2196|
000770  7802              LDRB     r2,[r0,#0]            ;1275  ; System
000772  236e              MOVS     r3,#0x6e              ;1275
000774  495d              LDR      r1,|L10.2284|
000776  4630              MOV      r0,r6                 ;1275
000778  f7fffffe          BL       Data_Assemble
00077c  4607              MOV      r7,r0                 ;1275
00077e  b90f              CBNZ     r7,|L10.1924|
000780  2002              MOVS     r0,#2                 ;1278
000782  e49c              B        |L10.190|
                  |L10.1924|
000784  e00d              B        |L10.1954|
000786  a802              ADD      r0,sp,#8              ;1286
000788  9000              STR      r0,[sp,#0]            ;1286
00078a  4842              LDR      r0,|L10.2196|
00078c  7802              LDRB     r2,[r0,#0]            ;1286  ; System
00078e  236e              MOVS     r3,#0x6e              ;1286
000790  4957              LDR      r1,|L10.2288|
000792  4630              MOV      r0,r6                 ;1286
000794  f7fffffe          BL       Data_Assemble
000798  4607              MOV      r7,r0                 ;1286
00079a  b90f              CBNZ     r7,|L10.1952|
00079c  2002              MOVS     r0,#2                 ;1289
00079e  e48e              B        |L10.190|
                  |L10.1952|
0007a0  bf00              NOP                            ;1292
                  |L10.1954|
0007a2  bf00              NOP                            ;1160
0007a4  f89d5108          LDRB     r5,[sp,#0x108]        ;1297
0007a8  2400              MOVS     r4,#0                 ;1298
0007aa  bf00              NOP                            ;1298
                  |L10.1964|
0007ac  2d08              CMP      r5,#8                 ;1300
0007ae  db15              BLT      |L10.2012|
0007b0  483a              LDR      r0,|L10.2204|
0007b2  7800              LDRB     r0,[r0,#0]            ;1302  ; S0_State
0007b4  2803              CMP      r0,#3                 ;1302
0007b6  d10c              BNE      |L10.2002|
0007b8  4839              LDR      r0,|L10.2208|
0007ba  7800              LDRB     r0,[r0,#0]            ;1304  ; S0_Data
0007bc  f0200002          BIC      r0,r0,#2              ;1304
0007c0  4937              LDR      r1,|L10.2208|
0007c2  7008              STRB     r0,[r1,#0]            ;1304
0007c4  a802              ADD      r0,sp,#8              ;1305
0007c6  2208              MOVS     r2,#8                 ;1305
0007c8  fb020104          MLA      r1,r2,r4,r0           ;1305
0007cc  2000              MOVS     r0,#0                 ;1305
0007ce  f7fffffe          BL       Process_Socket_Data
                  |L10.2002|
0007d2  f1a50008          SUB      r0,r5,#8              ;1307
0007d6  b2c5              UXTB     r5,r0                 ;1307
0007d8  b99d              CBNZ     r5,|L10.2050|
0007da  e015              B        |L10.2056|
                  |L10.2012|
0007dc  482f              LDR      r0,|L10.2204|
0007de  7800              LDRB     r0,[r0,#0]            ;1313  ; S0_State
0007e0  2803              CMP      r0,#3                 ;1313
0007e2  d10d              BNE      |L10.2048|
0007e4  482e              LDR      r0,|L10.2208|
0007e6  7800              LDRB     r0,[r0,#0]            ;1315  ; S0_Data
0007e8  f0200002          BIC      r0,r0,#2              ;1315
0007ec  492c              LDR      r1,|L10.2208|
0007ee  7008              STRB     r0,[r1,#0]            ;1315
0007f0  a802              ADD      r0,sp,#8              ;1316
0007f2  2208              MOVS     r2,#8                 ;1316
0007f4  fb020104          MLA      r1,r2,r4,r0           ;1316
0007f8  462a              MOV      r2,r5                 ;1316
0007fa  2000              MOVS     r0,#0                 ;1316
0007fc  f7fffffe          BL       Process_Socket_Data
                  |L10.2048|
000800  e002              B        |L10.2056|
                  |L10.2050|
000802  1c60              ADDS     r0,r4,#1              ;1298
000804  b2c4              UXTB     r4,r0                 ;1298
000806  e7d1              B        |L10.1964|
                  |L10.2056|
000808  bf00              NOP                            ;1309
00080a  a03a              ADR      r0,|L10.2292|
00080c  f7fffffe          BL       App_printf
000810  2400              MOVS     r4,#0                 ;1326
000812  e007              B        |L10.2084|
                  |L10.2068|
000814  a802              ADD      r0,sp,#8              ;1328
000816  5d01              LDRB     r1,[r0,r4]            ;1328
000818  f2af30e4          ADR      r0,|L10.1080|
00081c  f7fffffe          BL       App_printf
000820  1c60              ADDS     r0,r4,#1              ;1326
000822  b2c4              UXTB     r4,r0                 ;1326
                  |L10.2084|
000824  f89d0108          LDRB     r0,[sp,#0x108]        ;1326
000828  42a0              CMP      r0,r4                 ;1326
00082a  dcf3              BGT      |L10.2068|
00082c  f2af30f0          ADR      r0,|L10.1088|
000830  f7fffffe          BL       App_printf
000834  2001              MOVS     r0,#1                 ;1331
000836  e442              B        |L10.190|
                  |L10.2104|
000838  7830              LDRB     r0,[r6,#0]            ;1333
00083a  280a              CMP      r0,#0xa               ;1333
00083c  d167              BNE      |L10.2318|
00083e  7870              LDRB     r0,[r6,#1]            ;1333
000840  2802              CMP      r0,#2                 ;1333
000842  d164              BNE      |L10.2318|
000844  a802              ADD      r0,sp,#8              ;1335
000846  9000              STR      r0,[sp,#0]            ;1335
000848  4812              LDR      r0,|L10.2196|
00084a  7802              LDRB     r2,[r0,#0]            ;1335  ; System
00084c  2302              MOVS     r3,#2                 ;1335
00084e  492e              LDR      r1,|L10.2312|
000850  4630              MOV      r0,r6                 ;1335
000852  f7fffffe          BL       Data_Assemble
000856  4607              MOV      r7,r0                 ;1335
000858  2f00              CMP      r7,#0                 ;1336
00085a  d06f              BEQ      |L10.2364|
00085c  f89d5108          LDRB     r5,[sp,#0x108]        ;1339
000860  2400              MOVS     r4,#0                 ;1340
000862  bf00              NOP                            ;1340
                  |L10.2148|
000864  2d08              CMP      r5,#8                 ;1342
000866  db53              BLT      |L10.2320|
000868  480c              LDR      r0,|L10.2204|
00086a  7800              LDRB     r0,[r0,#0]            ;1344  ; S0_State
00086c  2803              CMP      r0,#3                 ;1344
00086e  d10c              BNE      |L10.2186|
000870  480b              LDR      r0,|L10.2208|
000872  7800              LDRB     r0,[r0,#0]            ;1346  ; S0_Data
000874  f0200002          BIC      r0,r0,#2              ;1346
000878  4909              LDR      r1,|L10.2208|
00087a  7008              STRB     r0,[r1,#0]            ;1346
00087c  a802              ADD      r0,sp,#8              ;1347
00087e  2208              MOVS     r2,#8                 ;1347
000880  fb020104          MLA      r1,r2,r4,r0           ;1347
000884  2000              MOVS     r0,#0                 ;1347
000886  f7fffffe          BL       Process_Socket_Data
                  |L10.2186|
00088a  f1a50008          SUB      r0,r5,#8              ;1349
00088e  b2c5              UXTB     r5,r0                 ;1349
000890  bbe5              CBNZ     r5,|L10.2316|
000892  e054              B        |L10.2366|
                  |L10.2196|
                          DCD      System
                  |L10.2200|
                          DCD      Power_onBack
                  |L10.2204|
                          DCD      S0_State
                  |L10.2208|
                          DCD      S0_Data
                  |L10.2212|
                          DCD      Power_offBack
                  |L10.2216|
0008a8  434f4d5f          DCB      "COM_buffer sweeping: \r\n",0
0008ac  62756666
0008b0  65722073
0008b4  77656570
0008b8  696e673a
0008bc  200d0a00
                  |L10.2240|
                          DCD      Scan_FrqBack
                  |L10.2244|
                          DCD      Scan_FrqBack1
                  |L10.2248|
                          DCD      Scan_FrqBack2
                  |L10.2252|
                          DCD      Scan_FrqBack3
                  |L10.2256|
                          DCD      Scan_FrqBack4
                  |L10.2260|
                          DCD      Scan_FrqBack5
                  |L10.2264|
                          DCD      Scan_FrqBack6
                  |L10.2268|
                          DCD      Scan_FrqBack7
                  |L10.2272|
                          DCD      Scan_FrqBack8
                  |L10.2276|
                          DCD      Scan_FrqBack9
                  |L10.2280|
                          DCD      Scan_FrqBack10
                  |L10.2284|
                          DCD      Scan_FrqBack11
                  |L10.2288|
                          DCD      Scan_FrqBack12
                  |L10.2292|
0008f4  5363616e          DCB      "Scan_COM_buffer: ",0
0008f8  5f434f4d
0008fc  5f627566
000900  6665723a
000904  2000    
000906  00                DCB      0
000907  00                DCB      0
                  |L10.2312|
                          DCD      Sacn_stopBack
                  |L10.2316|
00090c  e013              B        |L10.2358|
                  |L10.2318|
00090e  e02f              B        |L10.2416|
                  |L10.2320|
000910  48a4              LDR      r0,|L10.2980|
000912  7800              LDRB     r0,[r0,#0]            ;1355  ; S0_State
000914  2803              CMP      r0,#3                 ;1355
000916  d10d              BNE      |L10.2356|
000918  48a3              LDR      r0,|L10.2984|
00091a  7800              LDRB     r0,[r0,#0]            ;1357  ; S0_Data
00091c  f0200002          BIC      r0,r0,#2              ;1357
000920  49a1              LDR      r1,|L10.2984|
000922  7008              STRB     r0,[r1,#0]            ;1357
000924  a802              ADD      r0,sp,#8              ;1358
000926  2208              MOVS     r2,#8                 ;1358
000928  fb020104          MLA      r1,r2,r4,r0           ;1358
00092c  462a              MOV      r2,r5                 ;1358
00092e  2000              MOVS     r0,#0                 ;1358
000930  f7fffffe          BL       Process_Socket_Data
                  |L10.2356|
000934  e003              B        |L10.2366|
                  |L10.2358|
000936  1c60              ADDS     r0,r4,#1              ;1340
000938  b2c4              UXTB     r4,r0                 ;1340
00093a  e793              B        |L10.2148|
                  |L10.2364|
00093c  e0a2              B        |L10.2692|
                  |L10.2366|
00093e  bf00              NOP                            ;1351
000940  f2af501c          ADR      r0,|L10.1064|
000944  f7fffffe          BL       App_printf
000948  2400              MOVS     r4,#0                 ;1368
00094a  e007              B        |L10.2396|
                  |L10.2380|
00094c  a802              ADD      r0,sp,#8              ;1370
00094e  5d01              LDRB     r1,[r0,r4]            ;1370
000950  f2af501c          ADR      r0,|L10.1080|
000954  f7fffffe          BL       App_printf
000958  1c60              ADDS     r0,r4,#1              ;1368
00095a  b2c4              UXTB     r4,r0                 ;1368
                  |L10.2396|
00095c  f89d0108          LDRB     r0,[sp,#0x108]        ;1368
000960  42a0              CMP      r0,r4                 ;1368
000962  dcf3              BGT      |L10.2380|
000964  f2af5028          ADR      r0,|L10.1088|
000968  f7fffffe          BL       App_printf
00096c  2001              MOVS     r0,#1                 ;1373
00096e  e45c              B        |L10.554|
                  |L10.2416|
000970  7830              LDRB     r0,[r6,#0]            ;1376
000972  280b              CMP      r0,#0xb               ;1376
000974  d159              BNE      |L10.2602|
000976  7870              LDRB     r0,[r6,#1]            ;1376
000978  2802              CMP      r0,#2                 ;1376
00097a  d156              BNE      |L10.2602|
00097c  a802              ADD      r0,sp,#8              ;1378
00097e  9000              STR      r0,[sp,#0]            ;1378
000980  488a              LDR      r0,|L10.2988|
000982  7802              LDRB     r2,[r0,#0]            ;1378  ; System
000984  2302              MOVS     r3,#2                 ;1378
000986  498a              LDR      r1,|L10.2992|
000988  4630              MOV      r0,r6                 ;1378
00098a  f7fffffe          BL       Data_Assemble
00098e  4607              MOV      r7,r0                 ;1378
000990  2f00              CMP      r7,#0                 ;1379
000992  d077              BEQ      |L10.2692|
000994  f89d5108          LDRB     r5,[sp,#0x108]        ;1382
000998  2400              MOVS     r4,#0                 ;1383
00099a  bf00              NOP                            ;1383
                  |L10.2460|
00099c  2d08              CMP      r5,#8                 ;1385
00099e  db15              BLT      |L10.2508|
0009a0  4880              LDR      r0,|L10.2980|
0009a2  7800              LDRB     r0,[r0,#0]            ;1387  ; S0_State
0009a4  2803              CMP      r0,#3                 ;1387
0009a6  d10c              BNE      |L10.2498|
0009a8  487f              LDR      r0,|L10.2984|
0009aa  7800              LDRB     r0,[r0,#0]            ;1389  ; S0_Data
0009ac  f0200002          BIC      r0,r0,#2              ;1389
0009b0  497d              LDR      r1,|L10.2984|
0009b2  7008              STRB     r0,[r1,#0]            ;1389
0009b4  a802              ADD      r0,sp,#8              ;1390
0009b6  2208              MOVS     r2,#8                 ;1390
0009b8  fb020104          MLA      r1,r2,r4,r0           ;1390
0009bc  2000              MOVS     r0,#0                 ;1390
0009be  f7fffffe          BL       Process_Socket_Data
                  |L10.2498|
0009c2  f1a50008          SUB      r0,r5,#8              ;1392
0009c6  b2c5              UXTB     r5,r0                 ;1392
0009c8  b99d              CBNZ     r5,|L10.2546|
0009ca  e015              B        |L10.2552|
                  |L10.2508|
0009cc  4875              LDR      r0,|L10.2980|
0009ce  7800              LDRB     r0,[r0,#0]            ;1398  ; S0_State
0009d0  2803              CMP      r0,#3                 ;1398
0009d2  d10d              BNE      |L10.2544|
0009d4  4874              LDR      r0,|L10.2984|
0009d6  7800              LDRB     r0,[r0,#0]            ;1400  ; S0_Data
0009d8  f0200002          BIC      r0,r0,#2              ;1400
0009dc  4972              LDR      r1,|L10.2984|
0009de  7008              STRB     r0,[r1,#0]            ;1400
0009e0  a802              ADD      r0,sp,#8              ;1401
0009e2  2208              MOVS     r2,#8                 ;1401
0009e4  fb020104          MLA      r1,r2,r4,r0           ;1401
0009e8  462a              MOV      r2,r5                 ;1401
0009ea  2000              MOVS     r0,#0                 ;1401
0009ec  f7fffffe          BL       Process_Socket_Data
                  |L10.2544|
0009f0  e002              B        |L10.2552|
                  |L10.2546|
0009f2  1c60              ADDS     r0,r4,#1              ;1383
0009f4  b2c4              UXTB     r4,r0                 ;1383
0009f6  e7d1              B        |L10.2460|
                  |L10.2552|
0009f8  bf00              NOP                            ;1394
0009fa  f2af50d4          ADR      r0,|L10.1064|
0009fe  f7fffffe          BL       App_printf
000a02  2400              MOVS     r4,#0                 ;1411
000a04  e007              B        |L10.2582|
                  |L10.2566|
000a06  a802              ADD      r0,sp,#8              ;1413
000a08  5d01              LDRB     r1,[r0,r4]            ;1413
000a0a  f2af50d4          ADR      r0,|L10.1080|
000a0e  f7fffffe          BL       App_printf
000a12  1c60              ADDS     r0,r4,#1              ;1411
000a14  b2c4              UXTB     r4,r0                 ;1411
                  |L10.2582|
000a16  f89d0108          LDRB     r0,[sp,#0x108]        ;1411
000a1a  42a0              CMP      r0,r4                 ;1411
000a1c  dcf3              BGT      |L10.2566|
000a1e  f2af50e0          ADR      r0,|L10.1088|
000a22  f7fffffe          BL       App_printf
000a26  2001              MOVS     r0,#1                 ;1416
000a28  e459              B        |L10.734|
                  |L10.2602|
000a2a  7830              LDRB     r0,[r6,#0]            ;1419
000a2c  280c              CMP      r0,#0xc               ;1419
000a2e  d159              BNE      |L10.2788|
000a30  7870              LDRB     r0,[r6,#1]            ;1419
000a32  2802              CMP      r0,#2                 ;1419
000a34  d156              BNE      |L10.2788|
000a36  a802              ADD      r0,sp,#8              ;1421
000a38  9000              STR      r0,[sp,#0]            ;1421
000a3a  485c              LDR      r0,|L10.2988|
000a3c  7802              LDRB     r2,[r0,#0]            ;1421  ; System
000a3e  2302              MOVS     r3,#2                 ;1421
000a40  495c              LDR      r1,|L10.2996|
000a42  4630              MOV      r0,r6                 ;1421
000a44  f7fffffe          BL       Data_Assemble
000a48  4607              MOV      r7,r0                 ;1421
000a4a  b1df              CBZ      r7,|L10.2692|
000a4c  f89d5108          LDRB     r5,[sp,#0x108]        ;1425
000a50  2400              MOVS     r4,#0                 ;1426
000a52  bf00              NOP                            ;1426
                  |L10.2644|
000a54  2d08              CMP      r5,#8                 ;1428
000a56  db16              BLT      |L10.2694|
000a58  4852              LDR      r0,|L10.2980|
000a5a  7800              LDRB     r0,[r0,#0]            ;1430  ; S0_State
000a5c  2803              CMP      r0,#3                 ;1430
000a5e  d10c              BNE      |L10.2682|
000a60  4851              LDR      r0,|L10.2984|
000a62  7800              LDRB     r0,[r0,#0]            ;1432  ; S0_Data
000a64  f0200002          BIC      r0,r0,#2              ;1432
000a68  494f              LDR      r1,|L10.2984|
000a6a  7008              STRB     r0,[r1,#0]            ;1432
000a6c  a802              ADD      r0,sp,#8              ;1433
000a6e  2208              MOVS     r2,#8                 ;1433
000a70  fb020104          MLA      r1,r2,r4,r0           ;1433
000a74  2000              MOVS     r0,#0                 ;1433
000a76  f7fffffe          BL       Process_Socket_Data
                  |L10.2682|
000a7a  f1a50008          SUB      r0,r5,#8              ;1435
000a7e  b2c5              UXTB     r5,r0                 ;1435
000a80  b9a5              CBNZ     r5,|L10.2732|
000a82  e016              B        |L10.2738|
                  |L10.2692|
000a84  e071              B        |L10.2922|
                  |L10.2694|
000a86  4847              LDR      r0,|L10.2980|
000a88  7800              LDRB     r0,[r0,#0]            ;1441  ; S0_State
000a8a  2803              CMP      r0,#3                 ;1441
000a8c  d10d              BNE      |L10.2730|
000a8e  4846              LDR      r0,|L10.2984|
000a90  7800              LDRB     r0,[r0,#0]            ;1443  ; S0_Data
000a92  f0200002          BIC      r0,r0,#2              ;1443
000a96  4944              LDR      r1,|L10.2984|
000a98  7008              STRB     r0,[r1,#0]            ;1443
000a9a  a802              ADD      r0,sp,#8              ;1444
000a9c  2208              MOVS     r2,#8                 ;1444
000a9e  fb020104          MLA      r1,r2,r4,r0           ;1444
000aa2  462a              MOV      r2,r5                 ;1444
000aa4  2000              MOVS     r0,#0                 ;1444
000aa6  f7fffffe          BL       Process_Socket_Data
                  |L10.2730|
000aaa  e002              B        |L10.2738|
                  |L10.2732|
000aac  1c60              ADDS     r0,r4,#1              ;1426
000aae  b2c4              UXTB     r4,r0                 ;1426
000ab0  e7d0              B        |L10.2644|
                  |L10.2738|
000ab2  bf00              NOP                            ;1437
000ab4  f2af6090          ADR      r0,|L10.1064|
000ab8  f7fffffe          BL       App_printf
000abc  2400              MOVS     r4,#0                 ;1454
000abe  e007              B        |L10.2768|
                  |L10.2752|
000ac0  a802              ADD      r0,sp,#8              ;1456
000ac2  5d01              LDRB     r1,[r0,r4]            ;1456
000ac4  f2af6090          ADR      r0,|L10.1080|
000ac8  f7fffffe          BL       App_printf
000acc  1c60              ADDS     r0,r4,#1              ;1454
000ace  b2c4              UXTB     r4,r0                 ;1454
                  |L10.2768|
000ad0  f89d0108          LDRB     r0,[sp,#0x108]        ;1454
000ad4  42a0              CMP      r0,r4                 ;1454
000ad6  dcf3              BGT      |L10.2752|
000ad8  f2af609c          ADR      r0,|L10.1088|
000adc  f7fffffe          BL       App_printf
000ae0  2001              MOVS     r0,#1                 ;1459
000ae2  e456              B        |L10.914|
                  |L10.2788|
000ae4  7830              LDRB     r0,[r6,#0]            ;1462
000ae6  280d              CMP      r0,#0xd               ;1462
000ae8  d159              BNE      |L10.2974|
000aea  7870              LDRB     r0,[r6,#1]            ;1462
000aec  2802              CMP      r0,#2                 ;1462
000aee  d156              BNE      |L10.2974|
000af0  a802              ADD      r0,sp,#8              ;1464
000af2  9000              STR      r0,[sp,#0]            ;1464
000af4  482d              LDR      r0,|L10.2988|
000af6  7802              LDRB     r2,[r0,#0]            ;1464  ; System
000af8  2302              MOVS     r3,#2                 ;1464
000afa  492f              LDR      r1,|L10.3000|
000afc  4630              MOV      r0,r6                 ;1464
000afe  f7fffffe          BL       Data_Assemble
000b02  4607              MOV      r7,r0                 ;1464
000b04  b38f              CBZ      r7,|L10.2922|
000b06  f89d5108          LDRB     r5,[sp,#0x108]        ;1468
000b0a  2400              MOVS     r4,#0                 ;1469
000b0c  bf00              NOP                            ;1469
                  |L10.2830|
000b0e  2d08              CMP      r5,#8                 ;1471
000b10  db15              BLT      |L10.2878|
000b12  4824              LDR      r0,|L10.2980|
000b14  7800              LDRB     r0,[r0,#0]            ;1473  ; S0_State
000b16  2803              CMP      r0,#3                 ;1473
000b18  d10c              BNE      |L10.2868|
000b1a  4823              LDR      r0,|L10.2984|
000b1c  7800              LDRB     r0,[r0,#0]            ;1475  ; S0_Data
000b1e  f0200002          BIC      r0,r0,#2              ;1475
000b22  4921              LDR      r1,|L10.2984|
000b24  7008              STRB     r0,[r1,#0]            ;1475
000b26  a802              ADD      r0,sp,#8              ;1476
000b28  2208              MOVS     r2,#8                 ;1476
000b2a  fb020104          MLA      r1,r2,r4,r0           ;1476
000b2e  2000              MOVS     r0,#0                 ;1476
000b30  f7fffffe          BL       Process_Socket_Data
                  |L10.2868|
000b34  f1a50008          SUB      r0,r5,#8              ;1478
000b38  b2c5              UXTB     r5,r0                 ;1478
000b3a  b99d              CBNZ     r5,|L10.2916|
000b3c  e016              B        |L10.2924|
                  |L10.2878|
000b3e  4819              LDR      r0,|L10.2980|
000b40  7800              LDRB     r0,[r0,#0]            ;1484  ; S0_State
000b42  2803              CMP      r0,#3                 ;1484
000b44  d10d              BNE      |L10.2914|
000b46  4818              LDR      r0,|L10.2984|
000b48  7800              LDRB     r0,[r0,#0]            ;1486  ; S0_Data
000b4a  f0200002          BIC      r0,r0,#2              ;1486
000b4e  4916              LDR      r1,|L10.2984|
000b50  7008              STRB     r0,[r1,#0]            ;1486
000b52  a802              ADD      r0,sp,#8              ;1487
000b54  2208              MOVS     r2,#8                 ;1487
000b56  fb020104          MLA      r1,r2,r4,r0           ;1487
000b5a  462a              MOV      r2,r5                 ;1487
000b5c  2000              MOVS     r0,#0                 ;1487
000b5e  f7fffffe          BL       Process_Socket_Data
                  |L10.2914|
000b62  e003              B        |L10.2924|
                  |L10.2916|
000b64  1c60              ADDS     r0,r4,#1              ;1469
000b66  b2c4              UXTB     r4,r0                 ;1469
000b68  e7d1              B        |L10.2830|
                  |L10.2922|
000b6a  e018              B        |L10.2974|
                  |L10.2924|
000b6c  bf00              NOP                            ;1480
000b6e  f2af7048          ADR      r0,|L10.1064|
000b72  f7fffffe          BL       App_printf
000b76  2400              MOVS     r4,#0                 ;1497
000b78  e007              B        |L10.2954|
                  |L10.2938|
000b7a  a802              ADD      r0,sp,#8              ;1499
000b7c  5d01              LDRB     r1,[r0,r4]            ;1499
000b7e  f2af7048          ADR      r0,|L10.1080|
000b82  f7fffffe          BL       App_printf
000b86  1c60              ADDS     r0,r4,#1              ;1497
000b88  b2c4              UXTB     r4,r0                 ;1497
                  |L10.2954|
000b8a  f89d0108          LDRB     r0,[sp,#0x108]        ;1497
000b8e  42a0              CMP      r0,r4                 ;1497
000b90  dcf3              BGT      |L10.2938|
000b92  f2af7054          ADR      r0,|L10.1088|
000b96  f7fffffe          BL       App_printf
000b9a  2001              MOVS     r0,#1                 ;1502
000b9c  e477              B        |L10.1166|
                  |L10.2974|
000b9e  2002              MOVS     r0,#2                 ;1505
000ba0  e475              B        |L10.1166|
;;;1507   
                          ENDP

000ba2  0000              DCW      0x0000
                  |L10.2980|
                          DCD      S0_State
                  |L10.2984|
                          DCD      S0_Data
                  |L10.2988|
                          DCD      System
                  |L10.2992|
                          DCD      Add_PowerBack
                  |L10.2996|
                          DCD      Sub_PowerBack
                  |L10.3000|
                          DCD      Run_DiagramBack

                          AREA ||i.StrToHex||, CODE, READONLY, ALIGN=1

                  StrToHex PROC
;;;2305   */
;;;2306   void StrToHex(unsigned char *pbDest, unsigned char *pbSrc, int nLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2307   {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
000006  4615              MOV      r5,r2
;;;2308   	char h1, h2;
;;;2309   	unsigned char s1, s2;
;;;2310   	int i;
;;;2311   
;;;2312   	for (i = 0; i<nLen; i++)
000008  2000              MOVS     r0,#0
00000a  e020              B        |L11.78|
                  |L11.12|
;;;2313   	{
;;;2314   		h1 = pbSrc[2 * i];
00000c  f8137010          LDRB     r7,[r3,r0,LSL #1]
;;;2315   		h2 = pbSrc[2 * i + 1];
000010  ea4f0c40          LSL      r12,r0,#1
000014  f10c0c01          ADD      r12,r12,#1
000018  f813600c          LDRB     r6,[r3,r12]
;;;2316   
;;;2317   		s1 = h1 - 0x30;
00001c  f1a70c30          SUB      r12,r7,#0x30
000020  f00c01ff          AND      r1,r12,#0xff
;;;2318   		if (s1 > 9)
000024  2909              CMP      r1,#9
000026  dd03              BLE      |L11.48|
;;;2319   			s1 -= 7;
000028  f1a10c07          SUB      r12,r1,#7
00002c  f00c01ff          AND      r1,r12,#0xff
                  |L11.48|
;;;2320   
;;;2321   		s2 = h2 - 0x30;
000030  f1a60c30          SUB      r12,r6,#0x30
000034  f00c02ff          AND      r2,r12,#0xff
;;;2322   		if (s2 > 9)
000038  2a09              CMP      r2,#9
00003a  dd03              BLE      |L11.68|
;;;2323   			s2 -= 7;
00003c  f1a20c07          SUB      r12,r2,#7
000040  f00c02ff          AND      r2,r12,#0xff
                  |L11.68|
;;;2324   
;;;2325   		pbDest[i] = s1 * 16 + s2;
000044  eb021c01          ADD      r12,r2,r1,LSL #4
000048  f804c000          STRB     r12,[r4,r0]
00004c  1c40              ADDS     r0,r0,#1              ;2312
                  |L11.78|
00004e  42a8              CMP      r0,r5                 ;2312
000050  dbdc              BLT      |L11.12|
;;;2326   	}
;;;2327   }
000052  bdf0              POP      {r4-r7,pc}
;;;2328   
                          ENDP


                          AREA ||i.freq_GT2000Hex_to_PChex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  freq_GT2000Hex_to_PChex PROC
;;;2235   
;;;2236   void freq_GT2000Hex_to_PChex(unsigned char *freq_Trans_hex, unsigned char *freq_PC_Hex)  //GT2000的频率赋值给GT2000，低位在前
000000  b5fe              PUSH     {r1-r7,lr}
;;;2237   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2238   	int n = 0;
000006  2600              MOVS     r6,#0
;;;2239     unsigned char freq[6];
;;;2240   	freq[5] = '\0';
000008  2000              MOVS     r0,#0
00000a  f88d0009          STRB     r0,[sp,#9]
;;;2241   	n = (*(freq_Trans_hex + 0) << 8) | (*(freq_Trans_hex + 1));
00000e  7868              LDRB     r0,[r5,#1]
000010  7829              LDRB     r1,[r5,#0]
000012  ea402601          ORR      r6,r0,r1,LSL #8
;;;2242   	printf(" 获取到的十六进制频率为= %X \n", n);
000016  4631              MOV      r1,r6
000018  a00d              ADR      r0,|L12.80|
00001a  f7fffffe          BL       __2printf
;;;2243   	sprintf((char *)freq, "%05d", n); //把十六进制数字转为十进制字符串
00001e  4632              MOV      r2,r6
000020  a113              ADR      r1,|L12.112|
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       __2sprintf
;;;2244   	
;;;2245   		freq_str_to_hex(freq, freq_PC_Hex);
000028  4621              MOV      r1,r4
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       freq_str_to_hex
;;;2246   		Trans_printf(" 获取到的十进制频率为freq= %s \n", freq);
000030  a901              ADD      r1,sp,#4
000032  a011              ADR      r0,|L12.120|
000034  f7fffffe          BL       Trans_printf
;;;2247   	
;;;2248   	*(freq_PC_Hex + 2) = 0x00;
000038  2000              MOVS     r0,#0
00003a  70a0              STRB     r0,[r4,#2]
;;;2249   	*(freq_PC_Hex + 3) = 0x00;
00003c  70e0              STRB     r0,[r4,#3]
;;;2250   
;;;2251   	Trans_printf(" 转化后的频率为= %02X %02X %02X %02X \n", freq_PC_Hex[0], freq_PC_Hex[1], freq_PC_Hex[2], freq_PC_Hex[3]);
00003e  78e0              LDRB     r0,[r4,#3]
000040  9000              STR      r0,[sp,#0]
000042  78a3              LDRB     r3,[r4,#2]
000044  7862              LDRB     r2,[r4,#1]
000046  7821              LDRB     r1,[r4,#0]
000048  a013              ADR      r0,|L12.152|
00004a  f7fffffe          BL       Trans_printf
;;;2252   
;;;2253   }
00004e  bdfe              POP      {r1-r7,pc}
;;;2254   
                          ENDP

                  |L12.80|
000050  20bbf1c8          DCB      " ",187,241,200,161,181,189,181,196,202,174,193,249,189,248
000054  a1b5bdb5
000058  c4caaec1
00005c  f9bdf8  
00005f  d6c6c6b5          DCB      214,198,198,181,194,202,206,170,"= %X \n",0
000063  c2caceaa
000067  3d202558
00006b  200a00  
00006e  00                DCB      0
00006f  00                DCB      0
                  |L12.112|
000070  25303564          DCB      "%05d",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L12.120|
000078  20bbf1c8          DCB      " ",187,241,200,161,181,189,181,196,202,174,189,248,214,198
00007c  a1b5bdb5
000080  c4caaebd
000084  f8d6c6  
000087  c6b5c2ca          DCB      198,181,194,202,206,170,"freq= %s \n",0
00008b  ceaa6672
00008f  65713d20
000093  2573200a
000097  00      
                  |L12.152|
000098  20d7aabb          DCB      " ",215,170,187,175,186,243,181,196,198,181,194,202,206,170
00009c  afbaf3b5
0000a0  c4c6b5c2
0000a4  caceaa  
0000a7  3d202530          DCB      "= %02X %02X %02X %02X \n",0
0000ab  32582025
0000af  30325820
0000b3  25303258
0000b7  20253032
0000bb  58200a00
0000bf  00                DCB      0

                          AREA ||i.freq_PChex_to_GT2000||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  freq_PChex_to_GT2000 PROC
;;;2208   
;;;2209   void freq_PChex_to_GT2000( uint8_t *freq_PC_str,uint8_t *freq_Trans_hex)  //PC下发的频率赋值给GT2000，低位在前
000000  b5fe              PUSH     {r1-r7,lr}
;;;2210   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2211     int n;
;;;2212   	char str[4];
;;;2213   	unsigned char test[2] = {0};
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;2214   	uint8_t arry[2];   //保存前两位地址中的数据
;;;2215   	arry[0] = *(freq_PC_str + 0);
00000a  7828              LDRB     r0,[r5,#0]
00000c  f88d0000          STRB     r0,[sp,#0]
;;;2216   	arry[1] = *(freq_PC_str + 1);
000010  7868              LDRB     r0,[r5,#1]
000012  f88d0001          STRB     r0,[sp,#1]
;;;2217   	if((arry[0]!=0x00)||(arry[1]!=0x00))  //PC下发的前两位不为0才进入判断
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  b910              CBNZ     r0,|L13.34|
00001c  f89d0001          LDRB     r0,[sp,#1]
000020  b1e0              CBZ      r0,|L13.92|
                  |L13.34|
;;;2218   	{
;;;2219   	freq_Trans_hex = mystrncpy(freq_Trans_hex, 5);//截取前5个字符串
000022  2105              MOVS     r1,#5
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       mystrncpy
00002a  4604              MOV      r4,r0
;;;2220   	n = str_to_10D(freq_Trans_hex);   //将字符串freq_Trans_hex转换成相应的整数
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       str_to_10D
000032  4606              MOV      r6,r0
;;;2221   	sprintf(str, "%X", n); //把十进制数字转为16进制大写字符串
000034  4632              MOV      r2,r6
000036  a10b              ADR      r1,|L13.100|
000038  a802              ADD      r0,sp,#8
00003a  f7fffffe          BL       __2sprintf
;;;2222   	StrToHex(test,(uint8_t*)str, 2); //remarks : 将字符串转化为16进制数
00003e  2202              MOVS     r2,#2
000040  a902              ADD      r1,sp,#8
000042  a801              ADD      r0,sp,#4
000044  f7fffffe          BL       StrToHex
;;;2223   //	printf(" 转化后频率test== %02X  %02X",test[0],test[1]);
;;;2224   	*(freq_Trans_hex + 1) = test[0];
000048  f89d0004          LDRB     r0,[sp,#4]
00004c  7060              STRB     r0,[r4,#1]
;;;2225   	*(freq_Trans_hex + 0) = test[1];
00004e  f89d0005          LDRB     r0,[sp,#5]
000052  7020              STRB     r0,[r4,#0]
;;;2226   	*(freq_Trans_hex + 2) = 0x00;
000054  2000              MOVS     r0,#0
000056  70a0              STRB     r0,[r4,#2]
;;;2227   	*(freq_Trans_hex + 3) = 0x00;
000058  70e0              STRB     r0,[r4,#3]
00005a  e001              B        |L13.96|
                  |L13.92|
;;;2228   	}
;;;2229   	else
;;;2230   	{
;;;2231   		memset((freq_Trans_hex + 0),0x00,4);  //屏蔽PC单频时赋值其他两个频率。
00005c  2000              MOVS     r0,#0
00005e  6020              STR      r0,[r4,#0]
                  |L13.96|
;;;2232   //		Trans_printf(" 无效频率 ");
;;;2233   	}
;;;2234   }
000060  bdfe              POP      {r1-r7,pc}
;;;2235   
                          ENDP

000062  0000              DCW      0x0000
                  |L13.100|
000064  255800            DCB      "%X",0
000067  00                DCB      0

                          AREA ||i.freq_hex_to_str||, CODE, READONLY, ALIGN=1

                  freq_hex_to_str PROC
;;;2160   
;;;2161   void freq_hex_to_str(uint8_t *freq_hex, uint8_t *freq_str)		//hex的频率转换为str频率
000000  7802              LDRB     r2,[r0,#0]
;;;2162   {
;;;2163       *(freq_str + 0) = (*(freq_hex + 0) / 16) + '0';
000002  17d3              ASRS     r3,r2,#31
000004  eb027313          ADD      r3,r2,r3,LSR #28
000008  111b              ASRS     r3,r3,#4
00000a  3330              ADDS     r3,r3,#0x30
00000c  700b              STRB     r3,[r1,#0]
;;;2164       *(freq_str + 1) = (*(freq_hex + 0) % 16) + '0';
00000e  7802              LDRB     r2,[r0,#0]
000010  17d3              ASRS     r3,r2,#31
000012  eb027313          ADD      r3,r2,r3,LSR #28
000016  111b              ASRS     r3,r3,#4
000018  eba21303          SUB      r3,r2,r3,LSL #4
00001c  3330              ADDS     r3,r3,#0x30
00001e  704b              STRB     r3,[r1,#1]
;;;2165       *(freq_str + 2) = (*(freq_hex + 1) / 16) + '0';
000020  7842              LDRB     r2,[r0,#1]
000022  17d3              ASRS     r3,r2,#31
000024  eb027313          ADD      r3,r2,r3,LSR #28
000028  111b              ASRS     r3,r3,#4
00002a  3330              ADDS     r3,r3,#0x30
00002c  708b              STRB     r3,[r1,#2]
;;;2166       *(freq_str + 3) = (*(freq_hex + 1) % 16) + '0';
00002e  7842              LDRB     r2,[r0,#1]
000030  17d3              ASRS     r3,r2,#31
000032  eb027313          ADD      r3,r2,r3,LSR #28
000036  111b              ASRS     r3,r3,#4
000038  eba21303          SUB      r3,r2,r3,LSL #4
00003c  3330              ADDS     r3,r3,#0x30
00003e  70cb              STRB     r3,[r1,#3]
;;;2167       *(freq_str + 4) = (*(freq_hex + 2) / 16) + '0';
000040  7882              LDRB     r2,[r0,#2]
000042  17d3              ASRS     r3,r2,#31
000044  eb027313          ADD      r3,r2,r3,LSR #28
000048  111b              ASRS     r3,r3,#4
00004a  3330              ADDS     r3,r3,#0x30
00004c  710b              STRB     r3,[r1,#4]
;;;2168       *(freq_str + 5) = (*(freq_hex + 2) % 16) + '0';
00004e  7882              LDRB     r2,[r0,#2]
000050  17d3              ASRS     r3,r2,#31
000052  eb027313          ADD      r3,r2,r3,LSR #28
000056  111b              ASRS     r3,r3,#4
000058  eba21303          SUB      r3,r2,r3,LSL #4
00005c  3330              ADDS     r3,r3,#0x30
00005e  714b              STRB     r3,[r1,#5]
;;;2169       *(freq_str + 6) = (*(freq_hex + 3) / 16) + '0';
000060  78c2              LDRB     r2,[r0,#3]
000062  17d3              ASRS     r3,r2,#31
000064  eb027313          ADD      r3,r2,r3,LSR #28
000068  111b              ASRS     r3,r3,#4
00006a  3330              ADDS     r3,r3,#0x30
00006c  718b              STRB     r3,[r1,#6]
;;;2170       *(freq_str + 7) = (*(freq_hex + 3) % 16) + '0';
00006e  78c2              LDRB     r2,[r0,#3]
000070  17d3              ASRS     r3,r2,#31
000072  eb027313          ADD      r3,r2,r3,LSR #28
000076  111b              ASRS     r3,r3,#4
000078  eba21303          SUB      r3,r2,r3,LSL #4
00007c  3330              ADDS     r3,r3,#0x30
00007e  71cb              STRB     r3,[r1,#7]
;;;2171       *(freq_str + 8) = '\0';
000080  2200              MOVS     r2,#0
000082  720a              STRB     r2,[r1,#8]
;;;2172   
;;;2173   //	*(freq_str+0) = (*(freq_hex+0)>>4)&0x0F + '0';
;;;2174   //	*(freq_str+1) = (*(freq_hex+0)>>0)&0x0F + '0';
;;;2175   //	*(freq_str+2) = (*(freq_hex+1)>>4)&0x0F + '0';
;;;2176   //	*(freq_str+3) = (*(freq_hex+1)>>0)&0x0F + '0';
;;;2177   //	*(freq_str+4) = (*(freq_hex+2)>>4)&0x0F + '0';
;;;2178   //	*(freq_str+5) = (*(freq_hex+2)>>0)&0x0F + '0';
;;;2179   //	*(freq_str+6) = (*(freq_hex+3)>>4)&0x0F + '0';
;;;2180   //	*(freq_str+7) = (*(freq_hex+3)>>0)&0x0F + '0';
;;;2181   //	*(freq_str+8) = '\0';
;;;2182   }
000084  4770              BX       lr
;;;2183   /*
                          ENDP


                          AREA ||i.freq_range_judge||, CODE, READONLY, ALIGN=2

                  freq_range_judge PROC
;;;2334   
;;;2335   void freq_range_judge(uint8_t *freq)  //频段值核对变量
000000  b570              PUSH     {r4-r6,lr}
;;;2336   {
000002  4605              MOV      r5,r0
;;;2337   	int freq_float=0;
000004  2400              MOVS     r4,#0
;;;2338   //	freq_float=((freq[0]-'0')*10000+(freq[1]-'0')*1000+(freq[2]-'0')*100+(freq[3]-'0')*10+(freq[4]-'0'))/1000.0;
;;;2339   	freq_float=(freq[1]<<8|freq[0]);
000006  7828              LDRB     r0,[r5,#0]
000008  7869              LDRB     r1,[r5,#1]
00000a  ea402401          ORR      r4,r0,r1,LSL #8
;;;2340   	
;;;2341   	Trans_printf(" freq_float= %04x ",freq_float);
00000e  4621              MOV      r1,r4
000010  a02b              ADR      r0,|L15.192|
000012  f7fffffe          BL       Trans_printf
;;;2342   	if(0x0140<=freq_float&&freq_float<=0x14B4)
000016  f5b47fa0          CMP      r4,#0x140
00001a  db08              BLT      |L15.46|
00001c  f24140b4          MOV      r0,#0x14b4
000020  4284              CMP      r4,r0
000022  dc04              BGT      |L15.46|
;;;2343   	{
;;;2344   		System.fbv_c=1;		//一频段
000024  2001              MOVS     r0,#1
000026  492b              LDR      r1,|L15.212|
000028  f881005b          STRB     r0,[r1,#0x5b]
00002c  e03f              B        |L15.174|
                  |L15.46|
;;;2345   	}
;;;2346   	
;;;2347   	else if(0x14B4<=freq_float&&freq_float<=0x1B58)
00002e  f24140b4          MOV      r0,#0x14b4
000032  4284              CMP      r4,r0
000034  db08              BLT      |L15.72|
000036  f6413058          MOV      r0,#0x1b58
00003a  4284              CMP      r4,r0
00003c  dc04              BGT      |L15.72|
;;;2348   	{
;;;2349   		System.fbv_c=2;		//二频段
00003e  2002              MOVS     r0,#2
000040  4924              LDR      r1,|L15.212|
000042  f881005b          STRB     r0,[r1,#0x5b]
000046  e032              B        |L15.174|
                  |L15.72|
;;;2350   	}
;;;2351   	
;;;2352   	else if(0x1B58<freq_float&&freq_float<=0x251C)
000048  f6413058          MOV      r0,#0x1b58
00004c  4284              CMP      r4,r0
00004e  dd08              BLE      |L15.98|
000050  f242501c          MOV      r0,#0x251c
000054  4284              CMP      r4,r0
000056  dc04              BGT      |L15.98|
;;;2353   	{
;;;2354   		System.fbv_c=3;		//三频段
000058  2003              MOVS     r0,#3
00005a  491e              LDR      r1,|L15.212|
00005c  f881005b          STRB     r0,[r1,#0x5b]
000060  e025              B        |L15.174|
                  |L15.98|
;;;2355   	}
;;;2356   	
;;;2357   	else if(0x251C<freq_float&&freq_float<=0x3A98)
000062  f242501c          MOV      r0,#0x251c
000066  4284              CMP      r4,r0
000068  dd08              BLE      |L15.124|
00006a  f6432098          MOV      r0,#0x3a98
00006e  4284              CMP      r4,r0
000070  dc04              BGT      |L15.124|
;;;2358   	{
;;;2359   		System.fbv_c=4;		//四频段
000072  2004              MOVS     r0,#4
000074  4917              LDR      r1,|L15.212|
000076  f881005b          STRB     r0,[r1,#0x5b]
00007a  e018              B        |L15.174|
                  |L15.124|
;;;2360   	}
;;;2361   	
;;;2362   	else if(0x3A98<freq_float&&freq_float<=0x555A)
00007c  f6432098          MOV      r0,#0x3a98
000080  4284              CMP      r4,r0
000082  dd08              BLE      |L15.150|
000084  f245505a          MOV      r0,#0x555a
000088  4284              CMP      r4,r0
00008a  dc04              BGT      |L15.150|
;;;2363   	{
;;;2364   		System.fbv_c=5;		//五频段
00008c  2005              MOVS     r0,#5
00008e  4911              LDR      r1,|L15.212|
000090  f881005b          STRB     r0,[r1,#0x5b]
000094  e00b              B        |L15.174|
                  |L15.150|
;;;2365   	}
;;;2366   	else if(0x555A<freq_float&&freq_float<=0x65F4)
000096  f245505a          MOV      r0,#0x555a
00009a  4284              CMP      r4,r0
00009c  dd07              BLE      |L15.174|
00009e  f24650f4          MOV      r0,#0x65f4
0000a2  4284              CMP      r4,r0
0000a4  dc03              BGT      |L15.174|
;;;2367   	{
;;;2368   		System.fbv_c=6;		//六频段
0000a6  2006              MOVS     r0,#6
0000a8  490a              LDR      r1,|L15.212|
0000aa  f881005b          STRB     r0,[r1,#0x5b]
                  |L15.174|
;;;2369   	}
;;;2370   	Trans_printf(" 频段值核对变量freq_float== %04x System.fbv_c= %x   \n",freq_float,System.fbv_c);
0000ae  4809              LDR      r0,|L15.212|
0000b0  f890205b          LDRB     r2,[r0,#0x5b]  ; System
0000b4  4621              MOV      r1,r4
0000b6  a008              ADR      r0,|L15.216|
0000b8  f7fffffe          BL       Trans_printf
;;;2371   }
0000bc  bd70              POP      {r4-r6,pc}
;;;2372   
                          ENDP

0000be  0000              DCW      0x0000
                  |L15.192|
0000c0  20667265          DCB      " freq_float= %04x ",0
0000c4  715f666c
0000c8  6f61743d
0000cc  20253034
0000d0  782000  
0000d3  00                DCB      0
                  |L15.212|
                          DCD      System
                  |L15.216|
0000d8  20c6b5b6          DCB      " ",198,181,182,206,214,181,186,203,182,212,177,228,193,191
0000dc  ced6b5ba
0000e0  cbb6d4b1
0000e4  e4c1bf  
0000e7  66726571          DCB      "freq_float== %04x System.fbv_c= %x   \n",0
0000eb  5f666c6f
0000ef  61743d3d
0000f3  20253034
0000f7  78205379
0000fb  7374656d
0000ff  2e666276
000103  5f633d20
000107  25782020
00010b  200a00  
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.freq_str_to_hex||, CODE, READONLY, ALIGN=1

                  freq_str_to_hex PROC
;;;2185   */
;;;2186   void freq_str_to_hex(uint8_t *freq_str, uint8_t *freq_hex)		//str的频率转换为hex频率
000000  7842              LDRB     r2,[r0,#1]
;;;2187   {
;;;2188       *(freq_hex+0) = ( ( *(freq_str+0)-'0') << 4 ) + ( *(freq_str+1)-'0');
000002  3a30              SUBS     r2,r2,#0x30
000004  7803              LDRB     r3,[r0,#0]
000006  eb021203          ADD      r2,r2,r3,LSL #4
00000a  700a              STRB     r2,[r1,#0]
;;;2189       *(freq_hex+1) = ( ( *(freq_str+2)-'0') << 4 ) + ( *(freq_str+3)-'0');
00000c  78c2              LDRB     r2,[r0,#3]
00000e  3a30              SUBS     r2,r2,#0x30
000010  7883              LDRB     r3,[r0,#2]
000012  eb021203          ADD      r2,r2,r3,LSL #4
000016  704a              STRB     r2,[r1,#1]
;;;2190       *(freq_hex+2) = ( ( *(freq_str+4)-'0') << 4 ) + ( *(freq_str+5)-'0');
000018  7942              LDRB     r2,[r0,#5]
00001a  3a30              SUBS     r2,r2,#0x30
00001c  7903              LDRB     r3,[r0,#4]
00001e  eb021203          ADD      r2,r2,r3,LSL #4
000022  708a              STRB     r2,[r1,#2]
;;;2191       *(freq_hex+3) = ( ( *(freq_str+6)-'0') << 4 ) + ( *(freq_str+7)-'0');
000024  79c2              LDRB     r2,[r0,#7]
000026  3a30              SUBS     r2,r2,#0x30
000028  7983              LDRB     r3,[r0,#6]
00002a  eb021203          ADD      r2,r2,r3,LSL #4
00002e  70ca              STRB     r2,[r1,#3]
;;;2192   }  
000030  4770              BX       lr
;;;2193   
                          ENDP


                          AREA ||i.func_code_printf||, CODE, READONLY, ALIGN=2

                  func_code_printf PROC
;;;2129   /*-------------------------------------------------------------------------------------------------------------*/
;;;2130   void func_code_printf(void)
000000  b510              PUSH     {r4,lr}
;;;2131   {
;;;2132   	Trans_printf(" 打印功能码g_fuc_cod : ");
000002  a04f              ADR      r0,|L17.320|
000004  f7fffffe          BL       Trans_printf
;;;2133       if(g_fuc_cod[0]==0x01&&g_fuc_cod[1]==0x01)				//初始化
000008  4853              LDR      r0,|L17.344|
00000a  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
00000c  2801              CMP      r0,#1
00000e  d107              BNE      |L17.32|
000010  4851              LDR      r0,|L17.344|
000012  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
000014  2801              CMP      r0,#1
000016  d103              BNE      |L17.32|
;;;2134           Trans_printf("初始化\r\n");
000018  a050              ADR      r0,|L17.348|
00001a  f7fffffe          BL       Trans_printf
00001e  e08e              B        |L17.318|
                  |L17.32|
;;;2135       else	if(g_fuc_cod[0]==0x02&&g_fuc_cod[1]==0x01)		//查询
000020  484d              LDR      r0,|L17.344|
000022  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
000024  2802              CMP      r0,#2
000026  d107              BNE      |L17.56|
000028  484b              LDR      r0,|L17.344|
00002a  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
00002c  2801              CMP      r0,#1
00002e  d103              BNE      |L17.56|
;;;2136           Trans_printf("查询\r\n");
000030  a04d              ADR      r0,|L17.360|
000032  f7fffffe          BL       Trans_printf
000036  e082              B        |L17.318|
                  |L17.56|
;;;2137       else	if(g_fuc_cod[0]==0x03&&g_fuc_cod[1]==0x01)		//发射
000038  4847              LDR      r0,|L17.344|
00003a  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
00003c  2803              CMP      r0,#3
00003e  d107              BNE      |L17.80|
000040  4845              LDR      r0,|L17.344|
000042  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
000044  2801              CMP      r0,#1
000046  d103              BNE      |L17.80|
;;;2138           Trans_printf("发射\r\n");
000048  a049              ADR      r0,|L17.368|
00004a  f7fffffe          BL       Trans_printf
00004e  e076              B        |L17.318|
                  |L17.80|
;;;2139       else	if(g_fuc_cod[0]==0x04&&g_fuc_cod[1]==0x01)		//停止
000050  4841              LDR      r0,|L17.344|
000052  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
000054  2804              CMP      r0,#4
000056  d107              BNE      |L17.104|
000058  483f              LDR      r0,|L17.344|
00005a  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
00005c  2801              CMP      r0,#1
00005e  d103              BNE      |L17.104|
;;;2140           Trans_printf("停止\r\n");
000060  a045              ADR      r0,|L17.376|
000062  f7fffffe          BL       Trans_printf
000066  e06a              B        |L17.318|
                  |L17.104|
;;;2141       else	if(g_fuc_cod[0]==0x05&&g_fuc_cod[1]==0x01)		//解除报警
000068  483b              LDR      r0,|L17.344|
00006a  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
00006c  2805              CMP      r0,#5
00006e  d107              BNE      |L17.128|
000070  4839              LDR      r0,|L17.344|
000072  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
000074  2801              CMP      r0,#1
000076  d103              BNE      |L17.128|
;;;2142           Trans_printf("解除报警\r\n");
000078  a041              ADR      r0,|L17.384|
00007a  f7fffffe          BL       Trans_printf
00007e  e05e              B        |L17.318|
                  |L17.128|
;;;2143       else	if(g_fuc_cod[0]==0x06&&g_fuc_cod[1]==0x01)		//报警查询
000080  4835              LDR      r0,|L17.344|
000082  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
000084  2806              CMP      r0,#6
000086  d107              BNE      |L17.152|
000088  4833              LDR      r0,|L17.344|
00008a  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
00008c  2801              CMP      r0,#1
00008e  d103              BNE      |L17.152|
;;;2144           Trans_printf("报警查询\r\n");
000090  a03e              ADR      r0,|L17.396|
000092  f7fffffe          BL       Trans_printf
000096  e052              B        |L17.318|
                  |L17.152|
;;;2145       else	if(g_fuc_cod[0]==0x07&&g_fuc_cod[1]==0x01)		//开机
000098  482f              LDR      r0,|L17.344|
00009a  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
00009c  2807              CMP      r0,#7
00009e  d107              BNE      |L17.176|
0000a0  482d              LDR      r0,|L17.344|
0000a2  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
0000a4  2801              CMP      r0,#1
0000a6  d103              BNE      |L17.176|
;;;2146           Trans_printf("开机\r\n");
0000a8  a03b              ADR      r0,|L17.408|
0000aa  f7fffffe          BL       Trans_printf
0000ae  e046              B        |L17.318|
                  |L17.176|
;;;2147       else	if(g_fuc_cod[0]==0x08&&g_fuc_cod[1]==0x01)		//关机
0000b0  4829              LDR      r0,|L17.344|
0000b2  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
0000b4  2808              CMP      r0,#8
0000b6  d107              BNE      |L17.200|
0000b8  4827              LDR      r0,|L17.344|
0000ba  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
0000bc  2801              CMP      r0,#1
0000be  d103              BNE      |L17.200|
;;;2148           Trans_printf("关机\r\n");
0000c0  a037              ADR      r0,|L17.416|
0000c2  f7fffffe          BL       Trans_printf
0000c6  e03a              B        |L17.318|
                  |L17.200|
;;;2149       else	if(g_fuc_cod[0]==0x09&&g_fuc_cod[1]==0x01)		//扫频
0000c8  4823              LDR      r0,|L17.344|
0000ca  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
0000cc  2809              CMP      r0,#9
0000ce  d107              BNE      |L17.224|
0000d0  4821              LDR      r0,|L17.344|
0000d2  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
0000d4  2801              CMP      r0,#1
0000d6  d103              BNE      |L17.224|
;;;2150           Trans_printf("扫频\r\n");
0000d8  a033              ADR      r0,|L17.424|
0000da  f7fffffe          BL       Trans_printf
0000de  e02e              B        |L17.318|
                  |L17.224|
;;;2151       else	if(g_fuc_cod[0]==0x0A&&g_fuc_cod[1]==0x01)		//停止扫频
0000e0  481d              LDR      r0,|L17.344|
0000e2  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
0000e4  280a              CMP      r0,#0xa
0000e6  d107              BNE      |L17.248|
0000e8  481b              LDR      r0,|L17.344|
0000ea  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
0000ec  2801              CMP      r0,#1
0000ee  d103              BNE      |L17.248|
;;;2152           Trans_printf("停止扫频\r\n");
0000f0  a02f              ADR      r0,|L17.432|
0000f2  f7fffffe          BL       Trans_printf
0000f6  e022              B        |L17.318|
                  |L17.248|
;;;2153       else	if(g_fuc_cod[0]==0x0B&&g_fuc_cod[1]==0x01)		//增加功率
0000f8  4817              LDR      r0,|L17.344|
0000fa  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
0000fc  280b              CMP      r0,#0xb
0000fe  d107              BNE      |L17.272|
000100  4815              LDR      r0,|L17.344|
000102  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
000104  2801              CMP      r0,#1
000106  d103              BNE      |L17.272|
;;;2154           Trans_printf("增加功率\r\n");
000108  a02c              ADR      r0,|L17.444|
00010a  f7fffffe          BL       Trans_printf
00010e  e016              B        |L17.318|
                  |L17.272|
;;;2155       else	if(g_fuc_cod[0]==0x0C&&g_fuc_cod[1]==0x01)		//减小功率
000110  4811              LDR      r0,|L17.344|
000112  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
000114  280c              CMP      r0,#0xc
000116  d107              BNE      |L17.296|
000118  480f              LDR      r0,|L17.344|
00011a  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
00011c  2801              CMP      r0,#1
00011e  d103              BNE      |L17.296|
;;;2156           Trans_printf("减小功率\r\n");
000120  a029              ADR      r0,|L17.456|
000122  f7fffffe          BL       Trans_printf
000126  e00a              B        |L17.318|
                  |L17.296|
;;;2157       else	if(g_fuc_cod[0]==0x0D&&g_fuc_cod[1]==0x01)		//运行图
000128  480b              LDR      r0,|L17.344|
00012a  7800              LDRB     r0,[r0,#0]  ; g_fuc_cod
00012c  280d              CMP      r0,#0xd
00012e  d106              BNE      |L17.318|
000130  4809              LDR      r0,|L17.344|
000132  7840              LDRB     r0,[r0,#1]  ; g_fuc_cod
000134  2801              CMP      r0,#1
000136  d102              BNE      |L17.318|
;;;2158           Trans_printf("运行图\r\n");
000138  a026              ADR      r0,|L17.468|
00013a  f7fffffe          BL       Trans_printf
                  |L17.318|
;;;2159   }
00013e  bd10              POP      {r4,pc}
;;;2160   
                          ENDP

                  |L17.320|
000140  20b4f2d3          DCB      " ",180,242,211,161,185,166,196,220,194,235,"g_fuc_cod :"
000144  a1b9a6c4
000148  dcc2eb67
00014c  5f667563
000150  5f636f64
000154  203a    
000156  2000              DCB      " ",0
                  |L17.344|
                          DCD      g_fuc_cod
                  |L17.348|
00015c  b3f5cabc          DCB      179,245,202,188,187,175,"\r\n",0
000160  bbaf0d0a
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L17.360|
000168  b2e9d1af          DCB      178,233,209,175,"\r\n",0
00016c  0d0a00  
00016f  00                DCB      0
                  |L17.368|
000170  b7a2c9e4          DCB      183,162,201,228,"\r\n",0
000174  0d0a00  
000177  00                DCB      0
                  |L17.376|
000178  cda3d6b9          DCB      205,163,214,185,"\r\n",0
00017c  0d0a00  
00017f  00                DCB      0
                  |L17.384|
000180  bde2b3fd          DCB      189,226,179,253,177,168,190,175,"\r\n",0
000184  b1a8beaf
000188  0d0a00  
00018b  00                DCB      0
                  |L17.396|
00018c  b1a8beaf          DCB      177,168,190,175,178,233,209,175,"\r\n",0
000190  b2e9d1af
000194  0d0a00  
000197  00                DCB      0
                  |L17.408|
000198  bfaabbfa          DCB      191,170,187,250,"\r\n",0
00019c  0d0a00  
00019f  00                DCB      0
                  |L17.416|
0001a0  b9d8bbfa          DCB      185,216,187,250,"\r\n",0
0001a4  0d0a00  
0001a7  00                DCB      0
                  |L17.424|
0001a8  c9a8c6b5          DCB      201,168,198,181,"\r\n",0
0001ac  0d0a00  
0001af  00                DCB      0
                  |L17.432|
0001b0  cda3d6b9          DCB      205,163,214,185,201,168,198,181,"\r\n",0
0001b4  c9a8c6b5
0001b8  0d0a00  
0001bb  00                DCB      0
                  |L17.444|
0001bc  d4f6bcd3          DCB      212,246,188,211,185,166,194,202,"\r\n",0
0001c0  b9a6c2ca
0001c4  0d0a00  
0001c7  00                DCB      0
                  |L17.456|
0001c8  bcf5d0a1          DCB      188,245,208,161,185,166,194,202,"\r\n",0
0001cc  b9a6c2ca
0001d0  0d0a00  
0001d3  00                DCB      0
                  |L17.468|
0001d4  d4cbd0d0          DCB      212,203,208,208,205,188,"\r\n",0
0001d8  cdbc0d0a
0001dc  00      
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0

                          AREA ||i.judge_is_valid_can_data||, CODE, READONLY, ALIGN=1

                  judge_is_valid_can_data PROC
;;;376    /* 判断是否为有效CAN数据 */
;;;377    uint8_t judge_is_valid_can_data(Buffer_t *buffer)
000000  4601              MOV      r1,r0
;;;378    {
;;;379    #if	!STM32_W5500_EN
;;;380        if( buffer->data[0] != 0x05 )
;;;381            return 0;
;;;382    
;;;383        if( buffer->data[1] != 0x02 )
;;;384            return 0;
;;;385    #endif
;;;386    
;;;387        //05 02 03 05 08 01 00 03 00 21 ca 03 05 02 03 05 04
;;;388        //03 04结尾，或者03 xx xx xx xx 04结尾(中间插了0502xxxx帧头)
;;;389        if( (buffer->data[buffer->len-2] != 0x03) && (buffer->data[buffer->len-6] != 0x03) )
000002  f8910100          LDRB     r0,[r1,#0x100]
000006  1e80              SUBS     r0,r0,#2
000008  5c08              LDRB     r0,[r1,r0]
00000a  2803              CMP      r0,#3
00000c  d007              BEQ      |L18.30|
00000e  f8910100          LDRB     r0,[r1,#0x100]
000012  1f80              SUBS     r0,r0,#6
000014  5c08              LDRB     r0,[r1,r0]
000016  2803              CMP      r0,#3
000018  d001              BEQ      |L18.30|
;;;390            return 0;
00001a  2000              MOVS     r0,#0
                  |L18.28|
;;;391    
;;;392        if( buffer->data[buffer->len-1] != 0x04 )
;;;393            return 0;
;;;394    
;;;395        return 1;
;;;396    }
00001c  4770              BX       lr
                  |L18.30|
00001e  f8910100          LDRB     r0,[r1,#0x100]        ;392
000022  1e40              SUBS     r0,r0,#1              ;392
000024  5c08              LDRB     r0,[r1,r0]            ;392
000026  2804              CMP      r0,#4                 ;392
000028  d001              BEQ      |L18.46|
00002a  2000              MOVS     r0,#0                 ;393
00002c  e7f6              B        |L18.28|
                  |L18.46|
00002e  2001              MOVS     r0,#1                 ;395
000030  e7f4              B        |L18.28|
;;;397    
                          ENDP


                          AREA ||i.mystrncpy||, CODE, READONLY, ALIGN=1

                  mystrncpy PROC
;;;2273   
;;;2274   uint8_t *mystrncpy( uint8_t *string, int n)   //要求截取的字符串不可以改变，但指向字符串的指针可以改变
000000  b510              PUSH     {r4,lr}
;;;2275   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;2276   	uint8_t *p = string;
000006  4611              MOV      r1,r2
;;;2277   	if (p == NULL)
000008  b909              CBNZ     r1,|L19.14|
;;;2278   	{//如果截取的字符串是空的直接返回
;;;2279   		return NULL;
00000a  2000              MOVS     r0,#0
                  |L19.12|
;;;2280   	}
;;;2281   	else
;;;2282   	{
;;;2283   		int i = 0;
;;;2284   		while (*p != '\0')
;;;2285   		{//循环直到达n个字符串终止
;;;2286   			if (i == n)
;;;2287   			{
;;;2288   				break;
;;;2289   			}
;;;2290   			i++;
;;;2291   			p++;
;;;2292   		}
;;;2293   		*(p++) = '\0';//赋值结束字符串
;;;2294   		return string;
;;;2295   	}
;;;2296   }
00000c  bd10              POP      {r4,pc}
                  |L19.14|
00000e  2400              MOVS     r4,#0                 ;2283
000010  e004              B        |L19.28|
                  |L19.18|
000012  429c              CMP      r4,r3                 ;2286
000014  d100              BNE      |L19.24|
000016  e004              B        |L19.34|
                  |L19.24|
000018  1c64              ADDS     r4,r4,#1              ;2290
00001a  1c49              ADDS     r1,r1,#1              ;2291
                  |L19.28|
00001c  7808              LDRB     r0,[r1,#0]            ;2284
00001e  2800              CMP      r0,#0                 ;2284
000020  d1f7              BNE      |L19.18|
                  |L19.34|
000022  bf00              NOP                            ;2288
000024  2000              MOVS     r0,#0                 ;2293
000026  f8010b01          STRB     r0,[r1],#1            ;2293
00002a  4610              MOV      r0,r2                 ;2294
00002c  e7ee              B        |L19.12|
;;;2297   
                          ENDP


                          AREA ||i.set_run_diagram_new_power_level||, CODE, READONLY, ALIGN=2

                  set_run_diagram_new_power_level PROC
;;;2329   
;;;2330   void set_run_diagram_new_power_level(uint8_t channel, uint8_t power_level)	//设置运行图的功率等级				Run_Diagram_data
000000  f1a00231          SUB      r2,r0,#0x31
;;;2331   {
;;;2332      Run_Diagram_data.power[channel-'1'] = power_level;
000004  4b01              LDR      r3,|L20.12|
000006  5499              STRB     r1,[r3,r2]
;;;2333   }
000008  4770              BX       lr
;;;2334   
                          ENDP

00000a  0000              DCW      0x0000
                  |L20.12|
                          DCD      Run_Diagram_data+0xd

                          AREA ||i.str_to_10D||, CODE, READONLY, ALIGN=1

                  str_to_10D PROC
;;;2195   /*将字符串s转换成相应的整数*/
;;;2196   int str_to_10D(uint8_t s[])
000000  b510              PUSH     {r4,lr}
;;;2197    {
000002  4601              MOV      r1,r0
;;;2198           int i;
;;;2199   	    int n = 0;
000004  2000              MOVS     r0,#0
;;;2200   	    for (i = 0; s[i] >= '0' && s[i] <= 'F'; ++i)
000006  2200              MOVS     r2,#0
000008  e005              B        |L21.22|
                  |L21.10|
;;;2201   		   {
;;;2202   		         n = 10 * n + (s[i] - '0');
00000a  5c8b              LDRB     r3,[r1,r2]
00000c  3b30              SUBS     r3,r3,#0x30
00000e  240a              MOVS     r4,#0xa
000010  fb003004          MLA      r0,r0,r4,r3
000014  1c52              ADDS     r2,r2,#1              ;2200
                  |L21.22|
000016  5c8b              LDRB     r3,[r1,r2]            ;2200
000018  2b30              CMP      r3,#0x30              ;2200
00001a  db02              BLT      |L21.34|
00001c  5c8b              LDRB     r3,[r1,r2]            ;2200
00001e  2b46              CMP      r3,#0x46              ;2200
000020  ddf3              BLE      |L21.10|
                  |L21.34|
;;;2203   		     }
;;;2204   	     return n;
;;;2205    }
000022  bd10              POP      {r4,pc}
;;;2206    
                          ENDP


                          AREA ||i.update_status_without_inquire||, CODE, READONLY, ALIGN=2

                  update_status_without_inquire PROC
;;;25     /*---------------------------------更新状态-----------------------------------*/
;;;26     void update_status_without_inquire(void)
000000  b570              PUSH     {r4-r6,lr}
;;;27     {
;;;28         static uint8_t n = 0;
;;;29     
;;;30         n++;
000002  48fb              LDR      r0,|L22.1008|
000004  7800              LDRB     r0,[r0,#0]  ; n
000006  1c40              ADDS     r0,r0,#1
000008  49f9              LDR      r1,|L22.1008|
00000a  7008              STRB     r0,[r1,#0]
;;;31     
;;;32         if(	System.status == SYSTEM_UNINITIALIZE )	//未初始化状态
00000c  48f9              LDR      r0,|L22.1012|
00000e  7ac0              LDRB     r0,[r0,#0xb]  ; System
000010  2810              CMP      r0,#0x10
000012  d109              BNE      |L22.40|
;;;33         {
;;;34             if( n >= 10 )	//1000ms更新一次
000014  4608              MOV      r0,r1
000016  7800              LDRB     r0,[r0,#0]  ; n
000018  280a              CMP      r0,#0xa
00001a  db04              BLT      |L22.38|
;;;35             {
;;;36                 n = 0;
00001c  2000              MOVS     r0,#0
00001e  7008              STRB     r0,[r1,#0]
;;;37                 App_printf("system have no init\r\n");
000020  a0f5              ADR      r0,|L22.1016|
000022  f7fffffe          BL       App_printf
                  |L22.38|
000026  e2e5              B        |L22.1524|
                  |L22.40|
;;;38             }
;;;39         }
;;;40         else	if( (Alarm.emission==0x01) || (Alarm.no_respond==0x01) || (Alarm.no_power==0x01) )	//激励器自身报警，无应答报警、无功率报警
000028  48f9              LDR      r0,|L22.1040|
00002a  7840              LDRB     r0,[r0,#1]  ; Alarm
00002c  2801              CMP      r0,#1
00002e  d007              BEQ      |L22.64|
000030  48f7              LDR      r0,|L22.1040|
000032  78c0              LDRB     r0,[r0,#3]  ; Alarm
000034  2801              CMP      r0,#1
000036  d003              BEQ      |L22.64|
000038  48f5              LDR      r0,|L22.1040|
00003a  7cc0              LDRB     r0,[r0,#0x13]  ; Alarm
00003c  2801              CMP      r0,#1
00003e  d114              BNE      |L22.106|
                  |L22.64|
;;;41         {
;;;42             //激励器自身报警，无应答报警，无功率报警，驻波比报警属于大报警，查询时马上返回，其他报警则先返回操作失败，回到待机/发射/报警状态，等待查询时再报警
;;;43     
;;;44             System.status = SYSTEM_ALARM;
000040  2011              MOVS     r0,#0x11
000042  49ec              LDR      r1,|L22.1012|
000044  72c8              STRB     r0,[r1,#0xb]
;;;45             System.close = 0;
000046  2000              MOVS     r0,#0
000048  7348              STRB     r0,[r1,#0xd]
;;;46             System.open = 0;
00004a  7308              STRB     r0,[r1,#0xc]
;;;47     
;;;48             System.sweep = 0;
00004c  7388              STRB     r0,[r1,#0xe]
;;;49     //		System.cancel_sweeping = 0;
;;;50             System.achieve_add_sub = 0;
00004e  7448              STRB     r0,[r1,#0x11]
;;;51             System.cancel_add_sub = 0;
000050  74c8              STRB     r0,[r1,#0x13]
;;;52             System.modify_power = 0;
000052  7488              STRB     r0,[r1,#0x12]
;;;53     
;;;54             if( n >= 10 )	//1000ms更新一次
000054  48e6              LDR      r0,|L22.1008|
000056  7800              LDRB     r0,[r0,#0]  ; n
000058  280a              CMP      r0,#0xa
00005a  dbe4              BLT      |L22.38|
;;;55             {
;;;56                 n = 0;
00005c  2000              MOVS     r0,#0
00005e  49e4              LDR      r1,|L22.1008|
000060  7008              STRB     r0,[r1,#0]
;;;57                 App_printf("history 1 alarm!\r\n");
000062  a0ec              ADR      r0,|L22.1044|
000064  f7fffffe          BL       App_printf
                  |L22.104|
000068  e2c4              B        |L22.1524|
                  |L22.106|
;;;58             }
;;;59         }
;;;60         else	if( System.status == SYSTEM_OPENING )		//正在开机
00006a  48e2              LDR      r0,|L22.1012|
00006c  7ac0              LDRB     r0,[r0,#0xb]  ; System
00006e  2806              CMP      r0,#6
000070  d12d              BNE      |L22.206|
;;;61         {
;;;62             if( Power_onBack.results[0] == 0xFD )			//开机失败
000072  48ed              LDR      r0,|L22.1064|
000074  7840              LDRB     r0,[r0,#1]  ; Power_onBack
000076  28fd              CMP      r0,#0xfd
000078  d109              BNE      |L22.142|
;;;63             {
;;;64                 App_printf("system open fail\r\n");
00007a  a0ec              ADR      r0,|L22.1068|
00007c  f7fffffe          BL       App_printf
;;;65     
;;;66                 System.status = SYSTEM_ALARM;				//开机失败，直接报警
000080  2011              MOVS     r0,#0x11
000082  49dc              LDR      r1,|L22.1012|
000084  72c8              STRB     r0,[r1,#0xb]
;;;67                 Power_onBack.results[0] = 0x00;
000086  2000              MOVS     r0,#0
000088  49e7              LDR      r1,|L22.1064|
00008a  7048              STRB     r0,[r1,#1]
00008c  e2b2              B        |L22.1524|
                  |L22.142|
;;;68             }
;;;69             else	if( Power_onBack.results[0]==0xFC )		//开机成功
00008e  48e6              LDR      r0,|L22.1064|
000090  7840              LDRB     r0,[r0,#1]  ; Power_onBack
000092  28fc              CMP      r0,#0xfc
000094  d109              BNE      |L22.170|
;;;70             {
;;;71                 System.status = SYSTEM_STANDBY;
000096  2002              MOVS     r0,#2
000098  49d6              LDR      r1,|L22.1012|
00009a  72c8              STRB     r0,[r1,#0xb]
;;;72                 App_printf("system open successfully!\r\n");
00009c  a0e8              ADR      r0,|L22.1088|
00009e  f7fffffe          BL       App_printf
;;;73     
;;;74                 Power_onBack.results[0] = 0x00;
0000a2  2000              MOVS     r0,#0
0000a4  49e0              LDR      r1,|L22.1064|
0000a6  7048              STRB     r0,[r1,#1]
0000a8  e2a4              B        |L22.1524|
                  |L22.170|
;;;75             }
;;;76             else	if( Power_onBack.results[0]==0xFE )		//正在开机
0000aa  48df              LDR      r0,|L22.1064|
0000ac  7840              LDRB     r0,[r0,#1]  ; Power_onBack
0000ae  28fe              CMP      r0,#0xfe
0000b0  d1b9              BNE      |L22.38|
;;;77             {
;;;78                 System.status = SYSTEM_OPENING;
0000b2  2006              MOVS     r0,#6
0000b4  49cf              LDR      r1,|L22.1012|
0000b6  72c8              STRB     r0,[r1,#0xb]
;;;79                 if( n >= 10 )	//1000ms更新一次
0000b8  48cd              LDR      r0,|L22.1008|
0000ba  7800              LDRB     r0,[r0,#0]  ; n
0000bc  280a              CMP      r0,#0xa
0000be  dbb2              BLT      |L22.38|
;;;80                 {
;;;81                     n = 0;
0000c0  2000              MOVS     r0,#0
0000c2  49cb              LDR      r1,|L22.1008|
0000c4  7008              STRB     r0,[r1,#0]
;;;82                     App_printf("system Opening ...\r\n");
0000c6  a0e5              ADR      r0,|L22.1116|
0000c8  f7fffffe          BL       App_printf
                  |L22.204|
0000cc  e292              B        |L22.1524|
                  |L22.206|
;;;83                 }
;;;84             }
;;;85         }
;;;86         else	if( System.status == SYSTEM_SCAN )			//扫频
0000ce  48c9              LDR      r0,|L22.1012|
0000d0  7ac0              LDRB     r0,[r0,#0xb]  ; System
0000d2  2805              CMP      r0,#5
0000d4  d128              BNE      |L22.296|
;;;87         {
;;;88             if(System.sweep == 0x02)		//扫频完成
0000d6  48c7              LDR      r0,|L22.1012|
0000d8  7b80              LDRB     r0,[r0,#0xe]  ; System
0000da  2802              CMP      r0,#2
0000dc  d109              BNE      |L22.242|
;;;89             {
;;;90                 System.sweep = 0;
0000de  2000              MOVS     r0,#0
0000e0  49c4              LDR      r1,|L22.1012|
0000e2  7388              STRB     r0,[r1,#0xe]
;;;91                 System.already_swept = 0x01;
0000e4  2001              MOVS     r0,#1
0000e6  70c8              STRB     r0,[r1,#3]
;;;92                 System.status = SYSTEM_STANDBY;	//待机
0000e8  2002              MOVS     r0,#2
0000ea  72c8              STRB     r0,[r1,#0xb]
;;;93                 System.emission = 0x00;		//发射停止标志位
0000ec  2000              MOVS     r0,#0
0000ee  7588              STRB     r0,[r1,#0x16]
                  |L22.240|
0000f0  e280              B        |L22.1524|
                  |L22.242|
;;;94             }
;;;95             else	if(System.sweep == 0x00)
0000f2  48c0              LDR      r0,|L22.1012|
0000f4  7b80              LDRB     r0,[r0,#0xe]  ; System
0000f6  b928              CBNZ     r0,|L22.260|
;;;96             {
;;;97                 System.status = SYSTEM_STANDBY;
0000f8  2002              MOVS     r0,#2
0000fa  49be              LDR      r1,|L22.1012|
0000fc  72c8              STRB     r0,[r1,#0xb]
;;;98                 System.emission = 0x00;
0000fe  2000              MOVS     r0,#0
000100  7588              STRB     r0,[r1,#0x16]
                  |L22.258|
000102  e277              B        |L22.1524|
                  |L22.260|
;;;99             }
;;;100            else	if(System.sweep == 0x01)
000104  48bb              LDR      r0,|L22.1012|
000106  7b80              LDRB     r0,[r0,#0xe]  ; System
000108  2801              CMP      r0,#1
00010a  d18c              BNE      |L22.38|
;;;101            {
;;;102    //			System.emission = 0x01;
;;;103                System.status = SYSTEM_SCAN;
00010c  2005              MOVS     r0,#5
00010e  49b9              LDR      r1,|L22.1012|
000110  72c8              STRB     r0,[r1,#0xb]
;;;104                if( n >= 10 )	//1000ms更新一次
000112  48b7              LDR      r0,|L22.1008|
000114  7800              LDRB     r0,[r0,#0]  ; n
000116  280a              CMP      r0,#0xa
000118  db85              BLT      |L22.38|
;;;105                {
;;;106                    n = 0;
00011a  2000              MOVS     r0,#0
00011c  49b4              LDR      r1,|L22.1008|
00011e  7008              STRB     r0,[r1,#0]
;;;107                    App_printf("system Sweeping ...\r\n");
000120  a0d4              ADR      r0,|L22.1140|
000122  f7fffffe          BL       App_printf
000126  e265              B        |L22.1524|
                  |L22.296|
;;;108                }
;;;109            }
;;;110        }
;;;111        else	if( System.status == SYSTEM_SHUTDOWN )		//关机
000128  48b2              LDR      r0,|L22.1012|
00012a  7ac0              LDRB     r0,[r0,#0xb]  ; System
00012c  2804              CMP      r0,#4
00012e  d110              BNE      |L22.338|
;;;112        {
;;;113    		System.Voltage = 0.0;
000130  2000              MOVS     r0,#0
000132  49b0              LDR      r1,|L22.1012|
000134  6748              STR      r0,[r1,#0x74]  ; System
;;;114    		System.Electricity = 0.0;
000136  6788              STR      r0,[r1,#0x78]  ; System
;;;115    		
;;;116            Power_onBack.results[0] = 0x00;
000138  49bb              LDR      r1,|L22.1064|
00013a  7048              STRB     r0,[r1,#1]
;;;117    
;;;118            if( n >= 10 )	//1000ms更新一次
00013c  48ac              LDR      r0,|L22.1008|
00013e  7800              LDRB     r0,[r0,#0]  ; n
000140  280a              CMP      r0,#0xa
000142  db91              BLT      |L22.104|
;;;119            {
;;;120                n = 0;
000144  2000              MOVS     r0,#0
000146  49aa              LDR      r1,|L22.1008|
000148  7008              STRB     r0,[r1,#0]
;;;121                App_printf("2system close !\r\n");
00014a  a0d0              ADR      r0,|L22.1164|
00014c  f7fffffe          BL       App_printf
000150  e250              B        |L22.1524|
                  |L22.338|
;;;122            }
;;;123        }
;;;124    
;;;125        else	if( System.status == SYSTEM_STANDBY )		//待机状态
000152  48a8              LDR      r0,|L22.1012|
000154  7ac0              LDRB     r0,[r0,#0xb]  ; System
000156  2802              CMP      r0,#2
000158  d152              BNE      |L22.512|
;;;126        {
;;;127            if(get_history_alarm()==1)						//历史报警
00015a  f7fffffe          BL       get_history_alarm
00015e  2801              CMP      r0,#1
000160  d134              BNE      |L22.460|
;;;128            {
;;;129                System.sweep = 0;
000162  2000              MOVS     r0,#0
000164  49a3              LDR      r1,|L22.1012|
000166  7388              STRB     r0,[r1,#0xe]
;;;130                System.achieve_add_sub = 0;
000168  7448              STRB     r0,[r1,#0x11]
;;;131    //			System_Status_Clean();		//System.emission清零
;;;132                System.status = SYSTEM_ALARM;
00016a  2011              MOVS     r0,#0x11
00016c  72c8              STRB     r0,[r1,#0xb]
;;;133    
;;;134                if( n >= 10 )	//1000ms更新一次
00016e  48a0              LDR      r0,|L22.1008|
000170  7800              LDRB     r0,[r0,#0]  ; n
000172  280a              CMP      r0,#0xa
000174  db05              BLT      |L22.386|
;;;135                {
;;;136                    n = 0;
000176  2000              MOVS     r0,#0
000178  499d              LDR      r1,|L22.1008|
00017a  7008              STRB     r0,[r1,#0]
;;;137                    Trans_printf("history 3 alarm!\r\n");
00017c  a0c8              ADR      r0,|L22.1184|
00017e  f7fffffe          BL       Trans_printf
                  |L22.386|
;;;138                }
;;;139    
;;;140                if( System.mode == 0 )					//清零
000182  489c              LDR      r0,|L22.1012|
000184  7dc0              LDRB     r0,[r0,#0x17]  ; System
000186  b958              CBNZ     r0,|L22.416|
;;;141                {
;;;142                    memset(System.freq1, 0, 8);
000188  489a              LDR      r0,|L22.1012|
00018a  301e              ADDS     r0,r0,#0x1e
00018c  2100              MOVS     r1,#0
00018e  6001              STR      r1,[r0,#0]  ; System
000190  6041              STR      r1,[r0,#4]  ; System
;;;143                    memset(System.freq2, 0, 8);
000192  381e              SUBS     r0,r0,#0x1e
000194  6281              STR      r1,[r0,#0x28]  ; System
000196  62c1              STR      r1,[r0,#0x2c]  ; System
;;;144                    memset(System.freq3, 0, 8);
000198  3032              ADDS     r0,r0,#0x32
00019a  6001              STR      r1,[r0,#0]  ; System
00019c  6041              STR      r1,[r0,#4]  ; System
                  |L22.414|
00019e  e229              B        |L22.1524|
                  |L22.416|
;;;145                }
;;;146                else	if( System.mode == 1 )
0001a0  4894              LDR      r0,|L22.1012|
0001a2  7dc0              LDRB     r0,[r0,#0x17]  ; System
0001a4  2801              CMP      r0,#1
0001a6  d107              BNE      |L22.440|
;;;147                {
;;;148                    memset(System.freq2, 0, 8);
0001a8  4892              LDR      r0,|L22.1012|
0001aa  2100              MOVS     r1,#0
0001ac  6281              STR      r1,[r0,#0x28]  ; System
0001ae  62c1              STR      r1,[r0,#0x2c]  ; System
;;;149                    memset(System.freq3, 0, 8);
0001b0  3032              ADDS     r0,r0,#0x32
0001b2  6001              STR      r1,[r0,#0]  ; System
0001b4  6041              STR      r1,[r0,#4]  ; System
                  |L22.438|
0001b6  e21d              B        |L22.1524|
                  |L22.440|
;;;150                }
;;;151                else	if( System.mode == 3 )
0001b8  488e              LDR      r0,|L22.1012|
0001ba  7dc0              LDRB     r0,[r0,#0x17]  ; System
0001bc  2803              CMP      r0,#3
0001be  d185              BNE      |L22.204|
;;;152                {
;;;153                    memset(System.freq3, 0, 8);
0001c0  488c              LDR      r0,|L22.1012|
0001c2  3032              ADDS     r0,r0,#0x32
0001c4  2100              MOVS     r1,#0
0001c6  6001              STR      r1,[r0,#0]  ; System
0001c8  6041              STR      r1,[r0,#4]  ; System
                  |L22.458|
0001ca  e213              B        |L22.1524|
                  |L22.460|
;;;154                }
;;;155            }
;;;156            else	if( System.Voltage <= 10.0 && GT2000_Rx.sys_open==0)			//关机状态
0001cc  4989              LDR      r1,|L22.1012|
0001ce  6f48              LDR      r0,[r1,#0x74]  ; System
0001d0  f7fffffe          BL       __aeabi_f2d
0001d4  4604              MOV      r4,r0
0001d6  2200              MOVS     r2,#0
0001d8  4bb6              LDR      r3,|L22.1204|
0001da  f7fffffe          BL       __aeabi_cdcmple
0001de  d887              BHI      |L22.240|
0001e0  48b5              LDR      r0,|L22.1208|
0001e2  f8900021          LDRB     r0,[r0,#0x21]  ; GT2000_Rx
0001e6  2800              CMP      r0,#0
0001e8  d18b              BNE      |L22.258|
;;;157            {
;;;158                System.open = 0x00;
0001ea  4982              LDR      r1,|L22.1012|
0001ec  7308              STRB     r0,[r1,#0xc]
;;;159                System.status = SYSTEM_SHUTDOWN;
0001ee  2004              MOVS     r0,#4
0001f0  72c8              STRB     r0,[r1,#0xb]
;;;160                Trans_printf("1system close !\r\n");
0001f2  a0b2              ADR      r0,|L22.1212|
0001f4  f7fffffe          BL       Trans_printf
;;;161    					  App_printf("1system close !\r\n");
0001f8  a0b0              ADR      r0,|L22.1212|
0001fa  f7fffffe          BL       App_printf
0001fe  e1f9              B        |L22.1524|
                  |L22.512|
;;;162            }
;;;163        }
;;;164        else	if( System.status == SYSTEM_EMISSING )		//发射状态
000200  487c              LDR      r0,|L22.1012|
000202  7ac0              LDRB     r0,[r0,#0xb]  ; System
000204  2801              CMP      r0,#1
000206  d17d              BNE      |L22.772|
;;;165        {
;;;166            if(get_history_alarm()==1)						//历史报警
000208  f7fffffe          BL       get_history_alarm
00020c  2801              CMP      r0,#1
00020e  d134              BNE      |L22.634|
;;;167            {
;;;168                System.sweep = 0;
000210  2000              MOVS     r0,#0
000212  4978              LDR      r1,|L22.1012|
000214  7388              STRB     r0,[r1,#0xe]
;;;169                System.achieve_add_sub = 0;
000216  7448              STRB     r0,[r1,#0x11]
;;;170    //			System_Status_Clean();		//System.emission清零
;;;171                System.status = SYSTEM_ALARM;
000218  2011              MOVS     r0,#0x11
00021a  72c8              STRB     r0,[r1,#0xb]
;;;172    
;;;173                if( n >= 10 )	//1000ms更新一次
00021c  4874              LDR      r0,|L22.1008|
00021e  7800              LDRB     r0,[r0,#0]  ; n
000220  280a              CMP      r0,#0xa
000222  db05              BLT      |L22.560|
;;;174                {
;;;175                    n = 0;
000224  2000              MOVS     r0,#0
000226  4972              LDR      r1,|L22.1008|
000228  7008              STRB     r0,[r1,#0]
;;;176                    Trans_printf("history 4 alarm!\r\n");
00022a  a0a9              ADR      r0,|L22.1232|
00022c  f7fffffe          BL       Trans_printf
                  |L22.560|
;;;177                }
;;;178    
;;;179                if( System.mode == 0 )					//清零
000230  4870              LDR      r0,|L22.1012|
000232  7dc0              LDRB     r0,[r0,#0x17]  ; System
000234  b958              CBNZ     r0,|L22.590|
;;;180                {
;;;181                    memset(System.freq1, 0, 8);
000236  486f              LDR      r0,|L22.1012|
000238  301e              ADDS     r0,r0,#0x1e
00023a  2100              MOVS     r1,#0
00023c  6001              STR      r1,[r0,#0]  ; System
00023e  6041              STR      r1,[r0,#4]  ; System
;;;182                    memset(System.freq2, 0, 8);
000240  381e              SUBS     r0,r0,#0x1e
000242  6281              STR      r1,[r0,#0x28]  ; System
000244  62c1              STR      r1,[r0,#0x2c]  ; System
;;;183                    memset(System.freq3, 0, 8);
000246  3032              ADDS     r0,r0,#0x32
000248  6001              STR      r1,[r0,#0]  ; System
00024a  6041              STR      r1,[r0,#4]  ; System
00024c  e1d2              B        |L22.1524|
                  |L22.590|
;;;184                }
;;;185                else	if( System.mode == 1 )
00024e  4869              LDR      r0,|L22.1012|
000250  7dc0              LDRB     r0,[r0,#0x17]  ; System
000252  2801              CMP      r0,#1
000254  d107              BNE      |L22.614|
;;;186                {
;;;187                    memset(System.freq2, 0, 8);
000256  4867              LDR      r0,|L22.1012|
000258  2100              MOVS     r1,#0
00025a  6281              STR      r1,[r0,#0x28]  ; System
00025c  62c1              STR      r1,[r0,#0x2c]  ; System
;;;188                    memset(System.freq3, 0, 8);
00025e  3032              ADDS     r0,r0,#0x32
000260  6001              STR      r1,[r0,#0]  ; System
000262  6041              STR      r1,[r0,#4]  ; System
000264  e1c6              B        |L22.1524|
                  |L22.614|
;;;189                }
;;;190                else	if( System.mode == 2 )
000266  4863              LDR      r0,|L22.1012|
000268  7dc0              LDRB     r0,[r0,#0x17]  ; System
00026a  2802              CMP      r0,#2
00026c  d197              BNE      |L22.414|
;;;191                {
;;;192                    memset(System.freq3, 0, 8);
00026e  4861              LDR      r0,|L22.1012|
000270  3032              ADDS     r0,r0,#0x32
000272  2100              MOVS     r1,#0
000274  6001              STR      r1,[r0,#0]  ; System
000276  6041              STR      r1,[r0,#4]  ; System
000278  e1bc              B        |L22.1524|
                  |L22.634|
;;;193                }
;;;194            }
;;;195            else	if( System.emission == 0x00 && System.Power_Adjustment!=1)			//待机状态
00027a  485e              LDR      r0,|L22.1012|
00027c  7d80              LDRB     r0,[r0,#0x16]  ; System
00027e  b958              CBNZ     r0,|L22.664|
000280  485c              LDR      r0,|L22.1012|
000282  f89000a8          LDRB     r0,[r0,#0xa8]  ; System
000286  2801              CMP      r0,#1
000288  d006              BEQ      |L22.664|
;;;196            {
;;;197                System.status = SYSTEM_STANDBY;
00028a  2002              MOVS     r0,#2
00028c  4959              LDR      r1,|L22.1012|
00028e  72c8              STRB     r0,[r1,#0xb]
;;;198                App_printf("waiting state...\r\n");
000290  a094              ADR      r0,|L22.1252|
000292  f7fffffe          BL       App_printf
                  |L22.662|
000296  e1ad              B        |L22.1524|
                  |L22.664|
;;;199            }
;;;200            else	if( System.emission == 0x01 )			//发射状态
000298  4856              LDR      r0,|L22.1012|
00029a  7d80              LDRB     r0,[r0,#0x16]  ; System
00029c  2801              CMP      r0,#1
00029e  d18a              BNE      |L22.438|
;;;201            {
;;;202                if( System.modify_power == 0x01 )  //1:正在增减功率
0002a0  4854              LDR      r0,|L22.1012|
0002a2  7c80              LDRB     r0,[r0,#0x12]  ; System
0002a4  2801              CMP      r0,#1
0002a6  d10a              BNE      |L22.702|
;;;203                {
;;;204                    if( n >= 10 )	//1000ms更新一次
0002a8  4851              LDR      r0,|L22.1008|
0002aa  7800              LDRB     r0,[r0,#0]  ; n
0002ac  280a              CMP      r0,#0xa
0002ae  db8c              BLT      |L22.458|
;;;205                    {
;;;206                        n = 0;
0002b0  2000              MOVS     r0,#0
0002b2  494f              LDR      r1,|L22.1008|
0002b4  7008              STRB     r0,[r1,#0]
;;;207                        App_printf("modify power...\r\n");
0002b6  a090              ADR      r0,|L22.1272|
0002b8  f7fffffe          BL       App_printf
0002bc  e19a              B        |L22.1524|
                  |L22.702|
;;;208                    }
;;;209                }
;;;210                else	if(System.achieve_add_sub == 1)		//增加功率完成
0002be  484d              LDR      r0,|L22.1012|
0002c0  7c40              LDRB     r0,[r0,#0x11]  ; System
0002c2  2801              CMP      r0,#1
0002c4  d10b              BNE      |L22.734|
;;;211                {
;;;212                    System.achieve_add_sub = 0;
0002c6  2000              MOVS     r0,#0
0002c8  494a              LDR      r1,|L22.1012|
0002ca  7448              STRB     r0,[r1,#0x11]
;;;213                    System.modify_power = 0;   //1:正在增减功率
0002cc  7488              STRB     r0,[r1,#0x12]
;;;214                    System.cancel_add_sub = 0;
0002ce  74c8              STRB     r0,[r1,#0x13]
;;;215                    System.modify_power = 0;
0002d0  7488              STRB     r0,[r1,#0x12]
;;;216                    System.status = SYSTEM_EMISSING;
0002d2  2001              MOVS     r0,#1
0002d4  72c8              STRB     r0,[r1,#0xb]
;;;217                    App_printf("power adjust successfully\r\n");
0002d6  a08d              ADR      r0,|L22.1292|
0002d8  f7fffffe          BL       App_printf
0002dc  e18a              B        |L22.1524|
                  |L22.734|
;;;218                }
;;;219                else	if( Add_PowerBack.results[0] == 0xFC )	//增加功率失败
0002de  4892              LDR      r0,|L22.1320|
0002e0  7840              LDRB     r0,[r0,#1]  ; Add_PowerBack
0002e2  28fc              CMP      r0,#0xfc
0002e4  d118              BNE      |L22.792|
;;;220                {
;;;221                    Add_PowerBack.results[0] = 0x00;
0002e6  2000              MOVS     r0,#0
0002e8  498f              LDR      r1,|L22.1320|
0002ea  7048              STRB     r0,[r1,#1]
;;;222                    System.achieve_add_sub = 0;
0002ec  4941              LDR      r1,|L22.1012|
0002ee  7448              STRB     r0,[r1,#0x11]
;;;223                    System.modify_power = 0;
0002f0  7488              STRB     r0,[r1,#0x12]
;;;224                    System.cancel_add_sub = 0;
0002f2  74c8              STRB     r0,[r1,#0x13]
;;;225                    System.modify_power = 0;
0002f4  7488              STRB     r0,[r1,#0x12]
;;;226    
;;;227                    if( get_history_alarm() == 0x01 )
0002f6  f7fffffe          BL       get_history_alarm
0002fa  2801              CMP      r0,#1
0002fc  d105              BNE      |L22.778|
;;;228                    {
;;;229                        System.status = SYSTEM_ALARM;
0002fe  2011              MOVS     r0,#0x11
000300  493c              LDR      r1,|L22.1012|
000302  e000              B        |L22.774|
                  |L22.772|
000304  e043              B        |L22.910|
                  |L22.774|
000306  72c8              STRB     r0,[r1,#0xb]
000308  e002              B        |L22.784|
                  |L22.778|
;;;230                    }
;;;231                    else
;;;232                    {
;;;233                        System.status = SYSTEM_EMISSING;
00030a  2001              MOVS     r0,#1
00030c  4939              LDR      r1,|L22.1012|
00030e  72c8              STRB     r0,[r1,#0xb]
                  |L22.784|
;;;234                    }
;;;235                    App_printf("power add fail\r\n");
000310  a086              ADR      r0,|L22.1324|
000312  f7fffffe          BL       App_printf
000316  e16d              B        |L22.1524|
                  |L22.792|
;;;236                }
;;;237                else	if( Sub_PowerBack.results[0] == 0xFC )	//减小功率失败
000318  4889              LDR      r0,|L22.1344|
00031a  7840              LDRB     r0,[r0,#1]  ; Sub_PowerBack
00031c  28fc              CMP      r0,#0xfc
00031e  d116              BNE      |L22.846|
;;;238                {
;;;239                    Sub_PowerBack.results[0] = 0x00;
000320  2000              MOVS     r0,#0
000322  4987              LDR      r1,|L22.1344|
000324  7048              STRB     r0,[r1,#1]
;;;240                    System.achieve_add_sub = 0;
000326  4933              LDR      r1,|L22.1012|
000328  7448              STRB     r0,[r1,#0x11]
;;;241                    System.modify_power = 0;
00032a  7488              STRB     r0,[r1,#0x12]
;;;242                    System.cancel_add_sub = 0;
00032c  74c8              STRB     r0,[r1,#0x13]
;;;243                    System.modify_power = 0;
00032e  7488              STRB     r0,[r1,#0x12]
;;;244    
;;;245                    if( get_history_alarm() == 0x01 )
000330  f7fffffe          BL       get_history_alarm
000334  2801              CMP      r0,#1
000336  d103              BNE      |L22.832|
;;;246                    {
;;;247                        System.status = SYSTEM_ALARM;
000338  2011              MOVS     r0,#0x11
00033a  492e              LDR      r1,|L22.1012|
00033c  72c8              STRB     r0,[r1,#0xb]
00033e  e002              B        |L22.838|
                  |L22.832|
;;;248                    }
;;;249                    else
;;;250                    {
;;;251                        System.status = SYSTEM_EMISSING;
000340  2001              MOVS     r0,#1
000342  492c              LDR      r1,|L22.1012|
000344  72c8              STRB     r0,[r1,#0xb]
                  |L22.838|
;;;252                    }
;;;253                    App_printf("power sub fail\r\n");
000346  a07f              ADR      r0,|L22.1348|
000348  f7fffffe          BL       App_printf
00034c  e152              B        |L22.1524|
                  |L22.846|
;;;254                }
;;;255                else
;;;256                {
;;;257                    if( n >= 10 )	//1000ms更新一次
00034e  4828              LDR      r0,|L22.1008|
000350  7800              LDRB     r0,[r0,#0]  ; n
000352  280a              CMP      r0,#0xa
000354  db05              BLT      |L22.866|
;;;258                    {
;;;259                        n = 0;
000356  2000              MOVS     r0,#0
000358  4925              LDR      r1,|L22.1008|
00035a  7008              STRB     r0,[r1,#0]
;;;260                        App_printf("working state\r\n");
00035c  a07e              ADR      r0,|L22.1368|
00035e  f7fffffe          BL       App_printf
                  |L22.866|
;;;261                    }
;;;262    
;;;263                    if( System.mode == 1 )					//清零
000362  4824              LDR      r0,|L22.1012|
000364  7dc0              LDRB     r0,[r0,#0x17]  ; System
000366  2801              CMP      r0,#1
000368  d107              BNE      |L22.890|
;;;264                    {
;;;265                        memset(System.freq2, 0, 8);
00036a  4822              LDR      r0,|L22.1012|
00036c  2100              MOVS     r1,#0
00036e  6281              STR      r1,[r0,#0x28]  ; System
000370  62c1              STR      r1,[r0,#0x2c]  ; System
;;;266                        memset(System.freq3, 0, 8);
000372  3032              ADDS     r0,r0,#0x32
000374  6001              STR      r1,[r0,#0]  ; System
000376  6041              STR      r1,[r0,#4]  ; System
000378  e13c              B        |L22.1524|
                  |L22.890|
;;;267                    }
;;;268                    else	if( System.mode == 2 )
00037a  481e              LDR      r0,|L22.1012|
00037c  7dc0              LDRB     r0,[r0,#0x17]  ; System
00037e  2802              CMP      r0,#2
000380  d189              BNE      |L22.662|
;;;269                    {
;;;270                        memset(System.freq3, 0, 8);
000382  481c              LDR      r0,|L22.1012|
000384  3032              ADDS     r0,r0,#0x32
000386  2100              MOVS     r1,#0
000388  6001              STR      r1,[r0,#0]  ; System
00038a  6041              STR      r1,[r0,#4]  ; System
00038c  e132              B        |L22.1524|
                  |L22.910|
;;;271                    }
;;;272                }
;;;273            }
;;;274        }
;;;275        else	if( System.status == SYSTEM_ALARM )			//报警状态
00038e  4819              LDR      r0,|L22.1012|
000390  7ac0              LDRB     r0,[r0,#0xb]  ; System
000392  2811              CMP      r0,#0x11
000394  d12a              BNE      |L22.1004|
;;;276        {
;;;277            if(get_history_alarm()==1)						//历史报警
000396  f7fffffe          BL       get_history_alarm
00039a  2801              CMP      r0,#1
00039c  d127              BNE      |L22.1006|
;;;278            {
;;;279                System.sweep = 0;
00039e  2000              MOVS     r0,#0
0003a0  4914              LDR      r1,|L22.1012|
0003a2  7388              STRB     r0,[r1,#0xe]
;;;280                System.achieve_add_sub = 0;
0003a4  7448              STRB     r0,[r1,#0x11]
;;;281                System.status = SYSTEM_ALARM;
0003a6  2011              MOVS     r0,#0x11
0003a8  72c8              STRB     r0,[r1,#0xb]
;;;282    
;;;283                if( n >= 10 )	//1000ms更新一次
0003aa  4811              LDR      r0,|L22.1008|
0003ac  7800              LDRB     r0,[r0,#0]  ; n
0003ae  280a              CMP      r0,#0xa
0003b0  db05              BLT      |L22.958|
;;;284                {
;;;285                    n = 0;
0003b2  2000              MOVS     r0,#0
0003b4  490e              LDR      r1,|L22.1008|
0003b6  7008              STRB     r0,[r1,#0]
;;;286                    App_printf("history 2 alarm!\r\n");
0003b8  a06b              ADR      r0,|L22.1384|
0003ba  f7fffffe          BL       App_printf
                  |L22.958|
;;;287                }
;;;288    
;;;289                if( System.mode == 0 )					//清零
0003be  480d              LDR      r0,|L22.1012|
0003c0  7dc0              LDRB     r0,[r0,#0x17]  ; System
0003c2  b990              CBNZ     r0,|L22.1002|
;;;290                {
;;;291                    memset(System.freq1, 0, 8);
0003c4  480b              LDR      r0,|L22.1012|
0003c6  301e              ADDS     r0,r0,#0x1e
0003c8  2100              MOVS     r1,#0
0003ca  6001              STR      r1,[r0,#0]  ; System
0003cc  6041              STR      r1,[r0,#4]  ; System
;;;292                    System.freq1[8] = 0;
0003ce  381e              SUBS     r0,r0,#0x1e
0003d0  f8801026          STRB     r1,[r0,#0x26]
;;;293                    memset(System.freq2, 0, 8);
0003d4  6281              STR      r1,[r0,#0x28]  ; System
0003d6  62c1              STR      r1,[r0,#0x2c]  ; System
;;;294                    System.freq2[8] = 0;
0003d8  f8801030          STRB     r1,[r0,#0x30]
;;;295                    memset(System.freq3, 0, 8);
0003dc  3032              ADDS     r0,r0,#0x32
0003de  6001              STR      r1,[r0,#0]  ; System
0003e0  6041              STR      r1,[r0,#4]  ; System
;;;296                    System.freq3[8] = 0;
0003e2  3832              SUBS     r0,r0,#0x32
0003e4  f880103a          STRB     r1,[r0,#0x3a]
0003e8  e104              B        |L22.1524|
                  |L22.1002|
0003ea  e0c7              B        |L22.1404|
                  |L22.1004|
0003ec  e0ff              B        |L22.1518|
                  |L22.1006|
0003ee  e0e3              B        |L22.1464|
                  |L22.1008|
                          DCD      n
                  |L22.1012|
                          DCD      System
                  |L22.1016|
0003f8  73797374          DCB      "system have no init\r\n",0
0003fc  656d2068
000400  61766520
000404  6e6f2069
000408  6e69740d
00040c  0a00    
00040e  00                DCB      0
00040f  00                DCB      0
                  |L22.1040|
                          DCD      Alarm
                  |L22.1044|
000414  68697374          DCB      "history 1 alarm!\r\n",0
000418  6f727920
00041c  3120616c
000420  61726d21
000424  0d0a00  
000427  00                DCB      0
                  |L22.1064|
                          DCD      Power_onBack
                  |L22.1068|
00042c  73797374          DCB      "system open fail\r\n",0
000430  656d206f
000434  70656e20
000438  6661696c
00043c  0d0a00  
00043f  00                DCB      0
                  |L22.1088|
000440  73797374          DCB      "system open successfully!\r\n",0
000444  656d206f
000448  70656e20
00044c  73756363
000450  65737366
000454  756c6c79
000458  210d0a00
                  |L22.1116|
00045c  73797374          DCB      "system Opening ...\r\n",0
000460  656d204f
000464  70656e69
000468  6e67202e
00046c  2e2e0d0a
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L22.1140|
000474  73797374          DCB      "system Sweeping ...\r\n",0
000478  656d2053
00047c  77656570
000480  696e6720
000484  2e2e2e0d
000488  0a00    
00048a  00                DCB      0
00048b  00                DCB      0
                  |L22.1164|
00048c  32737973          DCB      "2system close !\r\n",0
000490  74656d20
000494  636c6f73
000498  6520210d
00049c  0a00    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L22.1184|
0004a0  68697374          DCB      "history 3 alarm!\r\n",0
0004a4  6f727920
0004a8  3320616c
0004ac  61726d21
0004b0  0d0a00  
0004b3  00                DCB      0
                  |L22.1204|
                          DCD      0x40240000
                  |L22.1208|
                          DCD      GT2000_Rx
                  |L22.1212|
0004bc  31737973          DCB      "1system close !\r\n",0
0004c0  74656d20
0004c4  636c6f73
0004c8  6520210d
0004cc  0a00    
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L22.1232|
0004d0  68697374          DCB      "history 4 alarm!\r\n",0
0004d4  6f727920
0004d8  3420616c
0004dc  61726d21
0004e0  0d0a00  
0004e3  00                DCB      0
                  |L22.1252|
0004e4  77616974          DCB      "waiting state...\r\n",0
0004e8  696e6720
0004ec  73746174
0004f0  652e2e2e
0004f4  0d0a00  
0004f7  00                DCB      0
                  |L22.1272|
0004f8  6d6f6469          DCB      "modify power...\r\n",0
0004fc  66792070
000500  6f776572
000504  2e2e2e0d
000508  0a00    
00050a  00                DCB      0
00050b  00                DCB      0
                  |L22.1292|
00050c  706f7765          DCB      "power adjust successfully\r\n",0
000510  72206164
000514  6a757374
000518  20737563
00051c  63657373
000520  66756c6c
000524  790d0a00
                  |L22.1320|
                          DCD      Add_PowerBack
                  |L22.1324|
00052c  706f7765          DCB      "power add fail\r\n",0
000530  72206164
000534  64206661
000538  696c0d0a
00053c  00      
00053d  00                DCB      0
00053e  00                DCB      0
00053f  00                DCB      0
                  |L22.1344|
                          DCD      Sub_PowerBack
                  |L22.1348|
000544  706f7765          DCB      "power sub fail\r\n",0
000548  72207375
00054c  62206661
000550  696c0d0a
000554  00      
000555  00                DCB      0
000556  00                DCB      0
000557  00                DCB      0
                  |L22.1368|
000558  776f726b          DCB      "working state\r\n",0
00055c  696e6720
000560  73746174
000564  650d0a00
                  |L22.1384|
000568  68697374          DCB      "history 2 alarm!\r\n",0
00056c  6f727920
000570  3220616c
000574  61726d21
000578  0d0a00  
00057b  00                DCB      0
                  |L22.1404|
;;;297                }
;;;298                else	if( System.mode == 1 )
00057c  481e              LDR      r0,|L22.1528|
00057e  7dc0              LDRB     r0,[r0,#0x17]  ; System
000580  2801              CMP      r0,#1
000582  d10c              BNE      |L22.1438|
;;;299                {
;;;300                    memset(System.freq2, 0, 8);
000584  481c              LDR      r0,|L22.1528|
000586  2100              MOVS     r1,#0
000588  6281              STR      r1,[r0,#0x28]  ; System
00058a  62c1              STR      r1,[r0,#0x2c]  ; System
;;;301                    System.freq2[8] = 0;
00058c  f8801030          STRB     r1,[r0,#0x30]
;;;302                    memset(System.freq3, 0, 8);
000590  3032              ADDS     r0,r0,#0x32
000592  6001              STR      r1,[r0,#0]  ; System
000594  6041              STR      r1,[r0,#4]  ; System
;;;303                    System.freq3[8] = 0;
000596  3832              SUBS     r0,r0,#0x32
000598  f880103a          STRB     r1,[r0,#0x3a]
00059c  e02a              B        |L22.1524|
                  |L22.1438|
;;;304                }
;;;305                else	if( System.mode == 2 )
00059e  4816              LDR      r0,|L22.1528|
0005a0  7dc0              LDRB     r0,[r0,#0x17]  ; System
0005a2  2802              CMP      r0,#2
0005a4  d126              BNE      |L22.1524|
;;;306                {
;;;307                    memset(System.freq3, 0, 8);
0005a6  4814              LDR      r0,|L22.1528|
0005a8  3032              ADDS     r0,r0,#0x32
0005aa  2100              MOVS     r1,#0
0005ac  6001              STR      r1,[r0,#0]  ; System
0005ae  6041              STR      r1,[r0,#4]  ; System
;;;308                    System.freq3[8] = 0;
0005b0  3832              SUBS     r0,r0,#0x32
0005b2  f880103a          STRB     r1,[r0,#0x3a]
0005b6  e01d              B        |L22.1524|
                  |L22.1464|
;;;309                }
;;;310            }
;;;311            else	if( System.Voltage >= 40.0 )			//待机状态
0005b8  490f              LDR      r1,|L22.1528|
0005ba  6f48              LDR      r0,[r1,#0x74]  ; System
0005bc  f7fffffe          BL       __aeabi_f2d
0005c0  4604              MOV      r4,r0
0005c2  2200              MOVS     r2,#0
0005c4  4b0d              LDR      r3,|L22.1532|
0005c6  f7fffffe          BL       __aeabi_cdrcmple
0005ca  d807              BHI      |L22.1500|
;;;312            {
;;;313                System.status = SYSTEM_STANDBY;
0005cc  2002              MOVS     r0,#2
0005ce  490a              LDR      r1,|L22.1528|
0005d0  72c8              STRB     r0,[r1,#0xb]
;;;314                App_printf("waiting state...\r\n");
0005d2  f2af00f0          ADR      r0,|L22.1252|
0005d6  f7fffffe          BL       App_printf
0005da  e00b              B        |L22.1524|
                  |L22.1500|
;;;315            }
;;;316            else
;;;317            {
;;;318                System.open = 0x00;
0005dc  2000              MOVS     r0,#0
0005de  4906              LDR      r1,|L22.1528|
0005e0  7308              STRB     r0,[r1,#0xc]
;;;319                System.status = SYSTEM_SHUTDOWN;
0005e2  2004              MOVS     r0,#4
0005e4  72c8              STRB     r0,[r1,#0xb]
;;;320                App_printf("3system close !\r\n");
0005e6  a006              ADR      r0,|L22.1536|
0005e8  f7fffffe          BL       App_printf
0005ec  e002              B        |L22.1524|
                  |L22.1518|
;;;321            }
;;;322        }
;;;323        else												//保留
;;;324        {
;;;325            App_printf("PC inquire when System.status = ???\r\n");
0005ee  a009              ADR      r0,|L22.1556|
0005f0  f7fffffe          BL       App_printf
                  |L22.1524|
;;;326        }
;;;327    }
0005f4  bd70              POP      {r4-r6,pc}
;;;328    
                          ENDP

0005f6  0000              DCW      0x0000
                  |L22.1528|
                          DCD      System
                  |L22.1532|
                          DCD      0x40440000
                  |L22.1536|
000600  33737973          DCB      "3system close !\r\n",0
000604  74656d20
000608  636c6f73
00060c  6520210d
000610  0a00    
000612  00                DCB      0
000613  00                DCB      0
                  |L22.1556|
000614  50432069          DCB      "PC inquire when System.status = ???\r\n",0
000618  6e717569
00061c  72652077
000620  68656e20
000624  53797374
000628  656d2e73
00062c  74617475
000630  73203d20
000634  3f3f3f0d
000638  0a00    
00063a  00                DCB      0
00063b  00                DCB      0

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  20736361          DCB      " scan2",207,214,212,218,181,196,201,168,198,181,198,181
000004  6e32cfd6
000008  d4dab5c4
00000c  c9a8c6b5
000010  c6b5    
000012  b5e33a20          DCB      181,227,": temp_point= %d index_dec= %d freq_scan_to_Tx="
000016  74656d70
00001a  5f706f69
00001e  6e743d20
000022  25642069
000026  6e646578
00002a  5f646563
00002e  3d202564
000032  20667265
000036  715f7363
00003a  616e5f74
00003e  6f5f5478
000042  3d      
000043  25303278          DCB      "%02x %02x \n",0
000047  20253032
00004b  78200a00

                          AREA ||.data||, DATA, ALIGN=0

                  n
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\my_protocol.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_my_protocol_c_c52ef6ef____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_my_protocol_c_c52ef6ef____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_my_protocol_c_c52ef6ef____REVSH|
#line 128
|__asm___13_my_protocol_c_c52ef6ef____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
