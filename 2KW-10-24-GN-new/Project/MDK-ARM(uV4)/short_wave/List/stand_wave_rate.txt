; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\stand_wave_rate.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\stand_wave_rate.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\stand_wave_rate.crf ..\..\User\stand_wave_rate.c]
                          THUMB

                          AREA ||i.get_Standing_wave_ratio||, CODE, READONLY, ALIGN=2

                  get_Standing_wave_ratio PROC
;;;11      */
;;;12      float get_Standing_wave_ratio(float Forward_Power,float Reverse_Power)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;13     {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;14         float temp;
;;;15         if(Forward_Power==0 || Forward_Power==Reverse_Power)
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_cfcmpeq
000010  d004              BEQ      |L1.28|
000012  4649              MOV      r1,r9
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       __aeabi_cfcmpeq
00001a  d102              BNE      |L1.34|
                  |L1.28|
;;;16         {
;;;17             return -1;
00001c  4810              LDR      r0,|L1.96|
                  |L1.30|
;;;18         }
;;;19         temp=(float)sqrt(Reverse_Power/Forward_Power);
;;;20         return (1+temp)/(1-temp);
;;;21     }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.34|
000022  4621              MOV      r1,r4                 ;19
000024  4648              MOV      r0,r9                 ;19
000026  f7fffffe          BL       __aeabi_fdiv
00002a  4683              MOV      r11,r0                ;19
00002c  f7fffffe          BL       __aeabi_f2d
000030  4607              MOV      r7,r0                 ;19
000032  f7fffffe          BL       sqrt
000036  4605              MOV      r5,r0                 ;19
000038  f7fffffe          BL       __aeabi_d2f
00003c  4682              MOV      r10,r0                ;19
00003e  4651              MOV      r1,r10                ;20
000040  f04f507e          MOV      r0,#0x3f800000        ;20
000044  f7fffffe          BL       __aeabi_fsub
000048  4605              MOV      r5,r0                 ;20
00004a  4651              MOV      r1,r10                ;20
00004c  f04f507e          MOV      r0,#0x3f800000        ;20
000050  f7fffffe          BL       __aeabi_fadd
000054  4606              MOV      r6,r0                 ;20
000056  4629              MOV      r1,r5                 ;20
000058  f7fffffe          BL       __aeabi_fdiv
00005c  e7df              B        |L1.30|
;;;22     
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0xbf800000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\stand_wave_rate.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stand_wave_rate_c_c951303f____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stand_wave_rate_c_c951303f____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stand_wave_rate_c_c951303f____REVSH|
#line 128
|__asm___17_stand_wave_rate_c_c951303f____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
