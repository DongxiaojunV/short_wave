; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\stmflash.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\stmflash.crf ..\..\User\STMFLASH\stmflash.c]
                          THUMB

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;86     //NumToWrite:半字(16位)数
;;;87     void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;88     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;89     	u16 i;
;;;90     	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e007              B        |L1.28|
                  |L1.12|
;;;91     	{
;;;92     		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadHalfWord
000012  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;93     		ReadAddr+=2;//偏移2个字节.	
000016  1c9b              ADDS     r3,r3,#2
000018  1c50              ADDS     r0,r2,#1              ;90
00001a  b282              UXTH     r2,r0                 ;90
                  |L1.28|
00001c  42aa              CMP      r2,r5                 ;90
00001e  dbf5              BLT      |L1.12|
;;;94     	}
;;;95     }
000020  bd30              POP      {r4,r5,pc}
;;;96     
                          ENDP


                          AREA ||i.STMFLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadHalfWord PROC
;;;5      //返回值:对应数据.
;;;6      u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;7      {
;;;8      	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;9      }
000004  4770              BX       lr
;;;10     
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;36     u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
;;;37     void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)	
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;38     {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;39     	u32 secpos;	   //扇区地址
;;;40     	u16 secoff;	   //扇区内偏移地址(16位字计算)
;;;41     	u16 secremain; //扇区内剩余地址(16位字计算)	   
;;;42      	u16 i;    
;;;43     	u32 offaddr;   //去掉0X08000000后的地址
;;;44     	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
00000a  f1b86f00          CMP      r8,#0x8000000
00000e  d302              BCC      |L3.22|
000010  4833              LDR      r0,|L3.224|
000012  4580              CMP      r8,r0
000014  d301              BCC      |L3.26|
                  |L3.22|
;;;45     	FLASH_Unlock();						//解锁
;;;46     	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
;;;47     	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
;;;48     	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
;;;49     	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
;;;50     	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
;;;51     	while(1) 
;;;52     	{	
;;;53     		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
;;;54     		for(i=0;i<secremain;i++)//校验数据
;;;55     		{
;;;56     			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
;;;57     		}
;;;58     		if(i<secremain)//需要擦除
;;;59     		{
;;;60     			FLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
;;;61     			for(i=0;i<secremain;i++)//复制
;;;62     			{
;;;63     				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
;;;64     			}
;;;65     			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
;;;66     		}else STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
;;;67     		if(NumToWrite==secremain)break;//写入结束了
;;;68     		else//写入未结束
;;;69     		{
;;;70     			secpos++;				//扇区地址增1
;;;71     			secoff=0;				//偏移位置为0 	 
;;;72     		   	pBuffer+=secremain;  	//指针偏移
;;;73     			WriteAddr+=secremain;	//写地址偏移	   
;;;74     		   	NumToWrite-=secremain;	//字节(16位)数递减
;;;75     			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
;;;76     			else secremain=NumToWrite;//下一个扇区可以写完了
;;;77     		}	 
;;;78     	};	
;;;79     	FLASH_Lock();//上锁
;;;80     }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.26|
00001a  f7fffffe          BL       FLASH_Unlock
00001e  f1a86b00          SUB      r11,r8,#0x8000000     ;46
000022  ea4f25db          LSR      r5,r11,#11            ;47
000026  f3cb0949          UBFX     r9,r11,#1,#10         ;48
00002a  f5c96480          RSB      r4,r9,#0x400          ;49
00002e  42a7              CMP      r7,r4                 ;50
000030  dc00              BGT      |L3.52|
000032  463c              MOV      r4,r7                 ;50
                  |L3.52|
000034  e04d              B        |L3.210|
                  |L3.54|
000036  f04f6100          MOV      r1,#0x8000000         ;53
00003a  eb0120c5          ADD      r0,r1,r5,LSL #11      ;53
00003e  144a              ASRS     r2,r1,#17             ;53
000040  4928              LDR      r1,|L3.228|
000042  f7fffffe          BL       STMFLASH_Read
000046  2600              MOVS     r6,#0                 ;54
000048  e00b              B        |L3.98|
                  |L3.74|
00004a  eb090006          ADD      r0,r9,r6              ;56
00004e  4925              LDR      r1,|L3.228|
000050  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;56
000054  f64f71ff          MOV      r1,#0xffff            ;56
000058  4288              CMP      r0,r1                 ;56
00005a  d000              BEQ      |L3.94|
00005c  e003              B        |L3.102|
                  |L3.94|
00005e  1c70              ADDS     r0,r6,#1              ;54
000060  b286              UXTH     r6,r0                 ;54
                  |L3.98|
000062  42a6              CMP      r6,r4                 ;54
000064  dbf1              BLT      |L3.74|
                  |L3.102|
000066  bf00              NOP                            ;56
000068  42a6              CMP      r6,r4                 ;58
00006a  da1b              BGE      |L3.164|
00006c  f04f6100          MOV      r1,#0x8000000         ;60
000070  eb0120c5          ADD      r0,r1,r5,LSL #11      ;60
000074  f7fffffe          BL       FLASH_ErasePage
000078  2600              MOVS     r6,#0                 ;61
00007a  e008              B        |L3.142|
                  |L3.124|
00007c  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;63
000080  eb060109          ADD      r1,r6,r9              ;63
000084  4a17              LDR      r2,|L3.228|
000086  f8220011          STRH     r0,[r2,r1,LSL #1]     ;63
00008a  1c70              ADDS     r0,r6,#1              ;61
00008c  b286              UXTH     r6,r0                 ;61
                  |L3.142|
00008e  42a6              CMP      r6,r4                 ;61
000090  dbf4              BLT      |L3.124|
000092  f04f6100          MOV      r1,#0x8000000         ;65
000096  eb0120c5          ADD      r0,r1,r5,LSL #11      ;65
00009a  144a              ASRS     r2,r1,#17             ;65
00009c  4911              LDR      r1,|L3.228|
00009e  f7fffffe          BL       STMFLASH_Write_NoCheck
0000a2  e004              B        |L3.174|
                  |L3.164|
0000a4  4622              MOV      r2,r4                 ;66
0000a6  4651              MOV      r1,r10                ;66
0000a8  4640              MOV      r0,r8                 ;66
0000aa  f7fffffe          BL       STMFLASH_Write_NoCheck
                  |L3.174|
0000ae  42a7              CMP      r7,r4                 ;67
0000b0  d100              BNE      |L3.180|
0000b2  e00f              B        |L3.212|
                  |L3.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;70
0000b6  f04f0900          MOV      r9,#0                 ;71
0000ba  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;72
0000be  44a0              ADD      r8,r8,r4              ;73
0000c0  1b38              SUBS     r0,r7,r4              ;74
0000c2  b287              UXTH     r7,r0                 ;74
0000c4  f5b76f80          CMP      r7,#0x400             ;75
0000c8  dd02              BLE      |L3.208|
0000ca  f44f6480          MOV      r4,#0x400             ;75
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  463c              MOV      r4,r7                 ;76
                  |L3.210|
0000d2  e7b0              B        |L3.54|
                  |L3.212|
0000d4  bf00              NOP                            ;67
0000d6  f7fffffe          BL       FLASH_Lock
0000da  bf00              NOP      
0000dc  e79b              B        |L3.22|
;;;81     #endif
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      0x08040000
                  |L3.228|
                          DCD      STMFLASH_BUF

                          AREA ||i.STMFLASH_Write_NoCheck||, CODE, READONLY, ALIGN=1

                  STMFLASH_Write_NoCheck PROC
;;;15     //NumToWrite:半字(16位)数   
;;;16     void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)   
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;17     { 			 		 
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;18     	u16 i;
;;;19     	for(i=0;i<NumToWrite;i++)
00000a  2400              MOVS     r4,#0
00000c  e007              B        |L4.30|
                  |L4.14|
;;;20     	{
;;;21     		FLASH_ProgramHalfWord(WriteAddr,pBuffer[i]);
00000e  f8361014          LDRH     r1,[r6,r4,LSL #1]
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       FLASH_ProgramHalfWord
;;;22     	    WriteAddr+=2;//地址增加2.
000018  1cad              ADDS     r5,r5,#2
00001a  1c60              ADDS     r0,r4,#1              ;19
00001c  b284              UXTH     r4,r0                 ;19
                  |L4.30|
00001e  42bc              CMP      r4,r7                 ;19
000020  dbf5              BLT      |L4.14|
;;;23     	}  
;;;24     }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;25     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  STMFLASH_BUF
                          %        2048

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\STMFLASH\\stmflash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_stmflash_c_69bb3012____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_stmflash_c_69bb3012____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_stmflash_c_69bb3012____REVSH|
#line 128
|__asm___10_stmflash_c_69bb3012____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
