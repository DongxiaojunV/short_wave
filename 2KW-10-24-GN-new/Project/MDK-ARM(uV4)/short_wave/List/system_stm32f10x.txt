; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\system_stm32f10x.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\system_stm32f10x.crf ..\..\User\bsp\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=1

                  SetSysClock PROC
;;;428      */
;;;429    static void SetSysClock(void)
000000  b510              PUSH     {r4,lr}
;;;430    {
;;;431    #ifdef SYSCLK_FREQ_HSE
;;;432        SetSysClockToHSE();
;;;433    #elif defined SYSCLK_FREQ_24MHz
;;;434        SetSysClockTo24();
;;;435    #elif defined SYSCLK_FREQ_36MHz
;;;436        SetSysClockTo36();
;;;437    #elif defined SYSCLK_FREQ_48MHz
;;;438        SetSysClockTo48();
;;;439    #elif defined SYSCLK_FREQ_56MHz
;;;440        SetSysClockTo56();
;;;441    #elif defined SYSCLK_FREQ_72MHz
;;;442        SetSysClockTo72();
000002  f7fffffe          BL       SetSysClockTo72
;;;443    #endif
;;;444    
;;;445        /* If none of the define above is enabled, the HSI is used as System clock
;;;446           source (default after reset) */
;;;447    }
000006  bd10              POP      {r4,pc}
;;;448    
                          ENDP


                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;1006     */
;;;1007   static void SetSysClockTo72(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;1008   {
;;;1009       __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;1010   
;;;1011       /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
;;;1012       /* Enable HSE */
;;;1013       RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4833              LDR      r0,|L2.216|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4931              LDR      r1,|L2.216|
000012  6008              STR      r0,[r1,#0]
;;;1014   
;;;1015       /* Wait till HSE is ready and if Time out is reached exit */
;;;1016       do
000014  bf00              NOP      
                  |L2.22|
;;;1017       {
;;;1018           HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4830              LDR      r0,|L2.216|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;1019           StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;1020       }
;;;1021       while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L2.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b06fa0          CMP      r0,#0x500
000030  d1f1              BNE      |L2.22|
                  |L2.50|
;;;1022   
;;;1023       if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4829              LDR      r0,|L2.216|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L2.66|
;;;1024       {
;;;1025           HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L2.70|
                  |L2.66|
;;;1026       }
;;;1027       else
;;;1028       {
;;;1029           HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L2.70|
;;;1030       }
;;;1031   
;;;1032       if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d143              BNE      |L2.212|
;;;1033       {
;;;1034           /* Enable Prefetch Buffer */
;;;1035           FLASH->ACR |= FLASH_ACR_PRFTBE;
00004c  4823              LDR      r0,|L2.220|
00004e  6800              LDR      r0,[r0,#0]
000050  f0400010          ORR      r0,r0,#0x10
000054  4921              LDR      r1,|L2.220|
000056  6008              STR      r0,[r1,#0]
;;;1036   
;;;1037           /* Flash 2 wait state */
;;;1038           FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200003          BIC      r0,r0,#3
000060  6008              STR      r0,[r1,#0]
;;;1039           FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
000062  4608              MOV      r0,r1
000064  6800              LDR      r0,[r0,#0]
000066  f0400002          ORR      r0,r0,#2
00006a  6008              STR      r0,[r1,#0]
;;;1040   
;;;1041   
;;;1042           /* HCLK = SYSCLK */
;;;1043           RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00006c  481a              LDR      r0,|L2.216|
00006e  6840              LDR      r0,[r0,#4]
000070  4919              LDR      r1,|L2.216|
000072  6048              STR      r0,[r1,#4]
;;;1044   
;;;1045           /* PCLK2 = HCLK */
;;;1046           RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000074  4608              MOV      r0,r1
000076  6840              LDR      r0,[r0,#4]
000078  6048              STR      r0,[r1,#4]
;;;1047   
;;;1048           /* PCLK1 = HCLK */
;;;1049           RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00007a  4608              MOV      r0,r1
00007c  6840              LDR      r0,[r0,#4]
00007e  f4406080          ORR      r0,r0,#0x400
000082  6048              STR      r0,[r1,#4]
;;;1050   
;;;1051   #ifdef STM32F10X_CL
;;;1052           /* Configure PLLs ------------------------------------------------------*/
;;;1053           /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;1054           /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;1055   
;;;1056           RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;1057                                     RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;1058           RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;1059                                    RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;1060   
;;;1061           /* Enable PLL2 */
;;;1062           RCC->CR |= RCC_CR_PLL2ON;
;;;1063           /* Wait till PLL2 is ready */
;;;1064           while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;1065           {
;;;1066           }
;;;1067   
;;;1068   
;;;1069           /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */
;;;1070           RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;1071           RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
;;;1072                                   RCC_CFGR_PLLMULL9);
;;;1073   #else
;;;1074           /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;1075           RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000084  4608              MOV      r0,r1
000086  6840              LDR      r0,[r0,#4]
000088  f420107c          BIC      r0,r0,#0x3f0000
00008c  6048              STR      r0,[r1,#4]
;;;1076                                               RCC_CFGR_PLLMULL));
;;;1077           RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00008e  4608              MOV      r0,r1
000090  6840              LDR      r0,[r0,#4]
000092  f44010e8          ORR      r0,r0,#0x1d0000
000096  6048              STR      r0,[r1,#4]
;;;1078   #endif /* STM32F10X_CL */
;;;1079   
;;;1080           /* Enable PLL */
;;;1081           RCC->CR |= RCC_CR_PLLON;
000098  4608              MOV      r0,r1
00009a  6800              LDR      r0,[r0,#0]
00009c  f0407080          ORR      r0,r0,#0x1000000
0000a0  6008              STR      r0,[r1,#0]
;;;1082   
;;;1083           /* Wait till PLL is ready */
;;;1084           while((RCC->CR & RCC_CR_PLLRDY) == 0)
0000a2  bf00              NOP      
                  |L2.164|
0000a4  480c              LDR      r0,|L2.216|
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f0007000          AND      r0,r0,#0x2000000
0000ac  2800              CMP      r0,#0
0000ae  d0f9              BEQ      |L2.164|
;;;1085           {
;;;1086           }
;;;1087   
;;;1088           /* Select PLL as system clock source */
;;;1089           RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  4809              LDR      r0,|L2.216|
0000b2  6840              LDR      r0,[r0,#4]
0000b4  f0200003          BIC      r0,r0,#3
0000b8  4907              LDR      r1,|L2.216|
0000ba  6048              STR      r0,[r1,#4]
;;;1090           RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
0000bc  4608              MOV      r0,r1
0000be  6840              LDR      r0,[r0,#4]
0000c0  f0400002          ORR      r0,r0,#2
0000c4  6048              STR      r0,[r1,#4]
;;;1091   
;;;1092           /* Wait till PLL is used as system clock source */
;;;1093           while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000c6  bf00              NOP      
                  |L2.200|
0000c8  4803              LDR      r0,|L2.216|
0000ca  6840              LDR      r0,[r0,#4]
0000cc  f000000c          AND      r0,r0,#0xc
0000d0  2808              CMP      r0,#8
0000d2  d1f9              BNE      |L2.200|
                  |L2.212|
;;;1094           {
;;;1095           }
;;;1096       }
;;;1097       else
;;;1098       {
;;;1099           /* If HSE fails to start-up, the application will have wrong clock
;;;1100                configuration. User can add here some code to deal with this error */
;;;1101       }
;;;1102   }
0000d4  bd0c              POP      {r2,r3,pc}
;;;1103   #endif
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
                          DCD      0x40021000
                  |L2.220|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;311      */
;;;312    void SystemCoreClockUpdate (void)
000000  b510              PUSH     {r4,lr}
;;;313    {
;;;314        uint32_t tmp = 0, pllmull = 0, pllsource = 0;
000002  2100              MOVS     r1,#0
000004  2000              MOVS     r0,#0
000006  2200              MOVS     r2,#0
;;;315    
;;;316    #ifdef  STM32F10X_CL
;;;317        uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;318    #endif /* STM32F10X_CL */
;;;319    
;;;320    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;321        uint32_t prediv1factor = 0;
;;;322    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;323    
;;;324        /* Get SYSCLK source -------------------------------------------------------*/
;;;325        tmp = RCC->CFGR & RCC_CFGR_SWS;
000008  4b21              LDR      r3,|L3.144|
00000a  685b              LDR      r3,[r3,#4]
00000c  f003010c          AND      r1,r3,#0xc
;;;326    
;;;327        switch (tmp)
000010  b121              CBZ      r1,|L3.28|
000012  2904              CMP      r1,#4
000014  d006              BEQ      |L3.36|
000016  2908              CMP      r1,#8
000018  d128              BNE      |L3.108|
00001a  e007              B        |L3.44|
                  |L3.28|
;;;328        {
;;;329        case 0x00:  /* HSI used as system clock */
;;;330            SystemCoreClock = HSI_VALUE;
00001c  4b1d              LDR      r3,|L3.148|
00001e  4c1e              LDR      r4,|L3.152|
000020  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;331            break;
000022  e027              B        |L3.116|
                  |L3.36|
;;;332        case 0x04:  /* HSE used as system clock */
;;;333            SystemCoreClock = HSE_VALUE;
000024  4b1b              LDR      r3,|L3.148|
000026  4c1c              LDR      r4,|L3.152|
000028  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;334            break;
00002a  e023              B        |L3.116|
                  |L3.44|
;;;335        case 0x08:  /* PLL used as system clock */
;;;336    
;;;337            /* Get PLL clock source and multiplication factor ----------------------*/
;;;338            pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
00002c  4b18              LDR      r3,|L3.144|
00002e  685b              LDR      r3,[r3,#4]
000030  f4031070          AND      r0,r3,#0x3c0000
;;;339            pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000034  4b16              LDR      r3,|L3.144|
000036  685b              LDR      r3,[r3,#4]
000038  f4033280          AND      r2,r3,#0x10000
;;;340    
;;;341    #ifndef STM32F10X_CL
;;;342            pllmull = ( pllmull >> 18) + 2;
00003c  2302              MOVS     r3,#2
00003e  eb034090          ADD      r0,r3,r0,LSR #18
;;;343    
;;;344            if (pllsource == 0x00)
000042  b922              CBNZ     r2,|L3.78|
;;;345            {
;;;346                /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;347                SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
000044  4b15              LDR      r3,|L3.156|
000046  4343              MULS     r3,r0,r3
000048  4c13              LDR      r4,|L3.152|
00004a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
00004c  e00d              B        |L3.106|
                  |L3.78|
;;;348            }
;;;349            else
;;;350            {
;;;351    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;352                prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;353                /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;354                SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
;;;355    #else
;;;356                /* HSE selected as PLL clock entry */
;;;357                if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
00004e  4b10              LDR      r3,|L3.144|
000050  685b              LDR      r3,[r3,#4]
000052  f4033300          AND      r3,r3,#0x20000
000056  b123              CBZ      r3,|L3.98|
;;;358                {
;;;359                    /* HSE oscillator clock divided by 2 */
;;;360                    SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
000058  4b10              LDR      r3,|L3.156|
00005a  4343              MULS     r3,r0,r3
00005c  4c0e              LDR      r4,|L3.152|
00005e  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000060  e003              B        |L3.106|
                  |L3.98|
;;;361                }
;;;362                else
;;;363                {
;;;364                    SystemCoreClock = HSE_VALUE * pllmull;
000062  4b0c              LDR      r3,|L3.148|
000064  4343              MULS     r3,r0,r3
000066  4c0c              LDR      r4,|L3.152|
000068  6023              STR      r3,[r4,#0]  ; SystemCoreClock
                  |L3.106|
;;;365                }
;;;366    #endif
;;;367            }
;;;368    #else
;;;369            pllmull = pllmull >> 18;
;;;370    
;;;371            if (pllmull != 0x0D)
;;;372            {
;;;373                pllmull += 2;
;;;374            }
;;;375            else
;;;376            {
;;;377                /* PLL multiplication factor = PLL input clock * 6.5 */
;;;378                pllmull = 13 / 2;
;;;379            }
;;;380    
;;;381            if (pllsource == 0x00)
;;;382            {
;;;383                /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;384                SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;385            }
;;;386            else
;;;387            {
;;;388                /* PREDIV1 selected as PLL clock entry */
;;;389    
;;;390                /* Get PREDIV1 clock source and division factor */
;;;391                prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;392                prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;393    
;;;394                if (prediv1source == 0)
;;;395                {
;;;396                    /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;397                    SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
;;;398                }
;;;399                else
;;;400                {
;;;401                    /* PLL2 clock selected as PREDIV1 clock entry */
;;;402    
;;;403                    /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;404                    prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;405                    pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
;;;406                    SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
;;;407                }
;;;408            }
;;;409    #endif /* STM32F10X_CL */
;;;410            break;
00006a  e003              B        |L3.116|
                  |L3.108|
;;;411    
;;;412        default:
;;;413            SystemCoreClock = HSI_VALUE;
00006c  4b09              LDR      r3,|L3.148|
00006e  4c0a              LDR      r4,|L3.152|
000070  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;414            break;
000072  bf00              NOP      
                  |L3.116|
000074  bf00              NOP                            ;331
;;;415        }
;;;416    
;;;417        /* Compute HCLK clock frequency ----------------*/
;;;418        /* Get HCLK prescaler */
;;;419        tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000076  4b06              LDR      r3,|L3.144|
000078  685b              LDR      r3,[r3,#4]
00007a  f3c31303          UBFX     r3,r3,#4,#4
00007e  4c08              LDR      r4,|L3.160|
000080  5ce1              LDRB     r1,[r4,r3]
;;;420        /* HCLK clock frequency */
;;;421        SystemCoreClock >>= tmp;
000082  4b05              LDR      r3,|L3.152|
000084  681b              LDR      r3,[r3,#0]  ; SystemCoreClock
000086  40cb              LSRS     r3,r3,r1
000088  4c03              LDR      r4,|L3.152|
00008a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;422    }
00008c  bd10              POP      {r4,pc}
;;;423    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0x40021000
                  |L3.148|
                          DCD      0x007a1200
                  |L3.152|
                          DCD      SystemCoreClock
                  |L3.156|
                          DCD      0x003d0900
                  |L3.160|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;217      */
;;;218    void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220        /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;221        /* Set HSION bit */
;;;222        RCC->CR |= (uint32_t)0x00000001;
000002  4813              LDR      r0,|L4.80|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4911              LDR      r1,|L4.80|
00000c  6008              STR      r0,[r1,#0]
;;;223    
;;;224        /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;225    #ifndef STM32F10X_CL
;;;226        RCC->CFGR &= (uint32_t)0xF8FF0000;
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4910              LDR      r1,|L4.84|
000014  4008              ANDS     r0,r0,r1
000016  490e              LDR      r1,|L4.80|
000018  6048              STR      r0,[r1,#4]
;;;227    #else
;;;228        RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;229    #endif /* STM32F10X_CL */
;;;230    
;;;231        /* Reset HSEON, CSSON and PLLON bits */
;;;232        RCC->CR &= (uint32_t)0xFEF6FFFF;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  490e              LDR      r1,|L4.88|
000020  4008              ANDS     r0,r0,r1
000022  490b              LDR      r1,|L4.80|
000024  6008              STR      r0,[r1,#0]
;;;233    
;;;234        /* Reset HSEBYP bit */
;;;235        RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f4202080          BIC      r0,r0,#0x40000
00002e  6008              STR      r0,[r1,#0]
;;;236    
;;;237        /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;238        RCC->CFGR &= (uint32_t)0xFF80FFFF;
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  f42000fe          BIC      r0,r0,#0x7f0000
000038  6048              STR      r0,[r1,#4]
;;;239    
;;;240    #ifdef STM32F10X_CL
;;;241        /* Reset PLL2ON and PLL3ON bits */
;;;242        RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;243    
;;;244        /* Disable all interrupts and clear pending bits  */
;;;245        RCC->CIR = 0x00FF0000;
;;;246    
;;;247        /* Reset CFGR2 register */
;;;248        RCC->CFGR2 = 0x00000000;
;;;249    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;250        /* Disable all interrupts and clear pending bits  */
;;;251        RCC->CIR = 0x009F0000;
;;;252    
;;;253        /* Reset CFGR2 register */
;;;254        RCC->CFGR2 = 0x00000000;
;;;255    #else
;;;256        /* Disable all interrupts and clear pending bits  */
;;;257        RCC->CIR = 0x009F0000;
00003a  f44f001f          MOV      r0,#0x9f0000
00003e  6088              STR      r0,[r1,#8]
;;;258    #endif /* STM32F10X_CL */
;;;259    
;;;260    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;261    #ifdef DATA_IN_ExtSRAM
;;;262        SystemInit_ExtMemCtl();
;;;263    #endif /* DATA_IN_ExtSRAM */
;;;264    #endif
;;;265    
;;;266        /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;267        /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;268        SetSysClock();
000040  f7fffffe          BL       SetSysClock
;;;269    
;;;270    #ifdef VECT_TAB_SRAM
;;;271        SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;272    #else
;;;273        SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
000044  f04f6000          MOV      r0,#0x8000000
000048  4904              LDR      r1,|L4.92|
00004a  6008              STR      r0,[r1,#0]
;;;274    #endif
;;;275    }
00004c  bd10              POP      {r4,pc}
;;;276    
                          ENDP

00004e  0000              DCW      0x0000
                  |L4.80|
                          DCD      0x40021000
                  |L4.84|
                          DCD      0xf8ff0000
                  |L4.88|
                          DCD      0xfef6ffff
                  |L4.92|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\system_stm32f10x.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f10x_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f10x_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f10x_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
