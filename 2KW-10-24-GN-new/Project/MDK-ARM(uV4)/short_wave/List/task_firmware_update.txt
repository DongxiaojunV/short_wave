; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\task_firmware_update.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\task_firmware_update.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_update -IE:\Code\My_Short_Wave\Project\MDK-ARM(uV4)\RTE -ID:\Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -ID:\Keil5\ARM\CMSIS\Include -ID:\Keil5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0 -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\task_firmware_update.crf ..\..\Task\Task_Firmware_Update.c]
                          THUMB

                          AREA ||i.Send_App||, CODE, READONLY, ALIGN=2

                  Send_App PROC
;;;139    
;;;140    uint8_t Send_App(uint8_t *Func_code, uint8_t update_ack)
000000  e92d43f3          PUSH     {r0,r1,r4-r9,lr}
;;;141    {
000004  b0c5              SUB      sp,sp,#0x114
000006  4606              MOV      r6,r0
;;;142        uint8_t i = 0;
000008  2700              MOVS     r7,#0
;;;143        uint8_t len = 0;
00000a  2400              MOVS     r4,#0
;;;144        Buffer_t COM_buffer;
;;;145    
;;;146    	uint16_t CRC_Back;
;;;147    	uint8_t Start_Data[8] = {0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
00000c  a13f              ADR      r1,|L1.268|
00000e  c903              LDM      r1,{r0,r1}
000010  e9cd0102          STRD     r0,r1,[sp,#8]
;;;148    	uint8_t End_Data[4] = {0x00, 0x00, 0x03, 0x04};
000014  a03f              ADR      r0,|L1.276|
000016  6800              LDR      r0,[r0,#0]
000018  9001              STR      r0,[sp,#4]
;;;149    
;;;150    	//补零
;;;151        uint8_t temp = 0x00;
00001a  46a0              MOV      r8,r4
;;;152        uint8_t temp_len = 0x00;
00001c  46a1              MOV      r9,r4
;;;153    	
;;;154        if(Func_code[0] ==0x0E && Func_code[1] == 0x01)			//返回接收更新包成功与否
00001e  7830              LDRB     r0,[r6,#0]
000020  280e              CMP      r0,#0xe
000022  d16f              BNE      |L1.260|
000024  7870              LDRB     r0,[r6,#1]
000026  2801              CMP      r0,#1
000028  d16c              BNE      |L1.260|
;;;155        {
;;;156    		Start_Data[3] = 0;					//数据长度
00002a  2000              MOVS     r0,#0
00002c  f88d000b          STRB     r0,[sp,#0xb]
;;;157    		Start_Data[4] = 1;					//数据长度
000030  2001              MOVS     r0,#1
000032  f88d000c          STRB     r0,[sp,#0xc]
;;;158    		Start_Data[5] = 0x0E;				//功能码
000036  200e              MOVS     r0,#0xe
000038  f88d000d          STRB     r0,[sp,#0xd]
;;;159    		Start_Data[6] = 0x02;				//功能码
00003c  2002              MOVS     r0,#2
00003e  f88d000e          STRB     r0,[sp,#0xe]
;;;160    
;;;161    		len = (Start_Data[3]<<8) + Start_Data[4];
000042  f89d000c          LDRB     r0,[sp,#0xc]
000046  f89d100b          LDRB     r1,[sp,#0xb]
00004a  eb002001          ADD      r0,r0,r1,LSL #8
00004e  b2c4              UXTB     r4,r0
;;;162    		#if	ADD_CAN_LEN
;;;163    		Start_Data[6] = 8 + len + 4;
000050  f104000c          ADD      r0,r4,#0xc
000054  b2c0              UXTB     r0,r0
000056  f88d000e          STRB     r0,[sp,#0xe]
;;;164    		#endif
;;;165    
;;;166    		memcpy(COM_buffer.data, Start_Data, 8);
00005a  e9dd0102          LDRD     r0,r1,[sp,#8]
00005e  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;167    		memcpy(COM_buffer.data+8, &update_ack, len);
000062  4622              MOV      r2,r4
000064  a946              ADD      r1,sp,#0x118
000066  a806              ADD      r0,sp,#0x18
000068  f7fffffe          BL       __aeabi_memcpy4
;;;168    		CRC_Back = CRC16_XMODEM(COM_buffer.data+5, len+3);
00006c  1ce1              ADDS     r1,r4,#3
00006e  f10d0015          ADD      r0,sp,#0x15
000072  f7fffffe          BL       CRC16_XMODEM
000076  4605              MOV      r5,r0
;;;169    		End_Data[0] = (uint8_t)((CRC_Back >> 8) & 0xff);		//存高八位
000078  0a28              LSRS     r0,r5,#8
00007a  f88d0004          STRB     r0,[sp,#4]
;;;170    		End_Data[1] = (uint8_t)((CRC_Back >> 0) & 0xff) ;		//低八位
00007e  b2e8              UXTB     r0,r5
000080  f88d0005          STRB     r0,[sp,#5]
;;;171    		memcpy(COM_buffer.data+len+8, End_Data,4);
000084  a804              ADD      r0,sp,#0x10
000086  4420              ADD      r0,r0,r4
000088  9901              LDR      r1,[sp,#4]
00008a  6081              STR      r1,[r0,#8]
;;;172    		COM_buffer.len = len+12;
00008c  f104000c          ADD      r0,r4,#0xc
000090  b2c0              UXTB     r0,r0
000092  f88d0110          STRB     r0,[sp,#0x110]
;;;173    
;;;174    		#if	1	//不够8位，补零
;;;175    		temp = COM_buffer.len % 8;
000096  f89d0110          LDRB     r0,[sp,#0x110]
00009a  17c1              ASRS     r1,r0,#31
00009c  eb007151          ADD      r1,r0,r1,LSR #29
0000a0  10c9              ASRS     r1,r1,#3
0000a2  eba001c1          SUB      r1,r0,r1,LSL #3
0000a6  f00108ff          AND      r8,r1,#0xff
;;;176    
;;;177    		if( temp == 0x00 )
0000aa  f1b80f00          CMP      r8,#0
0000ae  d010              BEQ      |L1.210|
;;;178    		{
;;;179    
;;;180    		}
;;;181    		else
;;;182    		{
;;;183    			temp_len = 8-temp;
0000b0  f1c80008          RSB      r0,r8,#8
0000b4  f00009ff          AND      r9,r0,#0xff
;;;184    			memset(COM_buffer.data+COM_buffer.len, 0, temp_len);
0000b8  f89d1110          LDRB     r1,[sp,#0x110]
0000bc  aa04              ADD      r2,sp,#0x10
0000be  1888              ADDS     r0,r1,r2
0000c0  4649              MOV      r1,r9
0000c2  f7fffffe          BL       __aeabi_memclr
;;;185    			COM_buffer.len += temp_len;
0000c6  f89d0110          LDRB     r0,[sp,#0x110]
0000ca  4448              ADD      r0,r0,r9
0000cc  b2c0              UXTB     r0,r0
0000ce  f88d0110          STRB     r0,[sp,#0x110]
                  |L1.210|
;;;186    		}
;;;187    		#endif
;;;188    		
;;;189    		comSendBuf(COM3, COM_buffer.data, COM_buffer.len);
0000d2  f89d2110          LDRB     r2,[sp,#0x110]
0000d6  a904              ADD      r1,sp,#0x10
0000d8  2002              MOVS     r0,#2
0000da  f7fffffe          BL       comSendBuf
;;;190    		App_printf("COM_buffer: ");
0000de  a00e              ADR      r0,|L1.280|
0000e0  f7fffffe          BL       App_printf
;;;191    		for(i=0; i<COM_buffer.len; i++)
0000e4  2700              MOVS     r7,#0
0000e6  e006              B        |L1.246|
                  |L1.232|
;;;192    		{
;;;193    			App_printf("%02x ",COM_buffer.data[i]);
0000e8  a804              ADD      r0,sp,#0x10
0000ea  5dc1              LDRB     r1,[r0,r7]
0000ec  a00e              ADR      r0,|L1.296|
0000ee  f7fffffe          BL       App_printf
0000f2  1c78              ADDS     r0,r7,#1              ;191
0000f4  b2c7              UXTB     r7,r0                 ;191
                  |L1.246|
0000f6  f89d0110          LDRB     r0,[sp,#0x110]        ;191
0000fa  42b8              CMP      r0,r7                 ;191
0000fc  dcf4              BGT      |L1.232|
;;;194    		}
;;;195    		App_printf("\r\n");
0000fe  a00c              ADR      r0,|L1.304|
000100  f7fffffe          BL       App_printf
                  |L1.260|
;;;196    	}
;;;197    	
;;;198    	return 1;
000104  2001              MOVS     r0,#1
;;;199    }
000106  b047              ADD      sp,sp,#0x11c
000108  e8bd83f0          POP      {r4-r9,pc}
                          ENDP

                  |L1.268|
00010c  050200            DCB      5,2,0
00010f  00                DCB      0
000110  00                DCB      0
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L1.276|
000114  00                DCB      0
000115  00                DCB      0
000116  0304              DCB      3,4
                  |L1.280|
000118  434f4d5f          DCB      "COM_buffer: ",0
00011c  62756666
000120  65723a20
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L1.296|
000128  25303278          DCB      "%02x ",0
00012c  2000    
00012e  00                DCB      0
00012f  00                DCB      0
                  |L1.304|
000130  0d0a00            DCB      "\r\n",0
000133  00                DCB      0

                          AREA ||i.Task_App||, CODE, READONLY, ALIGN=2

                  Task_App PROC
;;;10     
;;;11     void Task_App(void * pvParameters)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;12     {
000004  f6ad0d44          SUB      sp,sp,#0x844
;;;13     	uint8_t			RxBuf_FromUpdate[2100];
;;;14     	uint8_t			*pUpdate_data;
;;;15     	
;;;16     	uint8_t			function_code[2];
;;;17     	uint8_t			update_package_num = 0;
000008  f04f0900          MOV      r9,#0
;;;18     	uint8_t			update_package_finish = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
;;;19     	int 			ReceiveData_CRC;
;;;20         unsigned char	buf_CRC[2];
;;;21         unsigned int	CRC_Back;
;;;22     	
;;;23     	uint8_t			ack_result = 0;
000010  4680              MOV      r8,r0
;;;24     	uint8_t			read = 0;
000012  9000              STR      r0,[sp,#0]
;;;25     	int				count =0;
000014  4683              MOV      r11,r0
;;;26     	int				len = 0;
000016  2500              MOVS     r5,#0
;;;27         int				ret;
;;;28     	
;;;29     	while(comGetChar(COM3,&read))
000018  e009              B        |L2.46|
                  |L2.26|
;;;30     	{
;;;31     		RxBuf_FromUpdate[count++]=read;
00001a  f89d2000          LDRB     r2,[sp,#0]
00001e  4658              MOV      r0,r11
000020  f10b0b01          ADD      r11,r11,#1
000024  a904              ADD      r1,sp,#0x10
000026  540a              STRB     r2,[r1,r0]
;;;32     		vTaskDelay(1);
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       vTaskDelay
                  |L2.46|
00002e  4669              MOV      r1,sp                 ;29
000030  2002              MOVS     r0,#2                 ;29
000032  f7fffffe          BL       comGetChar
000036  2800              CMP      r0,#0                 ;29
000038  d1ef              BNE      |L2.26|
;;;33     	}
;;;34     		
;;;35     	if(count>2)
00003a  f1bb0f02          CMP      r11,#2
00003e  dd7d              BLE      |L2.316|
;;;36     	{
;;;37     		if( (RxBuf_FromUpdate[0] == 0x05) || (RxBuf_FromUpdate[1] == 0x02) )
000040  f89d0010          LDRB     r0,[sp,#0x10]
000044  2805              CMP      r0,#5
000046  d003              BEQ      |L2.80|
000048  f89d0011          LDRB     r0,[sp,#0x11]
00004c  2802              CMP      r0,#2
00004e  d13f              BNE      |L2.208|
                  |L2.80|
;;;38     		{
;;;39     			len = (RxBuf_FromUpdate[3]<<8) + RxBuf_FromUpdate[4];
000050  f89d0014          LDRB     r0,[sp,#0x14]
000054  f89d1013          LDRB     r1,[sp,#0x13]
000058  eb002501          ADD      r5,r0,r1,LSL #8
;;;40     			if( (RxBuf_FromUpdate[9+len+2] == 0x03) || (RxBuf_FromUpdate[9+len+3] == 0x04) )
00005c  f105000b          ADD      r0,r5,#0xb
000060  a904              ADD      r1,sp,#0x10
000062  5c08              LDRB     r0,[r1,r0]
000064  2803              CMP      r0,#3
000066  d004              BEQ      |L2.114|
000068  f105000c          ADD      r0,r5,#0xc
00006c  5c08              LDRB     r0,[r1,r0]
00006e  2804              CMP      r0,#4
000070  d129              BNE      |L2.198|
                  |L2.114|
;;;41     			{
;;;42     				function_code[0] = RxBuf_FromUpdate[5];
000072  f89d0015          LDRB     r0,[sp,#0x15]
000076  f88d000c          STRB     r0,[sp,#0xc]
;;;43     				function_code[1] = RxBuf_FromUpdate[6];
00007a  f89d0016          LDRB     r0,[sp,#0x16]
00007e  f88d000d          STRB     r0,[sp,#0xd]
;;;44     				update_package_num = RxBuf_FromUpdate[7];
000082  f89d9017          LDRB     r9,[sp,#0x17]
;;;45     				update_package_finish = RxBuf_FromUpdate[8];
000086  f89d0018          LDRB     r0,[sp,#0x18]
00008a  9002              STR      r0,[sp,#8]
;;;46     				pUpdate_data = RxBuf_FromUpdate + 5;
00008c  f10d0415          ADD      r4,sp,#0x15
;;;47     				
;;;48     				buf_CRC[0] = *(pUpdate_data+len);
000090  5d60              LDRB     r0,[r4,r5]
000092  f88d0004          STRB     r0,[sp,#4]
;;;49     				buf_CRC[1] = *(pUpdate_data+len+1);
000096  1960              ADDS     r0,r4,r5
000098  7840              LDRB     r0,[r0,#1]
00009a  f88d0005          STRB     r0,[sp,#5]
;;;50     				ReceiveData_CRC = ((buf_CRC[0]<<8) +(buf_CRC[1]));
00009e  f89d0005          LDRB     r0,[sp,#5]
0000a2  f89d1004          LDRB     r1,[sp,#4]
0000a6  eb002a01          ADD      r10,r0,r1,LSL #8
;;;51     				
;;;52     				CRC_Back = CRC16_XMODEM(pUpdate_data, len);
0000aa  4629              MOV      r1,r5
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       CRC16_XMODEM
0000b2  4607              MOV      r7,r0
;;;53     				if( CRC_Back == ReceiveData_CRC )
0000b4  4557              CMP      r7,r10
0000b6  d101              BNE      |L2.188|
;;;54     				{
;;;55     					ret = 0x01;
0000b8  2601              MOVS     r6,#1
0000ba  e00d              B        |L2.216|
                  |L2.188|
;;;56     				}
;;;57     				else
;;;58     				{
;;;59     					ret = 0x02;
0000bc  2602              MOVS     r6,#2
;;;60     					App_printf("CRC error...");
0000be  a03e              ADR      r0,|L2.440|
0000c0  f7fffffe          BL       App_printf
0000c4  e008              B        |L2.216|
                  |L2.198|
;;;61     				}
;;;62     			}
;;;63     			else
;;;64     			{
;;;65     				ret = 0x02;
0000c6  2602              MOVS     r6,#2
;;;66     				App_printf("have not find tail(0304) error...");
0000c8  a03f              ADR      r0,|L2.456|
0000ca  f7fffffe          BL       App_printf
0000ce  e003              B        |L2.216|
                  |L2.208|
;;;67     			}
;;;68     		}
;;;69     		else
;;;70     		{
;;;71     			ret = 0x02;
0000d0  2602              MOVS     r6,#2
;;;72     			App_printf("function code error...");
0000d2  a046              ADR      r0,|L2.492|
0000d4  f7fffffe          BL       App_printf
                  |L2.216|
;;;73     		}
;;;74     		
;;;75     		count = 0;
0000d8  f04f0b00          MOV      r11,#0
;;;76     		if(ret==1)
0000dc  2e01              CMP      r6,#1
0000de  d15b              BNE      |L2.408|
;;;77     		{
;;;78     			if( (function_code[0]==0x0E) && (function_code[1]==0x01) )
0000e0  f89d000c          LDRB     r0,[sp,#0xc]
0000e4  280e              CMP      r0,#0xe
0000e6  d130              BNE      |L2.330|
0000e8  f89d000d          LDRB     r0,[sp,#0xd]
0000ec  2801              CMP      r0,#1
0000ee  d12c              BNE      |L2.330|
;;;79     			{
;;;80     				//保存成功，返回成功，否则返回失败
;;;81     				ack_result = writeToFlash(pUpdate_data, len, APPLICATION_ADDRESS+update_package_num*APPLICATION_PACK_SIZE);
0000f0  4844              LDR      r0,|L2.516|
0000f2  eb0022c9          ADD      r2,r0,r9,LSL #11
0000f6  4629              MOV      r1,r5
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       writeToFlash
0000fe  f00008ff          AND      r8,r0,#0xff
;;;82     				if( ack_result == 0x00 )
000102  f1b80f00          CMP      r8,#0
000106  d105              BNE      |L2.276|
;;;83     				{
;;;84     					ack_result = 0xFD;
000108  f04f08fd          MOV      r8,#0xfd
;;;85     					App_printf("Firmware 1 save fail\r\n");
00010c  a03e              ADR      r0,|L2.520|
00010e  f7fffffe          BL       App_printf
000112  e004              B        |L2.286|
                  |L2.276|
;;;86     				}
;;;87     				else
;;;88     				{
;;;89     					ack_result = 0xFE;
000114  f04f08fe          MOV      r8,#0xfe
;;;90     					App_printf("Firmware 1 save sucessfully\r\n");
000118  a041              ADR      r0,|L2.544|
00011a  f7fffffe          BL       App_printf
                  |L2.286|
;;;91     				}
;;;92     				
;;;93     				Send_App(function_code, ack_result);
00011e  4641              MOV      r1,r8
000120  a803              ADD      r0,sp,#0xc
000122  f7fffffe          BL       Send_App
;;;94     				if( update_package_finish == 0x01 )
000126  9802              LDR      r0,[sp,#8]
000128  2801              CMP      r0,#1
00012a  d10b              BNE      |L2.324|
;;;95     				{
;;;96     					App_printf("App Update...");
00012c  a044              ADR      r0,|L2.576|
00012e  f7fffffe          BL       App_printf
;;;97     					vTaskDelay(1000);		//等待发送完成
000132  f44f707a          MOV      r0,#0x3e8
000136  f7fffffe          BL       vTaskDelay
;;;98     					
;;;99     					BootLoad_Jump();
00013a  e000              B        |L2.318|
                  |L2.316|
00013c  e033              B        |L2.422|
                  |L2.318|
00013e  f7fffffe          BL       BootLoad_Jump
000142  e032              B        |L2.426|
                  |L2.324|
;;;100    				}
;;;101    				else
;;;102    				{
;;;103    					update_package_finish = 0x00;
000144  2000              MOVS     r0,#0
000146  9002              STR      r0,[sp,#8]
000148  e02f              B        |L2.426|
                  |L2.330|
;;;104    				}
;;;105    			}
;;;106    			else	if( (function_code[0]==0x0F) && (function_code[1]==0x01) )
00014a  f89d000c          LDRB     r0,[sp,#0xc]
00014e  280f              CMP      r0,#0xf
000150  d12b              BNE      |L2.426|
000152  f89d000d          LDRB     r0,[sp,#0xd]
000156  2801              CMP      r0,#1
000158  d127              BNE      |L2.426|
;;;107    			{
;;;108    				System.CAN_ID[0] = *pUpdate_data;
00015a  7820              LDRB     r0,[r4,#0]
00015c  493c              LDR      r1,|L2.592|
00015e  7008              STRB     r0,[r1,#0]
;;;109    				Alarm_threshold.Transmitte_id[0] = System.CAN_ID[0];	//存在flash
000160  4608              MOV      r0,r1
000162  7800              LDRB     r0,[r0,#0]  ; System
000164  493b              LDR      r1,|L2.596|
000166  f8810026          STRB     r0,[r1,#0x26]
;;;110    
;;;111    				ack_result = InternalFlash_SaveData_1();
00016a  f7fffffe          BL       InternalFlash_SaveData_1
00016e  f00008ff          AND      r8,r0,#0xff
;;;112    				if( ack_result == 0x00 )
000172  f1b80f00          CMP      r8,#0
000176  d105              BNE      |L2.388|
;;;113    				{
;;;114    					ack_result = 0xFD;
000178  f04f08fd          MOV      r8,#0xfd
;;;115    					App_printf("Set System ID fail");
00017c  a036              ADR      r0,|L2.600|
00017e  f7fffffe          BL       App_printf
000182  e004              B        |L2.398|
                  |L2.388|
;;;116    				}
;;;117    				else
;;;118    				{
;;;119    					ack_result = 0xFE;
000184  f04f08fe          MOV      r8,#0xfe
;;;120    					App_printf("Set System ID sucessfully");
000188  a038              ADR      r0,|L2.620|
00018a  f7fffffe          BL       App_printf
                  |L2.398|
;;;121    				}
;;;122    				
;;;123    				Send_App(function_code, ack_result);
00018e  4641              MOV      r1,r8
000190  a803              ADD      r0,sp,#0xc
000192  f7fffffe          BL       Send_App
000196  e008              B        |L2.426|
                  |L2.408|
;;;124    			}
;;;125    		}
;;;126    		else
;;;127    		{
;;;128    			ack_result = 0xFD;
000198  f04f08fd          MOV      r8,#0xfd
;;;129    			Send_App(function_code, ack_result);
00019c  4641              MOV      r1,r8
00019e  a803              ADD      r0,sp,#0xc
0001a0  f7fffffe          BL       Send_App
0001a4  e001              B        |L2.426|
                  |L2.422|
;;;130    		}
;;;131    	}
;;;132    	else
;;;133    	{
;;;134    		count = 0;
0001a6  f04f0b00          MOV      r11,#0
                  |L2.426|
;;;135    	}
;;;136    	
;;;137    	vTaskDelay(100);
0001aa  2064              MOVS     r0,#0x64
0001ac  f7fffffe          BL       vTaskDelay
;;;138    }
0001b0  f60d0d44          ADD      sp,sp,#0x844
0001b4  e8bd8ff0          POP      {r4-r11,pc}
;;;139    
                          ENDP

                  |L2.440|
0001b8  43524320          DCB      "CRC error...",0
0001bc  6572726f
0001c0  722e2e2e
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L2.456|
0001c8  68617665          DCB      "have not find tail(0304) error...",0
0001cc  206e6f74
0001d0  2066696e
0001d4  64207461
0001d8  696c2830
0001dc  33303429
0001e0  20657272
0001e4  6f722e2e
0001e8  2e00    
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L2.492|
0001ec  66756e63          DCB      "function code error...",0
0001f0  74696f6e
0001f4  20636f64
0001f8  65206572
0001fc  726f722e
000200  2e2e00  
000203  00                DCB      0
                  |L2.516|
                          DCD      0x08002000
                  |L2.520|
000208  4669726d          DCB      "Firmware 1 save fail\r\n",0
00020c  77617265
000210  20312073
000214  61766520
000218  6661696c
00021c  0d0a00  
00021f  00                DCB      0
                  |L2.544|
000220  4669726d          DCB      "Firmware 1 save sucessfully\r\n",0
000224  77617265
000228  20312073
00022c  61766520
000230  73756365
000234  73736675
000238  6c6c790d
00023c  0a00    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L2.576|
000240  41707020          DCB      "App Update...",0
000244  55706461
000248  74652e2e
00024c  2e00    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L2.592|
                          DCD      System
                  |L2.596|
                          DCD      Alarm_threshold
                  |L2.600|
000258  53657420          DCB      "Set System ID fail",0
00025c  53797374
000260  656d2049
000264  44206661
000268  696c00  
00026b  00                DCB      0
                  |L2.620|
00026c  53657420          DCB      "Set System ID sucessfully",0
000270  53797374
000274  656d2049
000278  44207375
00027c  63657373
000280  66756c6c
000284  7900    
000286  00                DCB      0
000287  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTask_App
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Task\\Task_Firmware_Update.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_Task_Firmware_Update_c_Task_App____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_Task_Firmware_Update_c_Task_App____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_Task_Firmware_Update_c_Task_App____REVSH|
#line 128
|__asm___22_Task_Firmware_Update_c_Task_App____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
