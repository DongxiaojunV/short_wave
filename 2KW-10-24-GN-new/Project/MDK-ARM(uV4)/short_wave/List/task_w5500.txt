; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\task_w5500.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\task_w5500.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\task_w5500.crf Task_W5500.c]
                          THUMB

                          AREA ||i.Socket2_Pack_Creat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  Socket2_Pack_Creat PROC
;;;136    /*SOCKET2的答复包创建*/
;;;137    void Socket2_Pack_Creat(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;138    {
;;;139    	socket2.C_IP=AP_ICC(IP_Addr);
000002  4815              LDR      r0,|L1.88|
000004  f7fffffe          BL       AP_ICC
000008  4914              LDR      r1,|L1.92|
00000a  6008              STR      r0,[r1,#0]  ; socket2
;;;140    	socket2.Socket0_Port=P_ICC(S0_Port);
00000c  4814              LDR      r0,|L1.96|
00000e  f7fffffe          BL       P_ICC
000012  4912              LDR      r1,|L1.92|
000014  6048              STR      r0,[r1,#4]  ; socket2
;;;141    	socket2.Socket1_Port=P_ICC(S1_Port);
000016  4813              LDR      r0,|L1.100|
000018  f7fffffe          BL       P_ICC
00001c  490f              LDR      r1,|L1.92|
00001e  6088              STR      r0,[r1,#8]  ; socket2
;;;142    	socket2.Socket2_Port=P_ICC(S2_Port);
000020  4811              LDR      r0,|L1.104|
000022  f7fffffe          BL       P_ICC
000026  490d              LDR      r1,|L1.92|
000028  60c8              STR      r0,[r1,#0xc]  ; socket2
;;;143    	socket2.Stm32_ID=Array_ch(STM32_ID,12);
00002a  210c              MOVS     r1,#0xc
00002c  480f              LDR      r0,|L1.108|
00002e  f7fffffe          BL       Array_ch
000032  490a              LDR      r1,|L1.92|
000034  6108              STR      r0,[r1,#0x10]  ; socket2
;;;144    	sprintf(socket2.Buff_Pack,"IP:%s;Port0:%s;Port1:%s;Port2:%s;Stm32_ID:%s;",socket2.C_IP,socket2.Socket0_Port,socket2.Socket1_Port,socket2.Socket2_Port,socket2.Stm32_ID);
000036  4608              MOV      r0,r1
000038  6900              LDR      r0,[r0,#0x10]  ; socket2
00003a  68c9              LDR      r1,[r1,#0xc]  ; socket2
00003c  4a07              LDR      r2,|L1.92|
00003e  6892              LDR      r2,[r2,#8]  ; socket2
000040  e9cd2100          STRD     r2,r1,[sp,#0]
000044  9002              STR      r0,[sp,#8]
000046  4805              LDR      r0,|L1.92|
000048  6843              LDR      r3,[r0,#4]  ; socket2
00004a  6802              LDR      r2,[r0,#0]  ; socket2
00004c  a108              ADR      r1,|L1.112|
00004e  3014              ADDS     r0,r0,#0x14
000050  f7fffffe          BL       __2sprintf
;;;145    }
000054  bd0e              POP      {r1-r3,pc}
;;;146    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      IP_Addr
                  |L1.92|
                          DCD      socket2
                  |L1.96|
                          DCD      S0_Port
                  |L1.100|
                          DCD      S1_Port
                  |L1.104|
                          DCD      S2_Port
                  |L1.108|
                          DCD      STM32_ID
                  |L1.112|
000070  49503a25          DCB      "IP:%s;Port0:%s;Port1:%s;Port2:%s;Stm32_ID:%s;",0
000074  733b506f
000078  7274303a
00007c  25733b50
000080  6f727431
000084  3a25733b
000088  506f7274
00008c  323a2573
000090  3b53746d
000094  33325f49
000098  443a2573
00009c  3b00    
00009e  00                DCB      0
00009f  00                DCB      0

                          AREA ||i.W5500_APP||, CODE, READONLY, ALIGN=2

                  W5500_APP PROC
;;;16     
;;;17     void W5500_APP(void * pvParameters)
000000  b08e              SUB      sp,sp,#0x38
;;;18     {	
;;;19     	uint16_t i=0;
000002  2400              MOVS     r4,#0
;;;20     	uint16_t s0_len=0,s1_len=0;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;21     	uint16_t S0_cut_count=0;
000008  2700              MOVS     r7,#0
;;;22     	socket2.Pack_Creat_Mark=0;		//构建包标志位，上电一次构建一次就行了
00000a  2000              MOVS     r0,#0
00000c  4977              LDR      r1,|L2.492|
00000e  f8810078          STRB     r0,[r1,#0x78]
;;;23     	
;;;24         while(1)
000012  e0ea              B        |L2.490|
                  |L2.20|
;;;25     	{
;;;26     		
;;;27     	  W5500_Socket_Set();	//W5500端口初始化配置
000014  f7fffffe          BL       W5500_Socket_Set
;;;28     		
;;;29     		if(W5500_Interrupt)	//如果中断标志为:1
000018  4875              LDR      r0,|L2.496|
00001a  7800              LDRB     r0,[r0,#0]  ; W5500_Interrupt
00001c  b148              CBZ      r0,|L2.50|
;;;30     	  {
;;;31     	   	W5500_Process();	//W5500处理程序框架
00001e  f7fffffe          BL       W5500_Process
;;;32     			if(Updata_time_flag==0)
000022  4874              LDR      r0,|L2.500|
000024  7800              LDRB     r0,[r0,#0]  ; Updata_time_flag
000026  b920              CBNZ     r0,|L2.50|
;;;33     			{
;;;34     					Updata_time_flag++;
000028  4872              LDR      r0,|L2.500|
00002a  7800              LDRB     r0,[r0,#0]  ; Updata_time_flag
00002c  1c40              ADDS     r0,r0,#1
00002e  4971              LDR      r1,|L2.500|
000030  7008              STRB     r0,[r1,#0]
                  |L2.50|
;;;35     			}
;;;36     	  }
;;;37     		if((Read_W5500_1Byte(PHYCFGR)&LINK)==0)
000032  202e              MOVS     r0,#0x2e
000034  f7fffffe          BL       Read_W5500_1Byte
000038  f0000001          AND      r0,r0,#1
00003c  b940              CBNZ     r0,|L2.80|
;;;38     		{
;;;39     			S0_State=0;
00003e  2000              MOVS     r0,#0
000040  496d              LDR      r1,|L2.504|
000042  7008              STRB     r0,[r1,#0]
;;;40     			S1_State=0;
000044  496d              LDR      r1,|L2.508|
000046  7008              STRB     r0,[r1,#0]
;;;41     			S2_State=0;
000048  496d              LDR      r1,|L2.512|
00004a  7008              STRB     r0,[r1,#0]
;;;42     			S3_State=0;
00004c  496d              LDR      r1,|L2.516|
00004e  7008              STRB     r0,[r1,#0]
                  |L2.80|
;;;43     		}
;;;44     		else
;;;45     		{
;;;46     			//保留
;;;47     		}
;;;48     		
;;;49     		if(Read_W5500_SOCK_1Byte(0,Sn_SR)==SOCK_ESTABLISHED)
000050  2103              MOVS     r1,#3
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       Read_W5500_SOCK_1Byte
000058  2817              CMP      r0,#0x17
00005a  d107              BNE      |L2.108|
;;;50     		{
;;;51     			S0_cut_count++;
00005c  1c78              ADDS     r0,r7,#1
00005e  b287              UXTH     r7,r0
;;;52     			if(S0_cut_count>=100)
000060  2f64              CMP      r7,#0x64
000062  db03              BLT      |L2.108|
;;;53     			{
;;;54     				S0_cut_count=0;
000064  2700              MOVS     r7,#0
;;;55     				S0_State=0;
000066  2000              MOVS     r0,#0
000068  4963              LDR      r1,|L2.504|
00006a  7008              STRB     r0,[r1,#0]
                  |L2.108|
;;;56     			}
;;;57     		}
;;;58     		if((S0_Data & S_RECEIVE) == S_RECEIVE)		//如果Socket0接收到数据
00006c  4866              LDR      r0,|L2.520|
00006e  7800              LDRB     r0,[r0,#0]  ; S0_Data
000070  f0000001          AND      r0,r0,#1
000074  b1c0              CBZ      r0,|L2.168|
;;;59     		{
;;;60     			s0_len=0;
000076  2500              MOVS     r5,#0
;;;61     			S0_Data&=~S_RECEIVE;					//处理标志位
000078  4863              LDR      r0,|L2.520|
00007a  7800              LDRB     r0,[r0,#0]  ; S0_Data
00007c  f0200001          BIC      r0,r0,#1
000080  4961              LDR      r1,|L2.520|
000082  7008              STRB     r0,[r1,#0]
;;;62     			s0_len=Read_SOCK_Data_Buffer(0,Socket0_Rx_Buffer);	//接收数据，返回整个数据包长度
000084  4961              LDR      r1,|L2.524|
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       Read_SOCK_Data_Buffer
00008c  4605              MOV      r5,r0
;;;63     			
;;;64     			for(i=0; i<s0_len; i++)
00008e  2400              MOVS     r4,#0
000090  e005              B        |L2.158|
                  |L2.146|
;;;65     			{
;;;66     				RxBuf_FromPC.data[i] = Socket0_Rx_Buffer[i];
000092  485e              LDR      r0,|L2.524|
000094  5d00              LDRB     r0,[r0,r4]
000096  495e              LDR      r1,|L2.528|
000098  5508              STRB     r0,[r1,r4]
00009a  1c60              ADDS     r0,r4,#1              ;64
00009c  b284              UXTH     r4,r0                 ;64
                  |L2.158|
00009e  42ac              CMP      r4,r5                 ;64
0000a0  dbf7              BLT      |L2.146|
;;;67     			}
;;;68     			W5500_rx_buf_len=s0_len;
0000a2  485c              LDR      r0,|L2.532|
0000a4  8005              STRH     r5,[r0,#0]
;;;69     			S0_cut_count=0;
0000a6  2700              MOVS     r7,#0
                  |L2.168|
;;;70     		}
;;;71     		
;;;72     		if((S1_Data & S_RECEIVE) == S_RECEIVE)		//如果Socket1接收到数据
0000a8  485b              LDR      r0,|L2.536|
0000aa  7800              LDRB     r0,[r0,#0]  ; S1_Data
0000ac  f0000001          AND      r0,r0,#1
0000b0  b1b8              CBZ      r0,|L2.226|
;;;73     		{
;;;74     			s1_len=0;
0000b2  2600              MOVS     r6,#0
;;;75     			S1_Data&=~S_RECEIVE;					//处理标志位
0000b4  4858              LDR      r0,|L2.536|
0000b6  7800              LDRB     r0,[r0,#0]  ; S1_Data
0000b8  f0200001          BIC      r0,r0,#1
0000bc  4956              LDR      r1,|L2.536|
0000be  7008              STRB     r0,[r1,#0]
;;;76     			s1_len=Read_SOCK_Data_Buffer(1,Socket1_Rx_Buffer);	//接收数据，返回整个数据包长度
0000c0  4956              LDR      r1,|L2.540|
0000c2  2001              MOVS     r0,#1
0000c4  f7fffffe          BL       Read_SOCK_Data_Buffer
0000c8  4606              MOV      r6,r0
;;;77     			
;;;78     			for(i=0;i<s1_len;i++)
0000ca  2400              MOVS     r4,#0
0000cc  e005              B        |L2.218|
                  |L2.206|
;;;79     			{
;;;80     				RxBuf[i]=Socket1_Rx_Buffer[i];
0000ce  4853              LDR      r0,|L2.540|
0000d0  5d00              LDRB     r0,[r0,r4]
0000d2  4953              LDR      r1,|L2.544|
0000d4  5508              STRB     r0,[r1,r4]
0000d6  1c60              ADDS     r0,r4,#1              ;78
0000d8  b284              UXTH     r4,r0                 ;78
                  |L2.218|
0000da  42b4              CMP      r4,r6                 ;78
0000dc  dbf7              BLT      |L2.206|
;;;81     			}
;;;82     			RxBuf_len=s1_len;
0000de  4851              LDR      r0,|L2.548|
0000e0  8006              STRH     r6,[r0,#0]
                  |L2.226|
;;;83     		}
;;;84     		
;;;85     		if((S2_Data & S_RECEIVE) == S_RECEIVE)		//如果Socket2接收到数据
0000e2  4851              LDR      r0,|L2.552|
0000e4  7800              LDRB     r0,[r0,#0]  ; S2_Data
0000e6  f0000001          AND      r0,r0,#1
0000ea  b398              CBZ      r0,|L2.340|
;;;86     		{
;;;87     			S2_Data&=~S_RECEIVE;					//处理标志位
0000ec  484e              LDR      r0,|L2.552|
0000ee  7800              LDRB     r0,[r0,#0]  ; S2_Data
0000f0  f0200001          BIC      r0,r0,#1
0000f4  494c              LDR      r1,|L2.552|
0000f6  7008              STRB     r0,[r1,#0]
;;;88     			Read_SOCK_Data_Buffer(2,Socket2_Rx_Buffer);	//接收数据，返回整个数据包长度	
0000f8  494c              LDR      r1,|L2.556|
0000fa  2002              MOVS     r0,#2
0000fc  f7fffffe          BL       Read_SOCK_Data_Buffer
;;;89     			
;;;90     			UDP_DIPR[0] = Socket2_Rx_Buffer[0];//收到的是发送方的IP和端口
000100  484a              LDR      r0,|L2.556|
000102  7800              LDRB     r0,[r0,#0]  ; Socket2_Rx_Buffer
000104  494a              LDR      r1,|L2.560|
000106  7008              STRB     r0,[r1,#0]
;;;91     			UDP_DIPR[1] = Socket2_Rx_Buffer[1];
000108  4848              LDR      r0,|L2.556|
00010a  7840              LDRB     r0,[r0,#1]  ; Socket2_Rx_Buffer
00010c  7048              STRB     r0,[r1,#1]
;;;92     			UDP_DIPR[2] = Socket2_Rx_Buffer[2];
00010e  4847              LDR      r0,|L2.556|
000110  7880              LDRB     r0,[r0,#2]  ; Socket2_Rx_Buffer
000112  7088              STRB     r0,[r1,#2]
;;;93     			UDP_DIPR[3] = Socket2_Rx_Buffer[3];
000114  4845              LDR      r0,|L2.556|
000116  78c0              LDRB     r0,[r0,#3]  ; Socket2_Rx_Buffer
000118  70c8              STRB     r0,[r1,#3]
;;;94     		
;;;95     			UDP_DPORT[0] = Socket2_Rx_Buffer[4];
00011a  4844              LDR      r0,|L2.556|
00011c  7900              LDRB     r0,[r0,#4]  ; Socket2_Rx_Buffer
00011e  4945              LDR      r1,|L2.564|
000120  7008              STRB     r0,[r1,#0]
;;;96     			UDP_DPORT[1] = Socket2_Rx_Buffer[5];
000122  4842              LDR      r0,|L2.556|
000124  7940              LDRB     r0,[r0,#5]  ; Socket2_Rx_Buffer
000126  7048              STRB     r0,[r1,#1]
;;;97     			
;;;98     			if(socket2.Pack_Creat_Mark==0)
000128  4830              LDR      r0,|L2.492|
00012a  f8900078          LDRB     r0,[r0,#0x78]  ; socket2
00012e  b928              CBNZ     r0,|L2.316|
;;;99     			{
;;;100    				Socket2_Pack_Creat();
000130  f7fffffe          BL       Socket2_Pack_Creat
;;;101    				socket2.Pack_Creat_Mark=1;
000134  2001              MOVS     r0,#1
000136  492d              LDR      r1,|L2.492|
000138  f8810078          STRB     r0,[r1,#0x78]
                  |L2.316|
;;;102    			}
;;;103    			
;;;104    			Socketn_Char_Send(2,socket2.Buff_Pack,strlen(socket2.Buff_Pack));
00013c  482b              LDR      r0,|L2.492|
00013e  3014              ADDS     r0,r0,#0x14
000140  f7fffffe          BL       strlen
000144  f00008ff          AND      r8,r0,#0xff
000148  4642              MOV      r2,r8
00014a  4928              LDR      r1,|L2.492|
00014c  3114              ADDS     r1,r1,#0x14
00014e  2002              MOVS     r0,#2
000150  f7fffffe          BL       Socketn_Char_Send
                  |L2.340|
;;;105    		}
;;;106    		
;;;107    		if((S3_Data & S_RECEIVE) == S_RECEIVE)		//如果Socket3接收到数据
000154  4838              LDR      r0,|L2.568|
000156  7800              LDRB     r0,[r0,#0]  ; S3_Data
000158  f0000001          AND      r0,r0,#1
00015c  b398              CBZ      r0,|L2.454|
;;;108    		{
;;;109    			S3_Data&=~S_RECEIVE;					//处理标志位
00015e  4836              LDR      r0,|L2.568|
000160  7800              LDRB     r0,[r0,#0]  ; S3_Data
000162  f0200001          BIC      r0,r0,#1
000166  4934              LDR      r1,|L2.568|
000168  7008              STRB     r0,[r1,#0]
;;;110    			uint32_t local_timestamp; 
;;;111    			ntp_packet packet ;
;;;112    			struct tm * Net_time; 
;;;113    			
;;;114    			Read_SOCK_Data_Buffer(3,Socket3_Rx_Buffer);	//接收数据，返回整个数据包长度
00016a  4934              LDR      r1,|L2.572|
00016c  2003              MOVS     r0,#3
00016e  f7fffffe          BL       Read_SOCK_Data_Buffer
;;;115    			packet.txTm_s = Socket3_Rx_Buffer[40]<<24 | Socket3_Rx_Buffer[41]<<16|Socket3_Rx_Buffer[42]<<8 |Socket3_Rx_Buffer[43]; 
000172  4832              LDR      r0,|L2.572|
000174  f8900028          LDRB     r0,[r0,#0x28]  ; Socket3_Rx_Buffer
000178  0600              LSLS     r0,r0,#24
00017a  4930              LDR      r1,|L2.572|
00017c  f8911029          LDRB     r1,[r1,#0x29]  ; Socket3_Rx_Buffer
000180  ea404001          ORR      r0,r0,r1,LSL #16
000184  492d              LDR      r1,|L2.572|
000186  f891102a          LDRB     r1,[r1,#0x2a]  ; Socket3_Rx_Buffer
00018a  ea402001          ORR      r0,r0,r1,LSL #8
00018e  492b              LDR      r1,|L2.572|
000190  f891102b          LDRB     r1,[r1,#0x2b]  ; Socket3_Rx_Buffer
000194  4308              ORRS     r0,r0,r1
000196  900b              STR      r0,[sp,#0x2c]
;;;116    			
;;;117    			local_timestamp = packet.txTm_s - NTP_TIMESTAMP_DELTA;//减去1970和1900的差值
000198  4929              LDR      r1,|L2.576|
00019a  980b              LDR      r0,[sp,#0x2c]
00019c  1a40              SUBS     r0,r0,r1
00019e  900d              STR      r0,[sp,#0x34]
;;;118    			local_timestamp +=SEC_TIME_ZONE; //加上北京的时间差，GMT+8
0001a0  980d              LDR      r0,[sp,#0x34]
0001a2  f50040e1          ADD      r0,r0,#0x7080
0001a6  900d              STR      r0,[sp,#0x34]
;;;119    			Net_time = localtime(&local_timestamp); //秒数转换位标准时间，在time.h中
0001a8  a80d              ADD      r0,sp,#0x34
0001aa  f7fffffe          BL       localtime
0001ae  4680              MOV      r8,r0
;;;120    			if(Net_time->tm_year+1900==2036)		//过滤掉第一次询问时，返回的2036数据
0001b0  f8d80014          LDR      r0,[r8,#0x14]
0001b4  f200706c          ADD      r0,r0,#0x76c
0001b8  f24071f4          MOV      r1,#0x7f4
0001bc  4288              CMP      r0,r1
0001be  d103              BNE      |L2.456|
;;;121    			{
;;;122    					NTP_Pack_Send();
0001c0  f7fffffe          BL       NTP_Pack_Send
0001c4  e00d              B        |L2.482|
                  |L2.454|
0001c6  e00d              B        |L2.484|
                  |L2.456|
;;;123    			}
;;;124    			else
;;;125    			{
;;;126    				g_inquire_stamp=local_timestamp;			//为了和以往协议同步，从1970年开始计算
0001c8  491e              LDR      r1,|L2.580|
0001ca  980d              LDR      r0,[sp,#0x34]
0001cc  6008              STR      r0,[r1,#0]  ; g_inquire_stamp
;;;127    				g_stamp_distance = g_inquire_stamp - RTC_GetCounter();	//获取本地时间与服务器时间的差值
0001ce  f7fffffe          BL       RTC_GetCounter
0001d2  491c              LDR      r1,|L2.580|
0001d4  6809              LDR      r1,[r1,#0]  ; g_inquire_stamp
0001d6  1a08              SUBS     r0,r1,r0
0001d8  491b              LDR      r1,|L2.584|
0001da  6008              STR      r0,[r1,#0]  ; g_stamp_distance
;;;128    				System.time_update_flag = 0x01;//更新了时间标志位
0001dc  2001              MOVS     r0,#1
0001de  491b              LDR      r1,|L2.588|
0001e0  7288              STRB     r0,[r1,#0xa]
                  |L2.482|
;;;129    			}
;;;130    		}
0001e2  bf00              NOP      
                  |L2.484|
;;;131    		vTaskDelay(100);
0001e4  2064              MOVS     r0,#0x64
0001e6  f7fffffe          BL       vTaskDelay
                  |L2.490|
0001ea  e713              B        |L2.20|
;;;132    	}
;;;133        		
;;;134    }
;;;135    
                          ENDP

                  |L2.492|
                          DCD      socket2
                  |L2.496|
                          DCD      W5500_Interrupt
                  |L2.500|
                          DCD      Updata_time_flag
                  |L2.504|
                          DCD      S0_State
                  |L2.508|
                          DCD      S1_State
                  |L2.512|
                          DCD      S2_State
                  |L2.516|
                          DCD      S3_State
                  |L2.520|
                          DCD      S0_Data
                  |L2.524|
                          DCD      Socket0_Rx_Buffer
                  |L2.528|
                          DCD      RxBuf_FromPC
                  |L2.532|
                          DCD      W5500_rx_buf_len
                  |L2.536|
                          DCD      S1_Data
                  |L2.540|
                          DCD      Socket1_Rx_Buffer
                  |L2.544|
                          DCD      RxBuf
                  |L2.548|
                          DCD      RxBuf_len
                  |L2.552|
                          DCD      S2_Data
                  |L2.556|
                          DCD      Socket2_Rx_Buffer
                  |L2.560|
                          DCD      UDP_DIPR
                  |L2.564|
                          DCD      UDP_DPORT
                  |L2.568|
                          DCD      S3_Data
                  |L2.572|
                          DCD      Socket3_Rx_Buffer
                  |L2.576|
                          DCD      0x83aa7e80
                  |L2.580|
                          DCD      g_inquire_stamp
                  |L2.584|
                          DCD      g_stamp_distance
                  |L2.588|
                          DCD      System

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  socket2
                          %        121

                          AREA ||.data||, DATA, ALIGN=2

                  xW5500Task_APP
                          DCD      0x00000000
                  W5500_rx_buf_len
000004  0000              DCW      0x0000
                  RxBuf_len
000006  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "Task_W5500.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_Task_W5500_c_f50ed452____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_Task_W5500_c_f50ed452____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_Task_W5500_c_f50ed452____REVSH|
#line 128
|__asm___12_Task_W5500_c_f50ed452____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
