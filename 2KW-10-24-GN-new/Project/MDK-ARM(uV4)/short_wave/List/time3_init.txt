; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\short_wave\obj\time3_init.o --asm_dir=.\short_wave\List\ --list_dir=.\short_wave\List\ --depend=.\short_wave\obj\time3_init.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\User\adc -I..\..\User\rtc -I..\..\User\internal_flash -I..\..\User\iwdg -I..\..\Task -I..\..\User\can -I..\..\User\firmware_upgrade -I..\..\User\STMFLASH -I..\..\User\IAP -I.\RTE\_Short_Wave -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\short_wave\obj\time3_init.crf Time3_INIT.c]
                          THUMB

                          AREA ||i.Get_STM32_ID||, CODE, READONLY, ALIGN=2

                  Get_STM32_ID PROC
;;;230    /*读取STM32ID号*/
;;;231    void Get_STM32_ID(void)
000000  b510              PUSH     {r4,lr}
;;;232    {
;;;233        u32 temp0,temp1,temp2;
;;;234    temp0 = *(__IO u32*)(0x1FFFF7E8);    //产品唯一身份标识寄存器（96位）
000002  4b0e              LDR      r3,|L1.60|
000004  681a              LDR      r2,[r3,#0]
;;;235        temp1 = *(__IO u32*)(0x1FFFF7EC);
000006  1d1b              ADDS     r3,r3,#4
000008  6818              LDR      r0,[r3,#0]
;;;236    temp2 = *(__IO u32*)(0x1FFFF7F0);
00000a  1d1b              ADDS     r3,r3,#4
00000c  6819              LDR      r1,[r3,#0]
;;;237                                      
;;;238    //ID码地址： 0x1FFFF7E8   0x1FFFF7EC  0x1FFFF7F0 ，只需要读取这个地址中的数据就可以了。
;;;239     
;;;240        STM32_ID[0] = (u8)(temp0 & 0x000000FF);
00000e  4c0c              LDR      r4,|L1.64|
000010  7022              STRB     r2,[r4,#0]
;;;241        STM32_ID[1] = (u8)((temp0 & 0x0000FF00)>>8);
000012  0a13              LSRS     r3,r2,#8
000014  7063              STRB     r3,[r4,#1]
;;;242        STM32_ID[2] = (u8)((temp0 & 0x00FF0000)>>16);
000016  0c13              LSRS     r3,r2,#16
000018  70a3              STRB     r3,[r4,#2]
;;;243        STM32_ID[3] = (u8)((temp0 & 0xFF000000)>>24);
00001a  0e13              LSRS     r3,r2,#24
00001c  70e3              STRB     r3,[r4,#3]
;;;244        STM32_ID[4] = (u8)(temp1 & 0x000000FF);
00001e  7120              STRB     r0,[r4,#4]
;;;245        STM32_ID[5] = (u8)((temp1 & 0x0000FF00)>>8);
000020  0a03              LSRS     r3,r0,#8
000022  7163              STRB     r3,[r4,#5]
;;;246        STM32_ID[6] = (u8)((temp1 & 0x00FF0000)>>16);
000024  0c03              LSRS     r3,r0,#16
000026  71a3              STRB     r3,[r4,#6]
;;;247        STM32_ID[7] = (u8)((temp1 & 0xFF000000)>>24);
000028  0e03              LSRS     r3,r0,#24
00002a  71e3              STRB     r3,[r4,#7]
;;;248        STM32_ID[8] = (u8)(temp2 & 0x000000FF);
00002c  7221              STRB     r1,[r4,#8]
;;;249        STM32_ID[9] = (u8)((temp2 & 0x0000FF00)>>8);
00002e  0a0b              LSRS     r3,r1,#8
000030  7263              STRB     r3,[r4,#9]
;;;250        STM32_ID[10] = (u8)((temp2 & 0x00FF0000)>>16);
000032  0c0b              LSRS     r3,r1,#16
000034  72a3              STRB     r3,[r4,#0xa]
;;;251        STM32_ID[11] = (u8)((temp2 & 0xFF000000)>>24);         
000036  0e0b              LSRS     r3,r1,#24
000038  72e3              STRB     r3,[r4,#0xb]
;;;252    }
00003a  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  |L1.60|
                          DCD      0x1ffff7e8
                  |L1.64|
                          DCD      STM32_ID

                          AREA ||i.Load_Net_Parameters||, CODE, READONLY, ALIGN=2

                  Load_Net_Parameters PROC
;;;36     *******************************************************************************/
;;;37     void Load_Net_Parameters(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;38     {
;;;39     	uint32_t Address=0;
000002  2400              MOVS     r4,#0
;;;40     	uint8_t tx_ip[8];
;;;41     	uint8_t tx_port[4];
;;;42     	Address=Ip_Port_Addr;
000004  4c5b              LDR      r4,|L2.372|
;;;43     	FLASH_Read(Address,tx_ip,8);//读出IP地址16位
000006  2208              MOVS     r2,#8
000008  a901              ADD      r1,sp,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       FLASH_Read
;;;44     	FLASH_Read(Address+16,tx_port,4);//读出端口号16位
000010  2204              MOVS     r2,#4
000012  4669              MOV      r1,sp
000014  f1040010          ADD      r0,r4,#0x10
000018  f7fffffe          BL       FLASH_Read
;;;45     
;;;46     	Sub_Mask[0]=255;//加载子网掩码
00001c  20ff              MOVS     r0,#0xff
00001e  4956              LDR      r1,|L2.376|
000020  7008              STRB     r0,[r1,#0]
;;;47     	Sub_Mask[1]=255;
000022  7048              STRB     r0,[r1,#1]
;;;48     	Sub_Mask[2]=255;
000024  7088              STRB     r0,[r1,#2]
;;;49     	Sub_Mask[3]=0;
000026  2000              MOVS     r0,#0
000028  70c8              STRB     r0,[r1,#3]
;;;50     
;;;51     	Get_STM32_ID();						//获取stm32ID号
00002a  f7fffffe          BL       Get_STM32_ID
;;;52     	if(STM32_ID[6]%2!=0)
00002e  4953              LDR      r1,|L2.380|
000030  7988              LDRB     r0,[r1,#6]  ; STM32_ID
000032  eb0071d0          ADD      r1,r0,r0,LSR #31
000036  1049              ASRS     r1,r1,#1
000038  eba00141          SUB      r1,r0,r1,LSL #1
00003c  b121              CBZ      r1,|L2.72|
;;;53     	{
;;;54     			STM32_ID[6]+=0x01;
00003e  484f              LDR      r0,|L2.380|
000040  7980              LDRB     r0,[r0,#6]  ; STM32_ID
000042  1c40              ADDS     r0,r0,#1
000044  494d              LDR      r1,|L2.380|
000046  7188              STRB     r0,[r1,#6]
                  |L2.72|
;;;55     	}
;;;56     	for(uint8_t i=0;i<6;i++)
000048  2000              MOVS     r0,#0
00004a  e006              B        |L2.90|
                  |L2.76|
;;;57     	{
;;;58     		Phy_Addr[i]=STM32_ID[i+6];
00004c  4a4b              LDR      r2,|L2.380|
00004e  1d81              ADDS     r1,r0,#6
000050  5c51              LDRB     r1,[r2,r1]
000052  4a4b              LDR      r2,|L2.384|
000054  5411              STRB     r1,[r2,r0]
000056  1c41              ADDS     r1,r0,#1              ;56
000058  b2c8              UXTB     r0,r1                 ;56
                  |L2.90|
00005a  2806              CMP      r0,#6                 ;56
00005c  dbf6              BLT      |L2.76|
;;;59     	}
;;;60     	
;;;61     	if(tx_ip[0]==0xFF||tx_ip[2]==0xFF||tx_ip[4]==0xFF||tx_ip[6]==0xFF||tx_port[0]==0xFF||tx_port[2]==0xFF \
00005e  f89d0004          LDRB     r0,[sp,#4]
000062  28ff              CMP      r0,#0xff
000064  d025              BEQ      |L2.178|
000066  f89d0006          LDRB     r0,[sp,#6]
00006a  28ff              CMP      r0,#0xff
00006c  d021              BEQ      |L2.178|
00006e  f89d0008          LDRB     r0,[sp,#8]
000072  28ff              CMP      r0,#0xff
000074  d01d              BEQ      |L2.178|
000076  f89d000a          LDRB     r0,[sp,#0xa]
00007a  28ff              CMP      r0,#0xff
00007c  d019              BEQ      |L2.178|
00007e  f89d0000          LDRB     r0,[sp,#0]
000082  28ff              CMP      r0,#0xff
000084  d015              BEQ      |L2.178|
000086  f89d0002          LDRB     r0,[sp,#2]
00008a  28ff              CMP      r0,#0xff
00008c  d011              BEQ      |L2.178|
;;;62     		 || tx_ip[0]==0 || tx_ip[2]==0 || tx_ip[4]==0 || tx_ip[6]==0 || tx_port[0]==0 || tx_port[2]==0)
00008e  f89d0004          LDRB     r0,[sp,#4]
000092  b170              CBZ      r0,|L2.178|
000094  f89d0006          LDRB     r0,[sp,#6]
000098  b158              CBZ      r0,|L2.178|
00009a  f89d0008          LDRB     r0,[sp,#8]
00009e  b140              CBZ      r0,|L2.178|
0000a0  f89d000a          LDRB     r0,[sp,#0xa]
0000a4  b128              CBZ      r0,|L2.178|
0000a6  f89d0000          LDRB     r0,[sp,#0]
0000aa  b110              CBZ      r0,|L2.178|
0000ac  f89d0002          LDRB     r0,[sp,#2]
0000b0  b9b8              CBNZ     r0,|L2.226|
                  |L2.178|
;;;63     	{
;;;64     		IP_Addr[0]=192;//加载本机IP地址
0000b2  20c0              MOVS     r0,#0xc0
0000b4  4933              LDR      r1,|L2.388|
0000b6  7008              STRB     r0,[r1,#0]
;;;65     		IP_Addr[1]=168;
0000b8  20a8              MOVS     r0,#0xa8
0000ba  7048              STRB     r0,[r1,#1]
;;;66     		IP_Addr[2]=8;
0000bc  2008              MOVS     r0,#8
0000be  7088              STRB     r0,[r1,#2]
;;;67     		IP_Addr[3]=120;
0000c0  2078              MOVS     r0,#0x78
0000c2  70c8              STRB     r0,[r1,#3]
;;;68     
;;;69     		Gateway_IP[0] = 192;//加载网关参数
0000c4  20c0              MOVS     r0,#0xc0
0000c6  4930              LDR      r1,|L2.392|
0000c8  7008              STRB     r0,[r1,#0]
;;;70     		Gateway_IP[1] = 168;
0000ca  20a8              MOVS     r0,#0xa8
0000cc  7048              STRB     r0,[r1,#1]
;;;71     		Gateway_IP[2] = 8;
0000ce  2008              MOVS     r0,#8
0000d0  7088              STRB     r0,[r1,#2]
;;;72     		Gateway_IP[3] = 1;
0000d2  2001              MOVS     r0,#1
0000d4  70c8              STRB     r0,[r1,#3]
;;;73     		
;;;74     		S0_Port[0] = 0x04;//加载端口0的端口号1225 
0000d6  2004              MOVS     r0,#4
0000d8  492c              LDR      r1,|L2.396|
0000da  7008              STRB     r0,[r1,#0]
;;;75     		S0_Port[1] = 0xC9;
0000dc  20c9              MOVS     r0,#0xc9
0000de  7048              STRB     r0,[r1,#1]
0000e0  e01f              B        |L2.290|
                  |L2.226|
;;;76     	}
;;;77     
;;;78     	else
;;;79     	{
;;;80     		IP_Addr[0]=tx_ip[0];
0000e2  f89d0004          LDRB     r0,[sp,#4]
0000e6  4927              LDR      r1,|L2.388|
0000e8  7008              STRB     r0,[r1,#0]
;;;81     		IP_Addr[1]=tx_ip[2];
0000ea  f89d0006          LDRB     r0,[sp,#6]
0000ee  7048              STRB     r0,[r1,#1]
;;;82     		IP_Addr[2]=tx_ip[4];
0000f0  f89d0008          LDRB     r0,[sp,#8]
0000f4  7088              STRB     r0,[r1,#2]
;;;83     		IP_Addr[3]=tx_ip[6];
0000f6  f89d000a          LDRB     r0,[sp,#0xa]
0000fa  70c8              STRB     r0,[r1,#3]
;;;84     		
;;;85     		Gateway_IP[0]=tx_ip[0];
0000fc  f89d0004          LDRB     r0,[sp,#4]
000100  4921              LDR      r1,|L2.392|
000102  7008              STRB     r0,[r1,#0]
;;;86     		Gateway_IP[1]=tx_ip[2];
000104  f89d0006          LDRB     r0,[sp,#6]
000108  7048              STRB     r0,[r1,#1]
;;;87     		Gateway_IP[2]=tx_ip[4];
00010a  f89d0008          LDRB     r0,[sp,#8]
00010e  7088              STRB     r0,[r1,#2]
;;;88     		Gateway_IP[3]=1;
000110  2001              MOVS     r0,#1
000112  70c8              STRB     r0,[r1,#3]
;;;89     		
;;;90     		S0_Port[0]=tx_port[0];
000114  f89d0000          LDRB     r0,[sp,#0]
000118  491c              LDR      r1,|L2.396|
00011a  7008              STRB     r0,[r1,#0]
;;;91     		S0_Port[1]=tx_port[2];
00011c  f89d0002          LDRB     r0,[sp,#2]
000120  7048              STRB     r0,[r1,#1]
                  |L2.290|
;;;92     	}
;;;93     	
;;;94     	S1_Port[0] = 0x04;//加载端口1的端口号1228
000122  2004              MOVS     r0,#4
000124  491a              LDR      r1,|L2.400|
000126  7008              STRB     r0,[r1,#0]
;;;95     	S1_Port[1] = 0xCC;
000128  20cc              MOVS     r0,#0xcc
00012a  7048              STRB     r0,[r1,#1]
;;;96     	
;;;97     	S2_Port[0] = 0x04;//加载端口2的端口号1229
00012c  2004              MOVS     r0,#4
00012e  4919              LDR      r1,|L2.404|
000130  7008              STRB     r0,[r1,#0]
;;;98     	S2_Port[1] = 0xCD;
000132  20cd              MOVS     r0,#0xcd
000134  7048              STRB     r0,[r1,#1]
;;;99     	
;;;100    	S3_Port[0] = 0x04;//加载端口3的端口号1230
000136  2004              MOVS     r0,#4
000138  4917              LDR      r1,|L2.408|
00013a  7008              STRB     r0,[r1,#0]
;;;101    	S3_Port[1] = 0xCE;
00013c  20ce              MOVS     r0,#0xce
00013e  7048              STRB     r0,[r1,#1]
;;;102    	
;;;103    	NTP_DIPR[0]=192;
000140  20c0              MOVS     r0,#0xc0
000142  4916              LDR      r1,|L2.412|
000144  7008              STRB     r0,[r1,#0]
;;;104    	NTP_DIPR[1]=168;
000146  20a8              MOVS     r0,#0xa8
000148  7048              STRB     r0,[r1,#1]
;;;105    	NTP_DIPR[2]=8;
00014a  2008              MOVS     r0,#8
00014c  7088              STRB     r0,[r1,#2]
;;;106    	NTP_DIPR[3]=5;
00014e  2005              MOVS     r0,#5
000150  70c8              STRB     r0,[r1,#3]
;;;107    
;;;108    	NTP_DPORT[0]=0;
000152  2000              MOVS     r0,#0
000154  4912              LDR      r1,|L2.416|
000156  7008              STRB     r0,[r1,#0]
;;;109    	NTP_DPORT[1]=0x7B;	//端口号123
000158  207b              MOVS     r0,#0x7b
00015a  7048              STRB     r0,[r1,#1]
;;;110    	
;;;111    	S0_Mode=TCP_SERVER;	//加载端口0的工作模式,TCP服务器模式
00015c  2000              MOVS     r0,#0
00015e  4911              LDR      r1,|L2.420|
000160  7008              STRB     r0,[r1,#0]
;;;112    	S1_Mode=TCP_SERVER;	//加载端口1的工作模式,TCP服务器模式
000162  4911              LDR      r1,|L2.424|
000164  7008              STRB     r0,[r1,#0]
;;;113    	S2_Mode=UDP_MODE;		//加载端口2的工作模式,UDP服务器模式
000166  2002              MOVS     r0,#2
000168  4910              LDR      r1,|L2.428|
00016a  7008              STRB     r0,[r1,#0]
;;;114    	S3_Mode=UDP_MODE;		//加载端口3的工作模式,UDP服务器模式
00016c  4910              LDR      r1,|L2.432|
00016e  7008              STRB     r0,[r1,#0]
;;;115    }
000170  bd3e              POP      {r1-r5,pc}
;;;116    
                          ENDP

000172  0000              DCW      0x0000
                  |L2.372|
                          DCD      0x08039800
                  |L2.376|
                          DCD      Sub_Mask
                  |L2.380|
                          DCD      STM32_ID
                  |L2.384|
                          DCD      Phy_Addr
                  |L2.388|
                          DCD      IP_Addr
                  |L2.392|
                          DCD      Gateway_IP
                  |L2.396|
                          DCD      S0_Port
                  |L2.400|
                          DCD      S1_Port
                  |L2.404|
                          DCD      S2_Port
                  |L2.408|
                          DCD      S3_Port
                  |L2.412|
                          DCD      NTP_DIPR
                  |L2.416|
                          DCD      NTP_DPORT
                  |L2.420|
                          DCD      S0_Mode
                  |L2.424|
                          DCD      S1_Mode
                  |L2.428|
                          DCD      S2_Mode
                  |L2.432|
                          DCD      S3_Mode

                          AREA ||i.My_Delay_ms||, CODE, READONLY, ALIGN=2

                  My_Delay_ms PROC
;;;395    
;;;396    void My_Delay_ms(uint32_t ms)
000000  4a05              LDR      r2,|L3.24|
;;;397    {
;;;398        uint32_t temp=Timer4_Counter_2;
000002  6811              LDR      r1,[r2,#0]  ; Timer4_Counter_2
;;;399    	while( Timer4_Counter_2 <= temp  + ms );
000004  bf00              NOP      
                  |L3.6|
000006  180a              ADDS     r2,r1,r0
000008  4b03              LDR      r3,|L3.24|
00000a  681b              LDR      r3,[r3,#0]  ; Timer4_Counter_2
00000c  429a              CMP      r2,r3
00000e  d2fa              BCS      |L3.6|
;;;400    	Timer4_Counter_2=0;
000010  2200              MOVS     r2,#0
000012  4b01              LDR      r3,|L3.24|
000014  601a              STR      r2,[r3,#0]  ; Timer4_Counter_2
;;;401    }
000016  4770              BX       lr
;;;402    
                          ENDP

                  |L3.24|
                          DCD      Timer4_Counter_2

                          AREA ||i.My_Delay_xms||, CODE, READONLY, ALIGN=2

                  My_Delay_xms PROC
;;;388    /*延时函数*/
;;;389    void My_Delay_xms(uint32_t ms)
000000  4a05              LDR      r2,|L4.24|
;;;390    {
;;;391        uint32_t temp=Timer4_Counter;
000002  6811              LDR      r1,[r2,#0]  ; Timer4_Counter
;;;392    	while( Timer4_Counter <= temp  + ms );
000004  bf00              NOP      
                  |L4.6|
000006  180a              ADDS     r2,r1,r0
000008  4b03              LDR      r3,|L4.24|
00000a  681b              LDR      r3,[r3,#0]  ; Timer4_Counter
00000c  429a              CMP      r2,r3
00000e  d2fa              BCS      |L4.6|
;;;393    	Timer4_Counter=0;
000010  2200              MOVS     r2,#0
000012  4b01              LDR      r3,|L4.24|
000014  601a              STR      r2,[r3,#0]  ; Timer4_Counter
;;;394    }
000016  4770              BX       lr
;;;395    
                          ENDP

                  |L4.24|
                          DCD      Timer4_Counter

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;300    
;;;301    void NVIC_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;302    {
;;;303    	/*定时器中断配置*/
;;;304    	NVIC_InitTypeDef NVIC_InitStructure;						//定义NVIC初始化结构体
;;;305    
;;;306      	/* Set the Vector Table base location at 0x08000000 */
;;;307    //  	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
;;;308    	
;;;309    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);				//设置中断优先级组为1，优先组(可设0～4位)
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;310    	
;;;311    	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;				//设置中断向量号
00000a  201e              MOVS     r0,#0x1e
00000c  f88d0000          STRB     r0,[sp,#0]
;;;312    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;	//设置抢先优先级
000010  2002              MOVS     r0,#2
000012  f88d0001          STRB     r0,[sp,#1]
;;;313    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;			//设置响应优先级
000016  2001              MOVS     r0,#1
000018  f88d0002          STRB     r0,[sp,#2]
;;;314    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;				//使能NVIC
00001c  f88d0003          STRB     r0,[sp,#3]
;;;315    	NVIC_Init(&NVIC_InitStructure);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       NVIC_Init
;;;316    	
;;;317    	W5500_NVIC_Configuration(); //W5500中断配置
000026  f7fffffe          BL       W5500_NVIC_Configuration
;;;318    }
00002a  bd08              POP      {r3,pc}
;;;319    
                          ENDP


                          AREA ||i.Process_Socket_Data||, CODE, READONLY, ALIGN=2

                  Process_Socket_Data PROC
;;;261    *******************************************************************************/
;;;262    void Process_Socket_Data(SOCKET s,uint8_t * msg, uint8_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;263    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;264        uint16_t i=0;
00000a  2400              MOVS     r4,#0
;;;265    
;;;266        for(i=0; i<len; i++)
00000c  bf00              NOP      
00000e  e004              B        |L6.26|
                  |L6.16|
;;;267    	{
;;;268          Socket0_Tx_Buffer[i] = msg[i];
000010  5d28              LDRB     r0,[r5,r4]
000012  4906              LDR      r1,|L6.44|
000014  5508              STRB     r0,[r1,r4]
000016  1c60              ADDS     r0,r4,#1              ;266
000018  b284              UXTH     r4,r0                 ;266
                  |L6.26|
00001a  42b4              CMP      r4,r6                 ;266
00001c  dbf8              BLT      |L6.16|
;;;269    	}
;;;270    	
;;;271    	Write_SOCK_Data_Buffer(s, Socket0_Tx_Buffer, len);
00001e  4632              MOV      r2,r6
000020  4902              LDR      r1,|L6.44|
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       Write_SOCK_Data_Buffer
;;;272    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;273    
                          ENDP

                  |L6.44|
                          DCD      Socket0_Tx_Buffer

                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=1

                  RCC_Configuration PROC
;;;281    *******************************************************************************/
;;;282    void RCC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;283    {
;;;284      	/* Enable I2C1 and I2C1 clock */
;;;285    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2 | RCC_APB1Periph_TIM4, ENABLE);
000002  2101              MOVS     r1,#1
000004  f2440004          MOV      r0,#0x4004
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;286    
;;;287      	/* Enable GPIOA GPIOB SPI2 and USART1 clocks */
;;;288      	RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE); 
00000c  2101              MOVS     r1,#1
00000e  2009              MOVS     r0,#9
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;289    					
;;;290    }
000014  bd10              POP      {r4,pc}
;;;291    
                          ENDP


                          AREA ||i.System_Initialization||, CODE, READONLY, ALIGN=1

                  System_Initialization PROC
;;;377    *******************************************************************************/
;;;378    void System_Initialization(void)
000000  b510              PUSH     {r4,lr}
;;;379    {
;;;380    	RCC_Configuration();
000002  f7fffffe          BL       RCC_Configuration
;;;381    	Timer4_Init_Config();		//定时器初始化
000006  f7fffffe          BL       Timer4_Init_Config
;;;382    	NVIC_Configuration();		//中断配置
00000a  f7fffffe          BL       NVIC_Configuration
;;;383    	SPI_Configuration();		//W5500 SPI初始化配置(STM32 SPI2)
00000e  f7fffffe          BL       SPI_Configuration
;;;384    	W5500_GPIO_Configuration();	//W5500 GPIO初始化配置	
000012  f7fffffe          BL       W5500_GPIO_Configuration
;;;385    	
;;;386    }
000016  bd10              POP      {r4,pc}
;;;387    
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;351    *******************************************************************************/
;;;352    void TIM4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;353    {
;;;354    	if(TIM_GetITStatus(TIM4, TIM_IT_Update) == SET)
000002  2101              MOVS     r1,#1
000004  4812              LDR      r0,|L9.80|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d11f              BNE      |L9.78|
;;;355    	{
;;;356    		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
00000e  2101              MOVS     r1,#1
000010  480f              LDR      r0,|L9.80|
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;357    		Timer4_Counter++;
000016  480f              LDR      r0,|L9.84|
000018  6800              LDR      r0,[r0,#0]  ; Timer4_Counter
00001a  1c40              ADDS     r0,r0,#1
00001c  490d              LDR      r1,|L9.84|
00001e  6008              STR      r0,[r1,#0]  ; Timer4_Counter
;;;358    		Timer4_Counter_2++;
000020  480d              LDR      r0,|L9.88|
000022  6800              LDR      r0,[r0,#0]  ; Timer4_Counter_2
000024  1c40              ADDS     r0,r0,#1
000026  490c              LDR      r1,|L9.88|
000028  6008              STR      r0,[r1,#0]  ; Timer4_Counter_2
;;;359    		if(Timer4_Counter>=0xEFFFFFFF)
00002a  480a              LDR      r0,|L9.84|
00002c  6800              LDR      r0,[r0,#0]  ; Timer4_Counter
00002e  f06f5180          MVN      r1,#0x10000000
000032  4288              CMP      r0,r1
000034  d302              BCC      |L9.60|
;;;360    		{
;;;361    			Timer4_Counter=0;
000036  2000              MOVS     r0,#0
000038  4906              LDR      r1,|L9.84|
00003a  6008              STR      r0,[r1,#0]  ; Timer4_Counter
                  |L9.60|
;;;362    		}
;;;363    		if(Timer4_Counter_2>=0xEFFFFFFF)
00003c  4806              LDR      r0,|L9.88|
00003e  6800              LDR      r0,[r0,#0]  ; Timer4_Counter_2
000040  f06f5180          MVN      r1,#0x10000000
000044  4288              CMP      r0,r1
000046  d302              BCC      |L9.78|
;;;364    		{
;;;365    			Timer4_Counter_2=0;
000048  2000              MOVS     r0,#0
00004a  4903              LDR      r1,|L9.88|
00004c  6008              STR      r0,[r1,#0]  ; Timer4_Counter_2
                  |L9.78|
;;;366    		}
;;;367    	}
;;;368    }
00004e  bd10              POP      {r4,pc}
;;;369    
                          ENDP

                  |L9.80|
                          DCD      0x40000800
                  |L9.84|
                          DCD      Timer4_Counter
                  |L9.88|
                          DCD      Timer4_Counter_2

                          AREA ||i.Timer4_Init_Config||, CODE, READONLY, ALIGN=2

                  Timer4_Init_Config PROC
;;;328    
;;;329    void Timer4_Init_Config(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;330    {
;;;331    	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;332    	
;;;333    	TIM_TimeBaseStructure.TIM_Period = 9;						//设置在下一个更新事件装入活动的自动重装载寄存器周期的值(计数到10为1ms)
000002  2009              MOVS     r0,#9
000004  f8ad0004          STRH     r0,[sp,#4]
;;;334    	TIM_TimeBaseStructure.TIM_Prescaler = 7199;					//设置用来作为TIMx时钟频率除数的预分频值(10KHz的计数频率)
000008  f641401f          MOV      r0,#0x1c1f
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;335    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;		//设置时钟分割:TDTS = TIM_CKD_DIV1
000010  2000              MOVS     r0,#0
000012  f8ad0006          STRH     r0,[sp,#6]
;;;336    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	//TIM向上计数模式
000016  f8ad0002          STRH     r0,[sp,#2]
;;;337    	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);				//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
00001a  4669              MOV      r1,sp
00001c  4806              LDR      r0,|L10.56|
00001e  f7fffffe          BL       TIM_TimeBaseInit
;;;338    	 
;;;339    	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE ); 				//使能TIM4指定的中断
000022  2201              MOVS     r2,#1
000024  4611              MOV      r1,r2
000026  4804              LDR      r0,|L10.56|
000028  f7fffffe          BL       TIM_ITConfig
;;;340    	
;;;341    	TIM_Cmd(TIM4, ENABLE);  									//使能TIMx外设
00002c  2101              MOVS     r1,#1
00002e  4802              LDR      r0,|L10.56|
000030  f7fffffe          BL       TIM_Cmd
;;;342    }
000034  bd0e              POP      {r1-r3,pc}
;;;343    
                          ENDP

000036  0000              DCW      0x0000
                  |L10.56|
                          DCD      0x40000800

                          AREA ||i.W5500_Initialization||, CODE, READONLY, ALIGN=1

                  W5500_Initialization PROC
;;;15     *******************************************************************************/
;;;16     void W5500_Initialization(void)
000000  b510              PUSH     {r4,lr}
;;;17     {
;;;18     	W5500_Init();		//初始化W5500寄存器函数
000002  f7fffffe          BL       W5500_Init
;;;19     	Detect_Gateway(0);	//检查网关服务器 
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       Detect_Gateway
;;;20     	Detect_Gateway(1);	//检查网关服务器
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       Detect_Gateway
;;;21     	Detect_Gateway(2);	//检查网关服务器
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       Detect_Gateway
;;;22     	Detect_Gateway(3);	//检查网关服务器
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       Detect_Gateway
;;;23     	Socket_Init(0);		//指定Socket(0~7)初始化,初始化端口0
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       Socket_Init
;;;24     	Socket_Init(1);		//指定Socket(0~7)初始化,初始化端口1
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       Socket_Init
;;;25     	Socket_Init(2);		//指定Socket(0~7)初始化,初始化端口2
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       Socket_Init
;;;26     	Socket_Init(3);		//指定Socket(0~7)初始化,初始化端口3
000030  2003              MOVS     r0,#3
000032  f7fffffe          BL       Socket_Init
;;;27     }
000036  bd10              POP      {r4,pc}
;;;28     
                          ENDP


                          AREA ||i.W5500_Socket_Set||, CODE, READONLY, ALIGN=2

                  W5500_Socket_Set PROC
;;;125    *******************************************************************************/
;;;126    void W5500_Socket_Set(void)
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128    	if(S0_State==0)//端口0初始化配置
000002  4860              LDR      r0,|L12.388|
000004  7800              LDRB     r0,[r0,#0]  ; S0_State
000006  b9f8              CBNZ     r0,|L12.72|
;;;129    	{
;;;130    		if(S0_Mode==TCP_SERVER)//TCP服务器模式 
000008  485f              LDR      r0,|L12.392|
00000a  7800              LDRB     r0,[r0,#0]  ; S0_Mode
00000c  b960              CBNZ     r0,|L12.40|
;;;131    		{
;;;132    			if(Socket_Listen(0)==TRUE_W5500)
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       Socket_Listen
000014  28ff              CMP      r0,#0xff
000016  d103              BNE      |L12.32|
;;;133    				S0_State=S_INIT;
000018  2001              MOVS     r0,#1
00001a  495a              LDR      r1,|L12.388|
00001c  7008              STRB     r0,[r1,#0]
00001e  e020              B        |L12.98|
                  |L12.32|
;;;134    			else
;;;135    				S0_State=0;
000020  2000              MOVS     r0,#0
000022  4958              LDR      r1,|L12.388|
000024  7008              STRB     r0,[r1,#0]
000026  e01c              B        |L12.98|
                  |L12.40|
;;;136    		}
;;;137    		else if(S0_Mode==TCP_CLIENT)//TCP客户端模式 
000028  4857              LDR      r0,|L12.392|
00002a  7800              LDRB     r0,[r0,#0]  ; S0_Mode
00002c  2801              CMP      r0,#1
00002e  d10c              BNE      |L12.74|
;;;138    		{
;;;139    			if(Socket_Connect(0)==TRUE_W5500)
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       Socket_Connect
000036  28ff              CMP      r0,#0xff
000038  d103              BNE      |L12.66|
;;;140    				S0_State=S_INIT;
00003a  2001              MOVS     r0,#1
00003c  4951              LDR      r1,|L12.388|
00003e  7008              STRB     r0,[r1,#0]
000040  e00f              B        |L12.98|
                  |L12.66|
;;;141    			else
;;;142    				S0_State=0;
000042  2000              MOVS     r0,#0
000044  494f              LDR      r1,|L12.388|
000046  7008              STRB     r0,[r1,#0]
                  |L12.72|
000048  e00b              B        |L12.98|
                  |L12.74|
;;;143    		}
;;;144    		else//UDP模式 
;;;145    		{
;;;146    			if(Socket_UDP(0)==TRUE_W5500)
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       Socket_UDP
000050  28ff              CMP      r0,#0xff
000052  d103              BNE      |L12.92|
;;;147    				S0_State=S_INIT|S_CONN;
000054  2003              MOVS     r0,#3
000056  494b              LDR      r1,|L12.388|
000058  7008              STRB     r0,[r1,#0]
00005a  e002              B        |L12.98|
                  |L12.92|
;;;148    			else
;;;149    				S0_State=0;
00005c  2000              MOVS     r0,#0
00005e  4949              LDR      r1,|L12.388|
000060  7008              STRB     r0,[r1,#0]
                  |L12.98|
;;;150    		}
;;;151    	}
;;;152    	
;;;153    	if(S1_State==0)//端口1初始化配置
000062  484a              LDR      r0,|L12.396|
000064  7800              LDRB     r0,[r0,#0]  ; S1_State
000066  bb38              CBNZ     r0,|L12.184|
;;;154    	{
;;;155    		if(S1_Mode==TCP_SERVER)//TCP服务器模式 
000068  4849              LDR      r0,|L12.400|
00006a  7800              LDRB     r0,[r0,#0]  ; S1_Mode
00006c  b960              CBNZ     r0,|L12.136|
;;;156    		{
;;;157    			if(Socket_Listen(1)==TRUE_W5500)
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       Socket_Listen
000074  28ff              CMP      r0,#0xff
000076  d103              BNE      |L12.128|
;;;158    				S1_State=S_INIT;
000078  2001              MOVS     r0,#1
00007a  4944              LDR      r1,|L12.396|
00007c  7008              STRB     r0,[r1,#0]
00007e  e01f              B        |L12.192|
                  |L12.128|
;;;159    			else
;;;160    				S1_State=0;
000080  2000              MOVS     r0,#0
000082  4942              LDR      r1,|L12.396|
000084  7008              STRB     r0,[r1,#0]
000086  e01b              B        |L12.192|
                  |L12.136|
;;;161    		}
;;;162    		else if(S1_Mode==TCP_CLIENT)//TCP客户端模式 
000088  4841              LDR      r0,|L12.400|
00008a  7800              LDRB     r0,[r0,#0]  ; S1_Mode
00008c  2801              CMP      r0,#1
00008e  d10b              BNE      |L12.168|
;;;163    		{
;;;164    			if(Socket_Connect(1)==TRUE_W5500)
000090  f7fffffe          BL       Socket_Connect
000094  28ff              CMP      r0,#0xff
000096  d103              BNE      |L12.160|
;;;165    				S1_State=S_INIT;
000098  2001              MOVS     r0,#1
00009a  493c              LDR      r1,|L12.396|
00009c  7008              STRB     r0,[r1,#0]
00009e  e00f              B        |L12.192|
                  |L12.160|
;;;166    			else
;;;167    				S1_State=0;
0000a0  2000              MOVS     r0,#0
0000a2  493a              LDR      r1,|L12.396|
0000a4  7008              STRB     r0,[r1,#0]
0000a6  e00b              B        |L12.192|
                  |L12.168|
;;;168    		}
;;;169    		else//UDP模式 
;;;170    		{
;;;171    			if(Socket_UDP(1)==TRUE_W5500)
0000a8  2001              MOVS     r0,#1
0000aa  f7fffffe          BL       Socket_UDP
0000ae  28ff              CMP      r0,#0xff
0000b0  d103              BNE      |L12.186|
;;;172    				S1_State=S_INIT|S_CONN;
0000b2  2003              MOVS     r0,#3
0000b4  4935              LDR      r1,|L12.396|
0000b6  7008              STRB     r0,[r1,#0]
                  |L12.184|
0000b8  e002              B        |L12.192|
                  |L12.186|
;;;173    			else
;;;174    				S1_State=0;
0000ba  2000              MOVS     r0,#0
0000bc  4933              LDR      r1,|L12.396|
0000be  7008              STRB     r0,[r1,#0]
                  |L12.192|
;;;175    		}
;;;176    	}
;;;177    	
;;;178    	if(S2_State==0)//端口2初始化配置
0000c0  4834              LDR      r0,|L12.404|
0000c2  7800              LDRB     r0,[r0,#0]  ; S2_State
0000c4  b9f8              CBNZ     r0,|L12.262|
;;;179    	{
;;;180    		if(S2_Mode==TCP_SERVER)//TCP服务器模式 
0000c6  4834              LDR      r0,|L12.408|
0000c8  7800              LDRB     r0,[r0,#0]  ; S2_Mode
0000ca  b960              CBNZ     r0,|L12.230|
;;;181    		{
;;;182    			if(Socket_Listen(2)==TRUE_W5500)
0000cc  2002              MOVS     r0,#2
0000ce  f7fffffe          BL       Socket_Listen
0000d2  28ff              CMP      r0,#0xff
0000d4  d103              BNE      |L12.222|
;;;183    				S2_State=S_INIT;
0000d6  2001              MOVS     r0,#1
0000d8  492e              LDR      r1,|L12.404|
0000da  7008              STRB     r0,[r1,#0]
0000dc  e020              B        |L12.288|
                  |L12.222|
;;;184    			else
;;;185    				S2_State=0;
0000de  2000              MOVS     r0,#0
0000e0  492c              LDR      r1,|L12.404|
0000e2  7008              STRB     r0,[r1,#0]
0000e4  e01c              B        |L12.288|
                  |L12.230|
;;;186    		}
;;;187    		else if(S2_Mode==TCP_CLIENT)//TCP客户端模式 
0000e6  482c              LDR      r0,|L12.408|
0000e8  7800              LDRB     r0,[r0,#0]  ; S2_Mode
0000ea  2801              CMP      r0,#1
0000ec  d10c              BNE      |L12.264|
;;;188    		{
;;;189    			if(Socket_Connect(2)==TRUE_W5500)
0000ee  2002              MOVS     r0,#2
0000f0  f7fffffe          BL       Socket_Connect
0000f4  28ff              CMP      r0,#0xff
0000f6  d103              BNE      |L12.256|
;;;190    				S2_State=S_INIT;
0000f8  2001              MOVS     r0,#1
0000fa  4926              LDR      r1,|L12.404|
0000fc  7008              STRB     r0,[r1,#0]
0000fe  e00f              B        |L12.288|
                  |L12.256|
;;;191    			else
;;;192    				S2_State=0;
000100  2000              MOVS     r0,#0
000102  4924              LDR      r1,|L12.404|
000104  7008              STRB     r0,[r1,#0]
                  |L12.262|
000106  e00b              B        |L12.288|
                  |L12.264|
;;;193    		}
;;;194    		else//UDP模式 
;;;195    		{
;;;196    			if(Socket_UDP(2)==TRUE_W5500)
000108  2002              MOVS     r0,#2
00010a  f7fffffe          BL       Socket_UDP
00010e  28ff              CMP      r0,#0xff
000110  d103              BNE      |L12.282|
;;;197    				S2_State=S_INIT|S_CONN;
000112  2003              MOVS     r0,#3
000114  491f              LDR      r1,|L12.404|
000116  7008              STRB     r0,[r1,#0]
000118  e002              B        |L12.288|
                  |L12.282|
;;;198    			else
;;;199    				S2_State=0;
00011a  2000              MOVS     r0,#0
00011c  491d              LDR      r1,|L12.404|
00011e  7008              STRB     r0,[r1,#0]
                  |L12.288|
;;;200    		}
;;;201    	}
;;;202    	
;;;203    	if(S3_State==0)//端口2初始化配置
000120  481e              LDR      r0,|L12.412|
000122  7800              LDRB     r0,[r0,#0]  ; S3_State
000124  b9f8              CBNZ     r0,|L12.358|
;;;204    	{
;;;205    		if(S3_Mode==TCP_SERVER)//TCP服务器模式 
000126  481e              LDR      r0,|L12.416|
000128  7800              LDRB     r0,[r0,#0]  ; S3_Mode
00012a  b960              CBNZ     r0,|L12.326|
;;;206    		{
;;;207    			if(Socket_Listen(3)==TRUE_W5500)
00012c  2003              MOVS     r0,#3
00012e  f7fffffe          BL       Socket_Listen
000132  28ff              CMP      r0,#0xff
000134  d103              BNE      |L12.318|
;;;208    				S3_State=S_INIT;
000136  2001              MOVS     r0,#1
000138  4918              LDR      r1,|L12.412|
00013a  7008              STRB     r0,[r1,#0]
00013c  e020              B        |L12.384|
                  |L12.318|
;;;209    			else
;;;210    				S3_State=0;
00013e  2000              MOVS     r0,#0
000140  4916              LDR      r1,|L12.412|
000142  7008              STRB     r0,[r1,#0]
000144  e01c              B        |L12.384|
                  |L12.326|
;;;211    		}
;;;212    		else if(S3_Mode==TCP_CLIENT)//TCP客户端模式 
000146  4816              LDR      r0,|L12.416|
000148  7800              LDRB     r0,[r0,#0]  ; S3_Mode
00014a  2801              CMP      r0,#1
00014c  d10c              BNE      |L12.360|
;;;213    		{
;;;214    			if(Socket_Connect(3)==TRUE_W5500)
00014e  2003              MOVS     r0,#3
000150  f7fffffe          BL       Socket_Connect
000154  28ff              CMP      r0,#0xff
000156  d103              BNE      |L12.352|
;;;215    				S3_State=S_INIT;
000158  2001              MOVS     r0,#1
00015a  4910              LDR      r1,|L12.412|
00015c  7008              STRB     r0,[r1,#0]
00015e  e00f              B        |L12.384|
                  |L12.352|
;;;216    			else
;;;217    				S3_State=0;
000160  2000              MOVS     r0,#0
000162  490e              LDR      r1,|L12.412|
000164  7008              STRB     r0,[r1,#0]
                  |L12.358|
000166  e00b              B        |L12.384|
                  |L12.360|
;;;218    		}
;;;219    		else//UDP模式 
;;;220    		{
;;;221    			if(Socket_UDP(3)==TRUE_W5500)
000168  2003              MOVS     r0,#3
00016a  f7fffffe          BL       Socket_UDP
00016e  28ff              CMP      r0,#0xff
000170  d103              BNE      |L12.378|
;;;222    				S3_State=S_INIT|S_CONN;
000172  2003              MOVS     r0,#3
000174  4909              LDR      r1,|L12.412|
000176  7008              STRB     r0,[r1,#0]
000178  e002              B        |L12.384|
                  |L12.378|
;;;223    			else
;;;224    				S3_State=0;
00017a  2000              MOVS     r0,#0
00017c  4907              LDR      r1,|L12.412|
00017e  7008              STRB     r0,[r1,#0]
                  |L12.384|
;;;225    		}
;;;226    	}
;;;227    	
;;;228    }
000180  bd10              POP      {r4,pc}
;;;229    
                          ENDP

000182  0000              DCW      0x0000
                  |L12.388|
                          DCD      S0_State
                  |L12.392|
                          DCD      S0_Mode
                  |L12.396|
                          DCD      S1_State
                  |L12.400|
                          DCD      S1_Mode
                  |L12.404|
                          DCD      S2_State
                  |L12.408|
                          DCD      S2_Mode
                  |L12.412|
                          DCD      S3_State
                  |L12.416|
                          DCD      S3_Mode

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  STM32_ID
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  Timer4_Counter
                          DCD      0x00000000
                  Timer4_Counter_2
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Time3_INIT.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_Time3_INIT_c_6f90ede0____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_Time3_INIT_c_6f90ede0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_Time3_INIT_c_6f90ede0____REVSH|
#line 128
|__asm___12_Time3_INIT_c_6f90ede0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
